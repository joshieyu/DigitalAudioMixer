
STM32746G_DISCOVERY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b82c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006ce4  0800b9fc  0800b9fc  0000c9fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080126e0  080126e0  000136e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080126e8  080126e8  000136e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080126ec  080126ec  000136ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000005d4  20000000  080126f0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00027b80  200005e0  08012cc4  000145e0  2**5
                  ALLOC
  8 ._user_heap_stack 00000600  20028160  08012cc4  00015160  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000145d4  2**0
                  CONTENTS, READONLY
 10 .debug_info   000317f8  00000000  00000000  00014604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000075cc  00000000  00000000  00045dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 00010e63  00000000  00000000  0004d3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001bf8  00000000  00000000  0005e230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001bb6  00000000  00000000  0005fe28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003005c  00000000  00000000  000619de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00036794  00000000  00000000  00091a3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0010d7ae  00000000  00000000  000c81ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  001d597c  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005884  00000000  00000000  001d59c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 000000b6  00000000  00000000  001db244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200005e0 	.word	0x200005e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b9e4 	.word	0x0800b9e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200005e4 	.word	0x200005e4
 800020c:	0800b9e4 	.word	0x0800b9e4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <ft5336_Reset>:
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80005b0:	4770      	bx	lr

080005b2 <ft5336_TS_ITStatus>:
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
}
 80005b2:	2000      	movs	r0, #0
 80005b4:	4770      	bx	lr
	...

080005b8 <ft5336_TS_DetectTouch>:
{
 80005b8:	b513      	push	{r0, r1, r4, lr}
  volatile uint8_t nbTouch = 0;
 80005ba:	2400      	movs	r4, #0
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80005bc:	2102      	movs	r1, #2
 80005be:	b2c0      	uxtb	r0, r0
  volatile uint8_t nbTouch = 0;
 80005c0:	f88d 4007 	strb.w	r4, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80005c4:	f000 ff1c 	bl	8001400 <TS_IO_Read>
 80005c8:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT5336_TD_STAT_MASK;
 80005cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80005d0:	f003 030f 	and.w	r3, r3, #15
 80005d4:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80005d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80005dc:	2b05      	cmp	r3, #5
 80005de:	d901      	bls.n	80005e4 <ft5336_TS_DetectTouch+0x2c>
    nbTouch = 0;
 80005e0:	f88d 4007 	strb.w	r4, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 80005e4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80005e8:	4b03      	ldr	r3, [pc, #12]	@ (80005f8 <ft5336_TS_DetectTouch+0x40>)
  return(nbTouch);
 80005ea:	f89d 0007 	ldrb.w	r0, [sp, #7]
  ft5336_handle.currActiveTouchNb = nbTouch;
 80005ee:	705a      	strb	r2, [r3, #1]
  ft5336_handle.currActiveTouchIdx = 0;
 80005f0:	2200      	movs	r2, #0
 80005f2:	709a      	strb	r2, [r3, #2]
}
 80005f4:	b002      	add	sp, #8
 80005f6:	bd10      	pop	{r4, pc}
 80005f8:	200005fc 	.word	0x200005fc

080005fc <ft5336_TS_GetXY>:
{
 80005fc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000600:	4c2b      	ldr	r4, [pc, #172]	@ (80006b0 <ft5336_TS_GetXY+0xb4>)
{
 8000602:	4615      	mov	r5, r2
  volatile uint8_t ucReadData = 0;
 8000604:	f04f 0800 	mov.w	r8, #0
{
 8000608:	460f      	mov	r7, r1
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800060a:	78a3      	ldrb	r3, [r4, #2]
 800060c:	7862      	ldrb	r2, [r4, #1]
  volatile uint8_t ucReadData = 0;
 800060e:	f88d 8007 	strb.w	r8, [sp, #7]
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000612:	429a      	cmp	r2, r3
 8000614:	d945      	bls.n	80006a2 <ft5336_TS_GetXY+0xa6>
    switch(ft5336_handle.currActiveTouchIdx)
 8000616:	2b09      	cmp	r3, #9
 8000618:	d846      	bhi.n	80006a8 <ft5336_TS_GetXY+0xac>
 800061a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800061e:	005b      	lsls	r3, r3, #1
 8000620:	b2db      	uxtb	r3, r3
 8000622:	1d19      	adds	r1, r3, #4
 8000624:	f103 0a03 	add.w	sl, r3, #3
 8000628:	f103 0906 	add.w	r9, r3, #6
 800062c:	3305      	adds	r3, #5
 800062e:	b2c9      	uxtb	r1, r1
 8000630:	fa5f fa8a 	uxtb.w	sl, sl
 8000634:	fa5f f989 	uxtb.w	r9, r9
 8000638:	fa5f f883 	uxtb.w	r8, r3
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800063c:	b2c6      	uxtb	r6, r0
 800063e:	4630      	mov	r0, r6
 8000640:	f000 fede 	bl	8001400 <TS_IO_Read>
 8000644:	f88d 0007 	strb.w	r0, [sp, #7]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000648:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800064c:	4651      	mov	r1, sl
 800064e:	4630      	mov	r0, r6
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000650:	80a3      	strh	r3, [r4, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000652:	f000 fed5 	bl	8001400 <TS_IO_Read>
 8000656:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800065a:	4649      	mov	r1, r9
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800065c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000660:	4630      	mov	r0, r6
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000662:	88a2      	ldrh	r2, [r4, #4]
 8000664:	021b      	lsls	r3, r3, #8
 8000666:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800066a:	4313      	orrs	r3, r2
    *X = coord;
 800066c:	803b      	strh	r3, [r7, #0]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800066e:	80a3      	strh	r3, [r4, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000670:	f000 fec6 	bl	8001400 <TS_IO_Read>
 8000674:	f88d 0007 	strb.w	r0, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000678:	4641      	mov	r1, r8
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800067a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 800067e:	4630      	mov	r0, r6
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000680:	80a3      	strh	r3, [r4, #4]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000682:	f000 febd 	bl	8001400 <TS_IO_Read>
 8000686:	f88d 0007 	strb.w	r0, [sp, #7]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800068a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800068e:	88a2      	ldrh	r2, [r4, #4]
 8000690:	021b      	lsls	r3, r3, #8
 8000692:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8000696:	4313      	orrs	r3, r2
 8000698:	80a3      	strh	r3, [r4, #4]
    *Y = coord;
 800069a:	802b      	strh	r3, [r5, #0]
    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 800069c:	78a3      	ldrb	r3, [r4, #2]
 800069e:	3301      	adds	r3, #1
 80006a0:	70a3      	strb	r3, [r4, #2]
}
 80006a2:	b002      	add	sp, #8
 80006a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80006a8:	46c1      	mov	r9, r8
 80006aa:	46c2      	mov	sl, r8
 80006ac:	4641      	mov	r1, r8
 80006ae:	e7c5      	b.n	800063c <ft5336_TS_GetXY+0x40>
 80006b0:	200005fc 	.word	0x200005fc

080006b4 <ft5336_TS_EnableIT>:
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80006b4:	2201      	movs	r2, #1
 80006b6:	21a4      	movs	r1, #164	@ 0xa4
 80006b8:	b2c0      	uxtb	r0, r0
 80006ba:	f000 be8f 	b.w	80013dc <TS_IO_Write>

080006be <ft5336_TS_DisableIT>:
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80006be:	2200      	movs	r2, #0
 80006c0:	21a4      	movs	r1, #164	@ 0xa4
 80006c2:	b2c0      	uxtb	r0, r0
 80006c4:	f000 be8a 	b.w	80013dc <TS_IO_Write>

080006c8 <ft5336_TS_Start>:
  ft5336_TS_DisableIT(DeviceAddr);
 80006c8:	f7ff bff9 	b.w	80006be <ft5336_TS_DisableIT>

080006cc <ft5336_Init>:
{
 80006cc:	b510      	push	{r4, lr}
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
  return(ft5336_handle.i2cInitialized);
 80006ce:	4c05      	ldr	r4, [pc, #20]	@ (80006e4 <ft5336_Init+0x18>)
  TS_IO_Delay(200);
 80006d0:	20c8      	movs	r0, #200	@ 0xc8
 80006d2:	f000 feab 	bl	800142c <TS_IO_Delay>
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80006d6:	7823      	ldrb	r3, [r4, #0]
 80006d8:	b91b      	cbnz	r3, 80006e2 <ft5336_Init+0x16>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 80006da:	f000 fe7d 	bl	80013d8 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80006de:	2301      	movs	r3, #1
 80006e0:	7023      	strb	r3, [r4, #0]
}
 80006e2:	bd10      	pop	{r4, pc}
 80006e4:	200005fc 	.word	0x200005fc

080006e8 <ft5336_TS_ClearIT>:
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
 80006e8:	4770      	bx	lr
	...

080006ec <ft5336_ReadID>:
{
 80006ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  volatile uint8_t ucReadId = 0;
 80006ee:	2300      	movs	r3, #0
  return(ft5336_handle.i2cInitialized);
 80006f0:	4c0f      	ldr	r4, [pc, #60]	@ (8000730 <ft5336_ReadID+0x44>)
{
 80006f2:	4605      	mov	r5, r0
  volatile uint8_t ucReadId = 0;
 80006f4:	f88d 3007 	strb.w	r3, [sp, #7]
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80006f8:	7823      	ldrb	r3, [r4, #0]
 80006fa:	b91b      	cbnz	r3, 8000704 <ft5336_ReadID+0x18>
    TS_IO_Init();
 80006fc:	f000 fe6c 	bl	80013d8 <TS_IO_Init>
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000700:	2301      	movs	r3, #1
 8000702:	7023      	strb	r3, [r4, #0]
{
 8000704:	2403      	movs	r4, #3
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000706:	b2ed      	uxtb	r5, r5
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000708:	3c01      	subs	r4, #1
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800070a:	21a8      	movs	r1, #168	@ 0xa8
 800070c:	4628      	mov	r0, r5
 800070e:	f000 fe77 	bl	8001400 <TS_IO_Read>
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000712:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000716:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == FT5336_ID_VALUE)
 800071a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800071e:	b2db      	uxtb	r3, r3
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000720:	d001      	beq.n	8000726 <ft5336_ReadID+0x3a>
 8000722:	2b51      	cmp	r3, #81	@ 0x51
 8000724:	d1f0      	bne.n	8000708 <ft5336_ReadID+0x1c>
  return (ucReadId);
 8000726:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800072a:	b003      	add	sp, #12
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	bf00      	nop
 8000730:	200005fc 	.word	0x200005fc

08000734 <ft5336_TS_GetGestureID>:
  volatile uint8_t ucReadData = 0;
 8000734:	2300      	movs	r3, #0
{
 8000736:	b513      	push	{r0, r1, r4, lr}
 8000738:	460c      	mov	r4, r1
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 800073a:	b2c0      	uxtb	r0, r0
 800073c:	2101      	movs	r1, #1
  volatile uint8_t ucReadData = 0;
 800073e:	f88d 3007 	strb.w	r3, [sp, #7]
  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8000742:	f000 fe5d 	bl	8001400 <TS_IO_Read>
 8000746:	f88d 0007 	strb.w	r0, [sp, #7]
  * pGestureId = ucReadData;
 800074a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800074e:	6023      	str	r3, [r4, #0]
}
 8000750:	b002      	add	sp, #8
 8000752:	bd10      	pop	{r4, pc}

08000754 <ft5336_TS_GetTouchInfo>:
{
 8000754:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000758:	461d      	mov	r5, r3
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 800075a:	4b1d      	ldr	r3, [pc, #116]	@ (80007d0 <ft5336_TS_GetTouchInfo+0x7c>)
  volatile uint8_t ucReadData = 0;
 800075c:	2400      	movs	r4, #0
{
 800075e:	4616      	mov	r6, r2
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8000760:	785b      	ldrb	r3, [r3, #1]
  volatile uint8_t ucReadData = 0;
 8000762:	f88d 4007 	strb.w	r4, [sp, #7]
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8000766:	428b      	cmp	r3, r1
 8000768:	d92c      	bls.n	80007c4 <ft5336_TS_GetTouchInfo+0x70>
    switch(touchIdx)
 800076a:	2909      	cmp	r1, #9
 800076c:	d82d      	bhi.n	80007ca <ft5336_TS_GetTouchInfo+0x76>
 800076e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000772:	004c      	lsls	r4, r1, #1
 8000774:	b2e4      	uxtb	r4, r4
 8000776:	1ce1      	adds	r1, r4, #3
 8000778:	1de7      	adds	r7, r4, #7
 800077a:	3408      	adds	r4, #8
 800077c:	b2c9      	uxtb	r1, r1
 800077e:	b2ff      	uxtb	r7, r7
 8000780:	b2e4      	uxtb	r4, r4
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000782:	fa5f f880 	uxtb.w	r8, r0
 8000786:	4640      	mov	r0, r8
 8000788:	f000 fe3a 	bl	8001400 <TS_IO_Read>
 800078c:	f88d 0007 	strb.w	r0, [sp, #7]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8000790:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8000794:	4639      	mov	r1, r7
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8000796:	9a08      	ldr	r2, [sp, #32]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8000798:	4640      	mov	r0, r8
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 800079a:	099b      	lsrs	r3, r3, #6
 800079c:	6013      	str	r3, [r2, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 800079e:	f000 fe2f 	bl	8001400 <TS_IO_Read>
 80007a2:	f88d 0007 	strb.w	r0, [sp, #7]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 80007a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 80007aa:	4621      	mov	r1, r4
 80007ac:	4640      	mov	r0, r8
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 80007ae:	6033      	str	r3, [r6, #0]
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 80007b0:	f000 fe26 	bl	8001400 <TS_IO_Read>
 80007b4:	f88d 0007 	strb.w	r0, [sp, #7]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 80007b8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80007bc:	0912      	lsrs	r2, r2, #4
 80007be:	f002 0204 	and.w	r2, r2, #4
 80007c2:	602a      	str	r2, [r5, #0]
}
 80007c4:	b002      	add	sp, #8
 80007c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80007ca:	4627      	mov	r7, r4
 80007cc:	4621      	mov	r1, r4
 80007ce:	e7d8      	b.n	8000782 <ft5336_TS_GetTouchInfo+0x2e>
 80007d0:	200005fc 	.word	0x200005fc

080007d4 <wm8994_SetOutputMode>:
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
  uint32_t counter = 0; 
  
  switch (Output) 
 80007d4:	2901      	cmp	r1, #1
{
 80007d6:	b510      	push	{r4, lr}
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 80007d8:	b2c4      	uxtb	r4, r0
  switch (Output) 
 80007da:	d00f      	beq.n	80007fc <wm8994_SetOutputMode+0x28>
 80007dc:	2903      	cmp	r1, #3
 80007de:	d12d      	bne.n	800083c <wm8994_SetOutputMode+0x68>
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
  uint32_t result = 0;
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80007e0:	f640 720f 	movw	r2, #3855	@ 0xf0f
 80007e4:	2105      	movs	r1, #5
 80007e6:	4620      	mov	r0, r4
 80007e8:	f000 fd96 	bl	8001318 <AUDIO_IO_Write>
 80007ec:	2201      	movs	r2, #1
 80007ee:	f240 6101 	movw	r1, #1537	@ 0x601
 80007f2:	4620      	mov	r0, r4
 80007f4:	f000 fd90 	bl	8001318 <AUDIO_IO_Write>
 80007f8:	2201      	movs	r2, #1
 80007fa:	e00c      	b.n	8000816 <wm8994_SetOutputMode+0x42>
 80007fc:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8000800:	2105      	movs	r1, #5
 8000802:	4620      	mov	r0, r4
 8000804:	f000 fd88 	bl	8001318 <AUDIO_IO_Write>
 8000808:	2200      	movs	r2, #0
 800080a:	f240 6101 	movw	r1, #1537	@ 0x601
 800080e:	4620      	mov	r0, r4
 8000810:	f000 fd82 	bl	8001318 <AUDIO_IO_Write>
 8000814:	2200      	movs	r2, #0
 8000816:	f240 6102 	movw	r1, #1538	@ 0x602
 800081a:	4620      	mov	r0, r4
 800081c:	f000 fd7c 	bl	8001318 <AUDIO_IO_Write>
 8000820:	2202      	movs	r2, #2
 8000822:	f240 6104 	movw	r1, #1540	@ 0x604
 8000826:	4620      	mov	r0, r4
 8000828:	f000 fd76 	bl	8001318 <AUDIO_IO_Write>
 800082c:	2202      	movs	r2, #2
 800082e:	4620      	mov	r0, r4
 8000830:	f240 6105 	movw	r1, #1541	@ 0x605
 8000834:	f000 fd70 	bl	8001318 <AUDIO_IO_Write>
}
 8000838:	2000      	movs	r0, #0
 800083a:	bd10      	pop	{r4, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 800083c:	f240 3203 	movw	r2, #771	@ 0x303
 8000840:	2105      	movs	r1, #5
 8000842:	4620      	mov	r0, r4
 8000844:	f000 fd68 	bl	8001318 <AUDIO_IO_Write>
 8000848:	2201      	movs	r2, #1
 800084a:	f240 6101 	movw	r1, #1537	@ 0x601
 800084e:	4620      	mov	r0, r4
 8000850:	f000 fd62 	bl	8001318 <AUDIO_IO_Write>
 8000854:	2201      	movs	r2, #1
 8000856:	f240 6102 	movw	r1, #1538	@ 0x602
 800085a:	4620      	mov	r0, r4
 800085c:	f000 fd5c 	bl	8001318 <AUDIO_IO_Write>
 8000860:	2200      	movs	r2, #0
 8000862:	f240 6104 	movw	r1, #1540	@ 0x604
 8000866:	4620      	mov	r0, r4
 8000868:	f000 fd56 	bl	8001318 <AUDIO_IO_Write>
 800086c:	2200      	movs	r2, #0
 800086e:	e7de      	b.n	800082e <wm8994_SetOutputMode+0x5a>

08000870 <wm8994_SetFrequency>:
{
 8000870:	b508      	push	{r3, lr}
  switch (AudioFreq)
 8000872:	f245 6322 	movw	r3, #22050	@ 0x5622
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8000876:	b2c0      	uxtb	r0, r0
  switch (AudioFreq)
 8000878:	4299      	cmp	r1, r3
 800087a:	d025      	beq.n	80008c8 <wm8994_SetFrequency+0x58>
 800087c:	d80b      	bhi.n	8000896 <wm8994_SetFrequency+0x26>
 800087e:	f642 3311 	movw	r3, #11025	@ 0x2b11
 8000882:	4299      	cmp	r1, r3
 8000884:	d01e      	beq.n	80008c4 <wm8994_SetFrequency+0x54>
 8000886:	f5b1 5f7a 	cmp.w	r1, #16000	@ 0x3e80
 800088a:	d017      	beq.n	80008bc <wm8994_SetFrequency+0x4c>
 800088c:	f5b1 5ffa 	cmp.w	r1, #8000	@ 0x1f40
 8000890:	d00d      	beq.n	80008ae <wm8994_SetFrequency+0x3e>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000892:	2283      	movs	r2, #131	@ 0x83
 8000894:	e00c      	b.n	80008b0 <wm8994_SetFrequency+0x40>
  switch (AudioFreq)
 8000896:	f64a 4344 	movw	r3, #44100	@ 0xac44
 800089a:	4299      	cmp	r1, r3
 800089c:	d016      	beq.n	80008cc <wm8994_SetFrequency+0x5c>
 800089e:	4b0c      	ldr	r3, [pc, #48]	@ (80008d0 <wm8994_SetFrequency+0x60>)
 80008a0:	4299      	cmp	r1, r3
 80008a2:	d00d      	beq.n	80008c0 <wm8994_SetFrequency+0x50>
 80008a4:	f5b1 4ffa 	cmp.w	r1, #32000	@ 0x7d00
 80008a8:	d1f3      	bne.n	8000892 <wm8994_SetFrequency+0x22>
 AUDIO_IO_Write(Addr, Reg, Value);
 80008aa:	2263      	movs	r2, #99	@ 0x63
 80008ac:	e000      	b.n	80008b0 <wm8994_SetFrequency+0x40>
 80008ae:	2203      	movs	r2, #3
 80008b0:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80008b4:	f000 fd30 	bl	8001318 <AUDIO_IO_Write>
}
 80008b8:	2000      	movs	r0, #0
 80008ba:	bd08      	pop	{r3, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 80008bc:	2233      	movs	r2, #51	@ 0x33
 80008be:	e7f7      	b.n	80008b0 <wm8994_SetFrequency+0x40>
 80008c0:	22a3      	movs	r2, #163	@ 0xa3
 80008c2:	e7f5      	b.n	80008b0 <wm8994_SetFrequency+0x40>
 80008c4:	2213      	movs	r2, #19
 80008c6:	e7f3      	b.n	80008b0 <wm8994_SetFrequency+0x40>
 80008c8:	2243      	movs	r2, #67	@ 0x43
 80008ca:	e7f1      	b.n	80008b0 <wm8994_SetFrequency+0x40>
 80008cc:	2273      	movs	r2, #115	@ 0x73
 80008ce:	e7ef      	b.n	80008b0 <wm8994_SetFrequency+0x40>
 80008d0:	00017700 	.word	0x00017700

080008d4 <wm8994_Reset>:
 80008d4:	2200      	movs	r2, #0
 80008d6:	b2c0      	uxtb	r0, r0
{
 80008d8:	b508      	push	{r3, lr}
 AUDIO_IO_Write(Addr, Reg, Value);
 80008da:	4611      	mov	r1, r2
 80008dc:	f000 fd1c 	bl	8001318 <AUDIO_IO_Write>
  outputEnabled = 0;
 80008e0:	4b02      	ldr	r3, [pc, #8]	@ (80008ec <wm8994_Reset+0x18>)
 80008e2:	2000      	movs	r0, #0
  inputEnabled=0;
 80008e4:	e9c3 0000 	strd	r0, r0, [r3]
}
 80008e8:	bd08      	pop	{r3, pc}
 80008ea:	bf00      	nop
 80008ec:	20000604 	.word	0x20000604

080008f0 <wm8994_DeInit>:
  AUDIO_IO_DeInit();
 80008f0:	f000 bd10 	b.w	8001314 <AUDIO_IO_DeInit>

080008f4 <wm8994_ReadID>:
{
 80008f4:	b510      	push	{r4, lr}
 80008f6:	4604      	mov	r4, r0
  AUDIO_IO_Init();
 80008f8:	f000 fd06 	bl	8001308 <AUDIO_IO_Init>
  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 80008fc:	2100      	movs	r1, #0
 80008fe:	b2e0      	uxtb	r0, r4
 8000900:	f000 fd1e 	bl	8001340 <AUDIO_IO_Read>
}
 8000904:	bd10      	pop	{r4, pc}
	...

08000908 <wm8994_SetMute>:
  if (outputEnabled != 0)
 8000908:	4b0f      	ldr	r3, [pc, #60]	@ (8000948 <wm8994_SetMute+0x40>)
 800090a:	681b      	ldr	r3, [r3, #0]
{
 800090c:	b510      	push	{r4, lr}
  if (outputEnabled != 0)
 800090e:	b183      	cbz	r3, 8000932 <wm8994_SetMute+0x2a>
    if(Cmd == AUDIO_MUTE_ON)
 8000910:	2901      	cmp	r1, #1
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8000912:	b2c4      	uxtb	r4, r0
    if(Cmd == AUDIO_MUTE_ON)
 8000914:	d10f      	bne.n	8000936 <wm8994_SetMute+0x2e>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000916:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800091a:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800091e:	4620      	mov	r0, r4
 8000920:	f000 fcfa 	bl	8001318 <AUDIO_IO_Write>
 8000924:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000928:	f240 4122 	movw	r1, #1058	@ 0x422
 800092c:	4620      	mov	r0, r4
 800092e:	f000 fcf3 	bl	8001318 <AUDIO_IO_Write>
}
 8000932:	2000      	movs	r0, #0
 8000934:	bd10      	pop	{r4, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 8000936:	2210      	movs	r2, #16
 8000938:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800093c:	4620      	mov	r0, r4
 800093e:	f000 fceb 	bl	8001318 <AUDIO_IO_Write>
 8000942:	2210      	movs	r2, #16
 8000944:	e7f0      	b.n	8000928 <wm8994_SetMute+0x20>
 8000946:	bf00      	nop
 8000948:	20000604 	.word	0x20000604

0800094c <wm8994_Play>:
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800094c:	2100      	movs	r1, #0
 800094e:	f7ff bfdb 	b.w	8000908 <wm8994_SetMute>

08000952 <wm8994_Resume>:
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000952:	2100      	movs	r1, #0
 8000954:	f7ff bfd8 	b.w	8000908 <wm8994_SetMute>

08000958 <wm8994_Pause>:
{  
 8000958:	b538      	push	{r3, r4, r5, lr}
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800095a:	2101      	movs	r1, #1
{  
 800095c:	4605      	mov	r5, r0
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800095e:	f7ff ffd3 	bl	8000908 <wm8994_SetMute>
 8000962:	4604      	mov	r4, r0
 AUDIO_IO_Write(Addr, Reg, Value);
 8000964:	2201      	movs	r2, #1
 8000966:	b2e8      	uxtb	r0, r5
 8000968:	2102      	movs	r1, #2
 800096a:	f000 fcd5 	bl	8001318 <AUDIO_IO_Write>
}
 800096e:	4620      	mov	r0, r4
 8000970:	bd38      	pop	{r3, r4, r5, pc}
	...

08000974 <wm8994_SetVolume>:
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8000974:	2964      	cmp	r1, #100	@ 0x64
{
 8000976:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800097a:	f04f 0764 	mov.w	r7, #100	@ 0x64
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 800097e:	bf98      	it	ls
 8000980:	ebc1 1381 	rsbls	r3, r1, r1, lsl #6
  if (outputEnabled != 0)
 8000984:	f8df 90ec 	ldr.w	r9, [pc, #236]	@ 8000a74 <wm8994_SetVolume+0x100>
{
 8000988:	4605      	mov	r5, r0
 800098a:	460c      	mov	r4, r1
  if (outputEnabled != 0)
 800098c:	f8d9 6000 	ldr.w	r6, [r9]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8000990:	bf9c      	itt	ls
 8000992:	fbb3 f3f7 	udivls	r3, r3, r7
 8000996:	b2df      	uxtbls	r7, r3
  if (outputEnabled != 0)
 8000998:	b326      	cbz	r6, 80009e4 <wm8994_SetVolume+0x70>
    if(convertedvol > 0x3E)
 800099a:	2f3e      	cmp	r7, #62	@ 0x3e
 800099c:	d91d      	bls.n	80009da <wm8994_SetVolume+0x66>
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 800099e:	b2ef      	uxtb	r7, r5
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80009a0:	2100      	movs	r1, #0
 80009a2:	f7ff ffb1 	bl	8000908 <wm8994_SetMute>
 AUDIO_IO_Write(Addr, Reg, Value);
 80009a6:	f240 127f 	movw	r2, #383	@ 0x17f
 80009aa:	211c      	movs	r1, #28
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80009ac:	4606      	mov	r6, r0
 AUDIO_IO_Write(Addr, Reg, Value);
 80009ae:	4638      	mov	r0, r7
 80009b0:	f000 fcb2 	bl	8001318 <AUDIO_IO_Write>
 80009b4:	f240 127f 	movw	r2, #383	@ 0x17f
 80009b8:	211d      	movs	r1, #29
 80009ba:	4638      	mov	r0, r7
 80009bc:	f000 fcac 	bl	8001318 <AUDIO_IO_Write>
 80009c0:	f240 127f 	movw	r2, #383	@ 0x17f
 80009c4:	2126      	movs	r1, #38	@ 0x26
 80009c6:	4638      	mov	r0, r7
 80009c8:	f000 fca6 	bl	8001318 <AUDIO_IO_Write>
 80009cc:	f240 127f 	movw	r2, #383	@ 0x17f
 80009d0:	2127      	movs	r1, #39	@ 0x27
 80009d2:	4638      	mov	r0, r7
 80009d4:	f000 fca0 	bl	8001318 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 80009d8:	e004      	b.n	80009e4 <wm8994_SetVolume+0x70>
    else if (Volume == 0)
 80009da:	bb79      	cbnz	r1, 8000a3c <wm8994_SetVolume+0xc8>
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80009dc:	2101      	movs	r1, #1
 80009de:	f7ff ff93 	bl	8000908 <wm8994_SetMute>
 80009e2:	4606      	mov	r6, r0
  if (inputEnabled != 0)
 80009e4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80009e8:	b32b      	cbz	r3, 8000a36 <wm8994_SetVolume+0xc2>
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80009ea:	2c63      	cmp	r4, #99	@ 0x63
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 80009ec:	b2ed      	uxtb	r5, r5
 AUDIO_IO_Write(Addr, Reg, Value);
 80009ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80009f2:	bf9a      	itte	ls
 80009f4:	ebc4 1404 	rsbls	r4, r4, r4, lsl #4
 80009f8:	2364      	movls	r3, #100	@ 0x64
 80009fa:	24ef      	movhi	r4, #239	@ 0xef
 AUDIO_IO_Write(Addr, Reg, Value);
 80009fc:	4628      	mov	r0, r5
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80009fe:	bf9e      	ittt	ls
 8000a00:	0124      	lslls	r4, r4, #4
 8000a02:	fbb4 f4f3 	udivls	r4, r4, r3
 8000a06:	b2e4      	uxtbls	r4, r4
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8000a08:	f444 7480 	orr.w	r4, r4, #256	@ 0x100
 AUDIO_IO_Write(Addr, Reg, Value);
 8000a0c:	4622      	mov	r2, r4
 8000a0e:	f000 fc83 	bl	8001318 <AUDIO_IO_Write>
 8000a12:	4622      	mov	r2, r4
 8000a14:	f240 4101 	movw	r1, #1025	@ 0x401
 8000a18:	4628      	mov	r0, r5
 8000a1a:	f000 fc7d 	bl	8001318 <AUDIO_IO_Write>
 8000a1e:	4622      	mov	r2, r4
 8000a20:	f240 4104 	movw	r1, #1028	@ 0x404
 8000a24:	4628      	mov	r0, r5
 8000a26:	f000 fc77 	bl	8001318 <AUDIO_IO_Write>
 8000a2a:	4622      	mov	r2, r4
 8000a2c:	f240 4105 	movw	r1, #1029	@ 0x405
 8000a30:	4628      	mov	r0, r5
 8000a32:	f000 fc71 	bl	8001318 <AUDIO_IO_Write>
}
 8000a36:	4630      	mov	r0, r6
 8000a38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8000a3c:	fa5f f885 	uxtb.w	r8, r5
 8000a40:	f447 77a0 	orr.w	r7, r7, #320	@ 0x140
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000a44:	2100      	movs	r1, #0
 8000a46:	f7ff ff5f 	bl	8000908 <wm8994_SetMute>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000a4a:	463a      	mov	r2, r7
 8000a4c:	211c      	movs	r1, #28
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000a4e:	4606      	mov	r6, r0
 AUDIO_IO_Write(Addr, Reg, Value);
 8000a50:	4640      	mov	r0, r8
 8000a52:	f000 fc61 	bl	8001318 <AUDIO_IO_Write>
 8000a56:	463a      	mov	r2, r7
 8000a58:	211d      	movs	r1, #29
 8000a5a:	4640      	mov	r0, r8
 8000a5c:	f000 fc5c 	bl	8001318 <AUDIO_IO_Write>
 8000a60:	463a      	mov	r2, r7
 8000a62:	2126      	movs	r1, #38	@ 0x26
 8000a64:	4640      	mov	r0, r8
 8000a66:	f000 fc57 	bl	8001318 <AUDIO_IO_Write>
 8000a6a:	463a      	mov	r2, r7
 8000a6c:	2127      	movs	r1, #39	@ 0x27
 8000a6e:	4640      	mov	r0, r8
 8000a70:	e7b0      	b.n	80009d4 <wm8994_SetVolume+0x60>
 8000a72:	bf00      	nop
 8000a74:	20000604 	.word	0x20000604

08000a78 <wm8994_Init>:
{
 8000a78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a7c:	4681      	mov	r9, r0
 8000a7e:	461f      	mov	r7, r3
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8000a80:	f401 457f 	and.w	r5, r1, #65280	@ 0xff00
{
 8000a84:	4692      	mov	sl, r2
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8000a86:	fa5f f489 	uxtb.w	r4, r9
  uint16_t output_device = OutputInputDevice & 0xFF;
 8000a8a:	b2ce      	uxtb	r6, r1
  AUDIO_IO_Init();
 8000a8c:	f000 fc3c 	bl	8001308 <AUDIO_IO_Init>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000a90:	2203      	movs	r2, #3
 8000a92:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8000a96:	4620      	mov	r0, r4
 8000a98:	f000 fc3e 	bl	8001318 <AUDIO_IO_Write>
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f640 0117 	movw	r1, #2071	@ 0x817
 8000aa2:	4620      	mov	r0, r4
 8000aa4:	f000 fc38 	bl	8001318 <AUDIO_IO_Write>
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8000aae:	4620      	mov	r0, r4
 8000ab0:	f000 fc32 	bl	8001318 <AUDIO_IO_Write>
 8000ab4:	226c      	movs	r2, #108	@ 0x6c
 8000ab6:	2139      	movs	r1, #57	@ 0x39
 8000ab8:	4620      	mov	r0, r4
 8000aba:	f000 fc2d 	bl	8001318 <AUDIO_IO_Write>
  if (input_device > 0)
 8000abe:	2d00      	cmp	r5, #0
 8000ac0:	d062      	beq.n	8000b88 <wm8994_Init+0x110>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000ac2:	2213      	movs	r2, #19
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	4620      	mov	r0, r4
 8000ac8:	f000 fc26 	bl	8001318 <AUDIO_IO_Write>
  AUDIO_IO_Delay(50);
 8000acc:	2032      	movs	r0, #50	@ 0x32
 8000ace:	f8df b504 	ldr.w	fp, [pc, #1284]	@ 8000fd4 <wm8994_Init+0x55c>
 8000ad2:	f000 fc4d 	bl	8001370 <AUDIO_IO_Delay>
  if (output_device > 0)
 8000ad6:	2e00      	cmp	r6, #0
 8000ad8:	f000 80ce 	beq.w	8000c78 <wm8994_Init+0x200>
    outputEnabled = 1;
 8000adc:	f04f 0801 	mov.w	r8, #1
    switch (output_device)
 8000ae0:	2e02      	cmp	r6, #2
    outputEnabled = 1;
 8000ae2:	f8cb 8000 	str.w	r8, [fp]
    switch (output_device)
 8000ae6:	f000 80ad 	beq.w	8000c44 <wm8994_Init+0x1cc>
 8000aea:	2e03      	cmp	r6, #3
 8000aec:	d04e      	beq.n	8000b8c <wm8994_Init+0x114>
 8000aee:	4546      	cmp	r6, r8
 8000af0:	f040 80a8 	bne.w	8000c44 <wm8994_Init+0x1cc>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000af4:	f640 420c 	movw	r2, #3084	@ 0xc0c
 8000af8:	2105      	movs	r1, #5
 8000afa:	4620      	mov	r0, r4
 8000afc:	f000 fc0c 	bl	8001318 <AUDIO_IO_Write>
 8000b00:	2200      	movs	r2, #0
 8000b02:	f240 6101 	movw	r1, #1537	@ 0x601
 8000b06:	4620      	mov	r0, r4
 8000b08:	f000 fc06 	bl	8001318 <AUDIO_IO_Write>
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f240 6102 	movw	r1, #1538	@ 0x602
 8000b12:	4620      	mov	r0, r4
 8000b14:	f000 fc00 	bl	8001318 <AUDIO_IO_Write>
 8000b18:	2202      	movs	r2, #2
 8000b1a:	f240 6104 	movw	r1, #1540	@ 0x604
 8000b1e:	4620      	mov	r0, r4
 8000b20:	f000 fbfa 	bl	8001318 <AUDIO_IO_Write>
 8000b24:	2202      	movs	r2, #2
 8000b26:	f240 6105 	movw	r1, #1541	@ 0x605
 8000b2a:	4620      	mov	r0, r4
 8000b2c:	f000 fbf4 	bl	8001318 <AUDIO_IO_Write>
  if (input_device > 0)
 8000b30:	2d00      	cmp	r5, #0
 8000b32:	f000 8101 	beq.w	8000d38 <wm8994_Init+0x2c0>
    inputEnabled = 1;
 8000b36:	f04f 0801 	mov.w	r8, #1
    switch (input_device)
 8000b3a:	f5b5 7f40 	cmp.w	r5, #768	@ 0x300
    inputEnabled = 1;
 8000b3e:	f8cb 8004 	str.w	r8, [fp, #4]
    switch (input_device)
 8000b42:	f000 80c7 	beq.w	8000cd4 <wm8994_Init+0x25c>
 8000b46:	f200 809a 	bhi.w	8000c7e <wm8994_Init+0x206>
 8000b4a:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8000b4e:	f000 80f0 	beq.w	8000d32 <wm8994_Init+0x2ba>
 8000b52:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8000b56:	f000 8096 	beq.w	8000c86 <wm8994_Init+0x20e>
  switch (AudioFreq)
 8000b5a:	f5b7 4ffa 	cmp.w	r7, #32000	@ 0x7d00
 8000b5e:	f000 81f8 	beq.w	8000f52 <wm8994_Init+0x4da>
 8000b62:	f200 80f3 	bhi.w	8000d4c <wm8994_Init+0x2d4>
 8000b66:	f5b7 5f7a 	cmp.w	r7, #16000	@ 0x3e80
 8000b6a:	f000 81f0 	beq.w	8000f4e <wm8994_Init+0x4d6>
 8000b6e:	f200 80e6 	bhi.w	8000d3e <wm8994_Init+0x2c6>
 8000b72:	f5b7 5ffa 	cmp.w	r7, #8000	@ 0x1f40
 8000b76:	f000 80f9 	beq.w	8000d6c <wm8994_Init+0x2f4>
 8000b7a:	f642 3311 	movw	r3, #11025	@ 0x2b11
 8000b7e:	429f      	cmp	r7, r3
 8000b80:	f000 81eb 	beq.w	8000f5a <wm8994_Init+0x4e2>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000b84:	2283      	movs	r2, #131	@ 0x83
 8000b86:	e0f2      	b.n	8000d6e <wm8994_Init+0x2f6>
 8000b88:	2203      	movs	r2, #3
 8000b8a:	e79b      	b.n	8000ac4 <wm8994_Init+0x4c>
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8000b8c:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 AUDIO_IO_Write(Addr, Reg, Value);
 8000b90:	f640 720f 	movw	r2, #3855	@ 0xf0f
 8000b94:	f04f 0105 	mov.w	r1, #5
 8000b98:	4620      	mov	r0, r4
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8000b9a:	d149      	bne.n	8000c30 <wm8994_Init+0x1b8>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000b9c:	f000 fbbc 	bl	8001318 <AUDIO_IO_Write>
 8000ba0:	4632      	mov	r2, r6
 8000ba2:	f240 6101 	movw	r1, #1537	@ 0x601
 8000ba6:	4620      	mov	r0, r4
 8000ba8:	f000 fbb6 	bl	8001318 <AUDIO_IO_Write>
 8000bac:	4632      	mov	r2, r6
 8000bae:	f240 6102 	movw	r1, #1538	@ 0x602
 8000bb2:	4620      	mov	r0, r4
 8000bb4:	f000 fbb0 	bl	8001318 <AUDIO_IO_Write>
 8000bb8:	4632      	mov	r2, r6
 8000bba:	f240 6104 	movw	r1, #1540	@ 0x604
 8000bbe:	4620      	mov	r0, r4
 8000bc0:	f000 fbaa 	bl	8001318 <AUDIO_IO_Write>
 8000bc4:	4632      	mov	r2, r6
 8000bc6:	f240 6105 	movw	r1, #1541	@ 0x605
 8000bca:	4620      	mov	r0, r4
 8000bcc:	f000 fba4 	bl	8001318 <AUDIO_IO_Write>
    inputEnabled = 1;
 8000bd0:	f8cb 8004 	str.w	r8, [fp, #4]
 AUDIO_IO_Write(Addr, Reg, Value);
 8000bd4:	f640 723c 	movw	r2, #3900	@ 0xf3c
 8000bd8:	2104      	movs	r1, #4
 8000bda:	4620      	mov	r0, r4
 8000bdc:	f000 fb9c 	bl	8001318 <AUDIO_IO_Write>
 8000be0:	22db      	movs	r2, #219	@ 0xdb
 8000be2:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8000be6:	4620      	mov	r0, r4
 8000be8:	f000 fb96 	bl	8001318 <AUDIO_IO_Write>
 8000bec:	22db      	movs	r2, #219	@ 0xdb
 8000bee:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8000bf2:	4620      	mov	r0, r4
 8000bf4:	f000 fb90 	bl	8001318 <AUDIO_IO_Write>
 8000bf8:	f246 32a0 	movw	r2, #25504	@ 0x63a0
 8000bfc:	2102      	movs	r1, #2
 8000bfe:	4620      	mov	r0, r4
 8000c00:	f000 fb8a 	bl	8001318 <AUDIO_IO_Write>
 8000c04:	2202      	movs	r2, #2
 8000c06:	f240 6106 	movw	r1, #1542	@ 0x606
 8000c0a:	4620      	mov	r0, r4
 8000c0c:	f000 fb84 	bl	8001318 <AUDIO_IO_Write>
 8000c10:	2202      	movs	r2, #2
 8000c12:	f240 6107 	movw	r1, #1543	@ 0x607
 8000c16:	4620      	mov	r0, r4
 8000c18:	f000 fb7e 	bl	8001318 <AUDIO_IO_Write>
 8000c1c:	2202      	movs	r2, #2
 8000c1e:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8000c22:	4620      	mov	r0, r4
 8000c24:	f000 fb78 	bl	8001318 <AUDIO_IO_Write>
 8000c28:	2202      	movs	r2, #2
 8000c2a:	f240 6109 	movw	r1, #1545	@ 0x609
 8000c2e:	e07b      	b.n	8000d28 <wm8994_Init+0x2b0>
 8000c30:	f000 fb72 	bl	8001318 <AUDIO_IO_Write>
 8000c34:	4642      	mov	r2, r8
 8000c36:	f240 6101 	movw	r1, #1537	@ 0x601
 8000c3a:	4620      	mov	r0, r4
 8000c3c:	f000 fb6c 	bl	8001318 <AUDIO_IO_Write>
 8000c40:	4642      	mov	r2, r8
 8000c42:	e764      	b.n	8000b0e <wm8994_Init+0x96>
 8000c44:	f240 3203 	movw	r2, #771	@ 0x303
 8000c48:	2105      	movs	r1, #5
 8000c4a:	4620      	mov	r0, r4
 8000c4c:	f000 fb64 	bl	8001318 <AUDIO_IO_Write>
 8000c50:	4642      	mov	r2, r8
 8000c52:	f240 6101 	movw	r1, #1537	@ 0x601
 8000c56:	4620      	mov	r0, r4
 8000c58:	f000 fb5e 	bl	8001318 <AUDIO_IO_Write>
 8000c5c:	4642      	mov	r2, r8
 8000c5e:	f240 6102 	movw	r1, #1538	@ 0x602
 8000c62:	4620      	mov	r0, r4
 8000c64:	f000 fb58 	bl	8001318 <AUDIO_IO_Write>
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f240 6104 	movw	r1, #1540	@ 0x604
 8000c6e:	4620      	mov	r0, r4
 8000c70:	f000 fb52 	bl	8001318 <AUDIO_IO_Write>
 8000c74:	2200      	movs	r2, #0
 8000c76:	e756      	b.n	8000b26 <wm8994_Init+0xae>
    outputEnabled = 0;
 8000c78:	f8cb 6000 	str.w	r6, [fp]
 8000c7c:	e758      	b.n	8000b30 <wm8994_Init+0xb8>
    switch (input_device)
 8000c7e:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8000c82:	d0a7      	beq.n	8000bd4 <wm8994_Init+0x15c>
 8000c84:	e769      	b.n	8000b5a <wm8994_Init+0xe2>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000c86:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 8000c8a:	2104      	movs	r1, #4
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	f000 fb43 	bl	8001318 <AUDIO_IO_Write>
 8000c92:	22db      	movs	r2, #219	@ 0xdb
 8000c94:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8000c98:	4620      	mov	r0, r4
 8000c9a:	f000 fb3d 	bl	8001318 <AUDIO_IO_Write>
 8000c9e:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 8000ca2:	2102      	movs	r1, #2
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f000 fb37 	bl	8001318 <AUDIO_IO_Write>
 8000caa:	2202      	movs	r2, #2
 8000cac:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8000cb0:	4620      	mov	r0, r4
 8000cb2:	f000 fb31 	bl	8001318 <AUDIO_IO_Write>
 8000cb6:	2202      	movs	r2, #2
 8000cb8:	f240 6109 	movw	r1, #1545	@ 0x609
 8000cbc:	4620      	mov	r0, r4
 8000cbe:	f000 fb2b 	bl	8001318 <AUDIO_IO_Write>
 8000cc2:	220e      	movs	r2, #14
 8000cc4:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000cc8:	4620      	mov	r0, r4
 8000cca:	f000 fb25 	bl	8001318 <AUDIO_IO_Write>
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8000cce:	f04f 0800 	mov.w	r8, #0
 8000cd2:	e742      	b.n	8000b5a <wm8994_Init+0xe2>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000cd4:	2211      	movs	r2, #17
 8000cd6:	2128      	movs	r1, #40	@ 0x28
 8000cd8:	4620      	mov	r0, r4
 8000cda:	f000 fb1d 	bl	8001318 <AUDIO_IO_Write>
 8000cde:	2235      	movs	r2, #53	@ 0x35
 8000ce0:	2129      	movs	r1, #41	@ 0x29
 8000ce2:	4620      	mov	r0, r4
 8000ce4:	f000 fb18 	bl	8001318 <AUDIO_IO_Write>
 8000ce8:	2235      	movs	r2, #53	@ 0x35
 8000cea:	212a      	movs	r1, #42	@ 0x2a
 8000cec:	4620      	mov	r0, r4
 8000cee:	f000 fb13 	bl	8001318 <AUDIO_IO_Write>
 8000cf2:	f240 3203 	movw	r2, #771	@ 0x303
 8000cf6:	2104      	movs	r1, #4
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	f000 fb0d 	bl	8001318 <AUDIO_IO_Write>
 8000cfe:	22db      	movs	r2, #219	@ 0xdb
 8000d00:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8000d04:	4620      	mov	r0, r4
 8000d06:	f000 fb07 	bl	8001318 <AUDIO_IO_Write>
 8000d0a:	f246 3250 	movw	r2, #25424	@ 0x6350
 8000d0e:	2102      	movs	r1, #2
 8000d10:	4620      	mov	r0, r4
 8000d12:	f000 fb01 	bl	8001318 <AUDIO_IO_Write>
 8000d16:	2202      	movs	r2, #2
 8000d18:	f240 6106 	movw	r1, #1542	@ 0x606
 8000d1c:	4620      	mov	r0, r4
 8000d1e:	f000 fafb 	bl	8001318 <AUDIO_IO_Write>
 8000d22:	2202      	movs	r2, #2
 8000d24:	f240 6107 	movw	r1, #1543	@ 0x607
 8000d28:	4620      	mov	r0, r4
 8000d2a:	f000 faf5 	bl	8001318 <AUDIO_IO_Write>
 8000d2e:	220d      	movs	r2, #13
 8000d30:	e7c8      	b.n	8000cc4 <wm8994_Init+0x24c>
 8000d32:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 8000d36:	e7de      	b.n	8000cf6 <wm8994_Init+0x27e>
    inputEnabled = 0;
 8000d38:	f8cb 5004 	str.w	r5, [fp, #4]
 8000d3c:	e7c7      	b.n	8000cce <wm8994_Init+0x256>
  switch (AudioFreq)
 8000d3e:	f245 6322 	movw	r3, #22050	@ 0x5622
 8000d42:	429f      	cmp	r7, r3
 8000d44:	f47f af1e 	bne.w	8000b84 <wm8994_Init+0x10c>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000d48:	2243      	movs	r2, #67	@ 0x43
 8000d4a:	e010      	b.n	8000d6e <wm8994_Init+0x2f6>
  switch (AudioFreq)
 8000d4c:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8000d50:	429f      	cmp	r7, r3
 8000d52:	f43f af17 	beq.w	8000b84 <wm8994_Init+0x10c>
 8000d56:	4b9d      	ldr	r3, [pc, #628]	@ (8000fcc <wm8994_Init+0x554>)
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f000 80fc 	beq.w	8000f56 <wm8994_Init+0x4de>
 8000d5e:	f64a 4344 	movw	r3, #44100	@ 0xac44
 8000d62:	429f      	cmp	r7, r3
 8000d64:	f47f af0e 	bne.w	8000b84 <wm8994_Init+0x10c>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000d68:	2273      	movs	r2, #115	@ 0x73
 8000d6a:	e000      	b.n	8000d6e <wm8994_Init+0x2f6>
 8000d6c:	2203      	movs	r2, #3
 8000d6e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8000d72:	4620      	mov	r0, r4
 8000d74:	f000 fad0 	bl	8001318 <AUDIO_IO_Write>
  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8000d78:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 AUDIO_IO_Write(Addr, Reg, Value);
 8000d7c:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000d80:	4620      	mov	r0, r4
 8000d82:	bf0c      	ite	eq
 8000d84:	f244 0218 	movweq	r2, #16408	@ 0x4018
 8000d88:	f244 0210 	movwne	r2, #16400	@ 0x4010
 8000d8c:	f000 fac4 	bl	8001318 <AUDIO_IO_Write>
 8000d90:	2200      	movs	r2, #0
 8000d92:	f240 3102 	movw	r1, #770	@ 0x302
 8000d96:	4620      	mov	r0, r4
 8000d98:	f000 fabe 	bl	8001318 <AUDIO_IO_Write>
 8000d9c:	220a      	movs	r2, #10
 8000d9e:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8000da2:	4620      	mov	r0, r4
 8000da4:	f000 fab8 	bl	8001318 <AUDIO_IO_Write>
 8000da8:	2201      	movs	r2, #1
 8000daa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dae:	4620      	mov	r0, r4
 8000db0:	f000 fab2 	bl	8001318 <AUDIO_IO_Write>
  if (output_device > 0)  /* Audio output selected */
 8000db4:	2e00      	cmp	r6, #0
 8000db6:	f000 80a9 	beq.w	8000f0c <wm8994_Init+0x494>
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8000dba:	2e02      	cmp	r6, #2
 8000dbc:	d123      	bne.n	8000e06 <wm8994_Init+0x38e>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000dbe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dc2:	212d      	movs	r1, #45	@ 0x2d
 8000dc4:	4620      	mov	r0, r4
      if(ColdStartup)
 8000dc6:	4e82      	ldr	r6, [pc, #520]	@ (8000fd0 <wm8994_Init+0x558>)
 AUDIO_IO_Write(Addr, Reg, Value);
 8000dc8:	f000 faa6 	bl	8001318 <AUDIO_IO_Write>
 8000dcc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dd0:	212e      	movs	r1, #46	@ 0x2e
 8000dd2:	4620      	mov	r0, r4
 8000dd4:	f000 faa0 	bl	8001318 <AUDIO_IO_Write>
      if(ColdStartup)
 8000dd8:	7833      	ldrb	r3, [r6, #0]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	f000 80bf 	beq.w	8000f5e <wm8994_Init+0x4e6>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000de0:	4620      	mov	r0, r4
 8000de2:	f44f 4201 	mov.w	r2, #33024	@ 0x8100
 8000de6:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000dea:	f000 fa95 	bl	8001318 <AUDIO_IO_Write>
        ColdStartup=0;
 8000dee:	2300      	movs	r3, #0
        AUDIO_IO_Delay(300);
 8000df0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
        ColdStartup=0;
 8000df4:	7033      	strb	r3, [r6, #0]
        AUDIO_IO_Delay(50);
 8000df6:	f000 fabb 	bl	8001370 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8000e00:	4620      	mov	r0, r4
 8000e02:	f000 fa89 	bl	8001318 <AUDIO_IO_Write>
 8000e06:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000e0a:	2103      	movs	r1, #3
 8000e0c:	4620      	mov	r0, r4
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8000e0e:	f243 3603 	movw	r6, #13059	@ 0x3303
 AUDIO_IO_Write(Addr, Reg, Value);
 8000e12:	f000 fa81 	bl	8001318 <AUDIO_IO_Write>
 8000e16:	2200      	movs	r2, #0
 8000e18:	2122      	movs	r1, #34	@ 0x22
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	f000 fa7c 	bl	8001318 <AUDIO_IO_Write>
 8000e20:	2200      	movs	r2, #0
 8000e22:	2123      	movs	r1, #35	@ 0x23
 8000e24:	4620      	mov	r0, r4
 8000e26:	f000 fa77 	bl	8001318 <AUDIO_IO_Write>
 8000e2a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000e2e:	2136      	movs	r1, #54	@ 0x36
 8000e30:	4620      	mov	r0, r4
 8000e32:	f000 fa71 	bl	8001318 <AUDIO_IO_Write>
 8000e36:	f243 0203 	movw	r2, #12291	@ 0x3003
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	f000 fa6b 	bl	8001318 <AUDIO_IO_Write>
    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8000e42:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 AUDIO_IO_Write(Addr, Reg, Value);
 8000e46:	f04f 0151 	mov.w	r1, #81	@ 0x51
 8000e4a:	4620      	mov	r0, r4
 8000e4c:	bf0c      	ite	eq
 8000e4e:	f240 2205 	movweq	r2, #517	@ 0x205
 8000e52:	2205      	movne	r2, #5
 8000e54:	f000 fa60 	bl	8001318 <AUDIO_IO_Write>
 8000e58:	f243 3203 	movw	r2, #13059	@ 0x3303
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	4620      	mov	r0, r4
 8000e60:	f000 fa5a 	bl	8001318 <AUDIO_IO_Write>
 8000e64:	2222      	movs	r2, #34	@ 0x22
 8000e66:	2160      	movs	r1, #96	@ 0x60
 8000e68:	4620      	mov	r0, r4
 8000e6a:	f000 fa55 	bl	8001318 <AUDIO_IO_Write>
 8000e6e:	f649 7225 	movw	r2, #40741	@ 0x9f25
 8000e72:	214c      	movs	r1, #76	@ 0x4c
 8000e74:	4620      	mov	r0, r4
 8000e76:	f000 fa4f 	bl	8001318 <AUDIO_IO_Write>
    AUDIO_IO_Delay(15);
 8000e7a:	200f      	movs	r0, #15
 8000e7c:	f000 fa78 	bl	8001370 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000e80:	2201      	movs	r2, #1
 8000e82:	212d      	movs	r1, #45	@ 0x2d
 8000e84:	4620      	mov	r0, r4
 8000e86:	f000 fa47 	bl	8001318 <AUDIO_IO_Write>
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	212e      	movs	r1, #46	@ 0x2e
 8000e8e:	4620      	mov	r0, r4
 8000e90:	f000 fa42 	bl	8001318 <AUDIO_IO_Write>
 8000e94:	f44f 724c 	mov.w	r2, #816	@ 0x330
 8000e98:	2103      	movs	r1, #3
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	f000 fa3c 	bl	8001318 <AUDIO_IO_Write>
 8000ea0:	2233      	movs	r2, #51	@ 0x33
 8000ea2:	2154      	movs	r1, #84	@ 0x54
 8000ea4:	4620      	mov	r0, r4
 8000ea6:	f000 fa37 	bl	8001318 <AUDIO_IO_Write>
    AUDIO_IO_Delay(257);
 8000eaa:	f240 1001 	movw	r0, #257	@ 0x101
 8000eae:	f000 fa5f 	bl	8001370 <AUDIO_IO_Delay>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000eb2:	22ee      	movs	r2, #238	@ 0xee
 8000eb4:	2160      	movs	r1, #96	@ 0x60
 8000eb6:	4620      	mov	r0, r4
 8000eb8:	f000 fa2e 	bl	8001318 <AUDIO_IO_Write>
 8000ebc:	22c0      	movs	r2, #192	@ 0xc0
 8000ebe:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 8000ec2:	4620      	mov	r0, r4
 8000ec4:	f000 fa28 	bl	8001318 <AUDIO_IO_Write>
 8000ec8:	22c0      	movs	r2, #192	@ 0xc0
 8000eca:	f240 6111 	movw	r1, #1553	@ 0x611
 8000ece:	4620      	mov	r0, r4
 8000ed0:	f000 fa22 	bl	8001318 <AUDIO_IO_Write>
 8000ed4:	2210      	movs	r2, #16
 8000ed6:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8000eda:	4620      	mov	r0, r4
 8000edc:	f000 fa1c 	bl	8001318 <AUDIO_IO_Write>
 8000ee0:	22c0      	movs	r2, #192	@ 0xc0
 8000ee2:	f240 6112 	movw	r1, #1554	@ 0x612
 8000ee6:	4620      	mov	r0, r4
 8000ee8:	f000 fa16 	bl	8001318 <AUDIO_IO_Write>
 8000eec:	22c0      	movs	r2, #192	@ 0xc0
 8000eee:	f240 6113 	movw	r1, #1555	@ 0x613
 8000ef2:	4620      	mov	r0, r4
 8000ef4:	f000 fa10 	bl	8001318 <AUDIO_IO_Write>
 8000ef8:	2210      	movs	r2, #16
 8000efa:	f240 4122 	movw	r1, #1058	@ 0x422
 8000efe:	4620      	mov	r0, r4
 8000f00:	f000 fa0a 	bl	8001318 <AUDIO_IO_Write>
    wm8994_SetVolume(DeviceAddr, Volume);
 8000f04:	4651      	mov	r1, sl
 8000f06:	4648      	mov	r0, r9
 8000f08:	f7ff fd34 	bl	8000974 <wm8994_SetVolume>
  if (input_device > 0) /* Audio input selected */
 8000f0c:	b1e5      	cbz	r5, 8000f48 <wm8994_Init+0x4d0>
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8000f0e:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8000f12:	d002      	beq.n	8000f1a <wm8994_Init+0x4a2>
 8000f14:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8000f18:	d12a      	bne.n	8000f70 <wm8994_Init+0x4f8>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000f1a:	f046 0213 	orr.w	r2, r6, #19
 8000f1e:	2101      	movs	r1, #1
 8000f20:	4620      	mov	r0, r4
 8000f22:	f000 f9f9 	bl	8001318 <AUDIO_IO_Write>
 8000f26:	2202      	movs	r2, #2
 8000f28:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	f000 f9f3 	bl	8001318 <AUDIO_IO_Write>
 8000f32:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8000f36:	f240 4111 	movw	r1, #1041	@ 0x411
 8000f3a:	4620      	mov	r0, r4
 8000f3c:	f000 f9ec 	bl	8001318 <AUDIO_IO_Write>
    wm8994_SetVolume(DeviceAddr, Volume);
 8000f40:	4651      	mov	r1, sl
 8000f42:	4648      	mov	r0, r9
 8000f44:	f7ff fd16 	bl	8000974 <wm8994_SetVolume>
}
 8000f48:	4640      	mov	r0, r8
 8000f4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 AUDIO_IO_Write(Addr, Reg, Value);
 8000f4e:	2233      	movs	r2, #51	@ 0x33
 8000f50:	e70d      	b.n	8000d6e <wm8994_Init+0x2f6>
 8000f52:	2263      	movs	r2, #99	@ 0x63
 8000f54:	e70b      	b.n	8000d6e <wm8994_Init+0x2f6>
 8000f56:	22a3      	movs	r2, #163	@ 0xa3
 8000f58:	e709      	b.n	8000d6e <wm8994_Init+0x2f6>
 8000f5a:	2213      	movs	r2, #19
 8000f5c:	e707      	b.n	8000d6e <wm8994_Init+0x2f6>
 8000f5e:	4620      	mov	r0, r4
 8000f60:	f248 1208 	movw	r2, #33032	@ 0x8108
 8000f64:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000f68:	f000 f9d6 	bl	8001318 <AUDIO_IO_Write>
        AUDIO_IO_Delay(50);
 8000f6c:	2032      	movs	r0, #50	@ 0x32
 8000f6e:	e742      	b.n	8000df6 <wm8994_Init+0x37e>
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8000f70:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8000f74:	d115      	bne.n	8000fa2 <wm8994_Init+0x52a>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000f76:	f046 0213 	orr.w	r2, r6, #19
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	f000 f9cb 	bl	8001318 <AUDIO_IO_Write>
 8000f82:	2202      	movs	r2, #2
 8000f84:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8000f88:	4620      	mov	r0, r4
 8000f8a:	f000 f9c5 	bl	8001318 <AUDIO_IO_Write>
 8000f8e:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8000f92:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8000f96:	4620      	mov	r0, r4
 8000f98:	f000 f9be 	bl	8001318 <AUDIO_IO_Write>
 8000f9c:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8000fa0:	e7c9      	b.n	8000f36 <wm8994_Init+0x4be>
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8000fa2:	f5b5 7f40 	cmp.w	r5, #768	@ 0x300
 8000fa6:	d002      	beq.n	8000fae <wm8994_Init+0x536>
 8000fa8:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8000fac:	d1c8      	bne.n	8000f40 <wm8994_Init+0x4c8>
 AUDIO_IO_Write(Addr, Reg, Value);
 8000fae:	220b      	movs	r2, #11
 8000fb0:	2118      	movs	r1, #24
 8000fb2:	4620      	mov	r0, r4
 8000fb4:	f000 f9b0 	bl	8001318 <AUDIO_IO_Write>
 8000fb8:	220b      	movs	r2, #11
 8000fba:	211a      	movs	r1, #26
 8000fbc:	4620      	mov	r0, r4
 8000fbe:	f000 f9ab 	bl	8001318 <AUDIO_IO_Write>
 8000fc2:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 8000fc6:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8000fca:	e7b6      	b.n	8000f3a <wm8994_Init+0x4c2>
 8000fcc:	00017700 	.word	0x00017700
 8000fd0:	20000028 	.word	0x20000028
 8000fd4:	20000604 	.word	0x20000604

08000fd8 <wm8994_Stop>:
{
 8000fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (outputEnabled != 0)
 8000fda:	4f19      	ldr	r7, [pc, #100]	@ (8001040 <wm8994_Stop+0x68>)
{
 8000fdc:	4604      	mov	r4, r0
 8000fde:	460e      	mov	r6, r1
  if (outputEnabled != 0)
 8000fe0:	683d      	ldr	r5, [r7, #0]
 8000fe2:	b355      	cbz	r5, 800103a <wm8994_Stop+0x62>
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	f7ff fc8f 	bl	8000908 <wm8994_SetMute>
    if (CodecPdwnMode == CODEC_PDWN_SW)
 8000fea:	2e02      	cmp	r6, #2
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8000fec:	4605      	mov	r5, r0
    if (CodecPdwnMode == CODEC_PDWN_SW)
 8000fee:	d024      	beq.n	800103a <wm8994_Stop+0x62>
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8000ff0:	b2e4      	uxtb	r4, r4
 AUDIO_IO_Write(Addr, Reg, Value);
 8000ff2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ff6:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8000ffa:	4620      	mov	r0, r4
 8000ffc:	f000 f98c 	bl	8001318 <AUDIO_IO_Write>
 8001000:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001004:	f240 4122 	movw	r1, #1058	@ 0x422
 8001008:	4620      	mov	r0, r4
 800100a:	f000 f985 	bl	8001318 <AUDIO_IO_Write>
 800100e:	2200      	movs	r2, #0
 8001010:	212d      	movs	r1, #45	@ 0x2d
 8001012:	4620      	mov	r0, r4
 8001014:	f000 f980 	bl	8001318 <AUDIO_IO_Write>
 8001018:	2200      	movs	r2, #0
 800101a:	212e      	movs	r1, #46	@ 0x2e
 800101c:	4620      	mov	r0, r4
 800101e:	f000 f97b 	bl	8001318 <AUDIO_IO_Write>
 8001022:	2200      	movs	r2, #0
 8001024:	2105      	movs	r1, #5
 8001026:	4620      	mov	r0, r4
 8001028:	f000 f976 	bl	8001318 <AUDIO_IO_Write>
 800102c:	2200      	movs	r2, #0
 800102e:	4620      	mov	r0, r4
 8001030:	4611      	mov	r1, r2
 8001032:	f000 f971 	bl	8001318 <AUDIO_IO_Write>
      outputEnabled = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	603b      	str	r3, [r7, #0]
}
 800103a:	4628      	mov	r0, r5
 800103c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800103e:	bf00      	nop
 8001040:	20000604 	.word	0x20000604

08001044 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001044:	b570      	push	{r4, r5, r6, lr}
 8001046:	b08a      	sub	sp, #40	@ 0x28
 8001048:	4605      	mov	r5, r0
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800104a:	f003 fea4 	bl	8004d96 <HAL_I2C_GetState>
 800104e:	2800      	cmp	r0, #0
 8001050:	f040 8096 	bne.w	8001180 <I2Cx_Init+0x13c>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001054:	4b4b      	ldr	r3, [pc, #300]	@ (8001184 <I2Cx_Init+0x140>)
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
    i2c_handler->Init.OwnAddress1      = 0;
 8001056:	2600      	movs	r6, #0
 8001058:	4c4b      	ldr	r4, [pc, #300]	@ (8001188 <I2Cx_Init+0x144>)
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800105a:	429d      	cmp	r5, r3
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
    i2c_handler->Init.OwnAddress2      = 0;
 800105c:	616e      	str	r6, [r5, #20]
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800105e:	bf0c      	ite	eq
 8001060:	4a4a      	ldreq	r2, [pc, #296]	@ (800118c <I2Cx_Init+0x148>)
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8001062:	4a4b      	ldrne	r2, [pc, #300]	@ (8001190 <I2Cx_Init+0x14c>)
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001064:	429d      	cmp	r5, r3
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8001066:	602a      	str	r2, [r5, #0]
    i2c_handler->Init.OwnAddress1      = 0;
 8001068:	4a4a      	ldr	r2, [pc, #296]	@ (8001194 <I2Cx_Init+0x150>)
 800106a:	e9c5 2601 	strd	r2, r6, [r5, #4]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800106e:	f04f 0201 	mov.w	r2, #1
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001072:	e9c5 6607 	strd	r6, r6, [r5, #28]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001076:	e9c5 2603 	strd	r2, r6, [r5, #12]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800107a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800107c:	d143      	bne.n	8001106 <I2Cx_Init+0xc2>
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800107e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001082:	2080      	movs	r0, #128	@ 0x80
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8001084:	f04f 0c02 	mov.w	ip, #2
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001088:	a905      	add	r1, sp, #20
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800108a:	6323      	str	r3, [r4, #48]	@ 0x30
 800108c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
 800108e:	9607      	str	r6, [sp, #28]
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001090:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001094:	9301      	str	r3, [sp, #4]
 8001096:	9b01      	ldr	r3, [sp, #4]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001098:	2312      	movs	r3, #18
 800109a:	e9cd 0305 	strd	r0, r3, [sp, #20]
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800109e:	2304      	movs	r3, #4
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80010a0:	483d      	ldr	r0, [pc, #244]	@ (8001198 <I2Cx_Init+0x154>)
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80010a2:	e9cd c308 	strd	ip, r3, [sp, #32]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80010a6:	f003 f903 	bl	80042b0 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80010aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80010ae:	a905      	add	r1, sp, #20
 80010b0:	4839      	ldr	r0, [pc, #228]	@ (8001198 <I2Cx_Init+0x154>)
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80010b2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80010b4:	f003 f8fc 	bl	80042b0 <HAL_GPIO_Init>
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80010b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80010ba:	4632      	mov	r2, r6
 80010bc:	210f      	movs	r1, #15
 80010be:	2048      	movs	r0, #72	@ 0x48
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80010c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80010c4:	6423      	str	r3, [r4, #64]	@ 0x40
 80010c6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80010c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80010cc:	9302      	str	r3, [sp, #8]
 80010ce:	9b02      	ldr	r3, [sp, #8]
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80010d0:	6a23      	ldr	r3, [r4, #32]
 80010d2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80010d6:	6223      	str	r3, [r4, #32]
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80010d8:	6a23      	ldr	r3, [r4, #32]
 80010da:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80010de:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80010e0:	f002 fc66 	bl	80039b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80010e4:	2048      	movs	r0, #72	@ 0x48
 80010e6:	f002 fc95 	bl	8003a14 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80010ea:	2049      	movs	r0, #73	@ 0x49
 80010ec:	4632      	mov	r2, r6
 80010ee:	210f      	movs	r1, #15
 80010f0:	f002 fc5e 	bl	80039b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80010f4:	2049      	movs	r0, #73	@ 0x49
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80010f6:	f002 fc8d 	bl	8003a14 <HAL_NVIC_EnableIRQ>

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
    HAL_I2C_Init(i2c_handler);
 80010fa:	4628      	mov	r0, r5
  }
}
 80010fc:	b00a      	add	sp, #40	@ 0x28
 80010fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_I2C_Init(i2c_handler);
 8001102:	f003 bb9f 	b.w	8004844 <HAL_I2C_Init>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001106:	f043 0302 	orr.w	r3, r3, #2
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800110a:	f44f 7280 	mov.w	r2, #256	@ 0x100
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800110e:	2102      	movs	r1, #2
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001110:	4822      	ldr	r0, [pc, #136]	@ (800119c <I2Cx_Init+0x158>)
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001112:	6323      	str	r3, [r4, #48]	@ 0x30
 8001114:	6b23      	ldr	r3, [r4, #48]	@ 0x30
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001116:	9607      	str	r6, [sp, #28]
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001118:	f003 0302 	and.w	r3, r3, #2
 800111c:	9303      	str	r3, [sp, #12]
 800111e:	9b03      	ldr	r3, [sp, #12]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001120:	2312      	movs	r3, #18
 8001122:	e9cd 2305 	strd	r2, r3, [sp, #20]
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8001126:	2304      	movs	r3, #4
 8001128:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800112c:	a905      	add	r1, sp, #20
 800112e:	f003 f8bf 	bl	80042b0 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8001132:	f44f 7300 	mov.w	r3, #512	@ 0x200
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001136:	a905      	add	r1, sp, #20
 8001138:	4818      	ldr	r0, [pc, #96]	@ (800119c <I2Cx_Init+0x158>)
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800113a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800113c:	f003 f8b8 	bl	80042b0 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8001140:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8001142:	4632      	mov	r2, r6
 8001144:	210f      	movs	r1, #15
 8001146:	201f      	movs	r0, #31
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8001148:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800114c:	6423      	str	r3, [r4, #64]	@ 0x40
 800114e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001150:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001154:	9304      	str	r3, [sp, #16]
 8001156:	9b04      	ldr	r3, [sp, #16]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8001158:	6a23      	ldr	r3, [r4, #32]
 800115a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800115e:	6223      	str	r3, [r4, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8001160:	6a23      	ldr	r3, [r4, #32]
 8001162:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001166:	6223      	str	r3, [r4, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8001168:	f002 fc22 	bl	80039b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800116c:	201f      	movs	r0, #31
 800116e:	f002 fc51 	bl	8003a14 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8001172:	2020      	movs	r0, #32
 8001174:	4632      	mov	r2, r6
 8001176:	210f      	movs	r1, #15
 8001178:	f002 fc1a 	bl	80039b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800117c:	2020      	movs	r0, #32
 800117e:	e7ba      	b.n	80010f6 <I2Cx_Init+0xb2>
}
 8001180:	b00a      	add	sp, #40	@ 0x28
 8001182:	bd70      	pop	{r4, r5, r6, pc}
 8001184:	2000060c 	.word	0x2000060c
 8001188:	40023800 	.word	0x40023800
 800118c:	40005c00 	.word	0x40005c00
 8001190:	40005400 	.word	0x40005400
 8001194:	40912732 	.word	0x40912732
 8001198:	40021c00 	.word	0x40021c00
 800119c:	40020400 	.word	0x40020400

080011a0 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80011a0:	b530      	push	{r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80011a2:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
{
 80011a6:	b085      	sub	sp, #20
 80011a8:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80011aa:	9402      	str	r4, [sp, #8]
 80011ac:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 80011b0:	9401      	str	r4, [sp, #4]
 80011b2:	9c08      	ldr	r4, [sp, #32]
 80011b4:	9400      	str	r4, [sp, #0]
 80011b6:	f003 fbb5 	bl	8004924 <HAL_I2C_Mem_Write>
  
  /* Check the communication status */
  if(status != HAL_OK)
 80011ba:	4604      	mov	r4, r0
 80011bc:	b128      	cbz	r0, 80011ca <I2Cx_WriteMultiple+0x2a>
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80011be:	4628      	mov	r0, r5
 80011c0:	f003 fb96 	bl	80048f0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80011c4:	4628      	mov	r0, r5
 80011c6:	f7ff ff3d 	bl	8001044 <I2Cx_Init>
}
 80011ca:	4620      	mov	r0, r4
 80011cc:	b005      	add	sp, #20
 80011ce:	bd30      	pop	{r4, r5, pc}

080011d0 <I2Cx_ReadMultiple>:
{
 80011d0:	b530      	push	{r4, r5, lr}
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80011d2:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
{
 80011d6:	b085      	sub	sp, #20
 80011d8:	4605      	mov	r5, r0
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80011da:	9402      	str	r4, [sp, #8]
 80011dc:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 80011e0:	9401      	str	r4, [sp, #4]
 80011e2:	9c08      	ldr	r4, [sp, #32]
 80011e4:	9400      	str	r4, [sp, #0]
 80011e6:	f003 fc77 	bl	8004ad8 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 80011ea:	4604      	mov	r4, r0
 80011ec:	b128      	cbz	r0, 80011fa <I2Cx_ReadMultiple+0x2a>
  HAL_I2C_DeInit(i2c_handler);
 80011ee:	4628      	mov	r0, r5
 80011f0:	f003 fb7e 	bl	80048f0 <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 80011f4:	4628      	mov	r0, r5
 80011f6:	f7ff ff25 	bl	8001044 <I2Cx_Init>
}
 80011fa:	4620      	mov	r0, r4
 80011fc:	b005      	add	sp, #20
 80011fe:	bd30      	pop	{r4, r5, pc}

08001200 <BSP_LED_Init>:
{
 8001200:	b530      	push	{r4, r5, lr}
  if (Led == LED1)
 8001202:	4604      	mov	r4, r0
{
 8001204:	b087      	sub	sp, #28
  if (Led == LED1)
 8001206:	b9c8      	cbnz	r0, 800123c <BSP_LED_Init+0x3c>
    LED1_GPIO_CLK_ENABLE();
 8001208:	4b0d      	ldr	r3, [pc, #52]	@ (8001240 <BSP_LED_Init+0x40>)
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 800120a:	2502      	movs	r5, #2
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 800120c:	a901      	add	r1, sp, #4
 800120e:	480d      	ldr	r0, [pc, #52]	@ (8001244 <BSP_LED_Init+0x44>)
    LED1_GPIO_CLK_ENABLE();
 8001210:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001212:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001216:	631a      	str	r2, [r3, #48]	@ 0x30
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	9b00      	ldr	r3, [sp, #0]
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001222:	2301      	movs	r3, #1
 8001224:	e9cd 5301 	strd	r5, r3, [sp, #4]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8001228:	9303      	str	r3, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800122a:	2303      	movs	r3, #3
 800122c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 800122e:	f003 f83f 	bl	80042b0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_RESET);
 8001232:	4622      	mov	r2, r4
 8001234:	4629      	mov	r1, r5
 8001236:	4803      	ldr	r0, [pc, #12]	@ (8001244 <BSP_LED_Init+0x44>)
 8001238:	f003 f9be 	bl	80045b8 <HAL_GPIO_WritePin>
}
 800123c:	b007      	add	sp, #28
 800123e:	bd30      	pop	{r4, r5, pc}
 8001240:	40023800 	.word	0x40023800
 8001244:	40022000 	.word	0x40022000

08001248 <BSP_PB_Init>:
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001248:	4b25      	ldr	r3, [pc, #148]	@ (80012e0 <BSP_PB_Init+0x98>)
 800124a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800124c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
{
 8001250:	b570      	push	{r4, r5, r6, lr}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001252:	631a      	str	r2, [r3, #48]	@ 0x30
{
 8001254:	b088      	sub	sp, #32
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001258:	4604      	mov	r4, r0
 800125a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800125e:	b990      	cbnz	r0, 8001286 <BSP_PB_Init+0x3e>
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	9b00      	ldr	r3, [sp, #0]
  if(ButtonMode == BUTTON_MODE_GPIO)
 8001264:	b9b9      	cbnz	r1, 8001296 <BSP_PB_Init+0x4e>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001266:	4b1f      	ldr	r3, [pc, #124]	@ (80012e4 <BSP_PB_Init+0x9c>)
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001268:	9105      	str	r1, [sp, #20]
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 800126a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800126e:	e9cd 3103 	strd	r3, r1, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001272:	2302      	movs	r3, #2
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001274:	a903      	add	r1, sp, #12
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001276:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001278:	4b1b      	ldr	r3, [pc, #108]	@ (80012e8 <BSP_PB_Init+0xa0>)
 800127a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800127e:	f003 f817 	bl	80042b0 <HAL_GPIO_Init>
}
 8001282:	b008      	add	sp, #32
 8001284:	bd70      	pop	{r4, r5, r6, pc}
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001286:	2801      	cmp	r0, #1
 8001288:	d102      	bne.n	8001290 <BSP_PB_Init+0x48>
 800128a:	9301      	str	r3, [sp, #4]
 800128c:	9b01      	ldr	r3, [sp, #4]
 800128e:	e7e9      	b.n	8001264 <BSP_PB_Init+0x1c>
 8001290:	9302      	str	r3, [sp, #8]
 8001292:	9b02      	ldr	r3, [sp, #8]
 8001294:	e7e6      	b.n	8001264 <BSP_PB_Init+0x1c>
  if(ButtonMode == BUTTON_MODE_EXTI)
 8001296:	2901      	cmp	r1, #1
 8001298:	d1f3      	bne.n	8001282 <BSP_PB_Init+0x3a>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 800129a:	4d12      	ldr	r5, [pc, #72]	@ (80012e4 <BSP_PB_Init+0x9c>)
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800129c:	2600      	movs	r6, #0
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800129e:	a903      	add	r1, sp, #12
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80012a0:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
      gpio_init_structure.Mode = GPIO_MODE_IT_FALLING; 
 80012a4:	42b4      	cmp	r4, r6
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80012a6:	eb05 0544 	add.w	r5, r5, r4, lsl #1
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80012aa:	9303      	str	r3, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80012ac:	f04f 0302 	mov.w	r3, #2
 80012b0:	e9cd 6305 	strd	r6, r3, [sp, #20]
      gpio_init_structure.Mode = GPIO_MODE_IT_FALLING; 
 80012b4:	bf0c      	ite	eq
 80012b6:	f44f 1388 	moveq.w	r3, #1114112	@ 0x110000
 80012ba:	f44f 1304 	movne.w	r3, #2162688	@ 0x210000
 80012be:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80012c0:	4b09      	ldr	r3, [pc, #36]	@ (80012e8 <BSP_PB_Init+0xa0>)
 80012c2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80012c6:	f002 fff3 	bl	80042b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80012ca:	f995 4006 	ldrsb.w	r4, [r5, #6]
 80012ce:	4632      	mov	r2, r6
 80012d0:	210f      	movs	r1, #15
 80012d2:	4620      	mov	r0, r4
 80012d4:	f002 fb6c 	bl	80039b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80012d8:	4620      	mov	r0, r4
 80012da:	f002 fb9b 	bl	8003a14 <HAL_NVIC_EnableIRQ>
}
 80012de:	e7d0      	b.n	8001282 <BSP_PB_Init+0x3a>
 80012e0:	40023800 	.word	0x40023800
 80012e4:	0800b9fc 	.word	0x0800b9fc
 80012e8:	2000005c 	.word	0x2000005c

080012ec <BSP_PB_GetState>:
{
 80012ec:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80012ee:	4b04      	ldr	r3, [pc, #16]	@ (8001300 <BSP_PB_GetState+0x14>)
 80012f0:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 80012f4:	4b03      	ldr	r3, [pc, #12]	@ (8001304 <BSP_PB_GetState+0x18>)
 80012f6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80012fa:	f003 f957 	bl	80045ac <HAL_GPIO_ReadPin>
}
 80012fe:	bd08      	pop	{r3, pc}
 8001300:	0800b9fc 	.word	0x0800b9fc
 8001304:	2000005c 	.word	0x2000005c

08001308 <AUDIO_IO_Init>:
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
  I2Cx_Init(&hI2cAudioHandler);
 8001308:	4801      	ldr	r0, [pc, #4]	@ (8001310 <AUDIO_IO_Init+0x8>)
 800130a:	f7ff be9b 	b.w	8001044 <I2Cx_Init>
 800130e:	bf00      	nop
 8001310:	2000060c 	.word	0x2000060c

08001314 <AUDIO_IO_DeInit>:
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
}
 8001314:	4770      	bx	lr
	...

08001318 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8001318:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint16_t tmp = Value;
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 800131a:	ba52      	rev16	r2, r2
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 800131c:	2302      	movs	r3, #2
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 800131e:	f8ad 200e 	strh.w	r2, [sp, #14]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8001322:	f10d 020e 	add.w	r2, sp, #14
 8001326:	9301      	str	r3, [sp, #4]
 8001328:	9200      	str	r2, [sp, #0]
 800132a:	460a      	mov	r2, r1
 800132c:	4601      	mov	r1, r0
 800132e:	4803      	ldr	r0, [pc, #12]	@ (800133c <AUDIO_IO_Write+0x24>)
 8001330:	f7ff ff36 	bl	80011a0 <I2Cx_WriteMultiple>
}
 8001334:	b005      	add	sp, #20
 8001336:	f85d fb04 	ldr.w	pc, [sp], #4
 800133a:	bf00      	nop
 800133c:	2000060c 	.word	0x2000060c

08001340 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8001340:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint16_t read_value = 0, tmp = 0;
 8001342:	2300      	movs	r3, #0
{
 8001344:	460a      	mov	r2, r1
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8001346:	f10d 010e 	add.w	r1, sp, #14
  uint16_t read_value = 0, tmp = 0;
 800134a:	f8ad 300e 	strh.w	r3, [sp, #14]
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 800134e:	2302      	movs	r3, #2
 8001350:	9100      	str	r1, [sp, #0]
 8001352:	4601      	mov	r1, r0
 8001354:	9301      	str	r3, [sp, #4]
 8001356:	4805      	ldr	r0, [pc, #20]	@ (800136c <AUDIO_IO_Read+0x2c>)
 8001358:	f7ff ff3a 	bl	80011d0 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 800135c:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8001360:	ba40      	rev16	r0, r0
  
  read_value = tmp;
  
  return read_value;
}
 8001362:	b280      	uxth	r0, r0
 8001364:	b005      	add	sp, #20
 8001366:	f85d fb04 	ldr.w	pc, [sp], #4
 800136a:	bf00      	nop
 800136c:	2000060c 	.word	0x2000060c

08001370 <AUDIO_IO_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8001370:	f002 bafa 	b.w	8003968 <HAL_Delay>

08001374 <CAMERA_IO_Init>:
  * @brief  Initializes Camera low level.
  * @retval None
  */
void CAMERA_IO_Init(void) 
{
  I2Cx_Init(&hI2cExtHandler);
 8001374:	4801      	ldr	r0, [pc, #4]	@ (800137c <CAMERA_IO_Init+0x8>)
 8001376:	f7ff be65 	b.w	8001044 <I2Cx_Init>
 800137a:	bf00      	nop
 800137c:	20000660 	.word	0x20000660

08001380 <EEPROM_IO_Init>:

/**
  * @brief  Initializes peripherals used by the I2C EEPROM driver.
  * @retval None
  */
void EEPROM_IO_Init(void)
 8001380:	f7ff bff8 	b.w	8001374 <CAMERA_IO_Init>

08001384 <EEPROM_IO_WriteData>:
  * @param  BufferSize: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef EEPROM_IO_WriteData(uint16_t DevAddress, uint16_t MemAddress, uint8_t* pBuffer, uint32_t BufferSize)
{
  return (I2Cx_WriteMultiple(&hI2cExtHandler, DevAddress, MemAddress, I2C_MEMADD_SIZE_16BIT, pBuffer, BufferSize));
 8001384:	b29b      	uxth	r3, r3
{
 8001386:	b507      	push	{r0, r1, r2, lr}
  return (I2Cx_WriteMultiple(&hI2cExtHandler, DevAddress, MemAddress, I2C_MEMADD_SIZE_16BIT, pBuffer, BufferSize));
 8001388:	e9cd 2300 	strd	r2, r3, [sp]
 800138c:	460a      	mov	r2, r1
 800138e:	2302      	movs	r3, #2
 8001390:	b2c1      	uxtb	r1, r0
 8001392:	4803      	ldr	r0, [pc, #12]	@ (80013a0 <EEPROM_IO_WriteData+0x1c>)
 8001394:	f7ff ff04 	bl	80011a0 <I2Cx_WriteMultiple>
}
 8001398:	b003      	add	sp, #12
 800139a:	f85d fb04 	ldr.w	pc, [sp], #4
 800139e:	bf00      	nop
 80013a0:	20000660 	.word	0x20000660

080013a4 <EEPROM_IO_ReadData>:
  * @param  BufferSize: Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef EEPROM_IO_ReadData(uint16_t DevAddress, uint16_t MemAddress, uint8_t* pBuffer, uint32_t BufferSize)
{
  return (I2Cx_ReadMultiple(&hI2cExtHandler, DevAddress, MemAddress, I2C_MEMADD_SIZE_16BIT, pBuffer, BufferSize));
 80013a4:	b29b      	uxth	r3, r3
{
 80013a6:	b507      	push	{r0, r1, r2, lr}
  return (I2Cx_ReadMultiple(&hI2cExtHandler, DevAddress, MemAddress, I2C_MEMADD_SIZE_16BIT, pBuffer, BufferSize));
 80013a8:	e9cd 2300 	strd	r2, r3, [sp]
 80013ac:	460a      	mov	r2, r1
 80013ae:	2302      	movs	r3, #2
 80013b0:	b2c1      	uxtb	r1, r0
 80013b2:	4803      	ldr	r0, [pc, #12]	@ (80013c0 <EEPROM_IO_ReadData+0x1c>)
 80013b4:	f7ff ff0c 	bl	80011d0 <I2Cx_ReadMultiple>
}
 80013b8:	b003      	add	sp, #12
 80013ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80013be:	bf00      	nop
 80013c0:	20000660 	.word	0x20000660

080013c4 <EEPROM_IO_IsDeviceReady>:
  * @param  DevAddress: Target device address
  * @param  Trials: Number of trials
  * @retval HAL status
  */
HAL_StatusTypeDef EEPROM_IO_IsDeviceReady(uint16_t DevAddress, uint32_t Trials)
{ 
 80013c4:	460a      	mov	r2, r1
  return (HAL_I2C_IsDeviceReady(i2c_handler, DevAddress, Trials, 1000));
 80013c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013ca:	4601      	mov	r1, r0
 80013cc:	4801      	ldr	r0, [pc, #4]	@ (80013d4 <EEPROM_IO_IsDeviceReady+0x10>)
 80013ce:	f003 bc61 	b.w	8004c94 <HAL_I2C_IsDeviceReady>
 80013d2:	bf00      	nop
 80013d4:	20000660 	.word	0x20000660

080013d8 <TS_IO_Init>:

/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
 80013d8:	f7ff bf96 	b.w	8001308 <AUDIO_IO_Init>

080013dc <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80013dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80013de:	f88d 200f 	strb.w	r2, [sp, #15]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80013e2:	f10d 020f 	add.w	r2, sp, #15
 80013e6:	2301      	movs	r3, #1
 80013e8:	9200      	str	r2, [sp, #0]
 80013ea:	460a      	mov	r2, r1
 80013ec:	4601      	mov	r1, r0
 80013ee:	9301      	str	r3, [sp, #4]
 80013f0:	4802      	ldr	r0, [pc, #8]	@ (80013fc <TS_IO_Write+0x20>)
 80013f2:	f7ff fed5 	bl	80011a0 <I2Cx_WriteMultiple>
}
 80013f6:	b005      	add	sp, #20
 80013f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80013fc:	2000060c 	.word	0x2000060c

08001400 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t read_value = 0;
 8001402:	2300      	movs	r3, #0
{
 8001404:	460a      	mov	r2, r1

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001406:	f10d 010f 	add.w	r1, sp, #15
  uint8_t read_value = 0;
 800140a:	f88d 300f 	strb.w	r3, [sp, #15]
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800140e:	2301      	movs	r3, #1
 8001410:	9100      	str	r1, [sp, #0]
 8001412:	4601      	mov	r1, r0
 8001414:	9301      	str	r3, [sp, #4]
 8001416:	4804      	ldr	r0, [pc, #16]	@ (8001428 <TS_IO_Read+0x28>)
 8001418:	f7ff feda 	bl	80011d0 <I2Cx_ReadMultiple>

  return read_value;
}
 800141c:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8001420:	b005      	add	sp, #20
 8001422:	f85d fb04 	ldr.w	pc, [sp], #4
 8001426:	bf00      	nop
 8001428:	2000060c 	.word	0x2000060c

0800142c <TS_IO_Delay>:
/**
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
 800142c:	f002 ba9c 	b.w	8003968 <HAL_Delay>

08001430 <SAIx_Out_DeInit>:
  * @retval None
  */
static void SAIx_Out_DeInit(void)
{
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001430:	4b04      	ldr	r3, [pc, #16]	@ (8001444 <SAIx_Out_DeInit+0x14>)

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001432:	4a05      	ldr	r2, [pc, #20]	@ (8001448 <SAIx_Out_DeInit+0x18>)
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001434:	4805      	ldr	r0, [pc, #20]	@ (800144c <SAIx_Out_DeInit+0x1c>)
 8001436:	6003      	str	r3, [r0, #0]
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001438:	6853      	ldr	r3, [r2, #4]
 800143a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800143e:	6053      	str	r3, [r2, #4]

  HAL_SAI_DeInit(&haudio_out_sai);
 8001440:	f005 b827 	b.w	8006492 <HAL_SAI_DeInit>
 8001444:	40015c04 	.word	0x40015c04
 8001448:	40015c00 	.word	0x40015c00
 800144c:	200006b4 	.word	0x200006b4

08001450 <SAIx_In_DeInit>:
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8001450:	4b05      	ldr	r3, [pc, #20]	@ (8001468 <SAIx_In_DeInit+0x18>)

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8001452:	4a06      	ldr	r2, [pc, #24]	@ (800146c <SAIx_In_DeInit+0x1c>)
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8001454:	4806      	ldr	r0, [pc, #24]	@ (8001470 <SAIx_In_DeInit+0x20>)
 8001456:	f840 3f84 	str.w	r3, [r0, #132]!
  __HAL_SAI_DISABLE(&haudio_in_sai);
 800145a:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 800145c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001460:	6253      	str	r3, [r2, #36]	@ 0x24

  HAL_SAI_DeInit(&haudio_in_sai);
 8001462:	f005 b816 	b.w	8006492 <HAL_SAI_DeInit>
 8001466:	bf00      	nop
 8001468:	40015c24 	.word	0x40015c24
 800146c:	40015c00 	.word	0x40015c00
 8001470:	200006b4 	.word	0x200006b4

08001474 <SAIx_In_Init>:
{
 8001474:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001478:	4b35      	ldr	r3, [pc, #212]	@ (8001550 <SAIx_In_Init+0xdc>)
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 800147a:	2500      	movs	r5, #0
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800147c:	4c35      	ldr	r4, [pc, #212]	@ (8001554 <SAIx_In_Init+0xe0>)
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 800147e:	2601      	movs	r6, #1
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001480:	f8df 80d8 	ldr.w	r8, [pc, #216]	@ 800155c <SAIx_In_Init+0xe8>
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001484:	f44f 3b80 	mov.w	fp, #65536	@ 0x10000
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001488:	6023      	str	r3, [r4, #0]
{
 800148a:	4617      	mov	r7, r2
  __HAL_SAI_DISABLE(&haudio_out_sai);
 800148c:	f8d8 3004 	ldr.w	r3, [r8, #4]
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001490:	f44f 2a80 	mov.w	sl, #262144	@ 0x40000
  haudio_out_sai.SlotInit.SlotNumber = 4;
 8001494:	f04f 0904 	mov.w	r9, #4
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001498:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800149c:	f8c8 3004 	str.w	r3, [r8, #4]
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 80014a0:	2380      	movs	r3, #128	@ 0x80
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 80014a2:	61e2      	str	r2, [r4, #28]
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 80014a4:	2240      	movs	r2, #64	@ 0x40
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 80014a6:	6060      	str	r0, [r4, #4]
  HAL_SAI_Init(&haudio_out_sai);
 80014a8:	4620      	mov	r0, r4
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 80014aa:	9101      	str	r1, [sp, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 80014ac:	6165      	str	r5, [r4, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 80014ae:	6325      	str	r5, [r4, #48]	@ 0x30
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 80014b0:	63e6      	str	r6, [r4, #60]	@ 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 80014b2:	60a5      	str	r5, [r4, #8]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80014b4:	61a6      	str	r6, [r4, #24]
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80014b6:	65a5      	str	r5, [r4, #88]	@ 0x58
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80014b8:	e9c4 350d 	strd	r3, r5, [r4, #52]	@ 0x34
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 80014bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014c0:	6123      	str	r3, [r4, #16]
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 80014c2:	2320      	movs	r3, #32
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 80014c4:	e9c4 9117 	strd	r9, r1, [r4, #92]	@ 0x5c
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 80014c8:	e9c4 2310 	strd	r2, r3, [r4, #64]	@ 0x40
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80014cc:	e9c4 b512 	strd	fp, r5, [r4, #72]	@ 0x48
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 80014d0:	e9c4 a514 	strd	sl, r5, [r4, #80]	@ 0x50
  HAL_SAI_Init(&haudio_out_sai);
 80014d4:	f004 ff00 	bl	80062d8 <HAL_SAI_Init>
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80014d8:	481f      	ldr	r0, [pc, #124]	@ (8001558 <SAIx_In_Init+0xe4>)
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 80014da:	2380      	movs	r3, #128	@ 0x80
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 80014dc:	2240      	movs	r2, #64	@ 0x40
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80014de:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
  __HAL_SAI_DISABLE(&haudio_in_sai);
 80014e2:	f8d8 0024 	ldr.w	r0, [r8, #36]	@ 0x24
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 80014e6:	9901      	ldr	r1, [sp, #4]
  __HAL_SAI_DISABLE(&haudio_in_sai);
 80014e8:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 80014ec:	f8c8 0024 	str.w	r0, [r8, #36]	@ 0x24
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 80014f0:	2003      	movs	r0, #3
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 80014f2:	f8c4 70a0 	str.w	r7, [r4, #160]	@ 0xa0
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 80014f6:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
  HAL_SAI_Init(&haudio_in_sai);
 80014fa:	f104 0084 	add.w	r0, r4, #132	@ 0x84
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 80014fe:	f8c4 5098 	str.w	r5, [r4, #152]	@ 0x98
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8001502:	f8c4 50b4 	str.w	r5, [r4, #180]	@ 0xb4
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8001506:	f8c4 60c0 	str.w	r6, [r4, #192]	@ 0xc0
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 800150a:	f8c4 608c 	str.w	r6, [r4, #140]	@ 0x8c
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 800150e:	f8c4 5094 	str.w	r5, [r4, #148]	@ 0x94
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001512:	f8c4 609c 	str.w	r6, [r4, #156]	@ 0x9c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 8001516:	f8c4 10e4 	str.w	r1, [r4, #228]	@ 0xe4
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800151a:	e9c4 352e 	strd	r3, r5, [r4, #184]	@ 0xb8
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 800151e:	2320      	movs	r3, #32
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001520:	e9c4 b533 	strd	fp, r5, [r4, #204]	@ 0xcc
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8001524:	e9c4 2331 	strd	r2, r3, [r4, #196]	@ 0xc4
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8001528:	e9c4 a535 	strd	sl, r5, [r4, #212]	@ 0xd4
  haudio_in_sai.SlotInit.SlotNumber = 4;
 800152c:	e9c4 5937 	strd	r5, r9, [r4, #220]	@ 0xdc
  HAL_SAI_Init(&haudio_in_sai);
 8001530:	f004 fed2 	bl	80062d8 <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8001534:	6822      	ldr	r2, [r4, #0]
 8001536:	6813      	ldr	r3, [r2, #0]
 8001538:	ea43 030b 	orr.w	r3, r3, fp
 800153c:	6013      	str	r3, [r2, #0]
  __HAL_SAI_ENABLE(&haudio_in_sai);
 800153e:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 8001542:	6813      	ldr	r3, [r2, #0]
 8001544:	ea43 030b 	orr.w	r3, r3, fp
 8001548:	6013      	str	r3, [r2, #0]
}
 800154a:	b003      	add	sp, #12
 800154c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001550:	40015c04 	.word	0x40015c04
 8001554:	200006b4 	.word	0x200006b4
 8001558:	40015c24 	.word	0x40015c24
 800155c:	40015c00 	.word	0x40015c00

08001560 <BSP_AUDIO_OUT_Play>:
{
 8001560:	b538      	push	{r3, r4, r5, lr}
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8001562:	4b0d      	ldr	r3, [pc, #52]	@ (8001598 <BSP_AUDIO_OUT_Play+0x38>)
{
 8001564:	4605      	mov	r5, r0
 8001566:	460c      	mov	r4, r1
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 8001568:	b28a      	uxth	r2, r1
 800156a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800156e:	4601      	mov	r1, r0
 8001570:	2034      	movs	r0, #52	@ 0x34
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	4798      	blx	r3
 8001576:	b960      	cbnz	r0, 8001592 <BSP_AUDIO_OUT_Play+0x32>
    HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, DMA_MAX(Size / AUDIODATA_SIZE));
 8001578:	f5b4 3f00 	cmp.w	r4, #131072	@ 0x20000
 800157c:	4629      	mov	r1, r5
 800157e:	4806      	ldr	r0, [pc, #24]	@ (8001598 <BSP_AUDIO_OUT_Play+0x38>)
 8001580:	bf34      	ite	cc
 8001582:	f3c4 024f 	ubfxcc	r2, r4, #1, #16
 8001586:	f64f 72ff 	movwcs	r2, #65535	@ 0xffff
 800158a:	f005 f811 	bl	80065b0 <HAL_SAI_Transmit_DMA>
    return AUDIO_OK;
 800158e:	2000      	movs	r0, #0
}
 8001590:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 8001592:	2001      	movs	r0, #1
 8001594:	e7fc      	b.n	8001590 <BSP_AUDIO_OUT_Play+0x30>
 8001596:	bf00      	nop
 8001598:	200006b4 	.word	0x200006b4

0800159c <BSP_AUDIO_OUT_Pause>:
{    
 800159c:	b538      	push	{r3, r4, r5, lr}
  if(audio_drv->Pause(AUDIO_I2C_ADDRESS) != 0)
 800159e:	4d07      	ldr	r5, [pc, #28]	@ (80015bc <BSP_AUDIO_OUT_Pause+0x20>)
 80015a0:	2034      	movs	r0, #52	@ 0x34
 80015a2:	f8d5 3108 	ldr.w	r3, [r5, #264]	@ 0x108
 80015a6:	691b      	ldr	r3, [r3, #16]
 80015a8:	4798      	blx	r3
 80015aa:	4604      	mov	r4, r0
 80015ac:	b920      	cbnz	r0, 80015b8 <BSP_AUDIO_OUT_Pause+0x1c>
    HAL_SAI_DMAPause(&haudio_out_sai);
 80015ae:	4628      	mov	r0, r5
 80015b0:	f004 ff8d 	bl	80064ce <HAL_SAI_DMAPause>
    return AUDIO_OK;
 80015b4:	4620      	mov	r0, r4
}
 80015b6:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 80015b8:	2001      	movs	r0, #1
 80015ba:	e7fc      	b.n	80015b6 <BSP_AUDIO_OUT_Pause+0x1a>
 80015bc:	200006b4 	.word	0x200006b4

080015c0 <BSP_AUDIO_OUT_Resume>:
{    
 80015c0:	b538      	push	{r3, r4, r5, lr}
  if(audio_drv->Resume(AUDIO_I2C_ADDRESS) != 0)
 80015c2:	4d07      	ldr	r5, [pc, #28]	@ (80015e0 <BSP_AUDIO_OUT_Resume+0x20>)
 80015c4:	2034      	movs	r0, #52	@ 0x34
 80015c6:	f8d5 3108 	ldr.w	r3, [r5, #264]	@ 0x108
 80015ca:	695b      	ldr	r3, [r3, #20]
 80015cc:	4798      	blx	r3
 80015ce:	4604      	mov	r4, r0
 80015d0:	b920      	cbnz	r0, 80015dc <BSP_AUDIO_OUT_Resume+0x1c>
    HAL_SAI_DMAResume(&haudio_out_sai);
 80015d2:	4628      	mov	r0, r5
 80015d4:	f004 ff8b 	bl	80064ee <HAL_SAI_DMAResume>
    return AUDIO_OK;
 80015d8:	4620      	mov	r0, r4
}
 80015da:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 80015dc:	2001      	movs	r0, #1
 80015de:	e7fc      	b.n	80015da <BSP_AUDIO_OUT_Resume+0x1a>
 80015e0:	200006b4 	.word	0x200006b4

080015e4 <BSP_AUDIO_OUT_Stop>:
{
 80015e4:	b538      	push	{r3, r4, r5, lr}
  HAL_SAI_DMAStop(&haudio_out_sai);
 80015e6:	4d0a      	ldr	r5, [pc, #40]	@ (8001610 <BSP_AUDIO_OUT_Stop+0x2c>)
{
 80015e8:	4604      	mov	r4, r0
  HAL_SAI_DMAStop(&haudio_out_sai);
 80015ea:	4628      	mov	r0, r5
 80015ec:	f004 ff96 	bl	800651c <HAL_SAI_DMAStop>
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 80015f0:	f8d5 3108 	ldr.w	r3, [r5, #264]	@ 0x108
 80015f4:	4621      	mov	r1, r4
 80015f6:	2034      	movs	r0, #52	@ 0x34
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	4798      	blx	r3
 80015fc:	b930      	cbnz	r0, 800160c <BSP_AUDIO_OUT_Stop+0x28>
    if(Option == CODEC_PDWN_HW)
 80015fe:	2c01      	cmp	r4, #1
 8001600:	d102      	bne.n	8001608 <BSP_AUDIO_OUT_Stop+0x24>
      HAL_Delay(1);
 8001602:	4620      	mov	r0, r4
 8001604:	f002 f9b0 	bl	8003968 <HAL_Delay>
    return AUDIO_OK;
 8001608:	2000      	movs	r0, #0
}
 800160a:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 800160c:	2001      	movs	r0, #1
 800160e:	e7fc      	b.n	800160a <BSP_AUDIO_OUT_Stop+0x26>
 8001610:	200006b4 	.word	0x200006b4

08001614 <BSP_AUDIO_OUT_SetVolume>:
{
 8001614:	b508      	push	{r3, lr}
  if(audio_drv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 8001616:	4b05      	ldr	r3, [pc, #20]	@ (800162c <BSP_AUDIO_OUT_SetVolume+0x18>)
{
 8001618:	4601      	mov	r1, r0
  if(audio_drv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 800161a:	2034      	movs	r0, #52	@ 0x34
 800161c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001620:	6a1b      	ldr	r3, [r3, #32]
 8001622:	4798      	blx	r3
}
 8001624:	3800      	subs	r0, #0
 8001626:	bf18      	it	ne
 8001628:	2001      	movne	r0, #1
 800162a:	bd08      	pop	{r3, pc}
 800162c:	200006b4 	.word	0x200006b4

08001630 <BSP_AUDIO_OUT_SetAudioFrameSlot>:
{ 
 8001630:	b510      	push	{r4, lr}
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001632:	4c08      	ldr	r4, [pc, #32]	@ (8001654 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x24>)
 8001634:	6822      	ldr	r2, [r4, #0]
 8001636:	6813      	ldr	r3, [r2, #0]
 8001638:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800163c:	6013      	str	r3, [r2, #0]
  haudio_out_sai.SlotInit.SlotActive = AudioFrameSlot;
 800163e:	6620      	str	r0, [r4, #96]	@ 0x60
  HAL_SAI_Init(&haudio_out_sai);
 8001640:	4620      	mov	r0, r4
 8001642:	f004 fe49 	bl	80062d8 <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8001646:	6822      	ldr	r2, [r4, #0]
 8001648:	6813      	ldr	r3, [r2, #0]
 800164a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800164e:	6013      	str	r3, [r2, #0]
}
 8001650:	bd10      	pop	{r4, pc}
 8001652:	bf00      	nop
 8001654:	200006b4 	.word	0x200006b4

08001658 <HAL_SAI_TxCpltCallback>:
{
 8001658:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 800165a:	f006 fedf 	bl	800841c <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 800165e:	bd08      	pop	{r3, pc}

08001660 <HAL_SAI_TxHalfCpltCallback>:
{
 8001660:	b508      	push	{r3, lr}
  BSP_AUDIO_OUT_HalfTransfer_CallBack();
 8001662:	f006 fee5 	bl	8008430 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 8001666:	bd08      	pop	{r3, pc}

08001668 <BSP_AUDIO_OUT_MspInit>:
{ 
 8001668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  AUDIO_OUT_SAIx_CLK_ENABLE();
 800166c:	4c4d      	ldr	r4, [pc, #308]	@ (80017a4 <BSP_AUDIO_OUT_MspInit+0x13c>)
{ 
 800166e:	b08a      	sub	sp, #40	@ 0x28
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001670:	f04f 0902 	mov.w	r9, #2
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001674:	2500      	movs	r5, #0
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8001676:	6c63      	ldr	r3, [r4, #68]	@ 0x44
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001678:	2703      	movs	r7, #3
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 800167a:	f04f 080a 	mov.w	r8, #10
{ 
 800167e:	4606      	mov	r6, r0
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8001680:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8001684:	a905      	add	r1, sp, #20
 8001686:	4848      	ldr	r0, [pc, #288]	@ (80017a8 <BSP_AUDIO_OUT_MspInit+0x140>)
  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 8001688:	f04f 0a40 	mov.w	sl, #64	@ 0x40
  AUDIO_OUT_SAIx_CLK_ENABLE();
 800168c:	6463      	str	r3, [r4, #68]	@ 0x44
 800168e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001690:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	9b00      	ldr	r3, [sp, #0]
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 8001698:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800169a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800169e:	6323      	str	r3, [r4, #48]	@ 0x30
 80016a0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80016a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016a6:	9301      	str	r3, [sp, #4]
 80016a8:	9b01      	ldr	r3, [sp, #4]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 80016aa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80016ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016b0:	6323      	str	r3, [r4, #48]	@ 0x30
 80016b2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80016b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016b8:	9302      	str	r3, [sp, #8]
 80016ba:	9b02      	ldr	r3, [sp, #8]
  AUDIO_OUT_SAIx_FS_ENABLE();
 80016bc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80016be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016c2:	6323      	str	r3, [r4, #48]	@ 0x30
 80016c4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 80016c6:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
  AUDIO_OUT_SAIx_FS_ENABLE();
 80016ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016ce:	9303      	str	r3, [sp, #12]
 80016d0:	9b03      	ldr	r3, [sp, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80016d2:	2380      	movs	r3, #128	@ 0x80
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80016d4:	e9cd 5707 	strd	r5, r7, [sp, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80016d8:	e9cd 3905 	strd	r3, r9, [sp, #20]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 80016dc:	f002 fde8 	bl	80042b0 <HAL_GPIO_Init>
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 80016e0:	2320      	movs	r3, #32
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 80016e2:	a905      	add	r1, sp, #20
 80016e4:	4830      	ldr	r0, [pc, #192]	@ (80017a8 <BSP_AUDIO_OUT_MspInit+0x140>)
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 80016e6:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80016ea:	e9cd 3905 	strd	r3, r9, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80016ee:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 80016f2:	f002 fddd 	bl	80042b0 <HAL_GPIO_Init>
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 80016f6:	a905      	add	r1, sp, #20
 80016f8:	482b      	ldr	r0, [pc, #172]	@ (80017a8 <BSP_AUDIO_OUT_MspInit+0x140>)
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 80016fa:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80016fe:	e9cd a905 	strd	sl, r9, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001702:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8001706:	f002 fdd3 	bl	80042b0 <HAL_GPIO_Init>
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 800170a:	2310      	movs	r3, #16
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 800170c:	a905      	add	r1, sp, #20
 800170e:	4826      	ldr	r0, [pc, #152]	@ (80017a8 <BSP_AUDIO_OUT_MspInit+0x140>)
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8001710:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001714:	e9cd 3905 	strd	r3, r9, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001718:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 800171c:	f002 fdc8 	bl	80042b0 <HAL_GPIO_Init>
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8001720:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8001722:	6832      	ldr	r2, [r6, #0]
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8001724:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001728:	6323      	str	r3, [r4, #48]	@ 0x30
 800172a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800172c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001730:	9304      	str	r3, [sp, #16]
 8001732:	9b04      	ldr	r3, [sp, #16]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8001734:	4b1d      	ldr	r3, [pc, #116]	@ (80017ac <BSP_AUDIO_OUT_MspInit+0x144>)
 8001736:	429a      	cmp	r2, r3
 8001738:	d129      	bne.n	800178e <BSP_AUDIO_OUT_MspInit+0x126>
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 800173a:	4b1d      	ldr	r3, [pc, #116]	@ (80017b0 <BSP_AUDIO_OUT_MspInit+0x148>)
 800173c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8001740:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8001744:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8001748:	f44f 3400 	mov.w	r4, #131072	@ 0x20000
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800174c:	f8c3 5118 	str.w	r5, [r3, #280]	@ 0x118
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001750:	f8c3 513c 	str.w	r5, [r3, #316]	@ 0x13c
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8001754:	f8c3 6144 	str.w	r6, [r3, #324]	@ 0x144
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8001758:	e9c3 2a44 	strd	r2, sl, [r3, #272]	@ 0x110
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 800175c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001760:	e9c3 1247 	strd	r1, r2, [r3, #284]	@ 0x11c
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8001764:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001768:	e9c3 0249 	strd	r0, r2, [r3, #292]	@ 0x124
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 800176c:	2204      	movs	r2, #4
 800176e:	e9c3 424b 	strd	r4, r2, [r3, #300]	@ 0x12c
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8001772:	f503 7486 	add.w	r4, r3, #268	@ 0x10c
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 8001776:	4a0f      	ldr	r2, [pc, #60]	@ (80017b4 <BSP_AUDIO_OUT_MspInit+0x14c>)
    HAL_DMA_DeInit(&hdma_sai_tx);
 8001778:	4620      	mov	r0, r4
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 800177a:	66f4      	str	r4, [r6, #108]	@ 0x6c
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 800177c:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001780:	e9c3 754d 	strd	r7, r5, [r3, #308]	@ 0x134
    HAL_DMA_DeInit(&hdma_sai_tx);
 8001784:	f002 fa58 	bl	8003c38 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_sai_tx);      
 8001788:	4620      	mov	r0, r4
 800178a:	f002 f9d7 	bl	8003b3c <HAL_DMA_Init>
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 800178e:	2200      	movs	r2, #0
 8001790:	210e      	movs	r1, #14
 8001792:	203c      	movs	r0, #60	@ 0x3c
 8001794:	f002 f90c 	bl	80039b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 8001798:	203c      	movs	r0, #60	@ 0x3c
 800179a:	f002 f93b 	bl	8003a14 <HAL_NVIC_EnableIRQ>
}
 800179e:	b00a      	add	sp, #40	@ 0x28
 80017a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017a4:	40023800 	.word	0x40023800
 80017a8:	40022000 	.word	0x40022000
 80017ac:	40015c04 	.word	0x40015c04
 80017b0:	200006b4 	.word	0x200006b4
 80017b4:	40026470 	.word	0x40026470

080017b8 <BSP_AUDIO_OUT_MspDeInit>:
{
 80017b8:	b510      	push	{r4, lr}
 80017ba:	4604      	mov	r4, r0
    HAL_NVIC_DisableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 80017bc:	203c      	movs	r0, #60	@ 0x3c
 80017be:	f002 f937 	bl	8003a30 <HAL_NVIC_DisableIRQ>
    if(hsai->Instance == AUDIO_OUT_SAIx)
 80017c2:	4b11      	ldr	r3, [pc, #68]	@ (8001808 <BSP_AUDIO_OUT_MspDeInit+0x50>)
 80017c4:	6822      	ldr	r2, [r4, #0]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d102      	bne.n	80017d0 <BSP_AUDIO_OUT_MspDeInit+0x18>
      HAL_DMA_DeInit(hsai->hdmatx);
 80017ca:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 80017cc:	f002 fa34 	bl	8003c38 <HAL_DMA_DeInit>
    __HAL_SAI_DISABLE(hsai);  
 80017d0:	6822      	ldr	r2, [r4, #0]
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_FS_GPIO_PORT, gpio_init_structure.Pin);
 80017d2:	2180      	movs	r1, #128	@ 0x80
 80017d4:	480d      	ldr	r0, [pc, #52]	@ (800180c <BSP_AUDIO_OUT_MspDeInit+0x54>)
    __HAL_SAI_DISABLE(hsai);  
 80017d6:	6813      	ldr	r3, [r2, #0]
 80017d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017dc:	6013      	str	r3, [r2, #0]
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_FS_GPIO_PORT, gpio_init_structure.Pin);
 80017de:	f002 fe4b 	bl	8004478 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, gpio_init_structure.Pin);
 80017e2:	2120      	movs	r1, #32
 80017e4:	4809      	ldr	r0, [pc, #36]	@ (800180c <BSP_AUDIO_OUT_MspDeInit+0x54>)
 80017e6:	f002 fe47 	bl	8004478 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, gpio_init_structure.Pin);
 80017ea:	2140      	movs	r1, #64	@ 0x40
 80017ec:	4807      	ldr	r0, [pc, #28]	@ (800180c <BSP_AUDIO_OUT_MspDeInit+0x54>)
 80017ee:	f002 fe43 	bl	8004478 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, gpio_init_structure.Pin);
 80017f2:	2110      	movs	r1, #16
 80017f4:	4805      	ldr	r0, [pc, #20]	@ (800180c <BSP_AUDIO_OUT_MspDeInit+0x54>)
 80017f6:	f002 fe3f 	bl	8004478 <HAL_GPIO_DeInit>
    AUDIO_OUT_SAIx_CLK_DISABLE();
 80017fa:	4a05      	ldr	r2, [pc, #20]	@ (8001810 <BSP_AUDIO_OUT_MspDeInit+0x58>)
 80017fc:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 80017fe:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001802:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8001804:	bd10      	pop	{r4, pc}
 8001806:	bf00      	nop
 8001808:	40015c04 	.word	0x40015c04
 800180c:	40022000 	.word	0x40022000
 8001810:	40023800 	.word	0x40023800

08001814 <BSP_AUDIO_OUT_DeInit>:
{
 8001814:	b508      	push	{r3, lr}
  SAIx_Out_DeInit();
 8001816:	f7ff fe0b 	bl	8001430 <SAIx_Out_DeInit>
  BSP_AUDIO_OUT_MspDeInit(&haudio_out_sai, NULL);
 800181a:	2100      	movs	r1, #0
 800181c:	4801      	ldr	r0, [pc, #4]	@ (8001824 <BSP_AUDIO_OUT_DeInit+0x10>)
 800181e:	f7ff ffcb 	bl	80017b8 <BSP_AUDIO_OUT_MspDeInit>
}
 8001822:	bd08      	pop	{r3, pc}
 8001824:	200006b4 	.word	0x200006b4

08001828 <BSP_AUDIO_OUT_ClockConfig>:
{ 
 8001828:	b510      	push	{r4, lr}
 800182a:	b0a2      	sub	sp, #136	@ 0x88
 800182c:	460c      	mov	r4, r1
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 800182e:	a801      	add	r0, sp, #4
 8001830:	f004 fc0a 	bl	8006048 <HAL_RCCEx_GetPeriphCLKConfig>
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 8001834:	f642 3311 	movw	r3, #11025	@ 0x2b11
 8001838:	429c      	cmp	r4, r3
 800183a:	d007      	beq.n	800184c <BSP_AUDIO_OUT_ClockConfig+0x24>
 800183c:	f245 6322 	movw	r3, #22050	@ 0x5622
 8001840:	429c      	cmp	r4, r3
 8001842:	d003      	beq.n	800184c <BSP_AUDIO_OUT_ClockConfig+0x24>
 8001844:	f64a 4344 	movw	r3, #44100	@ 0xac44
 8001848:	429c      	cmp	r4, r3
 800184a:	d111      	bne.n	8001870 <BSP_AUDIO_OUT_ClockConfig+0x48>
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 800184c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001850:	9301      	str	r3, [sp, #4]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8001852:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001856:	9311      	str	r3, [sp, #68]	@ 0x44
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8001858:	f240 13ad 	movw	r3, #429	@ 0x1ad
 800185c:	9302      	str	r3, [sp, #8]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 800185e:	2302      	movs	r3, #2
 8001860:	9304      	str	r3, [sp, #16]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 8001862:	2313      	movs	r3, #19
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001864:	a801      	add	r0, sp, #4
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8001866:	930a      	str	r3, [sp, #40]	@ 0x28
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8001868:	f004 f964 	bl	8005b34 <HAL_RCCEx_PeriphCLKConfig>
}
 800186c:	b022      	add	sp, #136	@ 0x88
 800186e:	bd10      	pop	{r4, pc}
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8001870:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001874:	9301      	str	r3, [sp, #4]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8001876:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800187a:	9311      	str	r3, [sp, #68]	@ 0x44
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 800187c:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 8001880:	9302      	str	r3, [sp, #8]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 8001882:	2307      	movs	r3, #7
 8001884:	9304      	str	r3, [sp, #16]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8001886:	2301      	movs	r3, #1
 8001888:	e7ec      	b.n	8001864 <BSP_AUDIO_OUT_ClockConfig+0x3c>
	...

0800188c <BSP_AUDIO_OUT_Init>:
{ 
 800188c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001890:	4617      	mov	r7, r2
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 8001892:	4c2f      	ldr	r4, [pc, #188]	@ (8001950 <BSP_AUDIO_OUT_Init+0xc4>)
{ 
 8001894:	4681      	mov	r9, r0
 8001896:	468a      	mov	sl, r1
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001898:	4d2e      	ldr	r5, [pc, #184]	@ (8001954 <BSP_AUDIO_OUT_Init+0xc8>)
  SAIx_Out_DeInit();
 800189a:	f7ff fdc9 	bl	8001430 <SAIx_Out_DeInit>
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 800189e:	4639      	mov	r1, r7
 80018a0:	2200      	movs	r2, #0
 80018a2:	4620      	mov	r0, r4
 80018a4:	f7ff ffc0 	bl	8001828 <BSP_AUDIO_OUT_ClockConfig>
  if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 80018a8:	4620      	mov	r0, r4
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80018aa:	6025      	str	r5, [r4, #0]
  if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 80018ac:	f004 ff9c 	bl	80067e8 <HAL_SAI_GetState>
 80018b0:	4601      	mov	r1, r0
 80018b2:	b910      	cbnz	r0, 80018ba <BSP_AUDIO_OUT_Init+0x2e>
    BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 80018b4:	4620      	mov	r0, r4
 80018b6:	f7ff fed7 	bl	8001668 <BSP_AUDIO_OUT_MspInit>
  __HAL_SAI_DISABLE(&haudio_out_sai);
 80018ba:	4a27      	ldr	r2, [pc, #156]	@ (8001958 <BSP_AUDIO_OUT_Init+0xcc>)
  haudio_out_sai.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
 80018bc:	2104      	movs	r1, #4
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80018be:	6025      	str	r5, [r4, #0]
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
 80018c0:	2500      	movs	r5, #0
  __HAL_SAI_DISABLE(&haudio_out_sai);
 80018c2:	6853      	ldr	r3, [r2, #4]
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 80018c4:	2601      	movs	r6, #1
  HAL_SAI_Init(&haudio_out_sai);
 80018c6:	4822      	ldr	r0, [pc, #136]	@ (8001950 <BSP_AUDIO_OUT_Init+0xc4>)
  __HAL_SAI_DISABLE(&haudio_out_sai);
 80018c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 80018cc:	f8df 808c 	ldr.w	r8, [pc, #140]	@ 800195c <BSP_AUDIO_OUT_Init+0xd0>
  __HAL_SAI_DISABLE(&haudio_out_sai);
 80018d0:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 80018d2:	2380      	movs	r3, #128	@ 0x80
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 80018d4:	2240      	movs	r2, #64	@ 0x40
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 80018d6:	61e7      	str	r7, [r4, #28]
  haudio_out_sai.Init.AudioMode = SAI_MODEMASTER_TX;
 80018d8:	6065      	str	r5, [r4, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 80018da:	6165      	str	r5, [r4, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 80018dc:	6325      	str	r5, [r4, #48]	@ 0x30
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 80018de:	63e6      	str	r6, [r4, #60]	@ 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 80018e0:	60a5      	str	r5, [r4, #8]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80018e2:	61a6      	str	r6, [r4, #24]
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80018e4:	65a5      	str	r5, [r4, #88]	@ 0x58
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80018e6:	e9c4 350d 	strd	r3, r5, [r4, #52]	@ 0x34
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 80018ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018ee:	6123      	str	r3, [r4, #16]
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 80018f0:	2320      	movs	r3, #32
 80018f2:	e9c4 2310 	strd	r2, r3, [r4, #64]	@ 0x40
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 80018f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80018fa:	e9c4 3512 	strd	r3, r5, [r4, #72]	@ 0x48
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80018fe:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8001902:	e9c4 3514 	strd	r3, r5, [r4, #80]	@ 0x50
  haudio_out_sai.SlotInit.SlotActive = CODEC_AUDIOFRAME_SLOT_0123;
 8001906:	230f      	movs	r3, #15
 8001908:	e9c4 1317 	strd	r1, r3, [r4, #92]	@ 0x5c
  HAL_SAI_Init(&haudio_out_sai);
 800190c:	f004 fce4 	bl	80062d8 <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8001910:	6822      	ldr	r2, [r4, #0]
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8001912:	2034      	movs	r0, #52	@ 0x34
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8001914:	6813      	ldr	r3, [r2, #0]
 8001916:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800191a:	6013      	str	r3, [r2, #0]
  deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 800191c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8001920:	4798      	blx	r3
  if((deviceid) == WM8994_ID)
 8001922:	f648 1394 	movw	r3, #35220	@ 0x8994
 8001926:	4298      	cmp	r0, r3
 8001928:	d10f      	bne.n	800194a <BSP_AUDIO_OUT_Init+0xbe>
    wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 800192a:	f8d8 302c 	ldr.w	r3, [r8, #44]	@ 0x2c
 800192e:	2034      	movs	r0, #52	@ 0x34
 8001930:	4798      	blx	r3
    audio_drv = &wm8994_drv; 
 8001932:	f8c4 8108 	str.w	r8, [r4, #264]	@ 0x108
    audio_drv->Init(AUDIO_I2C_ADDRESS, OutputDevice, Volume, AudioFreq);
 8001936:	463b      	mov	r3, r7
 8001938:	f8d8 4000 	ldr.w	r4, [r8]
 800193c:	4652      	mov	r2, sl
 800193e:	4649      	mov	r1, r9
 8001940:	2034      	movs	r0, #52	@ 0x34
 8001942:	47a0      	blx	r4
    ret = AUDIO_OK;
 8001944:	4628      	mov	r0, r5
}
 8001946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = AUDIO_ERROR;
 800194a:	4630      	mov	r0, r6
 800194c:	e7fb      	b.n	8001946 <BSP_AUDIO_OUT_Init+0xba>
 800194e:	bf00      	nop
 8001950:	200006b4 	.word	0x200006b4
 8001954:	40015c04 	.word	0x40015c04
 8001958:	40015c00 	.word	0x40015c00
 800195c:	2000002c 	.word	0x2000002c

08001960 <BSP_AUDIO_OUT_SetFrequency>:
{ 
 8001960:	b538      	push	{r3, r4, r5, lr}
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 8001962:	4c0b      	ldr	r4, [pc, #44]	@ (8001990 <BSP_AUDIO_OUT_SetFrequency+0x30>)
 8001964:	4601      	mov	r1, r0
{ 
 8001966:	4605      	mov	r5, r0
  BSP_AUDIO_OUT_ClockConfig(&haudio_out_sai, AudioFreq, NULL);
 8001968:	2200      	movs	r2, #0
 800196a:	4620      	mov	r0, r4
 800196c:	f7ff ff5c 	bl	8001828 <BSP_AUDIO_OUT_ClockConfig>
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001970:	6822      	ldr	r2, [r4, #0]
  HAL_SAI_Init(&haudio_out_sai);
 8001972:	4620      	mov	r0, r4
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8001974:	6813      	ldr	r3, [r2, #0]
 8001976:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800197a:	6013      	str	r3, [r2, #0]
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 800197c:	61e5      	str	r5, [r4, #28]
  HAL_SAI_Init(&haudio_out_sai);
 800197e:	f004 fcab 	bl	80062d8 <HAL_SAI_Init>
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8001982:	6822      	ldr	r2, [r4, #0]
 8001984:	6813      	ldr	r3, [r2, #0]
 8001986:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800198a:	6013      	str	r3, [r2, #0]
}
 800198c:	bd38      	pop	{r3, r4, r5, pc}
 800198e:	bf00      	nop
 8001990:	200006b4 	.word	0x200006b4

08001994 <BSP_AUDIO_IN_Record>:
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 8001994:	b28a      	uxth	r2, r1
 8001996:	4601      	mov	r1, r0
 8001998:	4802      	ldr	r0, [pc, #8]	@ (80019a4 <BSP_AUDIO_IN_Record+0x10>)
{
 800199a:	b508      	push	{r3, lr}
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 800199c:	f004 fe74 	bl	8006688 <HAL_SAI_Receive_DMA>
}
 80019a0:	2000      	movs	r0, #0
 80019a2:	bd08      	pop	{r3, pc}
 80019a4:	20000738 	.word	0x20000738

080019a8 <BSP_AUDIO_IN_Stop>:
{
 80019a8:	b538      	push	{r3, r4, r5, lr}
  HAL_SAI_DMAStop(&haudio_in_sai);
 80019aa:	4d0b      	ldr	r5, [pc, #44]	@ (80019d8 <BSP_AUDIO_IN_Stop+0x30>)
{
 80019ac:	4604      	mov	r4, r0
  HAL_SAI_DMAStop(&haudio_in_sai);
 80019ae:	f105 0084 	add.w	r0, r5, #132	@ 0x84
 80019b2:	f004 fdb3 	bl	800651c <HAL_SAI_DMAStop>
  if(audio_drv->Stop(AUDIO_I2C_ADDRESS, Option) != 0)
 80019b6:	f8d5 3108 	ldr.w	r3, [r5, #264]	@ 0x108
 80019ba:	4621      	mov	r1, r4
 80019bc:	2034      	movs	r0, #52	@ 0x34
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	4798      	blx	r3
 80019c2:	b930      	cbnz	r0, 80019d2 <BSP_AUDIO_IN_Stop+0x2a>
    if(Option == CODEC_PDWN_HW)
 80019c4:	2c01      	cmp	r4, #1
 80019c6:	d102      	bne.n	80019ce <BSP_AUDIO_IN_Stop+0x26>
      HAL_Delay(1);
 80019c8:	4620      	mov	r0, r4
 80019ca:	f001 ffcd 	bl	8003968 <HAL_Delay>
    return AUDIO_OK;
 80019ce:	2000      	movs	r0, #0
}
 80019d0:	bd38      	pop	{r3, r4, r5, pc}
    return AUDIO_ERROR;
 80019d2:	2001      	movs	r0, #1
 80019d4:	e7fc      	b.n	80019d0 <BSP_AUDIO_IN_Stop+0x28>
 80019d6:	bf00      	nop
 80019d8:	200006b4 	.word	0x200006b4

080019dc <HAL_SAI_RxCpltCallback>:
{
 80019dc:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_TransferComplete_CallBack();
 80019de:	f006 fe5f 	bl	80086a0 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 80019e2:	bd08      	pop	{r3, pc}

080019e4 <HAL_SAI_RxHalfCpltCallback>:
{
 80019e4:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 80019e6:	f006 fe61 	bl	80086ac <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 80019ea:	bd08      	pop	{r3, pc}

080019ec <HAL_SAI_ErrorCallback>:
{
 80019ec:	b538      	push	{r3, r4, r5, lr}
  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 80019ee:	480a      	ldr	r0, [pc, #40]	@ (8001a18 <HAL_SAI_ErrorCallback+0x2c>)
 80019f0:	f004 fefa 	bl	80067e8 <HAL_SAI_GetState>
 80019f4:	4605      	mov	r5, r0
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 80019f6:	4809      	ldr	r0, [pc, #36]	@ (8001a1c <HAL_SAI_ErrorCallback+0x30>)
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 80019f8:	f005 05ef 	and.w	r5, r5, #239	@ 0xef
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 80019fc:	f004 fef4 	bl	80067e8 <HAL_SAI_GetState>
 8001a00:	4604      	mov	r4, r0
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 8001a02:	2d02      	cmp	r5, #2
 8001a04:	d101      	bne.n	8001a0a <HAL_SAI_ErrorCallback+0x1e>
    BSP_AUDIO_OUT_Error_CallBack();
 8001a06:	f006 fd1f 	bl	8008448 <BSP_AUDIO_OUT_Error_CallBack>
  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 8001a0a:	f004 04df 	and.w	r4, r4, #223	@ 0xdf
 8001a0e:	2c02      	cmp	r4, #2
 8001a10:	d101      	bne.n	8001a16 <HAL_SAI_ErrorCallback+0x2a>
    BSP_AUDIO_IN_Error_CallBack();
 8001a12:	f006 fe51 	bl	80086b8 <BSP_AUDIO_IN_Error_CallBack>
}
 8001a16:	bd38      	pop	{r3, r4, r5, pc}
 8001a18:	200006b4 	.word	0x200006b4
 8001a1c:	20000738 	.word	0x20000738

08001a20 <BSP_AUDIO_IN_MspInit>:
{
 8001a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  AUDIO_IN_SAIx_CLK_ENABLE();
 8001a24:	4c3d      	ldr	r4, [pc, #244]	@ (8001b1c <BSP_AUDIO_IN_MspInit+0xfc>)
{
 8001a26:	b08a      	sub	sp, #40	@ 0x28
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001a28:	2702      	movs	r7, #2
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001a2a:	2500      	movs	r5, #0
  AUDIO_IN_SAIx_CLK_ENABLE();
 8001a2c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001a2e:	f44f 6880 	mov.w	r8, #1024	@ 0x400
{
 8001a32:	4606      	mov	r6, r0
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8001a34:	a905      	add	r1, sp, #20
  AUDIO_IN_SAIx_CLK_ENABLE();
 8001a36:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8001a3a:	4839      	ldr	r0, [pc, #228]	@ (8001b20 <BSP_AUDIO_IN_MspInit+0x100>)
  AUDIO_IN_SAIx_CLK_ENABLE();
 8001a3c:	6463      	str	r3, [r4, #68]	@ 0x44
 8001a3e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001a40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001a44:	9301      	str	r3, [sp, #4]
 8001a46:	9b01      	ldr	r3, [sp, #4]
  AUDIO_IN_SAIx_SD_ENABLE();
 8001a48:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001a4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a4e:	6323      	str	r3, [r4, #48]	@ 0x30
 8001a50:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a56:	9302      	str	r3, [sp, #8]
 8001a58:	9b02      	ldr	r3, [sp, #8]
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 8001a5a:	230a      	movs	r3, #10
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001a5c:	e9cd 8705 	strd	r8, r7, [sp, #20]
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 8001a60:	9309      	str	r3, [sp, #36]	@ 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001a62:	e9cd 5707 	strd	r5, r7, [sp, #28]
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8001a66:	f002 fc23 	bl	80042b0 <HAL_GPIO_Init>
  AUDIO_IN_INT_GPIO_ENABLE();
 8001a6a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8001a6c:	a905      	add	r1, sp, #20
 8001a6e:	482d      	ldr	r0, [pc, #180]	@ (8001b24 <BSP_AUDIO_IN_MspInit+0x104>)
  AUDIO_IN_INT_GPIO_ENABLE();
 8001a70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a74:	6323      	str	r3, [r4, #48]	@ 0x30
 8001a76:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001a78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a7c:	9303      	str	r3, [sp, #12]
 8001a7e:	9b03      	ldr	r3, [sp, #12]
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8001a80:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001a84:	e9cd 5707 	strd	r5, r7, [sp, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001a88:	e9cd 3505 	strd	r3, r5, [sp, #20]
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8001a8c:	f002 fc10 	bl	80042b0 <HAL_GPIO_Init>
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8001a90:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  if(hsai->Instance == AUDIO_IN_SAIx)
 8001a92:	6832      	ldr	r2, [r6, #0]
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8001a94:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a98:	6323      	str	r3, [r4, #48]	@ 0x30
 8001a9a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001a9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aa0:	9304      	str	r3, [sp, #16]
 8001aa2:	9b04      	ldr	r3, [sp, #16]
  if(hsai->Instance == AUDIO_IN_SAIx)
 8001aa4:	4b20      	ldr	r3, [pc, #128]	@ (8001b28 <BSP_AUDIO_IN_MspInit+0x108>)
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d125      	bne.n	8001af6 <BSP_AUDIO_IN_MspInit+0xd6>
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8001aaa:	4b20      	ldr	r3, [pc, #128]	@ (8001b2c <BSP_AUDIO_IN_MspInit+0x10c>)
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8001aac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ab0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8001ab4:	f44f 7080 	mov.w	r0, #256	@ 0x100
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8001ab8:	f503 74b6 	add.w	r4, r3, #364	@ 0x16c
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8001abc:	f8c3 5190 	str.w	r5, [r3, #400]	@ 0x190
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8001ac0:	f8c3 519c 	str.w	r5, [r3, #412]	@ 0x19c
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8001ac4:	6734      	str	r4, [r6, #112]	@ 0x70
 8001ac6:	f8c3 61a4 	str.w	r6, [r3, #420]	@ 0x1a4
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8001aca:	e9c3 1260 	strd	r1, r2, [r3, #384]	@ 0x180
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8001ace:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ad2:	e9c3 0262 	strd	r0, r2, [r3, #392]	@ 0x188
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001ad6:	2203      	movs	r2, #3
    HAL_DMA_DeInit(&hdma_sai_rx);
 8001ad8:	4620      	mov	r0, r4
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001ada:	e9c3 2565 	strd	r2, r5, [r3, #404]	@ 0x194
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8001ade:	4a14      	ldr	r2, [pc, #80]	@ (8001b30 <BSP_AUDIO_IN_MspInit+0x110>)
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8001ae0:	e9c3 555c 	strd	r5, r5, [r3, #368]	@ 0x170
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8001ae4:	e9c3 585e 	strd	r5, r8, [r3, #376]	@ 0x178
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8001ae8:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
    HAL_DMA_DeInit(&hdma_sai_rx);
 8001aec:	f002 f8a4 	bl	8003c38 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_sai_rx);
 8001af0:	4620      	mov	r0, r4
 8001af2:	f002 f823 	bl	8003b3c <HAL_DMA_Init>
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8001af6:	2200      	movs	r2, #0
 8001af8:	210f      	movs	r1, #15
 8001afa:	2046      	movs	r0, #70	@ 0x46
 8001afc:	f001 ff58 	bl	80039b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8001b00:	2046      	movs	r0, #70	@ 0x46
 8001b02:	f001 ff87 	bl	8003a14 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8001b06:	2200      	movs	r2, #0
 8001b08:	210f      	movs	r1, #15
 8001b0a:	2028      	movs	r0, #40	@ 0x28
 8001b0c:	f001 ff50 	bl	80039b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 8001b10:	2028      	movs	r0, #40	@ 0x28
 8001b12:	f001 ff7f 	bl	8003a14 <HAL_NVIC_EnableIRQ>
}
 8001b16:	b00a      	add	sp, #40	@ 0x28
 8001b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40021800 	.word	0x40021800
 8001b24:	40021c00 	.word	0x40021c00
 8001b28:	40015c24 	.word	0x40015c24
 8001b2c:	200006b4 	.word	0x200006b4
 8001b30:	400264b8 	.word	0x400264b8

08001b34 <BSP_AUDIO_IN_InitEx>:
{
 8001b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 8001b36:	f420 7380 	bic.w	r3, r0, #256	@ 0x100
{
 8001b3a:	4604      	mov	r4, r0
 8001b3c:	460d      	mov	r5, r1
  if ((InputDevice != INPUT_DEVICE_INPUT_LINE_1) &&       /* Only INPUT_LINE_1 and MICROPHONE_2 inputs supported */
 8001b3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b42:	d001      	beq.n	8001b48 <BSP_AUDIO_IN_InitEx+0x14>
    ret = AUDIO_ERROR;
 8001b44:	2001      	movs	r0, #1
}
 8001b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 8001b48:	4e1c      	ldr	r6, [pc, #112]	@ (8001bbc <BSP_AUDIO_IN_InitEx+0x88>)
    SAIx_In_DeInit();
 8001b4a:	f7ff fc81 	bl	8001450 <SAIx_In_DeInit>
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 8001b4e:	2200      	movs	r2, #0
 8001b50:	4629      	mov	r1, r5
 8001b52:	f106 0084 	add.w	r0, r6, #132	@ 0x84
 8001b56:	f7ff fe67 	bl	8001828 <BSP_AUDIO_OUT_ClockConfig>
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8001b5a:	4630      	mov	r0, r6
 8001b5c:	4b18      	ldr	r3, [pc, #96]	@ (8001bc0 <BSP_AUDIO_IN_InitEx+0x8c>)
 8001b5e:	f840 3f84 	str.w	r3, [r0, #132]!
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 8001b62:	f004 fe41 	bl	80067e8 <HAL_SAI_GetState>
 8001b66:	4607      	mov	r7, r0
 8001b68:	b948      	cbnz	r0, 8001b7e <BSP_AUDIO_IN_InitEx+0x4a>
      BSP_AUDIO_OUT_MspInit(&haudio_in_sai, NULL);  /* Initialize GPIOs for SAI2 block A Master signals */
 8001b6a:	4601      	mov	r1, r0
 8001b6c:	f106 0084 	add.w	r0, r6, #132	@ 0x84
 8001b70:	f7ff fd7a 	bl	8001668 <BSP_AUDIO_OUT_MspInit>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 8001b74:	4639      	mov	r1, r7
 8001b76:	f106 0084 	add.w	r0, r6, #132	@ 0x84
 8001b7a:	f7ff ff51 	bl	8001a20 <BSP_AUDIO_IN_MspInit>
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 8001b7e:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8001b82:	4f10      	ldr	r7, [pc, #64]	@ (8001bc4 <BSP_AUDIO_IN_InitEx+0x90>)
    SAIx_In_Init(SAI_MODEMASTER_RX, slot_active, AudioFreq);
 8001b84:	462a      	mov	r2, r5
 8001b86:	f04f 0001 	mov.w	r0, #1
 8001b8a:	bf0c      	ite	eq
 8001b8c:	210a      	moveq	r1, #10
 8001b8e:	2105      	movne	r1, #5
 8001b90:	f7ff fc70 	bl	8001474 <SAIx_In_Init>
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	2034      	movs	r0, #52	@ 0x34
 8001b98:	4798      	blx	r3
    if((deviceid) == WM8994_ID)
 8001b9a:	f648 1394 	movw	r3, #35220	@ 0x8994
 8001b9e:	4298      	cmp	r0, r3
 8001ba0:	d1d0      	bne.n	8001b44 <BSP_AUDIO_IN_InitEx+0x10>
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8001ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ba4:	2034      	movs	r0, #52	@ 0x34
 8001ba6:	4798      	blx	r3
      audio_drv = &wm8994_drv;
 8001ba8:	f8c6 7108 	str.w	r7, [r6, #264]	@ 0x108
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice, 100, AudioFreq);
 8001bac:	462b      	mov	r3, r5
 8001bae:	683e      	ldr	r6, [r7, #0]
 8001bb0:	2264      	movs	r2, #100	@ 0x64
 8001bb2:	4621      	mov	r1, r4
 8001bb4:	2034      	movs	r0, #52	@ 0x34
 8001bb6:	47b0      	blx	r6
      ret = AUDIO_OK;
 8001bb8:	2000      	movs	r0, #0
 8001bba:	e7c4      	b.n	8001b46 <BSP_AUDIO_IN_InitEx+0x12>
 8001bbc:	200006b4 	.word	0x200006b4
 8001bc0:	40015c24 	.word	0x40015c24
 8001bc4:	2000002c 	.word	0x2000002c

08001bc8 <BSP_AUDIO_IN_Init>:
{
 8001bc8:	4613      	mov	r3, r2
  return BSP_AUDIO_IN_InitEx(INPUT_DEVICE_DIGITAL_MICROPHONE_2, AudioFreq, BitRes, ChnlNbr); 
 8001bca:	460a      	mov	r2, r1
 8001bcc:	4601      	mov	r1, r0
 8001bce:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001bd2:	f7ff bfaf 	b.w	8001b34 <BSP_AUDIO_IN_InitEx>
	...

08001bd8 <BSP_AUDIO_IN_OUT_Init>:
  if (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2)  /* Only MICROPHONE_2 input supported */
 8001bd8:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
{
 8001bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bde:	460f      	mov	r7, r1
 8001be0:	4614      	mov	r4, r2
  if (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2)  /* Only MICROPHONE_2 input supported */
 8001be2:	d001      	beq.n	8001be8 <BSP_AUDIO_IN_OUT_Init+0x10>
    ret = AUDIO_ERROR;
 8001be4:	2001      	movs	r0, #1
}
 8001be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 8001be8:	4d1d      	ldr	r5, [pc, #116]	@ (8001c60 <BSP_AUDIO_IN_OUT_Init+0x88>)
    SAIx_In_DeInit();
 8001bea:	f7ff fc31 	bl	8001450 <SAIx_In_DeInit>
    SAIx_Out_DeInit();
 8001bee:	f7ff fc1f 	bl	8001430 <SAIx_Out_DeInit>
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 8001bf2:	4621      	mov	r1, r4
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f105 0084 	add.w	r0, r5, #132	@ 0x84
 8001bfa:	f7ff fe15 	bl	8001828 <BSP_AUDIO_OUT_ClockConfig>
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8001bfe:	4628      	mov	r0, r5
 8001c00:	4b18      	ldr	r3, [pc, #96]	@ (8001c64 <BSP_AUDIO_IN_OUT_Init+0x8c>)
 8001c02:	f840 3f84 	str.w	r3, [r0, #132]!
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 8001c06:	f004 fdef 	bl	80067e8 <HAL_SAI_GetState>
 8001c0a:	4601      	mov	r1, r0
 8001c0c:	b918      	cbnz	r0, 8001c16 <BSP_AUDIO_IN_OUT_Init+0x3e>
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 8001c0e:	f105 0084 	add.w	r0, r5, #132	@ 0x84
 8001c12:	f7ff ff05 	bl	8001a20 <BSP_AUDIO_IN_MspInit>
    haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001c16:	4b14      	ldr	r3, [pc, #80]	@ (8001c68 <BSP_AUDIO_IN_OUT_Init+0x90>)
    if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 8001c18:	4811      	ldr	r0, [pc, #68]	@ (8001c60 <BSP_AUDIO_IN_OUT_Init+0x88>)
    haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8001c1a:	602b      	str	r3, [r5, #0]
    if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 8001c1c:	f004 fde4 	bl	80067e8 <HAL_SAI_GetState>
 8001c20:	4601      	mov	r1, r0
 8001c22:	b910      	cbnz	r0, 8001c2a <BSP_AUDIO_IN_OUT_Init+0x52>
      BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 8001c24:	480e      	ldr	r0, [pc, #56]	@ (8001c60 <BSP_AUDIO_IN_OUT_Init+0x88>)
 8001c26:	f7ff fd1f 	bl	8001668 <BSP_AUDIO_OUT_MspInit>
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8001c2a:	4e10      	ldr	r6, [pc, #64]	@ (8001c6c <BSP_AUDIO_IN_OUT_Init+0x94>)
    SAIx_In_Init(SAI_MODEMASTER_TX, slot_active, AudioFreq);
 8001c2c:	4622      	mov	r2, r4
 8001c2e:	210a      	movs	r1, #10
 8001c30:	2000      	movs	r0, #0
 8001c32:	f7ff fc1f 	bl	8001474 <SAIx_In_Init>
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8001c36:	68b3      	ldr	r3, [r6, #8]
 8001c38:	2034      	movs	r0, #52	@ 0x34
 8001c3a:	4798      	blx	r3
    if((deviceid) == WM8994_ID)
 8001c3c:	f648 1394 	movw	r3, #35220	@ 0x8994
 8001c40:	4298      	cmp	r0, r3
 8001c42:	d1cf      	bne.n	8001be4 <BSP_AUDIO_IN_OUT_Init+0xc>
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8001c44:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 8001c46:	2034      	movs	r0, #52	@ 0x34
 8001c48:	4798      	blx	r3
      audio_drv = &wm8994_drv;
 8001c4a:	f8c5 6108 	str.w	r6, [r5, #264]	@ 0x108
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice | OutputDevice, 100, AudioFreq);
 8001c4e:	4623      	mov	r3, r4
 8001c50:	6835      	ldr	r5, [r6, #0]
 8001c52:	2264      	movs	r2, #100	@ 0x64
 8001c54:	f447 7100 	orr.w	r1, r7, #512	@ 0x200
 8001c58:	2034      	movs	r0, #52	@ 0x34
 8001c5a:	47a8      	blx	r5
      ret = AUDIO_OK;
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	e7c2      	b.n	8001be6 <BSP_AUDIO_IN_OUT_Init+0xe>
 8001c60:	200006b4 	.word	0x200006b4
 8001c64:	40015c24 	.word	0x40015c24
 8001c68:	40015c04 	.word	0x40015c04
 8001c6c:	2000002c 	.word	0x2000002c

08001c70 <BSP_EEPROM_Init>:
  *             and if problem, check the 2nd one (EEPROM_I2C_ADDRESS_A02)
  * @retval EEPROM_OK (0) if operation is correctly performed, else return value 
  *         different from EEPROM_OK (0)
  */
uint32_t BSP_EEPROM_Init(void)
{ 
 8001c70:	b510      	push	{r4, lr}
  /* I2C Initialization */
  EEPROM_IO_Init();
 8001c72:	f7ff fb85 	bl	8001380 <EEPROM_IO_Init>
  
  /* Select the EEPROM address for A01 and check if OK */
  EEPROMAddress = EEPROM_I2C_ADDRESS_A01;
 8001c76:	4c0b      	ldr	r4, [pc, #44]	@ (8001ca4 <BSP_EEPROM_Init+0x34>)
 8001c78:	23a0      	movs	r3, #160	@ 0xa0
  if(EEPROM_IO_IsDeviceReady(EEPROMAddress, EEPROM_MAX_TRIALS) != HAL_OK) 
 8001c7a:	f640 31b8 	movw	r1, #3000	@ 0xbb8
  EEPROMAddress = EEPROM_I2C_ADDRESS_A01;
 8001c7e:	8023      	strh	r3, [r4, #0]
  if(EEPROM_IO_IsDeviceReady(EEPROMAddress, EEPROM_MAX_TRIALS) != HAL_OK) 
 8001c80:	8820      	ldrh	r0, [r4, #0]
 8001c82:	b280      	uxth	r0, r0
 8001c84:	f7ff fb9e 	bl	80013c4 <EEPROM_IO_IsDeviceReady>
 8001c88:	b150      	cbz	r0, 8001ca0 <BSP_EEPROM_Init+0x30>
  {
    /* Select the EEPROM address for A02 and check if OK */
    EEPROMAddress = EEPROM_I2C_ADDRESS_A02;
 8001c8a:	23a6      	movs	r3, #166	@ 0xa6
    if(EEPROM_IO_IsDeviceReady(EEPROMAddress, EEPROM_MAX_TRIALS) != HAL_OK)
 8001c8c:	f640 31b8 	movw	r1, #3000	@ 0xbb8
    EEPROMAddress = EEPROM_I2C_ADDRESS_A02;
 8001c90:	8023      	strh	r3, [r4, #0]
    if(EEPROM_IO_IsDeviceReady(EEPROMAddress, EEPROM_MAX_TRIALS) != HAL_OK)
 8001c92:	8820      	ldrh	r0, [r4, #0]
 8001c94:	b280      	uxth	r0, r0
 8001c96:	f7ff fb95 	bl	80013c4 <EEPROM_IO_IsDeviceReady>
 8001c9a:	3800      	subs	r0, #0
 8001c9c:	bf18      	it	ne
 8001c9e:	2001      	movne	r0, #1
    {
      return EEPROM_FAIL;
    }
  }
  return EEPROM_OK;
}
 8001ca0:	bd10      	pop	{r4, pc}
 8001ca2:	bf00      	nop
 8001ca4:	2000092c 	.word	0x2000092c

08001ca8 <BSP_EEPROM_ReadBuffer>:
  * @retval EEPROM_OK (0) if operation is correctly performed, else return value 
  *         different from EEPROM_OK (0) or the timeout user callback.
  */
uint32_t BSP_EEPROM_ReadBuffer(uint8_t* pBuffer, uint16_t ReadAddr, uint16_t* NumByteToRead)
{  
  uint32_t buffersize = *NumByteToRead;
 8001ca8:	8813      	ldrh	r3, [r2, #0]
  
  /* Set the pointer to the Number of data to be read. This pointer will be used 
     by the DMA Transfer Completer interrupt Handler in order to reset the 
     variable to 0. User should check on this variable in order to know if the 
     DMA transfer has been complete or not. */
  EEPROMDataRead = *NumByteToRead;
 8001caa:	4a06      	ldr	r2, [pc, #24]	@ (8001cc4 <BSP_EEPROM_ReadBuffer+0x1c>)
{  
 8001cac:	b510      	push	{r4, lr}
  EEPROMDataRead = *NumByteToRead;
 8001cae:	8053      	strh	r3, [r2, #2]
  
  if(EEPROM_IO_ReadData(EEPROMAddress, ReadAddr, pBuffer, buffersize) != HAL_OK)
 8001cb0:	8814      	ldrh	r4, [r2, #0]
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	b2a0      	uxth	r0, r4
 8001cb6:	f7ff fb75 	bl	80013a4 <EEPROM_IO_ReadData>
 8001cba:	b110      	cbz	r0, 8001cc2 <BSP_EEPROM_ReadBuffer+0x1a>
  {
    BSP_EEPROM_TIMEOUT_UserCallback();
 8001cbc:	f006 ff4a 	bl	8008b54 <BSP_EEPROM_TIMEOUT_UserCallback>
    return EEPROM_FAIL;
 8001cc0:	2001      	movs	r0, #1
  }

  /* If all operations OK, return EEPROM_OK (0) */
  return EEPROM_OK;
}
 8001cc2:	bd10      	pop	{r4, pc}
 8001cc4:	2000092c 	.word	0x2000092c

08001cc8 <BSP_EEPROM_WaitEepromStandbyState>:
  * 
  * @retval EEPROM_OK (0) if operation is correctly performed, else return value 
  *         different from EEPROM_OK (0) or the timeout user callback.
  */
uint32_t BSP_EEPROM_WaitEepromStandbyState(void)      
{
 8001cc8:	b508      	push	{r3, lr}
  /* Check if the maximum allowed number of trials has bee reached */
  if(EEPROM_IO_IsDeviceReady(EEPROMAddress, EEPROM_MAX_TRIALS) != HAL_OK)
 8001cca:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <BSP_EEPROM_WaitEepromStandbyState+0x1c>)
 8001ccc:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001cd0:	8818      	ldrh	r0, [r3, #0]
 8001cd2:	b280      	uxth	r0, r0
 8001cd4:	f7ff fb76 	bl	80013c4 <EEPROM_IO_IsDeviceReady>
 8001cd8:	b110      	cbz	r0, 8001ce0 <BSP_EEPROM_WaitEepromStandbyState+0x18>
  {
    /* If the maximum number of trials has been reached, exit the function */
    BSP_EEPROM_TIMEOUT_UserCallback();
 8001cda:	f006 ff3b 	bl	8008b54 <BSP_EEPROM_TIMEOUT_UserCallback>
    return EEPROM_TIMEOUT;
 8001cde:	2002      	movs	r0, #2
  }
  return EEPROM_OK;
}
 8001ce0:	bd08      	pop	{r3, pc}
 8001ce2:	bf00      	nop
 8001ce4:	2000092c 	.word	0x2000092c

08001ce8 <BSP_EEPROM_WritePage>:
{ 
 8001ce8:	b510      	push	{r4, lr}
  uint32_t buffersize = *NumByteToWrite;
 8001cea:	7813      	ldrb	r3, [r2, #0]
  EEPROMDataWrite = *NumByteToWrite;  
 8001cec:	4a09      	ldr	r2, [pc, #36]	@ (8001d14 <BSP_EEPROM_WritePage+0x2c>)
 8001cee:	7113      	strb	r3, [r2, #4]
  if(EEPROM_IO_WriteData(EEPROMAddress, WriteAddr, pBuffer, buffersize) != HAL_OK)
 8001cf0:	8814      	ldrh	r4, [r2, #0]
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	b2a0      	uxth	r0, r4
 8001cf6:	f7ff fb45 	bl	8001384 <EEPROM_IO_WriteData>
 8001cfa:	4604      	mov	r4, r0
 8001cfc:	b110      	cbz	r0, 8001d04 <BSP_EEPROM_WritePage+0x1c>
    status = EEPROM_FAIL;
 8001cfe:	2401      	movs	r4, #1
    BSP_EEPROM_TIMEOUT_UserCallback();
 8001d00:	f006 ff28 	bl	8008b54 <BSP_EEPROM_TIMEOUT_UserCallback>
  if(BSP_EEPROM_WaitEepromStandbyState() != EEPROM_OK) 
 8001d04:	f7ff ffe0 	bl	8001cc8 <BSP_EEPROM_WaitEepromStandbyState>
    return EEPROM_FAIL;
 8001d08:	2800      	cmp	r0, #0
}
 8001d0a:	bf0c      	ite	eq
 8001d0c:	4620      	moveq	r0, r4
 8001d0e:	2001      	movne	r0, #1
 8001d10:	bd10      	pop	{r4, pc}
 8001d12:	bf00      	nop
 8001d14:	2000092c 	.word	0x2000092c

08001d18 <BSP_EEPROM_WriteBuffer>:
{
 8001d18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(addr == 0) 
 8001d1c:	f011 0903 	ands.w	r9, r1, #3
{
 8001d20:	4607      	mov	r7, r0
 8001d22:	460c      	mov	r4, r1
 8001d24:	4615      	mov	r5, r2
  numofsingle = NumByteToWrite % EEPROM_PAGESIZE;
 8001d26:	f002 0803 	and.w	r8, r2, #3
  if(addr == 0) 
 8001d2a:	d124      	bne.n	8001d76 <BSP_EEPROM_WriteBuffer+0x5e>
    if(numofpage == 0) 
 8001d2c:	2a03      	cmp	r2, #3
 8001d2e:	d93d      	bls.n	8001dac <BSP_EEPROM_WriteBuffer+0x94>
  numofpage =  NumByteToWrite / EEPROM_PAGESIZE;
 8001d30:	0895      	lsrs	r5, r2, #2
        dataindex = EEPROM_PAGESIZE;        
 8001d32:	2604      	movs	r6, #4
 8001d34:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 8001d38:	b2ad      	uxth	r5, r5
        status = BSP_EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&dataindex));
 8001d3a:	f10d 0207 	add.w	r2, sp, #7
 8001d3e:	4621      	mov	r1, r4
 8001d40:	4638      	mov	r0, r7
        dataindex = EEPROM_PAGESIZE;        
 8001d42:	f88d 6007 	strb.w	r6, [sp, #7]
        status = BSP_EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&dataindex));
 8001d46:	f7ff ffcf 	bl	8001ce8 <BSP_EEPROM_WritePage>
        if(status != EEPROM_OK)
 8001d4a:	b940      	cbnz	r0, 8001d5e <BSP_EEPROM_WriteBuffer+0x46>
        WriteAddr +=  EEPROM_PAGESIZE;
 8001d4c:	3404      	adds	r4, #4
        pBuffer += EEPROM_PAGESIZE;
 8001d4e:	3704      	adds	r7, #4
        WriteAddr +=  EEPROM_PAGESIZE;
 8001d50:	b2a4      	uxth	r4, r4
      while(numofpage--)
 8001d52:	42ac      	cmp	r4, r5
 8001d54:	d1f1      	bne.n	8001d3a <BSP_EEPROM_WriteBuffer+0x22>
      if(numofsingle!=0)
 8001d56:	f1b8 0f00 	cmp.w	r8, #0
 8001d5a:	d103      	bne.n	8001d64 <BSP_EEPROM_WriteBuffer+0x4c>
  return EEPROM_OK;
 8001d5c:	2000      	movs	r0, #0
}
 8001d5e:	b003      	add	sp, #12
 8001d60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        status = BSP_EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&dataindex));
 8001d64:	f10d 0207 	add.w	r2, sp, #7
 8001d68:	4621      	mov	r1, r4
 8001d6a:	4638      	mov	r0, r7
        dataindex = numofsingle;          
 8001d6c:	f88d 8007 	strb.w	r8, [sp, #7]
        status = BSP_EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&dataindex));
 8001d70:	f7ff ffba 	bl	8001ce8 <BSP_EEPROM_WritePage>
        if(status != EEPROM_OK)
 8001d74:	e7f3      	b.n	8001d5e <BSP_EEPROM_WriteBuffer+0x46>
  count = EEPROM_PAGESIZE - addr;
 8001d76:	f1c9 0604 	rsb	r6, r9, #4
    if(numofpage== 0) 
 8001d7a:	2a03      	cmp	r2, #3
  count = EEPROM_PAGESIZE - addr;
 8001d7c:	b2b6      	uxth	r6, r6
    if(numofpage== 0) 
 8001d7e:	d81a      	bhi.n	8001db6 <BSP_EEPROM_WriteBuffer+0x9e>
      if(NumByteToWrite > count)
 8001d80:	4296      	cmp	r6, r2
 8001d82:	d213      	bcs.n	8001dac <BSP_EEPROM_WriteBuffer+0x94>
        dataindex = count;        
 8001d84:	fa5f f886 	uxtb.w	r8, r6
        status = BSP_EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&dataindex));
 8001d88:	f10d 0207 	add.w	r2, sp, #7
        dataindex = count;        
 8001d8c:	f88d 8007 	strb.w	r8, [sp, #7]
        status = BSP_EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&dataindex));
 8001d90:	f7ff ffaa 	bl	8001ce8 <BSP_EEPROM_WritePage>
        if(status != EEPROM_OK)
 8001d94:	2800      	cmp	r0, #0
 8001d96:	d1e2      	bne.n	8001d5e <BSP_EEPROM_WriteBuffer+0x46>
        dataindex = (NumByteToWrite - count);          
 8001d98:	eba5 0808 	sub.w	r8, r5, r8
        status = BSP_EEPROM_WritePage((uint8_t*)(pBuffer + count), (WriteAddr + count), (uint8_t*)(&dataindex));
 8001d9c:	19a1      	adds	r1, r4, r6
 8001d9e:	f10d 0207 	add.w	r2, sp, #7
 8001da2:	19b8      	adds	r0, r7, r6
 8001da4:	b289      	uxth	r1, r1
        dataindex = (NumByteToWrite - count);          
 8001da6:	f88d 8007 	strb.w	r8, [sp, #7]
        status = BSP_EEPROM_WritePage((uint8_t*)(pBuffer + count), (WriteAddr + count), (uint8_t*)(&dataindex));
 8001daa:	e7e1      	b.n	8001d70 <BSP_EEPROM_WriteBuffer+0x58>
        status = BSP_EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&dataindex));
 8001dac:	f10d 0207 	add.w	r2, sp, #7
        dataindex = numofsingle;         
 8001db0:	f88d 8007 	strb.w	r8, [sp, #7]
        status = BSP_EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&dataindex));
 8001db4:	e7dc      	b.n	8001d70 <BSP_EEPROM_WriteBuffer+0x58>
        status = BSP_EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&dataindex));
 8001db6:	f10d 0207 	add.w	r2, sp, #7
        dataindex = count;         
 8001dba:	f88d 6007 	strb.w	r6, [sp, #7]
        status = BSP_EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&dataindex));
 8001dbe:	f7ff ff93 	bl	8001ce8 <BSP_EEPROM_WritePage>
        if(status != EEPROM_OK)
 8001dc2:	2800      	cmp	r0, #0
 8001dc4:	d1cb      	bne.n	8001d5e <BSP_EEPROM_WriteBuffer+0x46>
 8001dc6:	3d04      	subs	r5, #4
        WriteAddr += count;
 8001dc8:	4434      	add	r4, r6
        pBuffer += count;
 8001dca:	443e      	add	r6, r7
      NumByteToWrite -= count;
 8001dcc:	fa19 f585 	uxtah	r5, r9, r5
        WriteAddr += count;
 8001dd0:	fa1f f984 	uxth.w	r9, r4
      NumByteToWrite -= count;
 8001dd4:	fa1f f885 	uxth.w	r8, r5
      numofpage =  NumByteToWrite / EEPROM_PAGESIZE;
 8001dd8:	f3c5 058d 	ubfx	r5, r5, #2, #14
 8001ddc:	eb04 0485 	add.w	r4, r4, r5, lsl #2
        dataindex = EEPROM_PAGESIZE;          
 8001de0:	2504      	movs	r5, #4
 8001de2:	b2a4      	uxth	r4, r4
      while(numofpage--)
 8001de4:	45a1      	cmp	r9, r4
 8001de6:	d109      	bne.n	8001dfc <BSP_EEPROM_WriteBuffer+0xe4>
      if(numofsingle != 0)
 8001de8:	f018 0803 	ands.w	r8, r8, #3
 8001dec:	d0b6      	beq.n	8001d5c <BSP_EEPROM_WriteBuffer+0x44>
        status = BSP_EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&dataindex));
 8001dee:	f10d 0207 	add.w	r2, sp, #7
 8001df2:	4649      	mov	r1, r9
 8001df4:	4630      	mov	r0, r6
        dataindex = numofsingle;           
 8001df6:	f88d 8007 	strb.w	r8, [sp, #7]
        status = BSP_EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&dataindex));
 8001dfa:	e7b9      	b.n	8001d70 <BSP_EEPROM_WriteBuffer+0x58>
        status = BSP_EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&dataindex));
 8001dfc:	f10d 0207 	add.w	r2, sp, #7
 8001e00:	4649      	mov	r1, r9
 8001e02:	4630      	mov	r0, r6
        dataindex = EEPROM_PAGESIZE;          
 8001e04:	f88d 5007 	strb.w	r5, [sp, #7]
        status = BSP_EEPROM_WritePage(pBuffer, WriteAddr, (uint8_t*)(&dataindex));
 8001e08:	f7ff ff6e 	bl	8001ce8 <BSP_EEPROM_WritePage>
        if(status != EEPROM_OK)
 8001e0c:	2800      	cmp	r0, #0
 8001e0e:	d1a6      	bne.n	8001d5e <BSP_EEPROM_WriteBuffer+0x46>
        WriteAddr +=  EEPROM_PAGESIZE;
 8001e10:	f109 0904 	add.w	r9, r9, #4
        pBuffer += EEPROM_PAGESIZE;  
 8001e14:	3604      	adds	r6, #4
        WriteAddr +=  EEPROM_PAGESIZE;
 8001e16:	fa1f f989 	uxth.w	r9, r9
        pBuffer += EEPROM_PAGESIZE;  
 8001e1a:	e7e3      	b.n	8001de4 <BSP_EEPROM_WriteBuffer+0xcc>

08001e1c <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8001e1c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8001e20:	4c1a      	ldr	r4, [pc, #104]	@ (8001e8c <LL_FillBuffer+0x70>)
{
 8001e22:	4698      	mov	r8, r3
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8001e24:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
{
 8001e28:	4617      	mov	r7, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001e2a:	2234      	movs	r2, #52	@ 0x34
{
 8001e2c:	4681      	mov	r9, r0
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8001e2e:	6063      	str	r3, [r4, #4]
  hDma2dHandler.Init.OutputOffset = OffLine;      
  
  hDma2dHandler.Instance = DMA2D;
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8001e30:	4620      	mov	r0, r4
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001e32:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
{
 8001e36:	460e      	mov	r6, r1
 8001e38:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001e3c:	fb02 4303 	mla	r3, r2, r3, r4
 8001e40:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8001e44:	1eab      	subs	r3, r5, #2
 8001e46:	425d      	negs	r5, r3
 8001e48:	415d      	adcs	r5, r3
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8001e4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001e4c:	006d      	lsls	r5, r5, #1
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8001e4e:	60e3      	str	r3, [r4, #12]
  hDma2dHandler.Instance = DMA2D;
 8001e50:	4b0f      	ldr	r3, [pc, #60]	@ (8001e90 <LL_FillBuffer+0x74>)
 8001e52:	60a5      	str	r5, [r4, #8]
 8001e54:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8001e56:	f002 f896 	bl	8003f86 <HAL_DMA2D_Init>
 8001e5a:	b9a0      	cbnz	r0, 8001e86 <LL_FillBuffer+0x6a>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8001e5c:	4649      	mov	r1, r9
 8001e5e:	4620      	mov	r0, r4
 8001e60:	f002 f9e0 	bl	8004224 <HAL_DMA2D_ConfigLayer>
 8001e64:	b978      	cbnz	r0, 8001e86 <LL_FillBuffer+0x6a>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001e66:	463b      	mov	r3, r7
 8001e68:	4632      	mov	r2, r6
 8001e6a:	4651      	mov	r1, sl
 8001e6c:	4620      	mov	r0, r4
 8001e6e:	f8cd 8000 	str.w	r8, [sp]
 8001e72:	f002 f8b4 	bl	8003fde <HAL_DMA2D_Start>
 8001e76:	b930      	cbnz	r0, 8001e86 <LL_FillBuffer+0x6a>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8001e78:	210a      	movs	r1, #10
 8001e7a:	4620      	mov	r0, r4
      }
    }
  } 
}
 8001e7c:	b002      	add	sp, #8
 8001e7e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8001e82:	f002 b8c6 	b.w	8004012 <HAL_DMA2D_PollForTransfer>
}
 8001e86:	b002      	add	sp, #8
 8001e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e8c:	20000934 	.word	0x20000934
 8001e90:	4002b000 	.word	0x4002b000

08001e94 <BSP_LCD_GetXSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001e94:	4b04      	ldr	r3, [pc, #16]	@ (8001ea8 <BSP_LCD_GetXSize+0x14>)
 8001e96:	2134      	movs	r1, #52	@ 0x34
 8001e98:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001e9c:	fb01 3302 	mla	r3, r1, r2, r3
}
 8001ea0:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	20000934 	.word	0x20000934

08001eac <BSP_LCD_GetYSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8001eac:	4b04      	ldr	r3, [pc, #16]	@ (8001ec0 <BSP_LCD_GetYSize+0x14>)
 8001eae:	2134      	movs	r1, #52	@ 0x34
 8001eb0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001eb4:	fb01 3302 	mla	r3, r1, r2, r3
}
 8001eb8:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	20000934 	.word	0x20000934

08001ec4 <BSP_LCD_LayerDefaultInit>:
{     
 8001ec4:	b570      	push	{r4, r5, r6, lr}
  layer_cfg.WindowX0 = 0;
 8001ec6:	2400      	movs	r4, #0
{     
 8001ec8:	b08e      	sub	sp, #56	@ 0x38
 8001eca:	460e      	mov	r6, r1
 8001ecc:	4605      	mov	r5, r0
  layer_cfg.WindowX0 = 0;
 8001ece:	9401      	str	r4, [sp, #4]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8001ed0:	f7ff ffe0 	bl	8001e94 <BSP_LCD_GetXSize>
  layer_cfg.WindowY0 = 0;
 8001ed4:	e9cd 0402 	strd	r0, r4, [sp, #8]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001ed8:	f7ff ffe8 	bl	8001eac <BSP_LCD_GetYSize>
  layer_cfg.Alpha = 255;
 8001edc:	23ff      	movs	r3, #255	@ 0xff
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001ede:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
  layer_cfg.Backcolor.Blue = 0;
 8001ee2:	f8ad 4034 	strh.w	r4, [sp, #52]	@ 0x34
  layer_cfg.Backcolor.Red = 0;
 8001ee6:	f88d 4036 	strb.w	r4, [sp, #54]	@ 0x36
  layer_cfg.FBStartAdress = FB_Address;
 8001eea:	960a      	str	r6, [sp, #40]	@ 0x28
  layer_cfg.Alpha0 = 0;
 8001eec:	e9cd 3406 	strd	r3, r4, [sp, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001ef0:	e9cd 0404 	strd	r0, r4, [sp, #16]
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001ef4:	2307      	movs	r3, #7
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8001ef6:	4c0f      	ldr	r4, [pc, #60]	@ (8001f34 <BSP_LCD_LayerDefaultInit+0x70>)
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001ef8:	e9cd 2308 	strd	r2, r3, [sp, #32]
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8001efc:	f7ff ffca 	bl	8001e94 <BSP_LCD_GetXSize>
 8001f00:	900b      	str	r0, [sp, #44]	@ 0x2c
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8001f02:	f7ff ffd3 	bl	8001eac <BSP_LCD_GetYSize>
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8001f06:	462a      	mov	r2, r5
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8001f08:	900c      	str	r0, [sp, #48]	@ 0x30
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8001f0a:	a901      	add	r1, sp, #4
 8001f0c:	f104 0040 	add.w	r0, r4, #64	@ 0x40
 8001f10:	f003 f838 	bl	8004f84 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001f14:	230c      	movs	r3, #12
 8001f16:	fb03 4005 	mla	r0, r3, r5, r4
 8001f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1e:	f8c0 30f0 	str.w	r3, [r0, #240]	@ 0xf0
  DrawProp[LayerIndex].pFont     = &Font24;
 8001f22:	4b05      	ldr	r3, [pc, #20]	@ (8001f38 <BSP_LCD_LayerDefaultInit+0x74>)
 8001f24:	f8c0 30f4 	str.w	r3, [r0, #244]	@ 0xf4
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8001f28:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8001f2c:	f8c0 30ec 	str.w	r3, [r0, #236]	@ 0xec
}
 8001f30:	b00e      	add	sp, #56	@ 0x38
 8001f32:	bd70      	pop	{r4, r5, r6, pc}
 8001f34:	20000934 	.word	0x20000934
 8001f38:	20000074 	.word	0x20000074

08001f3c <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 8001f3c:	4b01      	ldr	r3, [pc, #4]	@ (8001f44 <BSP_LCD_SelectLayer+0x8>)
 8001f3e:	f8c3 00e8 	str.w	r0, [r3, #232]	@ 0xe8
} 
 8001f42:	4770      	bx	lr
 8001f44:	20000934 	.word	0x20000934

08001f48 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 8001f48:	4b04      	ldr	r3, [pc, #16]	@ (8001f5c <BSP_LCD_SetTextColor+0x14>)
 8001f4a:	210c      	movs	r1, #12
 8001f4c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001f50:	fb01 3302 	mla	r3, r1, r2, r3
 8001f54:	f8c3 00ec 	str.w	r0, [r3, #236]	@ 0xec
}
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	20000934 	.word	0x20000934

08001f60 <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
 8001f60:	4b04      	ldr	r3, [pc, #16]	@ (8001f74 <BSP_LCD_SetBackColor+0x14>)
 8001f62:	210c      	movs	r1, #12
 8001f64:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001f68:	fb01 3302 	mla	r3, r1, r2, r3
 8001f6c:	f8c3 00f0 	str.w	r0, [r3, #240]	@ 0xf0
}
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	20000934 	.word	0x20000934

08001f78 <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = fonts;
 8001f78:	4b04      	ldr	r3, [pc, #16]	@ (8001f8c <BSP_LCD_SetFont+0x14>)
 8001f7a:	210c      	movs	r1, #12
 8001f7c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001f80:	fb01 3302 	mla	r3, r1, r2, r3
 8001f84:	f8c3 00f4 	str.w	r0, [r3, #244]	@ 0xf4
}
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	20000934 	.word	0x20000934

08001f90 <BSP_LCD_GetFont>:
  return DrawProp[ActiveLayer].pFont;
 8001f90:	4b04      	ldr	r3, [pc, #16]	@ (8001fa4 <BSP_LCD_GetFont+0x14>)
 8001f92:	210c      	movs	r1, #12
 8001f94:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001f98:	fb01 3302 	mla	r3, r1, r2, r3
}
 8001f9c:	f8d3 00f4 	ldr.w	r0, [r3, #244]	@ 0xf4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	20000934 	.word	0x20000934

08001fa8 <BSP_LCD_Clear>:
{ 
 8001fa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001faa:	4c0c      	ldr	r4, [pc, #48]	@ (8001fdc <BSP_LCD_Clear+0x34>)
{ 
 8001fac:	4606      	mov	r6, r0
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001fae:	f7ff ff71 	bl	8001e94 <BSP_LCD_GetXSize>
 8001fb2:	4605      	mov	r5, r0
 8001fb4:	f8d4 70e8 	ldr.w	r7, [r4, #232]	@ 0xe8
 8001fb8:	f7ff ff78 	bl	8001eac <BSP_LCD_GetYSize>
 8001fbc:	2234      	movs	r2, #52	@ 0x34
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	9601      	str	r6, [sp, #4]
 8001fc2:	4638      	mov	r0, r7
 8001fc4:	fb02 4407 	mla	r4, r2, r7, r4
 8001fc8:	2200      	movs	r2, #0
 8001fca:	9200      	str	r2, [sp, #0]
 8001fcc:	462a      	mov	r2, r5
 8001fce:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 8001fd2:	f7ff ff23 	bl	8001e1c <LL_FillBuffer>
}
 8001fd6:	b003      	add	sp, #12
 8001fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20000934 	.word	0x20000934

08001fe0 <BSP_LCD_DrawHLine>:
{
 8001fe0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001fe4:	4e14      	ldr	r6, [pc, #80]	@ (8002038 <BSP_LCD_DrawHLine+0x58>)
 8001fe6:	2334      	movs	r3, #52	@ 0x34
{
 8001fe8:	4689      	mov	r9, r1
 8001fea:	4605      	mov	r5, r0
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001fec:	f8d6 70e8 	ldr.w	r7, [r6, #232]	@ 0xe8
{
 8001ff0:	4690      	mov	r8, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001ff2:	fb03 6307 	mla	r3, r3, r7, r6
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001ff6:	f8d3 409c 	ldr.w	r4, [r3, #156]	@ 0x9c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001ffa:	f8d3 a088 	ldr.w	sl, [r3, #136]	@ 0x88
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001ffe:	f7ff ff49 	bl	8001e94 <BSP_LCD_GetXSize>
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002002:	230c      	movs	r3, #12
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002004:	fb00 5009 	mla	r0, r0, r9, r5
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002008:	f1ba 0f02 	cmp.w	sl, #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 800200c:	4642      	mov	r2, r8
 800200e:	fb03 6307 	mla	r3, r3, r7, r6
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002012:	bf08      	it	eq
 8002014:	eb04 0140 	addeq.w	r1, r4, r0, lsl #1
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002018:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800201c:	bf18      	it	ne
 800201e:	eb04 0180 	addne.w	r1, r4, r0, lsl #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002022:	4638      	mov	r0, r7
 8002024:	9301      	str	r3, [sp, #4]
 8002026:	2300      	movs	r3, #0
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	2301      	movs	r3, #1
 800202c:	f7ff fef6 	bl	8001e1c <LL_FillBuffer>
}
 8002030:	b002      	add	sp, #8
 8002032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002036:	bf00      	nop
 8002038:	20000934 	.word	0x20000934

0800203c <BSP_LCD_DrawVLine>:
{
 800203c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002040:	4d15      	ldr	r5, [pc, #84]	@ (8002098 <BSP_LCD_DrawVLine+0x5c>)
 8002042:	2334      	movs	r3, #52	@ 0x34
{
 8002044:	4617      	mov	r7, r2
 8002046:	4680      	mov	r8, r0
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002048:	f8d5 60e8 	ldr.w	r6, [r5, #232]	@ 0xe8
{
 800204c:	4689      	mov	r9, r1
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800204e:	fb03 5306 	mla	r3, r3, r6, r5
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002052:	f8d3 409c 	ldr.w	r4, [r3, #156]	@ 0x9c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002056:	f8d3 a088 	ldr.w	sl, [r3, #136]	@ 0x88
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800205a:	f7ff ff1b 	bl	8001e94 <BSP_LCD_GetXSize>
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 800205e:	230c      	movs	r3, #12
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002060:	fb00 8109 	mla	r1, r0, r9, r8
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002064:	f1ba 0f02 	cmp.w	sl, #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8002068:	f100 30ff 	add.w	r0, r0, #4294967295
 800206c:	fb03 5506 	mla	r5, r3, r6, r5
 8002070:	f04f 0201 	mov.w	r2, #1
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002074:	bf08      	it	eq
 8002076:	eb04 0141 	addeq.w	r1, r4, r1, lsl #1
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 800207a:	f8d5 30ec 	ldr.w	r3, [r5, #236]	@ 0xec
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800207e:	bf18      	it	ne
 8002080:	eb04 0181 	addne.w	r1, r4, r1, lsl #2
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8002084:	9000      	str	r0, [sp, #0]
 8002086:	4630      	mov	r0, r6
 8002088:	9301      	str	r3, [sp, #4]
 800208a:	463b      	mov	r3, r7
 800208c:	f7ff fec6 	bl	8001e1c <LL_FillBuffer>
}
 8002090:	b002      	add	sp, #8
 8002092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002096:	bf00      	nop
 8002098:	20000934 	.word	0x20000934

0800209c <BSP_LCD_DrawRect>:
{
 800209c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800209e:	461e      	mov	r6, r3
 80020a0:	460d      	mov	r5, r1
 80020a2:	4604      	mov	r4, r0
 80020a4:	4617      	mov	r7, r2
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 80020a6:	f7ff ff9b 	bl	8001fe0 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 80020aa:	19a9      	adds	r1, r5, r6
 80020ac:	463a      	mov	r2, r7
 80020ae:	4620      	mov	r0, r4
 80020b0:	b289      	uxth	r1, r1
 80020b2:	f7ff ff95 	bl	8001fe0 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 80020b6:	4632      	mov	r2, r6
 80020b8:	4629      	mov	r1, r5
 80020ba:	4620      	mov	r0, r4
 80020bc:	f7ff ffbe 	bl	800203c <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 80020c0:	19e0      	adds	r0, r4, r7
 80020c2:	4632      	mov	r2, r6
 80020c4:	4629      	mov	r1, r5
 80020c6:	b280      	uxth	r0, r0
}
 80020c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 80020cc:	f7ff bfb6 	b.w	800203c <BSP_LCD_DrawVLine>

080020d0 <BSP_LCD_DrawPixel>:
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80020d0:	4b0e      	ldr	r3, [pc, #56]	@ (800210c <BSP_LCD_DrawPixel+0x3c>)
{
 80020d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020d6:	460e      	mov	r6, r1
 80020d8:	4614      	mov	r4, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80020da:	2134      	movs	r1, #52	@ 0x34
 80020dc:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
{
 80020e0:	4605      	mov	r5, r0
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80020e2:	fb01 3302 	mla	r3, r1, r2, r3
 80020e6:	f8d3 8088 	ldr.w	r8, [r3, #136]	@ 0x88
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80020ea:	f8d3 709c 	ldr.w	r7, [r3, #156]	@ 0x9c
 80020ee:	f7ff fed1 	bl	8001e94 <BSP_LCD_GetXSize>
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80020f2:	f1b8 0f02 	cmp.w	r8, #2
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80020f6:	fb00 5006 	mla	r0, r0, r6, r5
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80020fa:	d104      	bne.n	8002106 <BSP_LCD_DrawPixel+0x36>
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80020fc:	b2a4      	uxth	r4, r4
 80020fe:	f827 4010 	strh.w	r4, [r7, r0, lsl #1]
}
 8002102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002106:	f847 4020 	str.w	r4, [r7, r0, lsl #2]
}
 800210a:	e7fa      	b.n	8002102 <BSP_LCD_DrawPixel+0x32>
 800210c:	20000934 	.word	0x20000934

08002110 <BSP_LCD_DisplayChar>:
{
 8002110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002114:	b085      	sub	sp, #20
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002116:	3a20      	subs	r2, #32
  for(i = 0; i < height; i++)
 8002118:	f04f 0800 	mov.w	r8, #0
{
 800211c:	e9cd 0101 	strd	r0, r1, [sp, #4]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002120:	4928      	ldr	r1, [pc, #160]	@ (80021c4 <BSP_LCD_DisplayChar+0xb4>)
 8002122:	200c      	movs	r0, #12
 8002124:	f8d1 b0e8 	ldr.w	fp, [r1, #232]	@ 0xe8
 8002128:	fb00 110b 	mla	r1, r0, fp, r1
 800212c:	f8d1 10f4 	ldr.w	r1, [r1, #244]	@ 0xf4
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002130:	f8b1 9004 	ldrh.w	r9, [r1, #4]
 8002134:	f8b1 a006 	ldrh.w	sl, [r1, #6]
 8002138:	f109 0607 	add.w	r6, r9, #7
 800213c:	680d      	ldr	r5, [r1, #0]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800213e:	fb0a f202 	mul.w	r2, sl, r2
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002142:	10f6      	asrs	r6, r6, #3
  offset =  8 *((width + 7)/8) -  width ;
 8002144:	ebc9 00c6 	rsb	r0, r9, r6, lsl #3
  for(i = 0; i < height; i++)
 8002148:	fb06 5502 	mla	r5, r6, r2, r5
      if(line & (1 << (width- j + offset- 1))) 
 800214c:	f109 32ff 	add.w	r2, r9, #4294967295
 8002150:	fa52 f380 	uxtab	r3, r2, r0
 8002154:	9303      	str	r3, [sp, #12]
 8002156:	9b02      	ldr	r3, [sp, #8]
  for(i = 0; i < height; i++)
 8002158:	45d0      	cmp	r8, sl
 800215a:	eb03 0208 	add.w	r2, r3, r8
 800215e:	b293      	uxth	r3, r2
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	d302      	bcc.n	800216a <BSP_LCD_DisplayChar+0x5a>
}
 8002164:	b005      	add	sp, #20
 8002166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
 800216a:	2e01      	cmp	r6, #1
      line =  pchar[0];      
 800216c:	782c      	ldrb	r4, [r5, #0]
    switch(((width + 7)/8))
 800216e:	d004      	beq.n	800217a <BSP_LCD_DisplayChar+0x6a>
 8002170:	2e02      	cmp	r6, #2
 8002172:	d109      	bne.n	8002188 <BSP_LCD_DisplayChar+0x78>
      line =  (pchar[0]<< 8) | pchar[1];      
 8002174:	882c      	ldrh	r4, [r5, #0]
 8002176:	ba64      	rev16	r4, r4
 8002178:	b2a4      	uxth	r4, r4
    for (j = 0; j < width; j++)
 800217a:	2700      	movs	r7, #0
 800217c:	45b9      	cmp	r9, r7
 800217e:	d80a      	bhi.n	8002196 <BSP_LCD_DisplayChar+0x86>
  for(i = 0; i < height; i++)
 8002180:	f108 0801 	add.w	r8, r8, #1
 8002184:	4435      	add	r5, r6
 8002186:	e7e6      	b.n	8002156 <BSP_LCD_DisplayChar+0x46>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8002188:	786a      	ldrb	r2, [r5, #1]
 800218a:	0424      	lsls	r4, r4, #16
 800218c:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8002190:	78aa      	ldrb	r2, [r5, #2]
 8002192:	4314      	orrs	r4, r2
      break;
 8002194:	e7f1      	b.n	800217a <BSP_LCD_DisplayChar+0x6a>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002196:	9b01      	ldr	r3, [sp, #4]
      if(line & (1 << (width- j + offset- 1))) 
 8002198:	2201      	movs	r2, #1
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800219a:	19d8      	adds	r0, r3, r7
      if(line & (1 << (width- j + offset- 1))) 
 800219c:	9b03      	ldr	r3, [sp, #12]
 800219e:	1bd9      	subs	r1, r3, r7
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80021a0:	4b08      	ldr	r3, [pc, #32]	@ (80021c4 <BSP_LCD_DisplayChar+0xb4>)
 80021a2:	b280      	uxth	r0, r0
    for (j = 0; j < width; j++)
 80021a4:	3701      	adds	r7, #1
      if(line & (1 << (width- j + offset- 1))) 
 80021a6:	408a      	lsls	r2, r1
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80021a8:	9900      	ldr	r1, [sp, #0]
      if(line & (1 << (width- j + offset- 1))) 
 80021aa:	4222      	tst	r2, r4
 80021ac:	f04f 020c 	mov.w	r2, #12
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80021b0:	fb02 320b 	mla	r2, r2, fp, r3
 80021b4:	bf14      	ite	ne
 80021b6:	f8d2 20ec 	ldrne.w	r2, [r2, #236]	@ 0xec
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80021ba:	f8d2 20f0 	ldreq.w	r2, [r2, #240]	@ 0xf0
 80021be:	f7ff ff87 	bl	80020d0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80021c2:	e7db      	b.n	800217c <BSP_LCD_DisplayChar+0x6c>
 80021c4:	20000934 	.word	0x20000934

080021c8 <BSP_LCD_DisplayStringAt>:
{
 80021c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021cc:	4680      	mov	r8, r0
  while (*ptr++) size ++ ;
 80021ce:	4610      	mov	r0, r2
{
 80021d0:	469a      	mov	sl, r3
 80021d2:	460e      	mov	r6, r1
 80021d4:	4615      	mov	r5, r2
  while (*ptr++) size ++ ;
 80021d6:	f7fe f81b 	bl	8000210 <strlen>
 80021da:	4681      	mov	r9, r0
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80021dc:	f7ff fe5a 	bl	8001e94 <BSP_LCD_GetXSize>
 80021e0:	4b22      	ldr	r3, [pc, #136]	@ (800226c <BSP_LCD_DisplayStringAt+0xa4>)
 80021e2:	210c      	movs	r1, #12
  switch (Mode)
 80021e4:	f1ba 0f01 	cmp.w	sl, #1
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80021e8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80021ec:	fb01 3302 	mla	r3, r1, r2, r3
 80021f0:	f8d3 70f4 	ldr.w	r7, [r3, #244]	@ 0xf4
 80021f4:	88bb      	ldrh	r3, [r7, #4]
 80021f6:	fbb0 f4f3 	udiv	r4, r0, r3
  switch (Mode)
 80021fa:	d01e      	beq.n	800223a <BSP_LCD_DisplayStringAt+0x72>
 80021fc:	f1ba 0f02 	cmp.w	sl, #2
 8002200:	d023      	beq.n	800224a <BSP_LCD_DisplayStringAt+0x82>
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8002202:	fa0f f388 	sxth.w	r3, r8
    ref_column = 1;
 8002206:	2400      	movs	r4, #0
 8002208:	2b00      	cmp	r3, #0
 800220a:	bfd8      	it	le
 800220c:	f04f 0801 	movle.w	r8, #1
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002210:	f7ff fe40 	bl	8001e94 <BSP_LCD_GetXSize>
 8002214:	88bb      	ldrh	r3, [r7, #4]
 8002216:	b2a2      	uxth	r2, r4
 8002218:	f815 9004 	ldrb.w	r9, [r5, r4]
 800221c:	3401      	adds	r4, #1
 800221e:	fb03 0012 	mls	r0, r3, r2, r0
 8002222:	b280      	uxth	r0, r0
 8002224:	4298      	cmp	r0, r3
 8002226:	bf34      	ite	cc
 8002228:	2000      	movcc	r0, #0
 800222a:	2001      	movcs	r0, #1
 800222c:	f1b9 0f00 	cmp.w	r9, #0
 8002230:	bf08      	it	eq
 8002232:	2000      	moveq	r0, #0
 8002234:	b980      	cbnz	r0, 8002258 <BSP_LCD_DisplayStringAt+0x90>
}
 8002236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800223a:	eba4 0409 	sub.w	r4, r4, r9
 800223e:	435c      	muls	r4, r3
 8002240:	eb08 0054 	add.w	r0, r8, r4, lsr #1
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002244:	fa1f f880 	uxth.w	r8, r0
      break;
 8002248:	e7db      	b.n	8002202 <BSP_LCD_DisplayStringAt+0x3a>
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800224a:	eba4 0409 	sub.w	r4, r4, r9
 800224e:	fb14 f403 	smulbb	r4, r4, r3
 8002252:	eba4 0008 	sub.w	r0, r4, r8
 8002256:	e7f5      	b.n	8002244 <BSP_LCD_DisplayStringAt+0x7c>
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8002258:	4640      	mov	r0, r8
 800225a:	464a      	mov	r2, r9
 800225c:	4631      	mov	r1, r6
 800225e:	f7ff ff57 	bl	8002110 <BSP_LCD_DisplayChar>
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8002262:	88bb      	ldrh	r3, [r7, #4]
 8002264:	4443      	add	r3, r8
 8002266:	fa1f f883 	uxth.w	r8, r3
    i++;
 800226a:	e7d1      	b.n	8002210 <BSP_LCD_DisplayStringAt+0x48>
 800226c:	20000934 	.word	0x20000934

08002270 <BSP_LCD_DisplayStringAtLine>:
{  
 8002270:	b570      	push	{r4, r5, r6, lr}
 8002272:	460c      	mov	r4, r1
 8002274:	4605      	mov	r5, r0
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8002276:	f7ff fe8b 	bl	8001f90 <BSP_LCD_GetFont>
 800227a:	88c3      	ldrh	r3, [r0, #6]
 800227c:	4622      	mov	r2, r4
 800227e:	2000      	movs	r0, #0
 8002280:	fb13 f105 	smulbb	r1, r3, r5
 8002284:	2303      	movs	r3, #3
 8002286:	b289      	uxth	r1, r1
}
 8002288:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 800228c:	f7ff bf9c 	b.w	80021c8 <BSP_LCD_DisplayStringAt>

08002290 <BSP_LCD_DrawLine>:
{
 8002290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8002294:	1a14      	subs	r4, r2, r0
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8002296:	1a5e      	subs	r6, r3, r1
{
 8002298:	b085      	sub	sp, #20
  x = x1;                       /* Start x off at the first pixel */
 800229a:	fa0f f980 	sxth.w	r9, r0
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800229e:	2c00      	cmp	r4, #0
  y = y1;                       /* Start y off at the first pixel */
 80022a0:	fa0f fa81 	sxth.w	sl, r1
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 80022a4:	bfb8      	it	lt
 80022a6:	4264      	neglt	r4, r4
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 80022a8:	2e00      	cmp	r6, #0
 80022aa:	bfb8      	it	lt
 80022ac:	4276      	neglt	r6, r6
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 80022ae:	b224      	sxth	r4, r4
    xinc1 = 1;
 80022b0:	4282      	cmp	r2, r0
 80022b2:	bf34      	ite	cc
 80022b4:	f04f 37ff 	movcc.w	r7, #4294967295
 80022b8:	2701      	movcs	r7, #1
    yinc1 = 1;
 80022ba:	428b      	cmp	r3, r1
 80022bc:	bf34      	ite	cc
 80022be:	f04f 38ff 	movcc.w	r8, #4294967295
 80022c2:	f04f 0801 	movcs.w	r8, #1
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 80022c6:	b236      	sxth	r6, r6
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 80022c8:	42b4      	cmp	r4, r6
 80022ca:	db0f      	blt.n	80022ec <BSP_LCD_DrawLine+0x5c>
    num = deltax / 2;
 80022cc:	eb04 75d4 	add.w	r5, r4, r4, lsr #31
 80022d0:	9700      	str	r7, [sp, #0]
    yinc2 = 0;                  /* Don't change the y for every iteration */
 80022d2:	2700      	movs	r7, #0
    num = deltax / 2;
 80022d4:	106d      	asrs	r5, r5, #1
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 80022d6:	9701      	str	r7, [sp, #4]
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 80022d8:	f04f 0b00 	mov.w	fp, #0
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 80022dc:	4b20      	ldr	r3, [pc, #128]	@ (8002360 <BSP_LCD_DrawLine+0xd0>)
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 80022de:	fa0f f28b 	sxth.w	r2, fp
 80022e2:	4294      	cmp	r4, r2
 80022e4:	da10      	bge.n	8002308 <BSP_LCD_DrawLine+0x78>
}
 80022e6:	b005      	add	sp, #20
 80022e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    num = deltay / 2;
 80022ec:	eb06 75d6 	add.w	r5, r6, r6, lsr #31
 80022f0:	4623      	mov	r3, r4
 80022f2:	f8cd 8004 	str.w	r8, [sp, #4]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 80022f6:	f04f 0800 	mov.w	r8, #0
    num = deltay / 2;
 80022fa:	4634      	mov	r4, r6
 80022fc:	f345 054f 	sbfx	r5, r5, #1, #16
 8002300:	461e      	mov	r6, r3
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8002302:	f8cd 8000 	str.w	r8, [sp]
 8002306:	e7e7      	b.n	80022d8 <BSP_LCD_DrawLine+0x48>
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8002308:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800230c:	f04f 0c0c 	mov.w	ip, #12
 8002310:	fa1f f089 	uxth.w	r0, r9
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 8002314:	4435      	add	r5, r6
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8002316:	fb0c 3202 	mla	r2, ip, r2, r3
 800231a:	fa1f f18a 	uxth.w	r1, sl
 800231e:	f8d2 20ec 	ldr.w	r2, [r2, #236]	@ 0xec
 8002322:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002326:	f7ff fed3 	bl	80020d0 <BSP_LCD_DrawPixel>
    if (num >= den)                           /* Check if numerator >= denominator */
 800232a:	4b0d      	ldr	r3, [pc, #52]	@ (8002360 <BSP_LCD_DrawLine+0xd0>)
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 800232c:	b2aa      	uxth	r2, r5
 800232e:	b22d      	sxth	r5, r5
    if (num >= den)                           /* Check if numerator >= denominator */
 8002330:	42ac      	cmp	r4, r5
 8002332:	dc09      	bgt.n	8002348 <BSP_LCD_DrawLine+0xb8>
      x += xinc1;                             /* Change the x as appropriate */
 8002334:	9802      	ldr	r0, [sp, #8]
      num -= den;                             /* Calculate the new numerator value */
 8002336:	1b12      	subs	r2, r2, r4
      y += yinc1;                             /* Change the y as appropriate */
 8002338:	9903      	ldr	r1, [sp, #12]
      x += xinc1;                             /* Change the x as appropriate */
 800233a:	4438      	add	r0, r7
      num -= den;                             /* Calculate the new numerator value */
 800233c:	b215      	sxth	r5, r2
      y += yinc1;                             /* Change the y as appropriate */
 800233e:	4441      	add	r1, r8
      x += xinc1;                             /* Change the x as appropriate */
 8002340:	fa0f f980 	sxth.w	r9, r0
      y += yinc1;                             /* Change the y as appropriate */
 8002344:	fa0f fa81 	sxth.w	sl, r1
    x += xinc2;                               /* Change the x as appropriate */
 8002348:	9a00      	ldr	r2, [sp, #0]
 800234a:	f10b 0b01 	add.w	fp, fp, #1
 800234e:	4491      	add	r9, r2
    y += yinc2;                               /* Change the y as appropriate */
 8002350:	9a01      	ldr	r2, [sp, #4]
 8002352:	4492      	add	sl, r2
    x += xinc2;                               /* Change the x as appropriate */
 8002354:	fa0f f989 	sxth.w	r9, r9
    y += yinc2;                               /* Change the y as appropriate */
 8002358:	fa0f fa8a 	sxth.w	sl, sl
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800235c:	e7bf      	b.n	80022de <BSP_LCD_DrawLine+0x4e>
 800235e:	bf00      	nop
 8002360:	20000934 	.word	0x20000934

08002364 <BSP_LCD_DrawPolygon>:
  if(PointCount < 2)
 8002364:	2901      	cmp	r1, #1
{
 8002366:	b538      	push	{r3, r4, r5, lr}
 8002368:	4604      	mov	r4, r0
 800236a:	460d      	mov	r5, r1
  if(PointCount < 2)
 800236c:	d91b      	bls.n	80023a6 <BSP_LCD_DrawPolygon+0x42>
  BSP_LCD_DrawLine(Points->X, Points->Y, (Points+PointCount-1)->X, (Points+PointCount-1)->Y);
 800236e:	f101 4280 	add.w	r2, r1, #1073741824	@ 0x40000000
  while(--PointCount)
 8002372:	3d01      	subs	r5, #1
  BSP_LCD_DrawLine(Points->X, Points->Y, (Points+PointCount-1)->X, (Points+PointCount-1)->Y);
 8002374:	8841      	ldrh	r1, [r0, #2]
 8002376:	3a01      	subs	r2, #1
  while(--PointCount)
 8002378:	b2ad      	uxth	r5, r5
  BSP_LCD_DrawLine(Points->X, Points->Y, (Points+PointCount-1)->X, (Points+PointCount-1)->Y);
 800237a:	eb00 0382 	add.w	r3, r0, r2, lsl #2
 800237e:	f830 2022 	ldrh.w	r2, [r0, r2, lsl #2]
 8002382:	f834 0b04 	ldrh.w	r0, [r4], #4
 8002386:	885b      	ldrh	r3, [r3, #2]
 8002388:	f7ff ff82 	bl	8002290 <BSP_LCD_DrawLine>
  while(--PointCount)
 800238c:	3d01      	subs	r5, #1
    BSP_LCD_DrawLine(x, y, Points->X, Points->Y);
 800238e:	8863      	ldrh	r3, [r4, #2]
 8002390:	8822      	ldrh	r2, [r4, #0]
  while(--PointCount)
 8002392:	3404      	adds	r4, #4
 8002394:	b2ad      	uxth	r5, r5
    BSP_LCD_DrawLine(x, y, Points->X, Points->Y);
 8002396:	f834 1c06 	ldrh.w	r1, [r4, #-6]
 800239a:	f834 0c08 	ldrh.w	r0, [r4, #-8]
 800239e:	f7ff ff77 	bl	8002290 <BSP_LCD_DrawLine>
  while(--PointCount)
 80023a2:	2d00      	cmp	r5, #0
 80023a4:	d1f2      	bne.n	800238c <BSP_LCD_DrawPolygon+0x28>
}
 80023a6:	bd38      	pop	{r3, r4, r5, pc}

080023a8 <FillTriangle>:
{ 
 80023a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023ac:	b087      	sub	sp, #28
  x = x1;                       /* Start x off at the first pixel */
 80023ae:	fa0f f980 	sxth.w	r9, r0
  y = y1;                       /* Start y off at the first pixel */
 80023b2:	fa0f fa83 	sxth.w	sl, r3
{ 
 80023b6:	f8bd 4044 	ldrh.w	r4, [sp, #68]	@ 0x44
 80023ba:	f8bd 8040 	ldrh.w	r8, [sp, #64]	@ 0x40
 80023be:	9402      	str	r4, [sp, #8]
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 80023c0:	1a0c      	subs	r4, r1, r0
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 80023c2:	eba8 0603 	sub.w	r6, r8, r3
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 80023c6:	2c00      	cmp	r4, #0
 80023c8:	bfb8      	it	lt
 80023ca:	4264      	neglt	r4, r4
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 80023cc:	2e00      	cmp	r6, #0
 80023ce:	bfb8      	it	lt
 80023d0:	4276      	neglt	r6, r6
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 80023d2:	b224      	sxth	r4, r4
    xinc1 = 1;
 80023d4:	4281      	cmp	r1, r0
 80023d6:	bf34      	ite	cc
 80023d8:	f04f 37ff 	movcc.w	r7, #4294967295
 80023dc:	2701      	movcs	r7, #1
    yinc1 = 1;
 80023de:	4598      	cmp	r8, r3
 80023e0:	bf34      	ite	cc
 80023e2:	f04f 38ff 	movcc.w	r8, #4294967295
 80023e6:	f04f 0801 	movcs.w	r8, #1
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 80023ea:	b236      	sxth	r6, r6
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 80023ec:	42b4      	cmp	r4, r6
 80023ee:	db0e      	blt.n	800240e <FillTriangle+0x66>
    num = deltax / 2;
 80023f0:	eb04 75d4 	add.w	r5, r4, r4, lsr #31
 80023f4:	9700      	str	r7, [sp, #0]
    yinc2 = 0;                  /* Don't change the y for every iteration */
 80023f6:	2700      	movs	r7, #0
    num = deltax / 2;
 80023f8:	106d      	asrs	r5, r5, #1
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 80023fa:	9701      	str	r7, [sp, #4]
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 80023fc:	f04f 0b00 	mov.w	fp, #0
 8002400:	fa0f f38b 	sxth.w	r3, fp
 8002404:	429c      	cmp	r4, r3
 8002406:	da10      	bge.n	800242a <FillTriangle+0x82>
}
 8002408:	b007      	add	sp, #28
 800240a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    num = deltay / 2;
 800240e:	eb06 75d6 	add.w	r5, r6, r6, lsr #31
 8002412:	4623      	mov	r3, r4
 8002414:	f8cd 8004 	str.w	r8, [sp, #4]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8002418:	f04f 0800 	mov.w	r8, #0
    num = deltay / 2;
 800241c:	4634      	mov	r4, r6
 800241e:	f345 054f 	sbfx	r5, r5, #1, #16
 8002422:	461e      	mov	r6, r3
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8002424:	f8cd 8000 	str.w	r8, [sp]
 8002428:	e7e8      	b.n	80023fc <FillTriangle+0x54>
    BSP_LCD_DrawLine(x, y, x3, y3);
 800242a:	fa1f f089 	uxth.w	r0, r9
    num += num_add;              /* Increase the numerator by the top of the fraction */
 800242e:	4435      	add	r5, r6
    BSP_LCD_DrawLine(x, y, x3, y3);
 8002430:	fa1f f18a 	uxth.w	r1, sl
 8002434:	9b02      	ldr	r3, [sp, #8]
 8002436:	9003      	str	r0, [sp, #12]
 8002438:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800243c:	f7ff ff28 	bl	8002290 <BSP_LCD_DrawLine>
    if (num >= den)             /* Check if numerator >= denominator */
 8002440:	9a05      	ldr	r2, [sp, #20]
    num += num_add;              /* Increase the numerator by the top of the fraction */
 8002442:	b2ab      	uxth	r3, r5
 8002444:	b22d      	sxth	r5, r5
    if (num >= den)             /* Check if numerator >= denominator */
 8002446:	42ac      	cmp	r4, r5
 8002448:	dc09      	bgt.n	800245e <FillTriangle+0xb6>
      x += xinc1;               /* Change the x as appropriate */
 800244a:	9803      	ldr	r0, [sp, #12]
      num -= den;               /* Calculate the new numerator value */
 800244c:	1b1b      	subs	r3, r3, r4
      y += yinc1;               /* Change the y as appropriate */
 800244e:	9904      	ldr	r1, [sp, #16]
      x += xinc1;               /* Change the x as appropriate */
 8002450:	4438      	add	r0, r7
      num -= den;               /* Calculate the new numerator value */
 8002452:	b21d      	sxth	r5, r3
      y += yinc1;               /* Change the y as appropriate */
 8002454:	4441      	add	r1, r8
      x += xinc1;               /* Change the x as appropriate */
 8002456:	fa0f f980 	sxth.w	r9, r0
      y += yinc1;               /* Change the y as appropriate */
 800245a:	fa0f fa81 	sxth.w	sl, r1
    x += xinc2;                 /* Change the x as appropriate */
 800245e:	9b00      	ldr	r3, [sp, #0]
 8002460:	f10b 0b01 	add.w	fp, fp, #1
 8002464:	4499      	add	r9, r3
    y += yinc2;                 /* Change the y as appropriate */
 8002466:	9b01      	ldr	r3, [sp, #4]
 8002468:	449a      	add	sl, r3
    x += xinc2;                 /* Change the x as appropriate */
 800246a:	fa0f f989 	sxth.w	r9, r9
    y += yinc2;                 /* Change the y as appropriate */
 800246e:	fa0f fa8a 	sxth.w	sl, sl
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8002472:	e7c5      	b.n	8002400 <FillTriangle+0x58>

08002474 <BSP_LCD_DrawCircle>:
{
 8002474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  decision = 3 - (Radius << 1);
 8002478:	0054      	lsls	r4, r2, #1
{
 800247a:	b085      	sub	sp, #20
 800247c:	4682      	mov	sl, r0
 800247e:	468b      	mov	fp, r1
 8002480:	4615      	mov	r5, r2
  decision = 3 - (Radius << 1);
 8002482:	f1c4 0403 	rsb	r4, r4, #3
  current_x = 0;
 8002486:	f04f 0900 	mov.w	r9, #0
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 800248a:	fa1a f389 	uxtah	r3, sl, r9
 800248e:	4a30      	ldr	r2, [pc, #192]	@ (8002550 <BSP_LCD_DrawCircle+0xdc>)
 8002490:	200c      	movs	r0, #12
 8002492:	b2af      	uxth	r7, r5
 8002494:	b29b      	uxth	r3, r3
 8002496:	ebab 0107 	sub.w	r1, fp, r7
 800249a:	fa1f f689 	uxth.w	r6, r9
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 80024a4:	b289      	uxth	r1, r1
 80024a6:	fb00 2303 	mla	r3, r0, r3, r2
 80024aa:	9800      	ldr	r0, [sp, #0]
 80024ac:	9102      	str	r1, [sp, #8]
 80024ae:	f8d3 80ec 	ldr.w	r8, [r3, #236]	@ 0xec
 80024b2:	4642      	mov	r2, r8
 80024b4:	f7ff fe0c 	bl	80020d0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 80024b8:	ebaa 0306 	sub.w	r3, sl, r6
 80024bc:	4642      	mov	r2, r8
 80024be:	9902      	ldr	r1, [sp, #8]
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	4618      	mov	r0, r3
 80024c4:	9301      	str	r3, [sp, #4]
 80024c6:	f7ff fe03 	bl	80020d0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 80024ca:	eb07 030a 	add.w	r3, r7, sl
 80024ce:	ebab 0106 	sub.w	r1, fp, r6
 80024d2:	4642      	mov	r2, r8
 80024d4:	b29b      	uxth	r3, r3
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 80024d6:	445e      	add	r6, fp
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 80024d8:	b289      	uxth	r1, r1
 80024da:	4618      	mov	r0, r3
 80024dc:	9302      	str	r3, [sp, #8]
 80024de:	9103      	str	r1, [sp, #12]
 80024e0:	f7ff fdf6 	bl	80020d0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 80024e4:	ebaa 0307 	sub.w	r3, sl, r7
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 80024e8:	445f      	add	r7, fp
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 80024ea:	9903      	ldr	r1, [sp, #12]
 80024ec:	4642      	mov	r2, r8
 80024ee:	b29b      	uxth	r3, r3
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 80024f0:	b2bf      	uxth	r7, r7
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 80024f2:	4618      	mov	r0, r3
 80024f4:	9303      	str	r3, [sp, #12]
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 80024f6:	b2b6      	uxth	r6, r6
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 80024f8:	f7ff fdea 	bl	80020d0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 80024fc:	4642      	mov	r2, r8
 80024fe:	4639      	mov	r1, r7
 8002500:	9800      	ldr	r0, [sp, #0]
 8002502:	f7ff fde5 	bl	80020d0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8002506:	4642      	mov	r2, r8
 8002508:	4639      	mov	r1, r7
 800250a:	9801      	ldr	r0, [sp, #4]
 800250c:	f7ff fde0 	bl	80020d0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8002510:	4642      	mov	r2, r8
 8002512:	4631      	mov	r1, r6
 8002514:	9802      	ldr	r0, [sp, #8]
 8002516:	f7ff fddb 	bl	80020d0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 800251a:	9b03      	ldr	r3, [sp, #12]
 800251c:	4642      	mov	r2, r8
 800251e:	4631      	mov	r1, r6
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff fdd5 	bl	80020d0 <BSP_LCD_DrawPixel>
    if (decision < 0)
 8002526:	2c00      	cmp	r4, #0
      decision += (current_x << 2) + 6;
 8002528:	bfb1      	iteee	lt
 800252a:	3406      	addlt	r4, #6
      decision += ((current_x - current_y) << 2) + 10;
 800252c:	eba9 0305 	subge.w	r3, r9, r5
 8002530:	340a      	addge	r4, #10
      current_y--;
 8002532:	f105 35ff 	addge.w	r5, r5, #4294967295
      decision += (current_x << 2) + 6;
 8002536:	bfb8      	it	lt
 8002538:	eb04 0489 	addlt.w	r4, r4, r9, lsl #2
    current_x++;
 800253c:	f109 0901 	add.w	r9, r9, #1
      decision += ((current_x - current_y) << 2) + 10;
 8002540:	bfa8      	it	ge
 8002542:	eb04 0483 	addge.w	r4, r4, r3, lsl #2
  while (current_x <= current_y)
 8002546:	454d      	cmp	r5, r9
 8002548:	d29f      	bcs.n	800248a <BSP_LCD_DrawCircle+0x16>
}
 800254a:	b005      	add	sp, #20
 800254c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002550:	20000934 	.word	0x20000934

08002554 <BSP_LCD_DrawEllipse>:
  rad2 = YRadius;
 8002554:	ee07 3a90 	vmov	s15, r3
 8002558:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  rad1 = XRadius;
 800255c:	ee07 2a90 	vmov	s15, r2
 8002560:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8002564:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  k = (float)(rad2/rad1);  
 8002568:	eec7 6a27 	vdiv.f32	s13, s14, s15
  int x = 0, y = -YRadius, err = 2-2*XRadius, e2;
 800256c:	f1c2 0501 	rsb	r5, r2, #1
 8002570:	425e      	negs	r6, r3
 8002572:	2700      	movs	r7, #0
 8002574:	006d      	lsls	r5, r5, #1
    BSP_LCD_DrawPixel((Xpos-(uint16_t)(x/k)), (Ypos+y), DrawProp[ActiveLayer].TextColor);
 8002576:	4b2a      	ldr	r3, [pc, #168]	@ (8002620 <BSP_LCD_DrawEllipse+0xcc>)
 8002578:	fa1f f880 	uxth.w	r8, r0
 800257c:	fa1f f981 	uxth.w	r9, r1
 8002580:	ee07 7a90 	vmov	s15, r7
 8002584:	200c      	movs	r0, #12
 8002586:	fa19 f186 	uxtah	r1, r9, r6
 800258a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800258e:	b289      	uxth	r1, r1
 8002590:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002594:	9101      	str	r1, [sp, #4]
 8002596:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800259a:	ee17 2a90 	vmov	r2, s15
 800259e:	b294      	uxth	r4, r2
 80025a0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80025a4:	eba8 0a04 	sub.w	sl, r8, r4
 80025a8:	fb00 3202 	mla	r2, r0, r2, r3
    BSP_LCD_DrawPixel((Xpos+(uint16_t)(x/k)), (Ypos+y), DrawProp[ActiveLayer].TextColor);
 80025ac:	4444      	add	r4, r8
    BSP_LCD_DrawPixel((Xpos-(uint16_t)(x/k)), (Ypos+y), DrawProp[ActiveLayer].TextColor);
 80025ae:	f8d2 b0ec 	ldr.w	fp, [r2, #236]	@ 0xec
 80025b2:	fa1f fa8a 	uxth.w	sl, sl
 80025b6:	465a      	mov	r2, fp
 80025b8:	4650      	mov	r0, sl
 80025ba:	f7ff fd89 	bl	80020d0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos+(uint16_t)(x/k)), (Ypos+y), DrawProp[ActiveLayer].TextColor);
 80025be:	9901      	ldr	r1, [sp, #4]
 80025c0:	b2a0      	uxth	r0, r4
 80025c2:	465a      	mov	r2, fp
    BSP_LCD_DrawPixel((Xpos+(uint16_t)(x/k)), (Ypos-y), DrawProp[ActiveLayer].TextColor);
 80025c4:	b2b4      	uxth	r4, r6
    BSP_LCD_DrawPixel((Xpos+(uint16_t)(x/k)), (Ypos+y), DrawProp[ActiveLayer].TextColor);
 80025c6:	9001      	str	r0, [sp, #4]
 80025c8:	f7ff fd82 	bl	80020d0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos+(uint16_t)(x/k)), (Ypos-y), DrawProp[ActiveLayer].TextColor);
 80025cc:	eba9 0404 	sub.w	r4, r9, r4
 80025d0:	465a      	mov	r2, fp
 80025d2:	9801      	ldr	r0, [sp, #4]
 80025d4:	b2a4      	uxth	r4, r4
 80025d6:	4621      	mov	r1, r4
 80025d8:	f7ff fd7a 	bl	80020d0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos-(uint16_t)(x/k)), (Ypos-y), DrawProp[ActiveLayer].TextColor);      
 80025dc:	465a      	mov	r2, fp
 80025de:	4621      	mov	r1, r4
 80025e0:	4650      	mov	r0, sl
 80025e2:	f7ff fd75 	bl	80020d0 <BSP_LCD_DrawPixel>
    if (e2 <= x) {
 80025e6:	42af      	cmp	r7, r5
 80025e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002620 <BSP_LCD_DrawEllipse+0xcc>)
 80025ea:	db14      	blt.n	8002616 <BSP_LCD_DrawEllipse+0xc2>
      err += ++x*2+1;
 80025ec:	3701      	adds	r7, #1
 80025ee:	eb05 0247 	add.w	r2, r5, r7, lsl #1
      if (-y == x && e2 <= y) e2 = 0;
 80025f2:	42f7      	cmn	r7, r6
      err += ++x*2+1;
 80025f4:	f102 0201 	add.w	r2, r2, #1
      if (-y == x && e2 <= y) e2 = 0;
 80025f8:	d102      	bne.n	8002600 <BSP_LCD_DrawEllipse+0xac>
 80025fa:	42ae      	cmp	r6, r5
 80025fc:	db02      	blt.n	8002604 <BSP_LCD_DrawEllipse+0xb0>
 80025fe:	2500      	movs	r5, #0
    if (e2 > y) err += ++y*2+1;     
 8002600:	42ae      	cmp	r6, r5
 8002602:	da0a      	bge.n	800261a <BSP_LCD_DrawEllipse+0xc6>
 8002604:	3601      	adds	r6, #1
 8002606:	eb02 0246 	add.w	r2, r2, r6, lsl #1
 800260a:	1c55      	adds	r5, r2, #1
  while (y <= 0);
 800260c:	2e00      	cmp	r6, #0
 800260e:	ddb7      	ble.n	8002580 <BSP_LCD_DrawEllipse+0x2c>
}
 8002610:	b003      	add	sp, #12
 8002612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002616:	462a      	mov	r2, r5
 8002618:	e7f2      	b.n	8002600 <BSP_LCD_DrawEllipse+0xac>
 800261a:	4615      	mov	r5, r2
 800261c:	e7f6      	b.n	800260c <BSP_LCD_DrawEllipse+0xb8>
 800261e:	bf00      	nop
 8002620:	20000934 	.word	0x20000934

08002624 <BSP_LCD_DrawBitmap>:
{
 8002624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8002628:	4d32      	ldr	r5, [pc, #200]	@ (80026f4 <BSP_LCD_DrawBitmap+0xd0>)
{
 800262a:	4614      	mov	r4, r2
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 800262c:	8b97      	ldrh	r7, [r2, #28]
{
 800262e:	b085      	sub	sp, #20
 8002630:	f8d2 b00a 	ldr.w	fp, [r2, #10]
 8002634:	4681      	mov	r9, r0
 8002636:	f8d2 a012 	ldr.w	sl, [r2, #18]
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 800263a:	f8d2 8016 	ldr.w	r8, [r2, #22]
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 800263e:	2234      	movs	r2, #52	@ 0x34
 8002640:	f8d5 30e8 	ldr.w	r3, [r5, #232]	@ 0xe8
{
 8002644:	9103      	str	r1, [sp, #12]
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8002646:	fb02 5303 	mla	r3, r2, r3, r5
 800264a:	f8d3 609c 	ldr.w	r6, [r3, #156]	@ 0x9c
 800264e:	f7ff fc21 	bl	8001e94 <BSP_LCD_GetXSize>
 8002652:	9903      	ldr	r1, [sp, #12]
  if ((bit_pixel/8) == 4)
 8002654:	f1a7 0320 	sub.w	r3, r7, #32
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8002658:	fb01 9900 	mla	r9, r1, r0, r9
  if ((bit_pixel/8) == 4)
 800265c:	2b07      	cmp	r3, #7
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 800265e:	eb06 0689 	add.w	r6, r6, r9, lsl #2
  if ((bit_pixel/8) == 4)
 8002662:	d919      	bls.n	8002698 <BSP_LCD_DrawBitmap+0x74>
  else if ((bit_pixel/8) == 2)
 8002664:	f1a7 0310 	sub.w	r3, r7, #16
    input_color_mode = CM_RGB888;
 8002668:	2b08      	cmp	r3, #8
 800266a:	bf34      	ite	cc
 800266c:	f04f 0902 	movcc.w	r9, #2
 8002670:	f04f 0901 	movcs.w	r9, #1
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8002674:	08ff      	lsrs	r7, r7, #3
 8002676:	f108 33ff 	add.w	r3, r8, #4294967295
 800267a:	fb0a f707 	mul.w	r7, sl, r7
 800267e:	fb07 bb03 	mla	fp, r7, r3, fp
    pbmp -= width*(bit_pixel/8);
 8002682:	427b      	negs	r3, r7
  for(index=0; index < height; index++)
 8002684:	2700      	movs	r7, #0
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8002686:	445c      	add	r4, fp
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
  
  hDma2dHandler.Instance = DMA2D; 
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8002688:	f8df b068 	ldr.w	fp, [pc, #104]	@ 80026f4 <BSP_LCD_DrawBitmap+0xd0>
    pbmp -= width*(bit_pixel/8);
 800268c:	9303      	str	r3, [sp, #12]
  for(index=0; index < height; index++)
 800268e:	4547      	cmp	r7, r8
 8002690:	d105      	bne.n	800269e <BSP_LCD_DrawBitmap+0x7a>
}
 8002692:	b005      	add	sp, #20
 8002694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    input_color_mode = CM_ARGB8888;
 8002698:	f04f 0900 	mov.w	r9, #0
 800269c:	e7ea      	b.n	8002674 <BSP_LCD_DrawBitmap+0x50>
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800269e:	2300      	movs	r3, #0
 80026a0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80026a4:	4658      	mov	r0, fp
  hDma2dHandler.Init.OutputOffset = 0;     
 80026a6:	60eb      	str	r3, [r5, #12]
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80026a8:	632b      	str	r3, [r5, #48]	@ 0x30
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80026aa:	e9c5 2301 	strd	r2, r3, [r5, #4]
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 80026ae:	e9c5 390a 	strd	r3, r9, [r5, #40]	@ 0x28
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 80026b2:	22ff      	movs	r2, #255	@ 0xff
  hDma2dHandler.Instance = DMA2D; 
 80026b4:	4b10      	ldr	r3, [pc, #64]	@ (80026f8 <BSP_LCD_DrawBitmap+0xd4>)
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 80026b6:	636a      	str	r2, [r5, #52]	@ 0x34
  hDma2dHandler.Instance = DMA2D; 
 80026b8:	602b      	str	r3, [r5, #0]
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80026ba:	f001 fc64 	bl	8003f86 <HAL_DMA2D_Init>
 80026be:	b988      	cbnz	r0, 80026e4 <BSP_LCD_DrawBitmap+0xc0>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 80026c0:	2101      	movs	r1, #1
 80026c2:	4658      	mov	r0, fp
 80026c4:	f001 fdae 	bl	8004224 <HAL_DMA2D_ConfigLayer>
 80026c8:	b960      	cbnz	r0, 80026e4 <BSP_LCD_DrawBitmap+0xc0>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 80026ca:	2301      	movs	r3, #1
 80026cc:	4632      	mov	r2, r6
 80026ce:	4621      	mov	r1, r4
 80026d0:	4808      	ldr	r0, [pc, #32]	@ (80026f4 <BSP_LCD_DrawBitmap+0xd0>)
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	4653      	mov	r3, sl
 80026d6:	f001 fc82 	bl	8003fde <HAL_DMA2D_Start>
 80026da:	b918      	cbnz	r0, 80026e4 <BSP_LCD_DrawBitmap+0xc0>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80026dc:	210a      	movs	r1, #10
 80026de:	4805      	ldr	r0, [pc, #20]	@ (80026f4 <BSP_LCD_DrawBitmap+0xd0>)
 80026e0:	f001 fc97 	bl	8004012 <HAL_DMA2D_PollForTransfer>
    address+=  (BSP_LCD_GetXSize()*4);
 80026e4:	f7ff fbd6 	bl	8001e94 <BSP_LCD_GetXSize>
    pbmp -= width*(bit_pixel/8);
 80026e8:	9b03      	ldr	r3, [sp, #12]
    address+=  (BSP_LCD_GetXSize()*4);
 80026ea:	eb06 0680 	add.w	r6, r6, r0, lsl #2
  for(index=0; index < height; index++)
 80026ee:	3701      	adds	r7, #1
    pbmp -= width*(bit_pixel/8);
 80026f0:	441c      	add	r4, r3
  for(index=0; index < height; index++)
 80026f2:	e7cc      	b.n	800268e <BSP_LCD_DrawBitmap+0x6a>
 80026f4:	20000934 	.word	0x20000934
 80026f8:	4002b000 	.word	0x4002b000

080026fc <BSP_LCD_FillRect>:
{
 80026fc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002700:	4d1b      	ldr	r5, [pc, #108]	@ (8002770 <BSP_LCD_FillRect+0x74>)
{
 8002702:	4698      	mov	r8, r3
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002704:	230c      	movs	r3, #12
{
 8002706:	4604      	mov	r4, r0
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002708:	f8d5 60e8 	ldr.w	r6, [r5, #232]	@ 0xe8
{
 800270c:	4617      	mov	r7, r2
 800270e:	4689      	mov	r9, r1
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002710:	fb03 5306 	mla	r3, r3, r6, r5
 8002714:	f8d3 00ec 	ldr.w	r0, [r3, #236]	@ 0xec
 8002718:	f7ff fc16 	bl	8001f48 <BSP_LCD_SetTextColor>
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800271c:	2334      	movs	r3, #52	@ 0x34
 800271e:	fb03 5306 	mla	r3, r3, r6, r5
 8002722:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002726:	f8d3 a09c 	ldr.w	sl, [r3, #156]	@ 0x9c
 800272a:	2a02      	cmp	r2, #2
 800272c:	d118      	bne.n	8002760 <BSP_LCD_FillRect+0x64>
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800272e:	f7ff fbb1 	bl	8001e94 <BSP_LCD_GetXSize>
 8002732:	fb00 4009 	mla	r0, r0, r9, r4
 8002736:	eb0a 0a40 	add.w	sl, sl, r0, lsl #1
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 800273a:	f7ff fbab 	bl	8001e94 <BSP_LCD_GetXSize>
 800273e:	230c      	movs	r3, #12
 8002740:	1bc0      	subs	r0, r0, r7
 8002742:	463a      	mov	r2, r7
 8002744:	fb03 5106 	mla	r1, r3, r6, r5
 8002748:	f8d1 30ec 	ldr.w	r3, [r1, #236]	@ 0xec
 800274c:	4651      	mov	r1, sl
 800274e:	9000      	str	r0, [sp, #0]
 8002750:	4630      	mov	r0, r6
 8002752:	9301      	str	r3, [sp, #4]
 8002754:	4643      	mov	r3, r8
 8002756:	f7ff fb61 	bl	8001e1c <LL_FillBuffer>
}
 800275a:	b002      	add	sp, #8
 800275c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002760:	f7ff fb98 	bl	8001e94 <BSP_LCD_GetXSize>
 8002764:	fb00 4409 	mla	r4, r0, r9, r4
 8002768:	eb0a 0a84 	add.w	sl, sl, r4, lsl #2
 800276c:	e7e5      	b.n	800273a <BSP_LCD_FillRect+0x3e>
 800276e:	bf00      	nop
 8002770:	20000934 	.word	0x20000934

08002774 <BSP_LCD_ClearStringLine>:
{
 8002774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t color_backup = DrawProp[ActiveLayer].TextColor;
 8002778:	4c11      	ldr	r4, [pc, #68]	@ (80027c0 <BSP_LCD_ClearStringLine+0x4c>)
 800277a:	270c      	movs	r7, #12
 800277c:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
 8002780:	fb07 4303 	mla	r3, r7, r3, r4
  DrawProp[ActiveLayer].TextColor = DrawProp[ActiveLayer].BackColor;
 8002784:	e9d3 623b 	ldrd	r6, r2, [r3, #236]	@ 0xec
 8002788:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(), DrawProp[ActiveLayer].pFont->Height);
 800278c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002790:	f8b3 8006 	ldrh.w	r8, [r3, #6]
 8002794:	fb10 f508 	smulbb	r5, r0, r8
 8002798:	f7ff fb7c 	bl	8001e94 <BSP_LCD_GetXSize>
 800279c:	4643      	mov	r3, r8
 800279e:	b282      	uxth	r2, r0
 80027a0:	b2ad      	uxth	r5, r5
 80027a2:	2000      	movs	r0, #0
 80027a4:	4629      	mov	r1, r5
 80027a6:	f7ff ffa9 	bl	80026fc <BSP_LCD_FillRect>
  DrawProp[ActiveLayer].TextColor = color_backup;
 80027aa:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);  
 80027ae:	4630      	mov	r0, r6
  DrawProp[ActiveLayer].TextColor = color_backup;
 80027b0:	fb07 4403 	mla	r4, r7, r3, r4
 80027b4:	f8c4 60ec 	str.w	r6, [r4, #236]	@ 0xec
}
 80027b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);  
 80027bc:	f7ff bbc4 	b.w	8001f48 <BSP_LCD_SetTextColor>
 80027c0:	20000934 	.word	0x20000934

080027c4 <BSP_LCD_FillCircle>:
{
 80027c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80027c8:	f8df b0cc 	ldr.w	fp, [pc, #204]	@ 8002898 <BSP_LCD_FillCircle+0xd4>
  decision = 3 - (Radius << 1);
 80027cc:	0054      	lsls	r4, r2, #1
{
 80027ce:	4692      	mov	sl, r2
  current_y = Radius;
 80027d0:	4617      	mov	r7, r2
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80027d2:	f8db 30e8 	ldr.w	r3, [fp, #232]	@ 0xe8
 80027d6:	220c      	movs	r2, #12
  decision = 3 - (Radius << 1);
 80027d8:	f1c4 0403 	rsb	r4, r4, #3
  current_x = 0;
 80027dc:	2500      	movs	r5, #0
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80027de:	fb02 b303 	mla	r3, r2, r3, fp
{
 80027e2:	4681      	mov	r9, r0
 80027e4:	460e      	mov	r6, r1
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80027e6:	f8d3 00ec 	ldr.w	r0, [r3, #236]	@ 0xec
 80027ea:	f7ff fbad 	bl	8001f48 <BSP_LCD_SetTextColor>
    if(current_y > 0) 
 80027ee:	b1c7      	cbz	r7, 8002822 <BSP_LCD_FillCircle+0x5e>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 80027f0:	fa1f f887 	uxth.w	r8, r7
 80027f4:	fa16 f185 	uxtah	r1, r6, r5
 80027f8:	b2ab      	uxth	r3, r5
 80027fa:	eba9 0008 	sub.w	r0, r9, r8
 80027fe:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8002802:	b289      	uxth	r1, r1
 8002804:	9301      	str	r3, [sp, #4]
 8002806:	fa1f f888 	uxth.w	r8, r8
 800280a:	b280      	uxth	r0, r0
 800280c:	4642      	mov	r2, r8
 800280e:	9000      	str	r0, [sp, #0]
 8002810:	f7ff fbe6 	bl	8001fe0 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 8002814:	9b01      	ldr	r3, [sp, #4]
 8002816:	4642      	mov	r2, r8
 8002818:	9800      	ldr	r0, [sp, #0]
 800281a:	1af1      	subs	r1, r6, r3
 800281c:	b289      	uxth	r1, r1
 800281e:	f7ff fbdf 	bl	8001fe0 <BSP_LCD_DrawHLine>
    if(current_x > 0) 
 8002822:	b1bd      	cbz	r5, 8002854 <BSP_LCD_FillCircle+0x90>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 8002824:	fa1f f885 	uxth.w	r8, r5
 8002828:	b2bb      	uxth	r3, r7
 800282a:	eba9 0008 	sub.w	r0, r9, r8
 800282e:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8002832:	1af1      	subs	r1, r6, r3
 8002834:	9301      	str	r3, [sp, #4]
 8002836:	fa1f f888 	uxth.w	r8, r8
 800283a:	b280      	uxth	r0, r0
 800283c:	4642      	mov	r2, r8
 800283e:	b289      	uxth	r1, r1
 8002840:	9000      	str	r0, [sp, #0]
 8002842:	f7ff fbcd 	bl	8001fe0 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 8002846:	9b01      	ldr	r3, [sp, #4]
 8002848:	4642      	mov	r2, r8
 800284a:	9800      	ldr	r0, [sp, #0]
 800284c:	1999      	adds	r1, r3, r6
 800284e:	b289      	uxth	r1, r1
 8002850:	f7ff fbc6 	bl	8001fe0 <BSP_LCD_DrawHLine>
    if (decision < 0)
 8002854:	2c00      	cmp	r4, #0
      decision += (current_x << 2) + 6;
 8002856:	bfb1      	iteee	lt
 8002858:	3406      	addlt	r4, #6
      decision += ((current_x - current_y) << 2) + 10;
 800285a:	1beb      	subge	r3, r5, r7
 800285c:	340a      	addge	r4, #10
      current_y--;
 800285e:	f107 37ff 	addge.w	r7, r7, #4294967295
      decision += (current_x << 2) + 6;
 8002862:	bfb8      	it	lt
 8002864:	eb04 0485 	addlt.w	r4, r4, r5, lsl #2
    current_x++;
 8002868:	f105 0501 	add.w	r5, r5, #1
      decision += ((current_x - current_y) << 2) + 10;
 800286c:	bfa8      	it	ge
 800286e:	eb04 0483 	addge.w	r4, r4, r3, lsl #2
  while (current_x <= current_y)
 8002872:	42af      	cmp	r7, r5
 8002874:	d2bb      	bcs.n	80027ee <BSP_LCD_FillCircle+0x2a>
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002876:	f8db 30e8 	ldr.w	r3, [fp, #232]	@ 0xe8
 800287a:	220c      	movs	r2, #12
 800287c:	fb02 bb03 	mla	fp, r2, r3, fp
 8002880:	f8db 00ec 	ldr.w	r0, [fp, #236]	@ 0xec
 8002884:	f7ff fb60 	bl	8001f48 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8002888:	4652      	mov	r2, sl
 800288a:	4631      	mov	r1, r6
 800288c:	4648      	mov	r0, r9
}
 800288e:	b003      	add	sp, #12
 8002890:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8002894:	f7ff bdee 	b.w	8002474 <BSP_LCD_DrawCircle>
 8002898:	20000934 	.word	0x20000934

0800289c <BSP_LCD_FillPolygon>:
{
 800289c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  image_left = image_right = Points->X;
 80028a0:	f8b0 9000 	ldrh.w	r9, [r0]
{
 80028a4:	b085      	sub	sp, #20
  image_top= image_bottom = Points->Y;
 80028a6:	f8b0 a002 	ldrh.w	sl, [r0, #2]
  for(counter = 1; counter < PointCount; counter++)
 80028aa:	2301      	movs	r3, #1
  image_left = image_right = Points->X;
 80028ac:	464f      	mov	r7, r9
 80028ae:	464d      	mov	r5, r9
  image_top= image_bottom = Points->Y;
 80028b0:	4656      	mov	r6, sl
 80028b2:	4654      	mov	r4, sl
  for(counter = 1; counter < PointCount; counter++)
 80028b4:	428b      	cmp	r3, r1
 80028b6:	db4f      	blt.n	8002958 <BSP_LCD_FillPolygon+0xbc>
  if(PointCount < 2)
 80028b8:	2901      	cmp	r1, #1
 80028ba:	d94a      	bls.n	8002952 <BSP_LCD_FillPolygon+0xb6>
  Y_center = (image_bottom + image_top)/2;
 80028bc:	4426      	add	r6, r4
  X_center = (image_left + image_right)/2;
 80028be:	443d      	add	r5, r7
  while(--PointCount)
 80028c0:	3901      	subs	r1, #1
 80028c2:	1d04      	adds	r4, r0, #4
    FillTriangle(X, X2, X_center, Y, Y2, Y_center);
 80028c4:	f3c5 054f 	ubfx	r5, r5, #1, #16
 80028c8:	f3c6 064f 	ubfx	r6, r6, #1, #16
  while(--PointCount)
 80028cc:	fa1f fb81 	uxth.w	fp, r1
    FillTriangle(X, X2, X_center, Y, Y2, Y_center);
 80028d0:	f834 3c04 	ldrh.w	r3, [r4, #-4]
 80028d4:	462a      	mov	r2, r5
 80028d6:	8827      	ldrh	r7, [r4, #0]
  while(--PointCount)
 80028d8:	3404      	adds	r4, #4
    FillTriangle(X, X2, X_center, Y, Y2, Y_center);
 80028da:	f834 8c02 	ldrh.w	r8, [r4, #-2]
 80028de:	9302      	str	r3, [sp, #8]
 80028e0:	4639      	mov	r1, r7
 80028e2:	f834 3c06 	ldrh.w	r3, [r4, #-6]
 80028e6:	9802      	ldr	r0, [sp, #8]
 80028e8:	9303      	str	r3, [sp, #12]
 80028ea:	e9cd 8600 	strd	r8, r6, [sp]
 80028ee:	f7ff fd5b 	bl	80023a8 <FillTriangle>
    FillTriangle(X, X_center, X2, Y, Y_center, Y2);
 80028f2:	9b03      	ldr	r3, [sp, #12]
 80028f4:	463a      	mov	r2, r7
 80028f6:	4629      	mov	r1, r5
 80028f8:	9802      	ldr	r0, [sp, #8]
 80028fa:	e9cd 6800 	strd	r6, r8, [sp]
 80028fe:	f7ff fd53 	bl	80023a8 <FillTriangle>
    FillTriangle(X_center, X2, X, Y_center, Y2, Y);   
 8002902:	9b03      	ldr	r3, [sp, #12]
 8002904:	9a02      	ldr	r2, [sp, #8]
 8002906:	4639      	mov	r1, r7
 8002908:	4628      	mov	r0, r5
 800290a:	e9cd 8300 	strd	r8, r3, [sp]
 800290e:	4633      	mov	r3, r6
 8002910:	f7ff fd4a 	bl	80023a8 <FillTriangle>
  while(--PointCount)
 8002914:	f10b 33ff 	add.w	r3, fp, #4294967295
 8002918:	fa1f fb83 	uxth.w	fp, r3
 800291c:	f1bb 0f00 	cmp.w	fp, #0
 8002920:	d1d6      	bne.n	80028d0 <BSP_LCD_FillPolygon+0x34>
  FillTriangle(X_first, X2, X_center, Y_first, Y2, Y_center);
 8002922:	4653      	mov	r3, sl
 8002924:	462a      	mov	r2, r5
 8002926:	4639      	mov	r1, r7
 8002928:	4648      	mov	r0, r9
 800292a:	e9cd 8600 	strd	r8, r6, [sp]
 800292e:	f7ff fd3b 	bl	80023a8 <FillTriangle>
  FillTriangle(X_first, X_center, X2, Y_first, Y_center, Y2);
 8002932:	4653      	mov	r3, sl
 8002934:	463a      	mov	r2, r7
 8002936:	4629      	mov	r1, r5
 8002938:	4648      	mov	r0, r9
 800293a:	e9cd 6800 	strd	r6, r8, [sp]
 800293e:	f7ff fd33 	bl	80023a8 <FillTriangle>
  FillTriangle(X_center, X2, X_first, Y_center, Y2, Y_first);   
 8002942:	4633      	mov	r3, r6
 8002944:	464a      	mov	r2, r9
 8002946:	4639      	mov	r1, r7
 8002948:	4628      	mov	r0, r5
 800294a:	e9cd 8a00 	strd	r8, sl, [sp]
 800294e:	f7ff fd2b 	bl	80023a8 <FillTriangle>
}
 8002952:	b005      	add	sp, #20
 8002954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pixelX = POLY_X(counter);
 8002958:	f930 2023 	ldrsh.w	r2, [r0, r3, lsl #2]
 800295c:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
 8002960:	3301      	adds	r3, #1
    if(pixelX < image_left)
 8002962:	42aa      	cmp	r2, r5
  for(counter = 1; counter < PointCount; counter++)
 8002964:	b21b      	sxth	r3, r3
      image_left = pixelX;
 8002966:	bfb8      	it	lt
 8002968:	b295      	uxthlt	r5, r2
    if(pixelX > image_right)
 800296a:	42ba      	cmp	r2, r7
      image_right = pixelX;
 800296c:	bfc8      	it	gt
 800296e:	b297      	uxthgt	r7, r2
    pixelY = POLY_Y(counter);
 8002970:	f9bc 2002 	ldrsh.w	r2, [ip, #2]
    if(pixelY < image_top)
 8002974:	42a2      	cmp	r2, r4
      image_top = pixelY;
 8002976:	bfb8      	it	lt
 8002978:	b294      	uxthlt	r4, r2
    if(pixelY > image_bottom)
 800297a:	42b2      	cmp	r2, r6
      image_bottom = pixelY;
 800297c:	bfc8      	it	gt
 800297e:	b296      	uxthgt	r6, r2
  for(counter = 1; counter < PointCount; counter++)
 8002980:	e798      	b.n	80028b4 <BSP_LCD_FillPolygon+0x18>

08002982 <BSP_LCD_FillEllipse>:
  rad2 = YRadius;
 8002982:	ee07 3a90 	vmov	s15, r3
 8002986:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  rad1 = XRadius;
 800298a:	ee07 2a90 	vmov	s15, r2
 800298e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8002992:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002996:	ed2d 8b02 	vpush	{d8}
  k = (float)(rad2/rad1);
 800299a:	ee87 8a27 	vdiv.f32	s16, s14, s15
  int x = 0, y = -YRadius, err = 2-2*XRadius, e2;
 800299e:	f1c2 0501 	rsb	r5, r2, #1
{
 80029a2:	4681      	mov	r9, r0
  int x = 0, y = -YRadius, err = 2-2*XRadius, e2;
 80029a4:	425e      	negs	r6, r3
 80029a6:	006d      	lsls	r5, r5, #1
 80029a8:	2700      	movs	r7, #0
    BSP_LCD_DrawHLine((Xpos-(uint16_t)(x/k)), (Ypos+y), (2*(uint16_t)(x/k) + 1));
 80029aa:	fa1f f881 	uxth.w	r8, r1
 80029ae:	ee07 7a90 	vmov	s15, r7
 80029b2:	fa18 f186 	uxtah	r1, r8, r6
 80029b6:	fa1f fa86 	uxth.w	sl, r6
 80029ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029be:	b289      	uxth	r1, r1
 80029c0:	eec7 7a08 	vdiv.f32	s15, s14, s16
 80029c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029c8:	ee17 3a90 	vmov	r3, s15
 80029cc:	b29c      	uxth	r4, r3
 80029ce:	eba9 0b04 	sub.w	fp, r9, r4
 80029d2:	0064      	lsls	r4, r4, #1
 80029d4:	3401      	adds	r4, #1
 80029d6:	fa1f fb8b 	uxth.w	fp, fp
 80029da:	b2a4      	uxth	r4, r4
 80029dc:	4658      	mov	r0, fp
 80029de:	4622      	mov	r2, r4
 80029e0:	f7ff fafe 	bl	8001fe0 <BSP_LCD_DrawHLine>
    BSP_LCD_DrawHLine((Xpos-(uint16_t)(x/k)), (Ypos-y), (2*(uint16_t)(x/k) + 1));
 80029e4:	eba8 010a 	sub.w	r1, r8, sl
 80029e8:	4622      	mov	r2, r4
 80029ea:	4658      	mov	r0, fp
 80029ec:	b289      	uxth	r1, r1
 80029ee:	f7ff faf7 	bl	8001fe0 <BSP_LCD_DrawHLine>
    if (e2 <= x) 
 80029f2:	42af      	cmp	r7, r5
 80029f4:	db15      	blt.n	8002a22 <BSP_LCD_FillEllipse+0xa0>
      err += ++x*2+1;
 80029f6:	3701      	adds	r7, #1
 80029f8:	eb05 0347 	add.w	r3, r5, r7, lsl #1
      if (-y == x && e2 <= y) e2 = 0;
 80029fc:	42f7      	cmn	r7, r6
      err += ++x*2+1;
 80029fe:	f103 0301 	add.w	r3, r3, #1
      if (-y == x && e2 <= y) e2 = 0;
 8002a02:	d102      	bne.n	8002a0a <BSP_LCD_FillEllipse+0x88>
 8002a04:	42ae      	cmp	r6, r5
 8002a06:	db02      	blt.n	8002a0e <BSP_LCD_FillEllipse+0x8c>
 8002a08:	2500      	movs	r5, #0
    if (e2 > y) err += ++y*2+1;
 8002a0a:	42ae      	cmp	r6, r5
 8002a0c:	da0b      	bge.n	8002a26 <BSP_LCD_FillEllipse+0xa4>
 8002a0e:	3601      	adds	r6, #1
 8002a10:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8002a14:	1c5d      	adds	r5, r3, #1
  while (y <= 0);
 8002a16:	2e00      	cmp	r6, #0
 8002a18:	ddc9      	ble.n	80029ae <BSP_LCD_FillEllipse+0x2c>
}
 8002a1a:	ecbd 8b02 	vpop	{d8}
 8002a1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a22:	462b      	mov	r3, r5
 8002a24:	e7f1      	b.n	8002a0a <BSP_LCD_FillEllipse+0x88>
 8002a26:	461d      	mov	r5, r3
 8002a28:	e7f5      	b.n	8002a16 <BSP_LCD_FillEllipse+0x94>
	...

08002a2c <BSP_LCD_MspInit>:
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002a2c:	4b4b      	ldr	r3, [pc, #300]	@ (8002b5c <BSP_LCD_MspInit+0x130>)
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002a2e:	484c      	ldr	r0, [pc, #304]	@ (8002b60 <BSP_LCD_MspInit+0x134>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002a30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a32:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
{
 8002a36:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002a38:	645a      	str	r2, [r3, #68]	@ 0x44
{
 8002a3a:	b08f      	sub	sp, #60	@ 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002a3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002a3e:	2402      	movs	r4, #2
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002a40:	250e      	movs	r5, #14
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002a42:	a909      	add	r1, sp, #36	@ 0x24
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002a44:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8002a48:	f44f 5780 	mov.w	r7, #4096	@ 0x1000
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002a4c:	4e45      	ldr	r6, [pc, #276]	@ (8002b64 <BSP_LCD_MspInit+0x138>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002a4e:	9200      	str	r2, [sp, #0]
 8002a50:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002a52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a54:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002a58:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a5c:	f402 0200 	and.w	r2, r2, #8388608	@ 0x800000
 8002a60:	9201      	str	r2, [sp, #4]
 8002a62:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a66:	f042 0210 	orr.w	r2, r2, #16
 8002a6a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a6e:	f002 0210 	and.w	r2, r2, #16
 8002a72:	9202      	str	r2, [sp, #8]
 8002a74:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a7c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a80:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8002a84:	9203      	str	r2, [sp, #12]
 8002a86:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002a88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a8e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a92:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8002a96:	9204      	str	r2, [sp, #16]
 8002a98:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002a9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002aa0:	631a      	str	r2, [r3, #48]	@ 0x30
 8002aa2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002aa4:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8002aa8:	9205      	str	r2, [sp, #20]
 8002aaa:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002aac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002aae:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ab2:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ab4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ab6:	f402 6280 	and.w	r2, r2, #1024	@ 0x400
 8002aba:	9206      	str	r2, [sp, #24]
 8002abc:	9a06      	ldr	r2, [sp, #24]
  LCD_DISP_GPIO_CLK_ENABLE();
 8002abe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ac0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ac4:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ac6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ac8:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8002acc:	9207      	str	r2, [sp, #28]
 8002ace:	9a07      	ldr	r2, [sp, #28]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002ad0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ad2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ad6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002ada:	950d      	str	r5, [sp, #52]	@ 0x34
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002adc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ae0:	9308      	str	r3, [sp, #32]
 8002ae2:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002ae4:	2310      	movs	r3, #16
 8002ae6:	e9cd 3409 	strd	r3, r4, [sp, #36]	@ 0x24
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002aea:	2300      	movs	r3, #0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002aec:	e9cd 340b 	strd	r3, r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002af0:	f001 fbde 	bl	80042b0 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8002af4:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002af6:	a909      	add	r1, sp, #36	@ 0x24
 8002af8:	481b      	ldr	r0, [pc, #108]	@ (8002b68 <BSP_LCD_MspInit+0x13c>)
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8002afa:	930d      	str	r3, [sp, #52]	@ 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002afc:	e9cd 7409 	strd	r7, r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002b00:	f001 fbd6 	bl	80042b0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8002b04:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002b08:	a909      	add	r1, sp, #36	@ 0x24
 8002b0a:	4630      	mov	r0, r6
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002b0c:	950d      	str	r5, [sp, #52]	@ 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002b0e:	e9cd 3409 	strd	r3, r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002b12:	f001 fbcd 	bl	80042b0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002b16:	f64e 73ff 	movw	r3, #61439	@ 0xefff
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002b1a:	a909      	add	r1, sp, #36	@ 0x24
 8002b1c:	4813      	ldr	r0, [pc, #76]	@ (8002b6c <BSP_LCD_MspInit+0x140>)
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002b1e:	950d      	str	r5, [sp, #52]	@ 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002b20:	e9cd 3409 	strd	r3, r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002b24:	f001 fbc4 	bl	80042b0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8002b28:	23f7      	movs	r3, #247	@ 0xf7
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002b2a:	a909      	add	r1, sp, #36	@ 0x24
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002b2c:	950d      	str	r5, [sp, #52]	@ 0x34
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002b2e:	2501      	movs	r5, #1
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002b30:	e9cd 3409 	strd	r3, r4, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002b34:	4c0e      	ldr	r4, [pc, #56]	@ (8002b70 <BSP_LCD_MspInit+0x144>)
 8002b36:	4620      	mov	r0, r4
 8002b38:	f001 fbba 	bl	80042b0 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8002b3c:	a909      	add	r1, sp, #36	@ 0x24
 8002b3e:	4630      	mov	r0, r6
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8002b40:	9709      	str	r7, [sp, #36]	@ 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002b42:	950a      	str	r5, [sp, #40]	@ 0x28
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8002b44:	f001 fbb4 	bl	80042b0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8002b48:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002b4a:	a909      	add	r1, sp, #36	@ 0x24
 8002b4c:	4620      	mov	r0, r4
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002b4e:	e9cd 3509 	strd	r3, r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002b52:	f001 fbad 	bl	80042b0 <HAL_GPIO_Init>
}
 8002b56:	b00f      	add	sp, #60	@ 0x3c
 8002b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	40021000 	.word	0x40021000
 8002b64:	40022000 	.word	0x40022000
 8002b68:	40021800 	.word	0x40021800
 8002b6c:	40022400 	.word	0x40022400
 8002b70:	40022800 	.word	0x40022800

08002b74 <BSP_LCD_ClockConfig>:
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002b74:	4807      	ldr	r0, [pc, #28]	@ (8002b94 <BSP_LCD_ClockConfig+0x20>)
 8002b76:	2308      	movs	r3, #8
 8002b78:	f8c0 3104 	str.w	r3, [r0, #260]	@ 0x104
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8002b7c:	23c0      	movs	r3, #192	@ 0xc0
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8002b7e:	f500 7082 	add.w	r0, r0, #260	@ 0x104
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8002b82:	6143      	str	r3, [r0, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8002b84:	2305      	movs	r3, #5
 8002b86:	61c3      	str	r3, [r0, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8002b88:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b8c:	62c3      	str	r3, [r0, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8002b8e:	f002 bfd1 	b.w	8005b34 <HAL_RCCEx_PeriphCLKConfig>
 8002b92:	bf00      	nop
 8002b94:	20000934 	.word	0x20000934

08002b98 <BSP_LCD_Init>:
{    
 8002b98:	b510      	push	{r4, lr}
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002b9a:	2228      	movs	r2, #40	@ 0x28
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002b9c:	4c24      	ldr	r4, [pc, #144]	@ (8002c30 <BSP_LCD_Init+0x98>)
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002b9e:	2309      	movs	r3, #9
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002ba0:	2135      	movs	r1, #53	@ 0x35
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002ba2:	f240 101b 	movw	r0, #283	@ 0x11b
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002ba6:	f240 1c1d 	movw	ip, #285	@ 0x11d
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002baa:	e9c4 2315 	strd	r2, r3, [r4, #84]	@ 0x54
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002bae:	230b      	movs	r3, #11
 8002bb0:	e9c4 1317 	strd	r1, r3, [r4, #92]	@ 0x5c
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002bb4:	f240 2315 	movw	r3, #533	@ 0x215
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002bb8:	2100      	movs	r1, #0
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002bba:	e9c4 3019 	strd	r3, r0, [r4, #100]	@ 0x64
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002bbe:	f240 2335 	movw	r3, #565	@ 0x235
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002bc2:	f104 0040 	add.w	r0, r4, #64	@ 0x40
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002bc6:	e9c4 3c1b 	strd	r3, ip, [r4, #108]	@ 0x6c
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002bca:	f7ff ffd3 	bl	8002b74 <BSP_LCD_ClockConfig>
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002bce:	f44f 7ef0 	mov.w	lr, #480	@ 0x1e0
 8002bd2:	f44f 7388 	mov.w	r3, #272	@ 0x110
  hLtdcHandler.Instance = LTDC;
 8002bd6:	4620      	mov	r0, r4
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002bd8:	e9c4 e328 	strd	lr, r3, [r4, #160]	@ 0xa0
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f8a4 3074 	strh.w	r3, [r4, #116]	@ 0x74
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002be2:	f884 3076 	strb.w	r3, [r4, #118]	@ 0x76
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002be6:	e9c4 3311 	strd	r3, r3, [r4, #68]	@ 0x44
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002bea:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  hLtdcHandler.Instance = LTDC;
 8002bee:	4b11      	ldr	r3, [pc, #68]	@ (8002c34 <BSP_LCD_Init+0x9c>)
 8002bf0:	f840 3f40 	str.w	r3, [r0, #64]!
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8002bf4:	f002 f9f3 	bl	8004fde <HAL_LTDC_GetState>
 8002bf8:	4601      	mov	r1, r0
 8002bfa:	b918      	cbnz	r0, 8002c04 <BSP_LCD_Init+0x6c>
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8002bfc:	f104 0040 	add.w	r0, r4, #64	@ 0x40
 8002c00:	f7ff ff14 	bl	8002a2c <BSP_LCD_MspInit>
  HAL_LTDC_Init(&hLtdcHandler);
 8002c04:	480c      	ldr	r0, [pc, #48]	@ (8002c38 <BSP_LCD_Init+0xa0>)
 8002c06:	f002 f951 	bl	8004eac <HAL_LTDC_Init>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002c10:	480a      	ldr	r0, [pc, #40]	@ (8002c3c <BSP_LCD_Init+0xa4>)
 8002c12:	f001 fcd1 	bl	80045b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002c16:	2201      	movs	r2, #1
 8002c18:	2108      	movs	r1, #8
 8002c1a:	4809      	ldr	r0, [pc, #36]	@ (8002c40 <BSP_LCD_Init+0xa8>)
 8002c1c:	f001 fccc 	bl	80045b8 <HAL_GPIO_WritePin>
  BSP_SDRAM_Init();
 8002c20:	f000 fcfa 	bl	8003618 <BSP_SDRAM_Init>
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002c24:	4807      	ldr	r0, [pc, #28]	@ (8002c44 <BSP_LCD_Init+0xac>)
 8002c26:	f7ff f9a7 	bl	8001f78 <BSP_LCD_SetFont>
}
 8002c2a:	2000      	movs	r0, #0
 8002c2c:	bd10      	pop	{r4, pc}
 8002c2e:	bf00      	nop
 8002c30:	20000934 	.word	0x20000934
 8002c34:	40016800 	.word	0x40016800
 8002c38:	20000974 	.word	0x20000974
 8002c3c:	40022000 	.word	0x40022000
 8002c40:	40022800 	.word	0x40022800
 8002c44:	20000074 	.word	0x20000074

08002c48 <QSPI_AutoPollingMemReady.constprop.0>:
  * @brief  This function read the SR of the memory and wait the EOP.
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 8002c48:	b500      	push	{lr}
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */  
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002c4a:	f44f 7280 	mov.w	r2, #256	@ 0x100
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 8002c4e:	b095      	sub	sp, #84	@ 0x54
  s_command.Instruction       = READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8002c50:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
 8002c54:	4603      	mov	r3, r0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002c56:	920c      	str	r2, [sp, #48]	@ 0x30
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8002c58:	2205      	movs	r2, #5
  s_command.DataMode          = QSPI_DATA_1_LINE;
 8002c5a:	910f      	str	r1, [sp, #60]	@ 0x3c

  s_config.Match           = 0;
#if defined (USE_STM32746G_DISCO_REVC03)
  s_config.Mask            = W25Q128J_SR_BUSY;
#else /* USE_STM32746G_DISCO */
  s_config.Mask            = N25Q128A_SR_WIP;
 8002c5c:	2101      	movs	r1, #1
  s_command.Instruction       = READ_STATUS_REG_CMD;
 8002c5e:	9206      	str	r2, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002c60:	2200      	movs	r2, #0
  s_config.Mask            = N25Q128A_SR_WIP;
 8002c62:	9101      	str	r1, [sp, #4]
  s_command.DummyCycles       = 0;
 8002c64:	920b      	str	r2, [sp, #44]	@ 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002c66:	9213      	str	r2, [sp, #76]	@ 0x4c
  s_config.Match           = 0;
 8002c68:	9200      	str	r2, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 1;
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8002c6a:	480b      	ldr	r0, [pc, #44]	@ (8002c98 <QSPI_AutoPollingMemReady.constprop.0+0x50>)
  s_config.StatusBytesSize = 1;
 8002c6c:	e9cd 1203 	strd	r1, r2, [sp, #12]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002c70:	e9cd 220d 	strd	r2, r2, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002c74:	e9cd 2211 	strd	r2, r2, [sp, #68]	@ 0x44
  s_config.Interval        = 0x10;
 8002c78:	2210      	movs	r2, #16
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8002c7a:	a906      	add	r1, sp, #24
  s_config.Interval        = 0x10;
 8002c7c:	9202      	str	r2, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8002c7e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002c82:	9205      	str	r2, [sp, #20]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8002c84:	466a      	mov	r2, sp
 8002c86:	f002 fb72 	bl	800536e <HAL_QSPI_AutoPolling>
  {
    return QSPI_ERROR;
  }

  return QSPI_OK;
}
 8002c8a:	3800      	subs	r0, #0
 8002c8c:	bf18      	it	ne
 8002c8e:	2001      	movne	r0, #1
 8002c90:	b015      	add	sp, #84	@ 0x54
 8002c92:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c96:	bf00      	nop
 8002c98:	20000abc 	.word	0x20000abc

08002c9c <QSPI_WriteEnable.constprop.0>:
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8002c9c:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002c9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
 8002ca2:	b095      	sub	sp, #84	@ 0x54
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ca4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ca8:	4817      	ldr	r0, [pc, #92]	@ (8002d08 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002caa:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8002cac:	2306      	movs	r3, #6
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002cae:	a906      	add	r1, sp, #24
  s_command.Instruction       = WRITE_ENABLE_CMD;
 8002cb0:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8002cb2:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002cb4:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8002cb8:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 0;
 8002cba:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002cbc:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002cbe:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002cc2:	f002 fb0f 	bl	80052e4 <HAL_QSPI_Command>
 8002cc6:	b9e0      	cbnz	r0, 8002d02 <QSPI_WriteEnable.constprop.0+0x66>
  s_config.Match           = N25Q128A_SR_WREN;
 8002cc8:	2302      	movs	r3, #2
  s_config.Interval        = 0x10;
 8002cca:	2201      	movs	r2, #1
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8002ccc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8002cd0:	9004      	str	r0, [sp, #16]
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002cd2:	480d      	ldr	r0, [pc, #52]	@ (8002d08 <QSPI_WriteEnable.constprop.0+0x6c>)
  s_config.Mask            = N25Q128A_SR_WREN;
 8002cd4:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8002cd8:	2310      	movs	r3, #16
 8002cda:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8002cde:	2305      	movs	r3, #5
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002ce0:	466a      	mov	r2, sp
  s_command.Instruction    = READ_STATUS_REG_CMD;
 8002ce2:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8002ce6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002cea:	a906      	add	r1, sp, #24
  s_command.DataMode       = QSPI_DATA_1_LINE;
 8002cec:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002cee:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002cf2:	f002 fb3c 	bl	800536e <HAL_QSPI_AutoPolling>
 8002cf6:	3800      	subs	r0, #0
 8002cf8:	bf18      	it	ne
 8002cfa:	2001      	movne	r0, #1
}
 8002cfc:	b015      	add	sp, #84	@ 0x54
 8002cfe:	f85d fb04 	ldr.w	pc, [sp], #4
    return QSPI_ERROR;
 8002d02:	2001      	movs	r0, #1
 8002d04:	e7fa      	b.n	8002cfc <QSPI_WriteEnable.constprop.0+0x60>
 8002d06:	bf00      	nop
 8002d08:	20000abc 	.word	0x20000abc

08002d0c <BSP_QSPI_Read>:
{
 8002d0c:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002d0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8002d12:	b08f      	sub	sp, #60	@ 0x3c
  if (HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002d14:	4c1b      	ldr	r4, [pc, #108]	@ (8002d84 <BSP_QSPI_Read+0x78>)
{
 8002d16:	4605      	mov	r5, r0
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002d18:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8002d1a:	23eb      	movs	r3, #235	@ 0xeb
  s_command.Address           = ReadAddr;
 8002d1c:	9101      	str	r1, [sp, #4]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8002d1e:	f04f 7140 	mov.w	r1, #50331648	@ 0x3000000
  s_command.Instruction       = QUAD_INOUT_FAST_READ_CMD;
 8002d22:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8002d24:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
  if (HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002d28:	4620      	mov	r0, r4
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8002d2a:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8002d2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d30:	9303      	str	r3, [sp, #12]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8002d32:	2300      	movs	r3, #0
 8002d34:	e9cd 3108 	strd	r3, r1, [sp, #32]
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8002d38:	210a      	movs	r1, #10
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8002d3a:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  s_command.DummyCycles       = N25Q128A_DUMMY_CYCLES_READ_QUAD;
 8002d3e:	9105      	str	r1, [sp, #20]
  if (HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002d40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d44:	4669      	mov	r1, sp
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002d46:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
  if (HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002d4a:	f002 facb 	bl	80052e4 <HAL_QSPI_Command>
 8002d4e:	b110      	cbz	r0, 8002d56 <BSP_QSPI_Read+0x4a>
    return QSPI_ERROR;
 8002d50:	2001      	movs	r0, #1
}
 8002d52:	b00f      	add	sp, #60	@ 0x3c
 8002d54:	bd30      	pop	{r4, r5, pc}
  MODIFY_REG(QSPIHandle.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_3_CYCLE);
 8002d56:	6822      	ldr	r2, [r4, #0]
  if (HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002d58:	4629      	mov	r1, r5
 8002d5a:	4620      	mov	r0, r4
  MODIFY_REG(QSPIHandle.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_3_CYCLE);
 8002d5c:	6853      	ldr	r3, [r2, #4]
 8002d5e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002d62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d66:	6053      	str	r3, [r2, #4]
  if (HAL_QSPI_Receive(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002d68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d6c:	f002 fbf9 	bl	8005562 <HAL_QSPI_Receive>
 8002d70:	2800      	cmp	r0, #0
 8002d72:	d1ed      	bne.n	8002d50 <BSP_QSPI_Read+0x44>
  MODIFY_REG(QSPIHandle.Instance->DCR, QUADSPI_DCR_CSHT, QSPI_CS_HIGH_TIME_6_CYCLE);
 8002d74:	6822      	ldr	r2, [r4, #0]
 8002d76:	6853      	ldr	r3, [r2, #4]
 8002d78:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002d7c:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8002d80:	6053      	str	r3, [r2, #4]
  return QSPI_OK;
 8002d82:	e7e6      	b.n	8002d52 <BSP_QSPI_Read+0x46>
 8002d84:	20000abc 	.word	0x20000abc

08002d88 <BSP_QSPI_Write>:
{
 8002d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002d8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8002d90:	b08e      	sub	sp, #56	@ 0x38
  current_size = N25Q128A_PAGE_SIZE - (WriteAddr % N25Q128A_PAGE_SIZE);
 8002d92:	b2cd      	uxtb	r5, r1
  end_addr = WriteAddr + Size;
 8002d94:	188e      	adds	r6, r1, r2
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002d96:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = EXT_QUAD_IN_FAST_PROG_CMD;
 8002d98:	2312      	movs	r3, #18
  current_size = N25Q128A_PAGE_SIZE - (WriteAddr % N25Q128A_PAGE_SIZE);
 8002d9a:	f5c5 7580 	rsb	r5, r5, #256	@ 0x100
{
 8002d9e:	4607      	mov	r7, r0
  s_command.Instruction       = EXT_QUAD_IN_FAST_PROG_CMD;
 8002da0:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8002da2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002da6:	4295      	cmp	r5, r2
{
 8002da8:	460c      	mov	r4, r1
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8002daa:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8002dac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002db0:	bf28      	it	cs
 8002db2:	4615      	movcs	r5, r2
    if (HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002db4:	f8df 8064 	ldr.w	r8, [pc, #100]	@ 8002e1c <BSP_QSPI_Write+0x94>
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8002db8:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8002dbc:	9303      	str	r3, [sp, #12]
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	e9cd 3208 	strd	r3, r2, [sp, #32]
  s_command.DummyCycles       = 0;
 8002dc4:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002dc6:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002dc8:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
    s_command.Address = current_addr;
 8002dcc:	9401      	str	r4, [sp, #4]
    s_command.NbData  = current_size;
 8002dce:	950a      	str	r5, [sp, #40]	@ 0x28
    if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8002dd0:	f7ff ff64 	bl	8002c9c <QSPI_WriteEnable.constprop.0>
 8002dd4:	bb00      	cbnz	r0, 8002e18 <BSP_QSPI_Write+0x90>
    if (HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002dd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dda:	4669      	mov	r1, sp
 8002ddc:	480f      	ldr	r0, [pc, #60]	@ (8002e1c <BSP_QSPI_Write+0x94>)
 8002dde:	f002 fa81 	bl	80052e4 <HAL_QSPI_Command>
 8002de2:	b9c8      	cbnz	r0, 8002e18 <BSP_QSPI_Write+0x90>
    if (HAL_QSPI_Transmit(&QSPIHandle, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002de4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002de8:	4639      	mov	r1, r7
 8002dea:	4640      	mov	r0, r8
 8002dec:	f002 fb5a 	bl	80054a4 <HAL_QSPI_Transmit>
 8002df0:	b990      	cbnz	r0, 8002e18 <BSP_QSPI_Write+0x90>
    if (QSPI_AutoPollingMemReady(&QSPIHandle, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8002df2:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002df6:	f7ff ff27 	bl	8002c48 <QSPI_AutoPollingMemReady.constprop.0>
 8002dfa:	b968      	cbnz	r0, 8002e18 <BSP_QSPI_Write+0x90>
    current_addr += current_size;
 8002dfc:	442c      	add	r4, r5
    pData += current_size;
 8002dfe:	442f      	add	r7, r5
    current_size = ((current_addr + N25Q128A_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : N25Q128A_PAGE_SIZE;
 8002e00:	f504 7380 	add.w	r3, r4, #256	@ 0x100
 8002e04:	42b3      	cmp	r3, r6
 8002e06:	bf8c      	ite	hi
 8002e08:	1b35      	subhi	r5, r6, r4
 8002e0a:	f44f 7580 	movls.w	r5, #256	@ 0x100
  } while (current_addr < end_addr);
 8002e0e:	42a6      	cmp	r6, r4
 8002e10:	d8dc      	bhi.n	8002dcc <BSP_QSPI_Write+0x44>
}
 8002e12:	b00e      	add	sp, #56	@ 0x38
 8002e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return QSPI_ERROR;
 8002e18:	2001      	movs	r0, #1
 8002e1a:	e7fa      	b.n	8002e12 <BSP_QSPI_Write+0x8a>
 8002e1c:	20000abc 	.word	0x20000abc

08002e20 <BSP_QSPI_Erase_Block>:
{
 8002e20:	b500      	push	{lr}
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002e22:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8002e26:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8002e28:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = SUBSECTOR_ERASE_CMD;
 8002e2a:	2320      	movs	r3, #32
  s_command.Address           = BlockAddress;
 8002e2c:	9001      	str	r0, [sp, #4]
  s_command.Instruction       = SUBSECTOR_ERASE_CMD;
 8002e2e:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8002e30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e34:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_24_BITS;
 8002e36:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e3a:	9303      	str	r3, [sp, #12]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8002e3c:	2300      	movs	r3, #0
  s_command.DataMode          = QSPI_DATA_NONE;
 8002e3e:	e9cd 3308 	strd	r3, r3, [sp, #32]
  s_command.DummyCycles       = 0;
 8002e42:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8002e44:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8002e46:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK)
 8002e4a:	f7ff ff27 	bl	8002c9c <QSPI_WriteEnable.constprop.0>
 8002e4e:	b118      	cbz	r0, 8002e58 <BSP_QSPI_Erase_Block+0x38>
    return QSPI_ERROR;
 8002e50:	2001      	movs	r0, #1
}
 8002e52:	b00f      	add	sp, #60	@ 0x3c
 8002e54:	f85d fb04 	ldr.w	pc, [sp], #4
  if (HAL_QSPI_Command(&QSPIHandle, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002e58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e5c:	4669      	mov	r1, sp
 8002e5e:	4806      	ldr	r0, [pc, #24]	@ (8002e78 <BSP_QSPI_Erase_Block+0x58>)
 8002e60:	f002 fa40 	bl	80052e4 <HAL_QSPI_Command>
 8002e64:	2800      	cmp	r0, #0
 8002e66:	d1f3      	bne.n	8002e50 <BSP_QSPI_Erase_Block+0x30>
  if (QSPI_AutoPollingMemReady(&QSPIHandle, N25Q128A_SUBSECTOR_ERASE_MAX_TIME) != QSPI_OK)
 8002e68:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8002e6c:	f7ff feec 	bl	8002c48 <QSPI_AutoPollingMemReady.constprop.0>
 8002e70:	3800      	subs	r0, #0
 8002e72:	bf18      	it	ne
 8002e74:	2001      	movne	r0, #1
 8002e76:	e7ec      	b.n	8002e52 <BSP_QSPI_Erase_Block+0x32>
 8002e78:	20000abc 	.word	0x20000abc

08002e7c <BSP_QSPI_GetInfo>:
  pInfo->EraseSectorSize    = N25Q128A_SUBSECTOR_SIZE;
 8002e7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e80:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
  pInfo->ProgPagesNumber    = (N25Q128A_FLASH_SIZE/N25Q128A_PAGE_SIZE);
 8002e84:	f44f 7180 	mov.w	r1, #256	@ 0x100
  pInfo->EraseSectorsNumber = (N25Q128A_FLASH_SIZE/N25Q128A_SUBSECTOR_SIZE);
 8002e88:	6083      	str	r3, [r0, #8]
  pInfo->EraseSectorSize    = N25Q128A_SUBSECTOR_SIZE;
 8002e8a:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->ProgPagesNumber    = (N25Q128A_FLASH_SIZE/N25Q128A_PAGE_SIZE);
 8002e8e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e92:	e9c0 1303 	strd	r1, r3, [r0, #12]
}
 8002e96:	2000      	movs	r0, #0
 8002e98:	4770      	bx	lr
	...

08002e9c <BSP_QSPI_MspInit>:
  QSPI_CLK_ENABLE();
 8002e9c:	4b45      	ldr	r3, [pc, #276]	@ (8002fb4 <BSP_QSPI_MspInit+0x118>)
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8002e9e:	2101      	movs	r1, #1
  QSPI_CLK_ENABLE();
 8002ea0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ea2:	f042 0202 	orr.w	r2, r2, #2
{
 8002ea6:	b5f0      	push	{r4, r5, r6, r7, lr}
  QSPI_CLK_ENABLE();
 8002ea8:	639a      	str	r2, [r3, #56]	@ 0x38
{
 8002eaa:	b08d      	sub	sp, #52	@ 0x34
  QSPI_CLK_ENABLE();
 8002eac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8002eae:	2409      	movs	r4, #9
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8002eb0:	4d41      	ldr	r5, [pc, #260]	@ (8002fb8 <BSP_QSPI_MspInit+0x11c>)
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8002eb2:	2704      	movs	r7, #4
  QSPI_CLK_ENABLE();
 8002eb4:	f002 0202 	and.w	r2, r2, #2
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002eb8:	2600      	movs	r6, #0
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8002eba:	4628      	mov	r0, r5
  QSPI_CLK_ENABLE();
 8002ebc:	9200      	str	r2, [sp, #0]
 8002ebe:	9a00      	ldr	r2, [sp, #0]
  QSPI_FORCE_RESET();
 8002ec0:	699a      	ldr	r2, [r3, #24]
 8002ec2:	f042 0202 	orr.w	r2, r2, #2
 8002ec6:	619a      	str	r2, [r3, #24]
  QSPI_RELEASE_RESET();
 8002ec8:	699a      	ldr	r2, [r3, #24]
 8002eca:	f022 0202 	bic.w	r2, r2, #2
 8002ece:	619a      	str	r2, [r3, #24]
  QSPI_CS_GPIO_CLK_ENABLE();
 8002ed0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ed2:	f042 0202 	orr.w	r2, r2, #2
 8002ed6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ed8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002eda:	f002 0202 	and.w	r2, r2, #2
 8002ede:	9201      	str	r2, [sp, #4]
 8002ee0:	9a01      	ldr	r2, [sp, #4]
  QSPI_CLK_GPIO_CLK_ENABLE();
 8002ee2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ee4:	f042 0202 	orr.w	r2, r2, #2
 8002ee8:	631a      	str	r2, [r3, #48]	@ 0x30
 8002eea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002eec:	f002 0202 	and.w	r2, r2, #2
 8002ef0:	9202      	str	r2, [sp, #8]
 8002ef2:	9a02      	ldr	r2, [sp, #8]
  QSPI_D0_GPIO_CLK_ENABLE();
 8002ef4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ef6:	f042 0208 	orr.w	r2, r2, #8
 8002efa:	631a      	str	r2, [r3, #48]	@ 0x30
 8002efc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002efe:	f002 0208 	and.w	r2, r2, #8
 8002f02:	9203      	str	r2, [sp, #12]
 8002f04:	9a03      	ldr	r2, [sp, #12]
  QSPI_D1_GPIO_CLK_ENABLE();
 8002f06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f08:	f042 0208 	orr.w	r2, r2, #8
 8002f0c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f10:	f002 0208 	and.w	r2, r2, #8
 8002f14:	9204      	str	r2, [sp, #16]
 8002f16:	9a04      	ldr	r2, [sp, #16]
  QSPI_D2_GPIO_CLK_ENABLE();
 8002f18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f1a:	f042 0210 	orr.w	r2, r2, #16
 8002f1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f22:	f002 0210 	and.w	r2, r2, #16
 8002f26:	9205      	str	r2, [sp, #20]
 8002f28:	9a05      	ldr	r2, [sp, #20]
  QSPI_D3_GPIO_CLK_ENABLE();
 8002f2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f2c:	f042 0208 	orr.w	r2, r2, #8
 8002f30:	631a      	str	r2, [r3, #48]	@ 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002f32:	2240      	movs	r2, #64	@ 0x40
  QSPI_D3_GPIO_CLK_ENABLE();
 8002f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	9306      	str	r3, [sp, #24]
 8002f3c:	9b06      	ldr	r3, [sp, #24]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002f3e:	2302      	movs	r3, #2
 8002f40:	e9cd 2307 	strd	r2, r3, [sp, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e9cd 1309 	strd	r1, r3, [sp, #36]	@ 0x24
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8002f4a:	230a      	movs	r3, #10
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8002f4c:	a907      	add	r1, sp, #28
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8002f4e:	930b      	str	r3, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &gpio_init_structure);
 8002f50:	f001 f9ae 	bl	80042b0 <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8002f54:	a907      	add	r1, sp, #28
 8002f56:	4628      	mov	r0, r5
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8002f58:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002f5a:	9609      	str	r6, [sp, #36]	@ 0x24
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8002f5c:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8002f5e:	f001 f9a7 	bl	80042b0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 8002f62:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8002f66:	a907      	add	r1, sp, #28
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8002f68:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8002f6a:	441d      	add	r5, r3
  gpio_init_structure.Pin       = QSPI_D0_PIN;
 8002f6c:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &gpio_init_structure);
 8002f6e:	4628      	mov	r0, r5
 8002f70:	f001 f99e 	bl	80042b0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 8002f74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 8002f78:	a907      	add	r1, sp, #28
 8002f7a:	4628      	mov	r0, r5
  gpio_init_structure.Pin       = QSPI_D1_PIN;
 8002f7c:	9307      	str	r3, [sp, #28]
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8002f7e:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &gpio_init_structure);
 8002f80:	f001 f996 	bl	80042b0 <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 8002f84:	a907      	add	r1, sp, #28
 8002f86:	480d      	ldr	r0, [pc, #52]	@ (8002fbc <BSP_QSPI_MspInit+0x120>)
  gpio_init_structure.Pin       = QSPI_D2_PIN;
 8002f88:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8002f8a:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &gpio_init_structure);
 8002f8c:	f001 f990 	bl	80042b0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 8002f90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 8002f94:	a907      	add	r1, sp, #28
 8002f96:	4628      	mov	r0, r5
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8002f98:	940b      	str	r4, [sp, #44]	@ 0x2c
  gpio_init_structure.Pin       = QSPI_D3_PIN;
 8002f9a:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &gpio_init_structure);
 8002f9c:	f001 f988 	bl	80042b0 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8002fa0:	4632      	mov	r2, r6
 8002fa2:	210f      	movs	r1, #15
 8002fa4:	205c      	movs	r0, #92	@ 0x5c
 8002fa6:	f000 fd03 	bl	80039b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8002faa:	205c      	movs	r0, #92	@ 0x5c
 8002fac:	f000 fd32 	bl	8003a14 <HAL_NVIC_EnableIRQ>
}
 8002fb0:	b00d      	add	sp, #52	@ 0x34
 8002fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	40020400 	.word	0x40020400
 8002fbc:	40021000 	.word	0x40021000

08002fc0 <BSP_QSPI_Init>:
{ 
 8002fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
  QSPIHandle.Instance = QUADSPI;
 8002fc2:	4c49      	ldr	r4, [pc, #292]	@ (80030e8 <BSP_QSPI_Init+0x128>)
{ 
 8002fc4:	b091      	sub	sp, #68	@ 0x44
  QSPIHandle.Instance = QUADSPI;
 8002fc6:	4b49      	ldr	r3, [pc, #292]	@ (80030ec <BSP_QSPI_Init+0x12c>)
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8002fc8:	4620      	mov	r0, r4
  QSPIHandle.Instance = QUADSPI;
 8002fca:	6023      	str	r3, [r4, #0]
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 8002fcc:	f002 f977 	bl	80052be <HAL_QSPI_DeInit>
 8002fd0:	4605      	mov	r5, r0
 8002fd2:	b110      	cbz	r0, 8002fda <BSP_QSPI_Init+0x1a>
    return QSPI_ERROR;
 8002fd4:	2001      	movs	r0, #1
}
 8002fd6:	b011      	add	sp, #68	@ 0x44
 8002fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  BSP_QSPI_MspInit(&QSPIHandle, NULL);
 8002fda:	4601      	mov	r1, r0
 8002fdc:	4620      	mov	r0, r4
 8002fde:	f7ff ff5d 	bl	8002e9c <BSP_QSPI_MspInit>
  QSPIHandle.Init.FifoThreshold      = 4;
 8002fe2:	2601      	movs	r6, #1
 8002fe4:	2304      	movs	r3, #4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe6:	f04f 7780 	mov.w	r7, #16777216	@ 0x1000000
 8002fea:	e9c4 6301 	strd	r6, r3, [r4, #4]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8002fee:	2310      	movs	r3, #16
 8002ff0:	60e3      	str	r3, [r4, #12]
 8002ff2:	fa97 f3a7 	rbit	r3, r7
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8002ff6:	fab3 f383 	clz	r3, r3
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 8002ffa:	4620      	mov	r0, r4
  QSPIHandle.Init.FlashSize          = POSITION_VAL(N25Q128A_FLASH_SIZE) - 1;
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	6123      	str	r3, [r4, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE; /* Min 50ns for nonRead */
 8003000:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 8003004:	e9c4 5507 	strd	r5, r5, [r4, #28]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8003008:	e9c4 3505 	strd	r3, r5, [r4, #20]
  if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 800300c:	f002 f904 	bl	8005218 <HAL_QSPI_Init>
 8003010:	2800      	cmp	r0, #0
 8003012:	d1df      	bne.n	8002fd4 <BSP_QSPI_Init+0x14>
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003014:	f44f 7580 	mov.w	r5, #256	@ 0x100
  s_command.Instruction       = RESET_ENABLE_CMD;
 8003018:	2366      	movs	r3, #102	@ 0x66
  s_command.DataMode          = QSPI_DATA_NONE;
 800301a:	900b      	str	r0, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800301c:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.DummyCycles       = 0;
 8003020:	9007      	str	r0, [sp, #28]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003022:	a902      	add	r1, sp, #8
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003024:	900f      	str	r0, [sp, #60]	@ 0x3c
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003026:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = RESET_ENABLE_CMD;
 8003028:	9302      	str	r3, [sp, #8]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800302a:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800302e:	e9cd 000d 	strd	r0, r0, [sp, #52]	@ 0x34
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003032:	4620      	mov	r0, r4
 8003034:	f002 f956 	bl	80052e4 <HAL_QSPI_Command>
 8003038:	b108      	cbz	r0, 800303e <BSP_QSPI_Init+0x7e>
    return QSPI_NOT_SUPPORTED;
 800303a:	2004      	movs	r0, #4
 800303c:	e7cb      	b.n	8002fd6 <BSP_QSPI_Init+0x16>
  s_command.Instruction = RESET_MEMORY_CMD;
 800303e:	2399      	movs	r3, #153	@ 0x99
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003040:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003044:	a902      	add	r1, sp, #8
 8003046:	4620      	mov	r0, r4
  s_command.Instruction = RESET_MEMORY_CMD;
 8003048:	9302      	str	r3, [sp, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800304a:	f002 f94b 	bl	80052e4 <HAL_QSPI_Command>
 800304e:	2800      	cmp	r0, #0
 8003050:	d1f3      	bne.n	800303a <BSP_QSPI_Init+0x7a>
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8003052:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003056:	f7ff fdf7 	bl	8002c48 <QSPI_AutoPollingMemReady.constprop.0>
 800305a:	2800      	cmp	r0, #0
 800305c:	d1ed      	bne.n	800303a <BSP_QSPI_Init+0x7a>
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 800305e:	2385      	movs	r3, #133	@ 0x85
  s_command.DummyCycles       = 0;
 8003060:	9007      	str	r0, [sp, #28]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003062:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003066:	a902      	add	r1, sp, #8
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8003068:	9508      	str	r5, [sp, #32]
  s_command.Instruction       = READ_VOL_CFG_REG_CMD;
 800306a:	9302      	str	r3, [sp, #8]
  s_command.DataMode          = QSPI_DATA_1_LINE;
 800306c:	970b      	str	r7, [sp, #44]	@ 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800306e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8003072:	e9cd 600c 	strd	r6, r0, [sp, #48]	@ 0x30
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8003076:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800307a:	4620      	mov	r0, r4
 800307c:	f002 f932 	bl	80052e4 <HAL_QSPI_Command>
 8003080:	2800      	cmp	r0, #0
 8003082:	d1da      	bne.n	800303a <BSP_QSPI_Init+0x7a>
  if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003084:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003088:	f10d 0107 	add.w	r1, sp, #7
 800308c:	4620      	mov	r0, r4
 800308e:	f002 fa68 	bl	8005562 <HAL_QSPI_Receive>
 8003092:	2800      	cmp	r0, #0
 8003094:	d1d1      	bne.n	800303a <BSP_QSPI_Init+0x7a>
  if (QSPI_WriteEnable(hqspi) != QSPI_OK)
 8003096:	f7ff fe01 	bl	8002c9c <QSPI_WriteEnable.constprop.0>
 800309a:	2800      	cmp	r0, #0
 800309c:	d1cd      	bne.n	800303a <BSP_QSPI_Init+0x7a>
  s_command.Instruction = WRITE_VOL_CFG_REG_CMD;
 800309e:	2381      	movs	r3, #129	@ 0x81
 80030a0:	22f0      	movs	r2, #240	@ 0xf0
 80030a2:	9302      	str	r3, [sp, #8]
 80030a4:	fa92 f2a2 	rbit	r2, r2
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 80030a8:	210a      	movs	r1, #10
 80030aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80030ae:	fab2 f282 	clz	r2, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80030b2:	4620      	mov	r0, r4
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 80030b4:	f003 030f 	and.w	r3, r3, #15
 80030b8:	fa01 f202 	lsl.w	r2, r1, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80030bc:	a902      	add	r1, sp, #8
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 80030be:	4313      	orrs	r3, r2
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80030c0:	f241 3288 	movw	r2, #5000	@ 0x1388
  MODIFY_REG(reg, N25Q128A_VCR_NB_DUMMY, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(N25Q128A_VCR_NB_DUMMY)));
 80030c4:	f88d 3007 	strb.w	r3, [sp, #7]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80030c8:	f002 f90c 	bl	80052e4 <HAL_QSPI_Command>
 80030cc:	2800      	cmp	r0, #0
 80030ce:	d1b4      	bne.n	800303a <BSP_QSPI_Init+0x7a>
  if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80030d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030d4:	f10d 0107 	add.w	r1, sp, #7
 80030d8:	4620      	mov	r0, r4
 80030da:	f002 f9e3 	bl	80054a4 <HAL_QSPI_Transmit>
 80030de:	2800      	cmp	r0, #0
 80030e0:	f43f af79 	beq.w	8002fd6 <BSP_QSPI_Init+0x16>
 80030e4:	e7a9      	b.n	800303a <BSP_QSPI_Init+0x7a>
 80030e6:	bf00      	nop
 80030e8:	20000abc 	.word	0x20000abc
 80030ec:	a0001000 	.word	0xa0001000

080030f0 <BSP_SD_IsDetected>:
  * @brief  Detects if SD card is correctly plugged in the memory slot or not.
  * @retval Returns if SD is detected or not
  */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t      status = SD_PRESENT;
 80030f0:	2301      	movs	r3, #1
{
 80030f2:	b507      	push	{r0, r1, r2, lr}
  
  /* Check SD card detect pin */
  if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET)
 80030f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80030f8:	4807      	ldr	r0, [pc, #28]	@ (8003118 <BSP_SD_IsDetected+0x28>)
  __IO uint8_t      status = SD_PRESENT;
 80030fa:	f88d 3007 	strb.w	r3, [sp, #7]
  if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET)
 80030fe:	f001 fa55 	bl	80045ac <HAL_GPIO_ReadPin>
 8003102:	2801      	cmp	r0, #1
 8003104:	d102      	bne.n	800310c <BSP_SD_IsDetected+0x1c>
  {
    status = SD_NOT_PRESENT;
 8003106:	2300      	movs	r3, #0
 8003108:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  return status;
 800310c:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8003110:	b003      	add	sp, #12
 8003112:	f85d fb04 	ldr.w	pc, [sp], #4
 8003116:	bf00      	nop
 8003118:	40020800 	.word	0x40020800

0800311c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800311c:	b507      	push	{r0, r1, r2, lr}
  if(HAL_SD_ReadBlocks(&uSdHandle, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	4613      	mov	r3, r2
 8003122:	460a      	mov	r2, r1
 8003124:	4601      	mov	r1, r0
 8003126:	4804      	ldr	r0, [pc, #16]	@ (8003138 <BSP_SD_ReadBlocks+0x1c>)
 8003128:	f003 fbc8 	bl	80068bc <HAL_SD_ReadBlocks>
  }
  else
  {
    return MSD_OK;
  }
}
 800312c:	3800      	subs	r0, #0
 800312e:	bf18      	it	ne
 8003130:	2001      	movne	r0, #1
 8003132:	b003      	add	sp, #12
 8003134:	f85d fb04 	ldr.w	pc, [sp], #4
 8003138:	20000b08 	.word	0x20000b08

0800313c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800313c:	b507      	push	{r0, r1, r2, lr}
  if(HAL_SD_WriteBlocks(&uSdHandle, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800313e:	9300      	str	r3, [sp, #0]
 8003140:	4613      	mov	r3, r2
 8003142:	460a      	mov	r2, r1
 8003144:	4601      	mov	r1, r0
 8003146:	4804      	ldr	r0, [pc, #16]	@ (8003158 <BSP_SD_WriteBlocks+0x1c>)
 8003148:	f003 fcb0 	bl	8006aac <HAL_SD_WriteBlocks>
  }
  else
  {
    return MSD_OK;
  }
}
 800314c:	3800      	subs	r0, #0
 800314e:	bf18      	it	ne
 8003150:	2001      	movne	r0, #1
 8003152:	b003      	add	sp, #12
 8003154:	f85d fb04 	ldr.w	pc, [sp], #4
 8003158:	20000b08 	.word	0x20000b08

0800315c <BSP_SD_Erase>:
  * @param  StartAddr: Start byte address
  * @param  EndAddr: End byte address
  * @retval SD status
  */
uint8_t BSP_SD_Erase(uint32_t StartAddr, uint32_t EndAddr)
{
 800315c:	460a      	mov	r2, r1
  if(HAL_SD_Erase(&uSdHandle, StartAddr, EndAddr) != HAL_OK)
 800315e:	4601      	mov	r1, r0
 8003160:	4803      	ldr	r0, [pc, #12]	@ (8003170 <BSP_SD_Erase+0x14>)
{
 8003162:	b508      	push	{r3, lr}
  if(HAL_SD_Erase(&uSdHandle, StartAddr, EndAddr) != HAL_OK)
 8003164:	f003 fd66 	bl	8006c34 <HAL_SD_Erase>
  }
  else
  {
    return MSD_OK;
  }
}
 8003168:	3800      	subs	r0, #0
 800316a:	bf18      	it	ne
 800316c:	2001      	movne	r0, #1
 800316e:	bd08      	pop	{r3, pc}
 8003170:	20000b08 	.word	0x20000b08

08003174 <BSP_SD_MspInit>:
  static DMA_HandleTypeDef dma_rx_handle;
  static DMA_HandleTypeDef dma_tx_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable SDIO clock */
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003174:	4b58      	ldr	r3, [pc, #352]	@ (80032d8 <BSP_SD_MspInit+0x164>)
 8003176:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003178:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
{
 800317c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003180:	645a      	str	r2, [r3, #68]	@ 0x44
{
 8003182:	b08b      	sub	sp, #44	@ 0x2c
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003184:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
  gpio_init_structure.Alternate = GPIO_AF12_SDMMC1;
 8003186:	f04f 0803 	mov.w	r8, #3
{
 800318a:	4605      	mov	r5, r0
  /* GPIOC configuration */
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);

  /* GPIOD configuration */
  gpio_init_structure.Pin = GPIO_PIN_2;
 800318c:	f04f 0904 	mov.w	r9, #4
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003190:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003194:	a905      	add	r1, sp, #20
 8003196:	4851      	ldr	r0, [pc, #324]	@ (80032dc <BSP_SD_MspInit+0x168>)
  HAL_NVIC_SetPriority(SDMMC1_IRQn, 0x0E, 0);
  HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
    
  /* Configure DMA Rx parameters */
  dma_rx_handle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8003198:	2600      	movs	r6, #0
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 800319a:	9201      	str	r2, [sp, #4]
  dma_rx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
  dma_rx_handle.Init.MemInc              = DMA_MINC_ENABLE;
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_rx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 800319c:	f44f 4b80 	mov.w	fp, #16384	@ 0x4000
  __HAL_RCC_SDMMC1_CLK_ENABLE();
 80031a0:	9a01      	ldr	r2, [sp, #4]
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 80031a2:	f04f 0a20 	mov.w	sl, #32
  __DMAx_TxRx_CLK_ENABLE();
 80031a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  dma_rx_handle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 80031a8:	4c4d      	ldr	r4, [pc, #308]	@ (80032e0 <BSP_SD_MspInit+0x16c>)
  __DMAx_TxRx_CLK_ENABLE();
 80031aa:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
  dma_rx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
  dma_rx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_rx_handle.Init.MemBurst            = DMA_MBURST_INC4;
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
  
  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 80031ae:	4627      	mov	r7, r4
  __DMAx_TxRx_CLK_ENABLE();
 80031b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80031b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031b4:	f402 0280 	and.w	r2, r2, #4194304	@ 0x400000
 80031b8:	9202      	str	r2, [sp, #8]
 80031ba:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031be:	f042 0204 	orr.w	r2, r2, #4
 80031c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80031c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031c6:	f002 0204 	and.w	r2, r2, #4
 80031ca:	9203      	str	r2, [sp, #12]
 80031cc:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80031ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031d0:	f042 0208 	orr.w	r2, r2, #8
 80031d4:	631a      	str	r2, [r3, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80031d6:	2202      	movs	r2, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80031d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031da:	f003 0308 	and.w	r3, r3, #8
 80031de:	9304      	str	r3, [sp, #16]
 80031e0:	9b04      	ldr	r3, [sp, #16]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
  gpio_init_structure.Alternate = GPIO_AF12_SDMMC1;
 80031e8:	230c      	movs	r3, #12
 80031ea:	e9cd 8308 	strd	r8, r3, [sp, #32]
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 80031ee:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80031f2:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80031f4:	f001 f85c 	bl	80042b0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80031f8:	a905      	add	r1, sp, #20
 80031fa:	483a      	ldr	r0, [pc, #232]	@ (80032e4 <BSP_SD_MspInit+0x170>)
  gpio_init_structure.Pin = GPIO_PIN_2;
 80031fc:	f8cd 9014 	str.w	r9, [sp, #20]
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003200:	f001 f856 	bl	80042b0 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(SDMMC1_IRQn, 0x0E, 0);
 8003204:	2200      	movs	r2, #0
 8003206:	210e      	movs	r1, #14
 8003208:	2031      	movs	r0, #49	@ 0x31
 800320a:	f000 fbd1 	bl	80039b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800320e:	2031      	movs	r0, #49	@ 0x31
 8003210:	f000 fc00 	bl	8003a14 <HAL_NVIC_EnableIRQ>
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003214:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003218:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800321c:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 8003220:	4831      	ldr	r0, [pc, #196]	@ (80032e8 <BSP_SD_MspInit+0x174>)
  dma_rx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 8003222:	f8c4 6090 	str.w	r6, [r4, #144]	@ 0x90
  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 8003226:	f847 0f84 	str.w	r0, [r7, #132]!
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_rx_handle);
 800322a:	4638      	mov	r0, r7
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
 800322c:	642f      	str	r7, [r5, #64]	@ 0x40
  dma_rx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800322e:	f8c4 80ac 	str.w	r8, [r4, #172]	@ 0xac
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
 8003232:	f8c4 50bc 	str.w	r5, [r4, #188]	@ 0xbc
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003236:	e9c4 2325 	strd	r2, r3, [r4, #148]	@ 0x94
  dma_rx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 800323a:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800323e:	e9c4 1622 	strd	r1, r6, [r4, #136]	@ 0x88
  dma_rx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8003242:	e9c4 3929 	strd	r3, r9, [r4, #164]	@ 0xa4
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8003246:	f44f 0100 	mov.w	r1, #8388608	@ 0x800000
 800324a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 800324e:	e9c4 ba27 	strd	fp, sl, [r4, #156]	@ 0x9c
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8003252:	e9c4 132c 	strd	r1, r3, [r4, #176]	@ 0xb0
  HAL_DMA_DeInit(&dma_rx_handle);
 8003256:	f000 fcef 	bl	8003c38 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_rx_handle);
 800325a:	4638      	mov	r0, r7
 800325c:	f000 fc6e 	bl	8003b3c <HAL_DMA_Init>
  /* Configure DMA Tx parameters */
  dma_tx_handle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
  dma_tx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
  dma_tx_handle.Init.MemInc              = DMA_MINC_ENABLE;
  dma_tx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003260:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003264:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  dma_tx_handle.Init.Mode                = DMA_PFCTRL;
  dma_tx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
  dma_tx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
  dma_tx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_tx_handle.Init.MemBurst            = DMA_MBURST_INC4;
  dma_tx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8003268:	f44f 0700 	mov.w	r7, #8388608	@ 0x800000
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800326c:	2140      	movs	r1, #64	@ 0x40
 800326e:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
  dma_tx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 8003272:	f8c4 60f0 	str.w	r6, [r4, #240]	@ 0xf0
  dma_tx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003276:	f8c4 810c 	str.w	r8, [r4, #268]	@ 0x10c
  
  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, dma_tx_handle);
 800327a:	f8c4 511c 	str.w	r5, [r4, #284]	@ 0x11c
  dma_tx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800327e:	e9c4 233d 	strd	r2, r3, [r4, #244]	@ 0xf4
  dma_tx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8003282:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
  dma_tx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8003286:	e9c4 3941 	strd	r3, r9, [r4, #260]	@ 0x104
  dma_tx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 800328a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800328e:	e9c4 7344 	strd	r7, r3, [r4, #272]	@ 0x110
  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
 8003292:	4b16      	ldr	r3, [pc, #88]	@ (80032ec <BSP_SD_MspInit+0x178>)
 8003294:	4627      	mov	r7, r4
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8003296:	e9c4 013a 	strd	r0, r1, [r4, #232]	@ 0xe8
  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
 800329a:	f847 3fe4 	str.w	r3, [r7, #228]!
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_tx_handle);
 800329e:	4638      	mov	r0, r7
  __HAL_LINKDMA(hsd, hdmatx, dma_tx_handle);
 80032a0:	63ef      	str	r7, [r5, #60]	@ 0x3c
  dma_tx_handle.Init.Mode                = DMA_PFCTRL;
 80032a2:	e9c4 ba3f 	strd	fp, sl, [r4, #252]	@ 0xfc
  HAL_DMA_DeInit(&dma_tx_handle);
 80032a6:	f000 fcc7 	bl	8003c38 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_tx_handle); 
 80032aa:	4638      	mov	r0, r7
 80032ac:	f000 fc46 	bl	8003b3c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Rx_IRQn, 0x0F, 0);
 80032b0:	4632      	mov	r2, r6
 80032b2:	210f      	movs	r1, #15
 80032b4:	203b      	movs	r0, #59	@ 0x3b
 80032b6:	f000 fb7b 	bl	80039b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Rx_IRQn);
 80032ba:	203b      	movs	r0, #59	@ 0x3b
 80032bc:	f000 fbaa 	bl	8003a14 <HAL_NVIC_EnableIRQ>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Tx_IRQn, 0x0F, 0);
 80032c0:	4632      	mov	r2, r6
 80032c2:	210f      	movs	r1, #15
 80032c4:	2045      	movs	r0, #69	@ 0x45
 80032c6:	f000 fb73 	bl	80039b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Tx_IRQn);
 80032ca:	2045      	movs	r0, #69	@ 0x45
 80032cc:	f000 fba2 	bl	8003a14 <HAL_NVIC_EnableIRQ>
}
 80032d0:	b00b      	add	sp, #44	@ 0x2c
 80032d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032d6:	bf00      	nop
 80032d8:	40023800 	.word	0x40023800
 80032dc:	40020800 	.word	0x40020800
 80032e0:	20000b08 	.word	0x20000b08
 80032e4:	40020c00 	.word	0x40020c00
 80032e8:	40026458 	.word	0x40026458
 80032ec:	400264a0 	.word	0x400264a0

080032f0 <BSP_SD_Detect_MspInit>:
  * @param  hsd: SD handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SD_Detect_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 80032f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef  gpio_init_structure;

  SD_DETECT_GPIO_CLK_ENABLE();
 80032f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003328 <BSP_SD_Detect_MspInit+0x38>)

  /* GPIO configuration in input for uSD_Detect signal */
  gpio_init_structure.Pin       = SD_DETECT_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80032f4:	2101      	movs	r1, #1
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 80032f6:	480d      	ldr	r0, [pc, #52]	@ (800332c <BSP_SD_Detect_MspInit+0x3c>)
  SD_DETECT_GPIO_CLK_ENABLE();
 80032f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032fa:	f042 0204 	orr.w	r2, r2, #4
 80032fe:	631a      	str	r2, [r3, #48]	@ 0x30
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8003300:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  SD_DETECT_GPIO_CLK_ENABLE();
 8003304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003306:	f003 0304 	and.w	r3, r3, #4
 800330a:	9300      	str	r3, [sp, #0]
 800330c:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 800330e:	2300      	movs	r3, #0
 8003310:	e9cd 2301 	strd	r2, r3, [sp, #4]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8003314:	2303      	movs	r3, #3
 8003316:	e9cd 1303 	strd	r1, r3, [sp, #12]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 800331a:	a901      	add	r1, sp, #4
 800331c:	f000 ffc8 	bl	80042b0 <HAL_GPIO_Init>
}
 8003320:	b007      	add	sp, #28
 8003322:	f85d fb04 	ldr.w	pc, [sp], #4
 8003326:	bf00      	nop
 8003328:	40023800 	.word	0x40023800
 800332c:	40020800 	.word	0x40020800

08003330 <BSP_SD_Init>:
{ 
 8003330:	b570      	push	{r4, r5, r6, lr}
  uSdHandle.Instance = SDMMC1;
 8003332:	4c13      	ldr	r4, [pc, #76]	@ (8003380 <BSP_SD_Init+0x50>)
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003334:	2600      	movs	r6, #0
 8003336:	4b13      	ldr	r3, [pc, #76]	@ (8003384 <BSP_SD_Init+0x54>)
  BSP_SD_Detect_MspInit(&uSdHandle, NULL);
 8003338:	4631      	mov	r1, r6
 800333a:	4620      	mov	r0, r4
  uSdHandle.Init.ClockDiv            = SDMMC_TRANSFER_CLK_DIV;
 800333c:	61a6      	str	r6, [r4, #24]
  uSdHandle.Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800333e:	e9c4 3600 	strd	r3, r6, [r4]
  uSdHandle.Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003342:	e9c4 6602 	strd	r6, r6, [r4, #8]
  uSdHandle.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003346:	e9c4 6604 	strd	r6, r6, [r4, #16]
  BSP_SD_Detect_MspInit(&uSdHandle, NULL);
 800334a:	f7ff ffd1 	bl	80032f0 <BSP_SD_Detect_MspInit>
  if(BSP_SD_IsDetected() != SD_PRESENT)   /* Check if SD card is present */
 800334e:	f7ff fecf 	bl	80030f0 <BSP_SD_IsDetected>
 8003352:	2801      	cmp	r0, #1
 8003354:	4605      	mov	r5, r0
 8003356:	d111      	bne.n	800337c <BSP_SD_Init+0x4c>
  BSP_SD_MspInit(&uSdHandle, NULL);
 8003358:	4620      	mov	r0, r4
 800335a:	4631      	mov	r1, r6
 800335c:	f7ff ff0a 	bl	8003174 <BSP_SD_MspInit>
  if(HAL_SD_Init(&uSdHandle) != HAL_OK)
 8003360:	4620      	mov	r0, r4
 8003362:	f003 fe83 	bl	800706c <HAL_SD_Init>
 8003366:	b938      	cbnz	r0, 8003378 <BSP_SD_Init+0x48>
    if(HAL_SD_ConfigWideBusOperation(&uSdHandle, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8003368:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800336c:	4620      	mov	r0, r4
 800336e:	f003 fe99 	bl	80070a4 <HAL_SD_ConfigWideBusOperation>
 8003372:	1b85      	subs	r5, r0, r6
 8003374:	bf18      	it	ne
 8003376:	2501      	movne	r5, #1
}
 8003378:	4628      	mov	r0, r5
 800337a:	bd70      	pop	{r4, r5, r6, pc}
    return MSD_ERROR_SD_NOT_PRESENT;
 800337c:	2502      	movs	r5, #2
 800337e:	e7fb      	b.n	8003378 <BSP_SD_Init+0x48>
 8003380:	20000b08 	.word	0x20000b08
 8003384:	40012c00 	.word	0x40012c00

08003388 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8003388:	b508      	push	{r3, lr}
  return((HAL_SD_GetCardState(&uSdHandle) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800338a:	4803      	ldr	r0, [pc, #12]	@ (8003398 <BSP_SD_GetCardState+0x10>)
 800338c:	f003 ff14 	bl	80071b8 <HAL_SD_GetCardState>
}
 8003390:	3804      	subs	r0, #4
 8003392:	bf18      	it	ne
 8003394:	2001      	movne	r0, #1
 8003396:	bd08      	pop	{r3, pc}
 8003398:	20000b08 	.word	0x20000b08

0800339c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800339c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80033a0:	4c21      	ldr	r4, [pc, #132]	@ (8003428 <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80033a2:	2710      	movs	r7, #16
 80033a4:	2601      	movs	r6, #1
  __IO uint32_t tmpmrd = 0;
 80033a6:	f04f 0800 	mov.w	r8, #0
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80033aa:	19e5      	adds	r5, r4, r7
 80033ac:	4621      	mov	r1, r4
{
 80033ae:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80033b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80033b4:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
 80033b6:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80033ba:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 80033be:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80033c2:	f003 fff7 	bl	80073b4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80033c6:	4630      	mov	r0, r6
 80033c8:	f000 face 	bl	8003968 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80033cc:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80033ce:	4621      	mov	r1, r4
 80033d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80033d4:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80033d6:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 80033da:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80033de:	f003 ffe9 	bl	80073b4 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80033e2:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80033e4:	4621      	mov	r1, r4
 80033e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80033ea:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80033ec:	e9c4 3700 	strd	r3, r7, [r4]
  Command.AutoRefreshNumber      = 8;
 80033f0:	2308      	movs	r3, #8
  Command.ModeRegisterDefinition = 0;
 80033f2:	e9c4 3802 	strd	r3, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80033f6:	f003 ffdd 	bl	80073b4 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80033fa:	f44f 7308 	mov.w	r3, #544	@ 0x220
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80033fe:	4621      	mov	r1, r4
 8003400:	f64f 72ff 	movw	r2, #65535	@ 0xffff
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003404:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003406:	2304      	movs	r3, #4
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003408:	4628      	mov	r0, r5
  Command.AutoRefreshNumber      = 1;
 800340a:	60a6      	str	r6, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800340c:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
 8003410:	9b01      	ldr	r3, [sp, #4]
 8003412:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003414:	f003 ffce 	bl	80073b4 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003418:	4649      	mov	r1, r9
 800341a:	4628      	mov	r0, r5
}
 800341c:	b003      	add	sp, #12
 800341e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003422:	f003 bfe6 	b.w	80073f2 <HAL_SDRAM_ProgramRefreshRate>
 8003426:	bf00      	nop
 8003428:	20000d0c 	.word	0x20000d0c

0800342c <BSP_SDRAM_ReadData>:
  * @param  pData: Pointer to data to be read  
  * @param  uwDataSize: Size of read data from the memory
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_ReadData(uint32_t uwStartAddress, uint32_t *pData, uint32_t uwDataSize)
{
 800342c:	b508      	push	{r3, lr}
 800342e:	4613      	mov	r3, r2
  if(HAL_SDRAM_Read_32b(&sdramHandle, (uint32_t *)uwStartAddress, pData, uwDataSize) != HAL_OK)
 8003430:	460a      	mov	r2, r1
 8003432:	4601      	mov	r1, r0
 8003434:	4803      	ldr	r0, [pc, #12]	@ (8003444 <BSP_SDRAM_ReadData+0x18>)
 8003436:	f003 ff1b 	bl	8007270 <HAL_SDRAM_Read_32b>
  }
  else
  {
    return SDRAM_OK;
  } 
}
 800343a:	3800      	subs	r0, #0
 800343c:	bf18      	it	ne
 800343e:	2001      	movne	r0, #1
 8003440:	bd08      	pop	{r3, pc}
 8003442:	bf00      	nop
 8003444:	20000d1c 	.word	0x20000d1c

08003448 <BSP_SDRAM_ReadData_DMA>:
  * @param  pData: Pointer to data to be read  
  * @param  uwDataSize: Size of read data from the memory
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_ReadData_DMA(uint32_t uwStartAddress, uint32_t *pData, uint32_t uwDataSize)
{
 8003448:	b508      	push	{r3, lr}
 800344a:	4613      	mov	r3, r2
  if(HAL_SDRAM_Read_DMA(&sdramHandle, (uint32_t *)uwStartAddress, pData, uwDataSize) != HAL_OK)
 800344c:	460a      	mov	r2, r1
 800344e:	4601      	mov	r1, r0
 8003450:	4803      	ldr	r0, [pc, #12]	@ (8003460 <BSP_SDRAM_ReadData_DMA+0x18>)
 8003452:	f003 ff55 	bl	8007300 <HAL_SDRAM_Read_DMA>
  }
  else
  {
    return SDRAM_OK;
  }     
}
 8003456:	3800      	subs	r0, #0
 8003458:	bf18      	it	ne
 800345a:	2001      	movne	r0, #1
 800345c:	bd08      	pop	{r3, pc}
 800345e:	bf00      	nop
 8003460:	20000d1c 	.word	0x20000d1c

08003464 <BSP_SDRAM_WriteData>:
  * @param  pData: Pointer to data to be written  
  * @param  uwDataSize: Size of written data from the memory
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_WriteData(uint32_t uwStartAddress, uint32_t *pData, uint32_t uwDataSize) 
{
 8003464:	b508      	push	{r3, lr}
 8003466:	4613      	mov	r3, r2
  if(HAL_SDRAM_Write_32b(&sdramHandle, (uint32_t *)uwStartAddress, pData, uwDataSize) != HAL_OK)
 8003468:	460a      	mov	r2, r1
 800346a:	4601      	mov	r1, r0
 800346c:	4803      	ldr	r0, [pc, #12]	@ (800347c <BSP_SDRAM_WriteData+0x18>)
 800346e:	f003 ff23 	bl	80072b8 <HAL_SDRAM_Write_32b>
  }
  else
  {
    return SDRAM_OK;
  }
}
 8003472:	3800      	subs	r0, #0
 8003474:	bf18      	it	ne
 8003476:	2001      	movne	r0, #1
 8003478:	bd08      	pop	{r3, pc}
 800347a:	bf00      	nop
 800347c:	20000d1c 	.word	0x20000d1c

08003480 <BSP_SDRAM_WriteData_DMA>:
  * @param  pData: Pointer to data to be written  
  * @param  uwDataSize: Size of written data from the memory
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_WriteData_DMA(uint32_t uwStartAddress, uint32_t *pData, uint32_t uwDataSize) 
{
 8003480:	b508      	push	{r3, lr}
 8003482:	4613      	mov	r3, r2
  if(HAL_SDRAM_Write_DMA(&sdramHandle, (uint32_t *)uwStartAddress, pData, uwDataSize) != HAL_OK)
 8003484:	460a      	mov	r2, r1
 8003486:	4601      	mov	r1, r0
 8003488:	4803      	ldr	r0, [pc, #12]	@ (8003498 <BSP_SDRAM_WriteData_DMA+0x18>)
 800348a:	f003 ff69 	bl	8007360 <HAL_SDRAM_Write_DMA>
  }
  else
  {
    return SDRAM_OK;
  } 
}
 800348e:	3800      	subs	r0, #0
 8003490:	bf18      	it	ne
 8003492:	2001      	movne	r0, #1
 8003494:	bd08      	pop	{r3, pc}
 8003496:	bf00      	nop
 8003498:	20000d1c 	.word	0x20000d1c

0800349c <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800349c:	4b55      	ldr	r3, [pc, #340]	@ (80035f4 <BSP_SDRAM_MspInit+0x158>)
 800349e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034a0:	f042 0201 	orr.w	r2, r2, #1
{  
 80034a4:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 80034a6:	639a      	str	r2, [r3, #56]	@ 0x38
{  
 80034a8:	b08e      	sub	sp, #56	@ 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
 80034aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
{  
 80034ac:	4606      	mov	r6, r0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80034ae:	a909      	add	r1, sp, #36	@ 0x24
 80034b0:	4851      	ldr	r0, [pc, #324]	@ (80035f8 <BSP_SDRAM_MspInit+0x15c>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80034b2:	f002 0201 	and.w	r2, r2, #1
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80034b6:	2400      	movs	r4, #0
  __HAL_RCC_FMC_CLK_ENABLE();
 80034b8:	9201      	str	r2, [sp, #4]
 80034ba:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 80034bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034be:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80034c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80034c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034c6:	f402 0280 	and.w	r2, r2, #4194304	@ 0x400000
 80034ca:	9202      	str	r2, [sp, #8]
 80034cc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034d0:	f042 0204 	orr.w	r2, r2, #4
 80034d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80034d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034d8:	f002 0204 	and.w	r2, r2, #4
 80034dc:	9203      	str	r2, [sp, #12]
 80034de:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80034e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034e2:	f042 0208 	orr.w	r2, r2, #8
 80034e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80034e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034ea:	f002 0208 	and.w	r2, r2, #8
 80034ee:	9204      	str	r2, [sp, #16]
 80034f0:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80034f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034f4:	f042 0210 	orr.w	r2, r2, #16
 80034f8:	631a      	str	r2, [r3, #48]	@ 0x30
 80034fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034fc:	f002 0210 	and.w	r2, r2, #16
 8003500:	9205      	str	r2, [sp, #20]
 8003502:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003504:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003506:	f042 0220 	orr.w	r2, r2, #32
 800350a:	631a      	str	r2, [r3, #48]	@ 0x30
 800350c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800350e:	f002 0220 	and.w	r2, r2, #32
 8003512:	9206      	str	r2, [sp, #24]
 8003514:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003516:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003518:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800351c:	631a      	str	r2, [r3, #48]	@ 0x30
 800351e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003520:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8003524:	9207      	str	r2, [sp, #28]
 8003526:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003528:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800352a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800352e:	631a      	str	r2, [r3, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003530:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003534:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003538:	9308      	str	r3, [sp, #32]
 800353a:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800353c:	2302      	movs	r3, #2
 800353e:	e9cd 320a 	strd	r3, r2, [sp, #40]	@ 0x28
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003542:	930c      	str	r3, [sp, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003544:	230c      	movs	r3, #12
 8003546:	930d      	str	r3, [sp, #52]	@ 0x34
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003548:	2308      	movs	r3, #8
 800354a:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800354c:	f000 feb0 	bl	80042b0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003550:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003554:	a909      	add	r1, sp, #36	@ 0x24
 8003556:	4829      	ldr	r0, [pc, #164]	@ (80035fc <BSP_SDRAM_MspInit+0x160>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003558:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800355a:	f000 fea9 	bl	80042b0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800355e:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003562:	a909      	add	r1, sp, #36	@ 0x24
 8003564:	4826      	ldr	r0, [pc, #152]	@ (8003600 <BSP_SDRAM_MspInit+0x164>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003566:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003568:	f000 fea2 	bl	80042b0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800356c:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003570:	a909      	add	r1, sp, #36	@ 0x24
 8003572:	4824      	ldr	r0, [pc, #144]	@ (8003604 <BSP_SDRAM_MspInit+0x168>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003574:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003576:	f000 fe9b 	bl	80042b0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 800357a:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800357e:	a909      	add	r1, sp, #36	@ 0x24
 8003580:	4821      	ldr	r0, [pc, #132]	@ (8003608 <BSP_SDRAM_MspInit+0x16c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003582:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003584:	f000 fe94 	bl	80042b0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8003588:	2328      	movs	r3, #40	@ 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800358a:	a909      	add	r1, sp, #36	@ 0x24
 800358c:	481f      	ldr	r0, [pc, #124]	@ (800360c <BSP_SDRAM_MspInit+0x170>)
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800358e:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003590:	f000 fe8e 	bl	80042b0 <HAL_GPIO_Init>
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003594:	4b1e      	ldr	r3, [pc, #120]	@ (8003610 <BSP_SDRAM_MspInit+0x174>)
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003596:	2280      	movs	r2, #128	@ 0x80
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003598:	f44f 7100 	mov.w	r1, #512	@ 0x200
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800359c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80035a0:	461d      	mov	r5, r3
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80035a2:	675c      	str	r4, [r3, #116]	@ 0x74
  dma_handle.Init.Mode                = DMA_NORMAL;
 80035a4:	661c      	str	r4, [r3, #96]	@ 0x60
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80035a6:	e9c3 4212 	strd	r4, r2, [r3, #72]	@ 0x48
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80035aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035ae:	e9c3 1214 	strd	r1, r2, [r3, #80]	@ 0x50
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80035b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80035b6:	e9c3 0216 	strd	r0, r2, [r3, #88]	@ 0x58
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80035ba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80035be:	e9c3 2419 	strd	r2, r4, [r3, #100]	@ 0x64
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80035c2:	2203      	movs	r2, #3
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80035c4:	e9c3 241b 	strd	r2, r4, [r3, #108]	@ 0x6c
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80035c8:	4a12      	ldr	r2, [pc, #72]	@ (8003614 <BSP_SDRAM_MspInit+0x178>)
 80035ca:	f845 2f44 	str.w	r2, [r5, #68]!
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80035ce:	4628      	mov	r0, r5
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80035d0:	6335      	str	r5, [r6, #48]	@ 0x30
 80035d2:	67de      	str	r6, [r3, #124]	@ 0x7c
  HAL_DMA_DeInit(&dma_handle);
 80035d4:	f000 fb30 	bl	8003c38 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80035d8:	4628      	mov	r0, r5
 80035da:	f000 faaf 	bl	8003b3c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80035de:	4622      	mov	r2, r4
 80035e0:	210f      	movs	r1, #15
 80035e2:	2038      	movs	r0, #56	@ 0x38
 80035e4:	f000 f9e4 	bl	80039b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80035e8:	2038      	movs	r0, #56	@ 0x38
 80035ea:	f000 fa13 	bl	8003a14 <HAL_NVIC_EnableIRQ>
}
 80035ee:	b00e      	add	sp, #56	@ 0x38
 80035f0:	bd70      	pop	{r4, r5, r6, pc}
 80035f2:	bf00      	nop
 80035f4:	40023800 	.word	0x40023800
 80035f8:	40020800 	.word	0x40020800
 80035fc:	40020c00 	.word	0x40020c00
 8003600:	40021000 	.word	0x40021000
 8003604:	40021400 	.word	0x40021400
 8003608:	40021800 	.word	0x40021800
 800360c:	40021c00 	.word	0x40021c00
 8003610:	20000d0c 	.word	0x20000d0c
 8003614:	40026410 	.word	0x40026410

08003618 <BSP_SDRAM_Init>:
{ 
 8003618:	b538      	push	{r3, r4, r5, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800361a:	4c1b      	ldr	r4, [pc, #108]	@ (8003688 <BSP_SDRAM_Init+0x70>)
  Timing.ExitSelfRefreshDelay = 7;
 800361c:	2107      	movs	r1, #7
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800361e:	4b1b      	ldr	r3, [pc, #108]	@ (800368c <BSP_SDRAM_Init+0x74>)
  Timing.SelfRefreshTime      = 4;
 8003620:	2204      	movs	r2, #4
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003622:	2010      	movs	r0, #16
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003624:	f44f 6500 	mov.w	r5, #2048	@ 0x800
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003628:	6123      	str	r3, [r4, #16]
  Timing.ExitSelfRefreshDelay = 7;
 800362a:	2302      	movs	r3, #2
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800362c:	61e2      	str	r2, [r4, #28]
  Timing.RCDDelay             = 2;
 800362e:	f8c4 30bc 	str.w	r3, [r4, #188]	@ 0xbc
  Timing.ExitSelfRefreshDelay = 7;
 8003632:	e9c4 3129 	strd	r3, r1, [r4, #164]	@ 0xa4
  Timing.RPDelay              = 2;
 8003636:	e9c4 332d 	strd	r3, r3, [r4, #180]	@ 0xb4
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800363a:	2340      	movs	r3, #64	@ 0x40
  Timing.RowCycleDelay        = 7;
 800363c:	e9c4 212b 	strd	r2, r1, [r4, #172]	@ 0xac
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003640:	e9c4 0308 	strd	r0, r3, [r4, #32]
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003644:	2100      	movs	r1, #0
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8003646:	f44f 7380 	mov.w	r3, #256	@ 0x100
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800364a:	e9c4 310a 	strd	r3, r1, [r4, #40]	@ 0x28
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800364e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003652:	63a1      	str	r1, [r4, #56]	@ 0x38
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003654:	e9c4 530c 	strd	r5, r3, [r4, #48]	@ 0x30
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003658:	f104 0510 	add.w	r5, r4, #16
 800365c:	4628      	mov	r0, r5
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800365e:	e9c4 1105 	strd	r1, r1, [r4, #20]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003662:	f7ff ff1b 	bl	800349c <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8003666:	f104 01a4 	add.w	r1, r4, #164	@ 0xa4
 800366a:	4628      	mov	r0, r5
 800366c:	4c08      	ldr	r4, [pc, #32]	@ (8003690 <BSP_SDRAM_Init+0x78>)
 800366e:	f003 fdb8 	bl	80071e2 <HAL_SDRAM_Init>
 8003672:	3800      	subs	r0, #0
 8003674:	bf18      	it	ne
 8003676:	2001      	movne	r0, #1
 8003678:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800367a:	f240 6003 	movw	r0, #1539	@ 0x603
 800367e:	f7ff fe8d 	bl	800339c <BSP_SDRAM_Initialization_sequence>
}
 8003682:	7820      	ldrb	r0, [r4, #0]
 8003684:	bd38      	pop	{r3, r4, r5, pc}
 8003686:	bf00      	nop
 8003688:	20000d0c 	.word	0x20000d0c
 800368c:	a0000140 	.word	0xa0000140
 8003690:	2000009c 	.word	0x2000009c

08003694 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8003694:	b538      	push	{r3, r4, r5, lr}
  uint8_t status = TS_OK;
  tsXBoundary = ts_SizeX;
 8003696:	4c0b      	ldr	r4, [pc, #44]	@ (80036c4 <BSP_TS_Init+0x30>)
  tsYBoundary = ts_SizeY;
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8003698:	4d0b      	ldr	r5, [pc, #44]	@ (80036c8 <BSP_TS_Init+0x34>)
  tsXBoundary = ts_SizeX;
 800369a:	8020      	strh	r0, [r4, #0]
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800369c:	2070      	movs	r0, #112	@ 0x70
 800369e:	682b      	ldr	r3, [r5, #0]
  tsYBoundary = ts_SizeY;
 80036a0:	8061      	strh	r1, [r4, #2]
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 80036a2:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 80036a4:	686b      	ldr	r3, [r5, #4]
 80036a6:	2070      	movs	r0, #112	@ 0x70
 80036a8:	4798      	blx	r3
 80036aa:	2851      	cmp	r0, #81	@ 0x51
 80036ac:	d108      	bne.n	80036c0 <BSP_TS_Init+0x2c>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
    I2cAddress = TS_I2C_ADDRESS;
    tsOrientation = TS_SWAP_XY;
 80036ae:	2308      	movs	r3, #8
    I2cAddress = TS_I2C_ADDRESS;
 80036b0:	2070      	movs	r0, #112	@ 0x70
    tsDriver = &ft5336_ts_drv;
 80036b2:	6065      	str	r5, [r4, #4]
    tsOrientation = TS_SWAP_XY;
 80036b4:	7263      	strb	r3, [r4, #9]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 80036b6:	68eb      	ldr	r3, [r5, #12]
    I2cAddress = TS_I2C_ADDRESS;
 80036b8:	7220      	strb	r0, [r4, #8]
    tsDriver->Start(I2cAddress);
 80036ba:	4798      	blx	r3
  uint8_t status = TS_OK;
 80036bc:	2000      	movs	r0, #0
  {
    status = TS_DEVICE_NOT_FOUND;
  }

  return status;
}
 80036be:	bd38      	pop	{r3, r4, r5, pc}
    status = TS_DEVICE_NOT_FOUND;
 80036c0:	2003      	movs	r0, #3
 80036c2:	e7fc      	b.n	80036be <BSP_TS_Init+0x2a>
 80036c4:	20000e2c 	.word	0x20000e2c
 80036c8:	20000000 	.word	0x20000000

080036cc <BSP_TS_Get_GestureId>:
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
  uint32_t gestureId = 0;
 80036cc:	2300      	movs	r3, #0
{
 80036ce:	b513      	push	{r0, r1, r4, lr}
  uint32_t gestureId = 0;
 80036d0:	9301      	str	r3, [sp, #4]
{
 80036d2:	4604      	mov	r4, r0
  uint8_t  ts_status = TS_OK;

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 80036d4:	4b12      	ldr	r3, [pc, #72]	@ (8003720 <BSP_TS_Get_GestureId+0x54>)
 80036d6:	a901      	add	r1, sp, #4
 80036d8:	7a18      	ldrb	r0, [r3, #8]
 80036da:	f7fd f82b 	bl	8000734 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 80036de:	9b01      	ldr	r3, [sp, #4]
 80036e0:	2b18      	cmp	r3, #24
 80036e2:	d012      	beq.n	800370a <BSP_TS_Get_GestureId+0x3e>
 80036e4:	d806      	bhi.n	80036f4 <BSP_TS_Get_GestureId+0x28>
 80036e6:	2b10      	cmp	r3, #16
 80036e8:	d011      	beq.n	800370e <BSP_TS_Get_GestureId+0x42>
 80036ea:	2b14      	cmp	r3, #20
 80036ec:	d011      	beq.n	8003712 <BSP_TS_Get_GestureId+0x46>
 80036ee:	b143      	cbz	r3, 8003702 <BSP_TS_Get_GestureId+0x36>
 80036f0:	2001      	movs	r0, #1
 80036f2:	e008      	b.n	8003706 <BSP_TS_Get_GestureId+0x3a>
 80036f4:	2b40      	cmp	r3, #64	@ 0x40
 80036f6:	d00e      	beq.n	8003716 <BSP_TS_Get_GestureId+0x4a>
 80036f8:	2b49      	cmp	r3, #73	@ 0x49
 80036fa:	d00e      	beq.n	800371a <BSP_TS_Get_GestureId+0x4e>
 80036fc:	2b1c      	cmp	r3, #28
 80036fe:	d1f7      	bne.n	80036f0 <BSP_TS_Get_GestureId+0x24>
 8003700:	2304      	movs	r3, #4
  uint8_t  ts_status = TS_OK;
 8003702:	2000      	movs	r0, #0
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
      break;
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8003704:	62a3      	str	r3, [r4, #40]	@ 0x28
      ts_status = TS_ERROR;
      break;
  } /* of switch(gestureId) */

  return(ts_status);
}
 8003706:	b002      	add	sp, #8
 8003708:	bd10      	pop	{r4, pc}
  switch(gestureId)
 800370a:	2303      	movs	r3, #3
 800370c:	e7f9      	b.n	8003702 <BSP_TS_Get_GestureId+0x36>
 800370e:	2301      	movs	r3, #1
 8003710:	e7f7      	b.n	8003702 <BSP_TS_Get_GestureId+0x36>
 8003712:	2302      	movs	r3, #2
 8003714:	e7f5      	b.n	8003702 <BSP_TS_Get_GestureId+0x36>
 8003716:	2305      	movs	r3, #5
 8003718:	e7f3      	b.n	8003702 <BSP_TS_Get_GestureId+0x36>
 800371a:	2306      	movs	r3, #6
 800371c:	e7f1      	b.n	8003702 <BSP_TS_Get_GestureId+0x36>
 800371e:	bf00      	nop
 8003720:	20000e2c 	.word	0x20000e2c

08003724 <BSP_TS_GetState>:
{
 8003724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8003728:	4c55      	ldr	r4, [pc, #340]	@ (8003880 <BSP_TS_GetState+0x15c>)
{
 800372a:	b097      	sub	sp, #92	@ 0x5c
  uint32_t weight = 0;
 800372c:	2300      	movs	r3, #0
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 800372e:	6862      	ldr	r2, [r4, #4]
{
 8003730:	9004      	str	r0, [sp, #16]
  uint32_t event = 0;
 8003732:	9309      	str	r3, [sp, #36]	@ 0x24
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8003734:	6912      	ldr	r2, [r2, #16]
 8003736:	7a20      	ldrb	r0, [r4, #8]
  uint32_t area = 0;
 8003738:	e9cd 3307 	strd	r3, r3, [sp, #28]
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 800373c:	4790      	blx	r2
 800373e:	9b04      	ldr	r3, [sp, #16]
 8003740:	7018      	strb	r0, [r3, #0]
  if(TS_State->touchDetected)
 8003742:	b1b8      	cbz	r0, 8003774 <BSP_TS_GetState+0x50>
 8003744:	f103 0615 	add.w	r6, r3, #21
 8003748:	f103 0b02 	add.w	fp, r3, #2
 800374c:	ab0d      	add	r3, sp, #52	@ 0x34
 800374e:	f104 0a0c 	add.w	sl, r4, #12
 8003752:	f104 0920 	add.w	r9, r4, #32
 8003756:	ad0a      	add	r5, sp, #40	@ 0x28
 8003758:	9303      	str	r3, [sp, #12]
 800375a:	af10      	add	r7, sp, #64	@ 0x40
    for(index=0; index < TS_State->touchDetected; index++)
 800375c:	2300      	movs	r3, #0
 800375e:	f10d 084c 	add.w	r8, sp, #76	@ 0x4c
 8003762:	9305      	str	r3, [sp, #20]
 8003764:	9b04      	ldr	r3, [sp, #16]
 8003766:	9a05      	ldr	r2, [sp, #20]
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	4293      	cmp	r3, r2
 800376c:	d805      	bhi.n	800377a <BSP_TS_GetState+0x56>
    ts_status = BSP_TS_Get_GestureId(TS_State);
 800376e:	9804      	ldr	r0, [sp, #16]
 8003770:	f7ff ffac 	bl	80036cc <BSP_TS_Get_GestureId>
}
 8003774:	b017      	add	sp, #92	@ 0x5c
 8003776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 800377a:	6863      	ldr	r3, [r4, #4]
 800377c:	4642      	mov	r2, r8
 800377e:	4639      	mov	r1, r7
 8003780:	7a20      	ldrb	r0, [r4, #8]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	4798      	blx	r3
      if(tsOrientation == TS_SWAP_NONE)
 8003786:	7a63      	ldrb	r3, [r4, #9]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d13e      	bne.n	800380a <BSP_TS_GetState+0xe6>
        x[index] = brute_x[index];
 800378c:	883b      	ldrh	r3, [r7, #0]
        y[index] = brute_y[index];
 800378e:	9a03      	ldr	r2, [sp, #12]
        x[index] = brute_x[index];
 8003790:	802b      	strh	r3, [r5, #0]
        y[index] = brute_y[index];
 8003792:	f8b8 3000 	ldrh.w	r3, [r8]
 8003796:	8013      	strh	r3, [r2, #0]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8003798:	f835 cb02 	ldrh.w	ip, [r5], #2
 800379c:	f8da 2000 	ldr.w	r2, [sl]
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 80037a0:	9903      	ldr	r1, [sp, #12]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80037a2:	b293      	uxth	r3, r2
 80037a4:	4594      	cmp	ip, r2
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 80037a6:	f8d9 0000 	ldr.w	r0, [r9]
 80037aa:	f831 2b02 	ldrh.w	r2, [r1], #2
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80037ae:	bf8c      	ite	hi
 80037b0:	ebac 0303 	subhi.w	r3, ip, r3
 80037b4:	eba3 030c 	subls.w	r3, r3, ip
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 80037b8:	9103      	str	r1, [sp, #12]
 80037ba:	4282      	cmp	r2, r0
 80037bc:	b281      	uxth	r1, r0
      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 80037be:	7a20      	ldrb	r0, [r4, #8]
      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80037c0:	b29b      	uxth	r3, r3
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 80037c2:	bf8c      	ite	hi
 80037c4:	1a51      	subhi	r1, r2, r1
 80037c6:	1a89      	subls	r1, r1, r2
 80037c8:	b289      	uxth	r1, r1
      if ((x_diff + y_diff) > 5)
 80037ca:	440b      	add	r3, r1
 80037cc:	2b05      	cmp	r3, #5
        _x[index] = x[index];
 80037ce:	bfc4      	itt	gt
 80037d0:	f8ca c000 	strgt.w	ip, [sl]
        _y[index] = y[index];
 80037d4:	f8c9 2000 	strgt.w	r2, [r9]
      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 80037d8:	2870      	cmp	r0, #112	@ 0x70
 80037da:	d12d      	bne.n	8003838 <BSP_TS_GetState+0x114>
        TS_State->touchX[index] = x[index];
 80037dc:	f8ab c000 	strh.w	ip, [fp]
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 80037e0:	ab09      	add	r3, sp, #36	@ 0x24
        TS_State->touchY[index] = y[index];
 80037e2:	f8ab 200a 	strh.w	r2, [fp, #10]
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 80037e6:	9905      	ldr	r1, [sp, #20]
 80037e8:	aa07      	add	r2, sp, #28
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	ab08      	add	r3, sp, #32
 80037ee:	f7fc ffb1 	bl	8000754 <ft5336_TS_GetTouchInfo>
      TS_State->touchWeight[index] = weight;
 80037f2:	9b07      	ldr	r3, [sp, #28]
 80037f4:	f806 3f01 	strb.w	r3, [r6, #1]!
      TS_State->touchArea[index]   = area;
 80037f8:	9b08      	ldr	r3, [sp, #32]
 80037fa:	72b3      	strb	r3, [r6, #10]
      switch(event)
 80037fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80037fe:	2b03      	cmp	r3, #3
 8003800:	d82a      	bhi.n	8003858 <BSP_TS_GetState+0x134>
 8003802:	e8df f003 	tbb	[pc, r3]
 8003806:	3627      	.short	0x3627
 8003808:	3a38      	.short	0x3a38
      if(tsOrientation & TS_SWAP_X)
 800380a:	0799      	lsls	r1, r3, #30
        x[index] = 4096 - brute_x[index];
 800380c:	bf42      	ittt	mi
 800380e:	883a      	ldrhmi	r2, [r7, #0]
 8003810:	f5c2 5280 	rsbmi	r2, r2, #4096	@ 0x1000
 8003814:	802a      	strhmi	r2, [r5, #0]
      if(tsOrientation & TS_SWAP_Y)
 8003816:	075a      	lsls	r2, r3, #29
        y[index] = 4096 - brute_y[index];
 8003818:	bf41      	itttt	mi
 800381a:	f8b8 2000 	ldrhmi.w	r2, [r8]
 800381e:	9903      	ldrmi	r1, [sp, #12]
 8003820:	f5c2 5280 	rsbmi	r2, r2, #4096	@ 0x1000
 8003824:	800a      	strhmi	r2, [r1, #0]
      if(tsOrientation & TS_SWAP_XY)
 8003826:	071b      	lsls	r3, r3, #28
 8003828:	d5b6      	bpl.n	8003798 <BSP_TS_GetState+0x74>
        y[index] = brute_x[index];
 800382a:	883b      	ldrh	r3, [r7, #0]
 800382c:	9a03      	ldr	r2, [sp, #12]
 800382e:	8013      	strh	r3, [r2, #0]
        x[index] = brute_y[index];
 8003830:	f8b8 3000 	ldrh.w	r3, [r8]
 8003834:	802b      	strh	r3, [r5, #0]
 8003836:	e7af      	b.n	8003798 <BSP_TS_GetState+0x74>
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8003838:	f8da 2000 	ldr.w	r2, [sl]
 800383c:	8823      	ldrh	r3, [r4, #0]
 800383e:	4353      	muls	r3, r2
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8003840:	8862      	ldrh	r2, [r4, #2]
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8003842:	0b1b      	lsrs	r3, r3, #12
 8003844:	f8ab 3000 	strh.w	r3, [fp]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8003848:	f8d9 3000 	ldr.w	r3, [r9]
 800384c:	435a      	muls	r2, r3
 800384e:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8003852:	e7c5      	b.n	80037e0 <BSP_TS_GetState+0xbc>
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8003854:	2301      	movs	r3, #1
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8003856:	7173      	strb	r3, [r6, #5]
    for(index=0; index < TS_State->touchDetected; index++)
 8003858:	9b05      	ldr	r3, [sp, #20]
 800385a:	f10b 0b02 	add.w	fp, fp, #2
 800385e:	f10a 0a04 	add.w	sl, sl, #4
 8003862:	f109 0904 	add.w	r9, r9, #4
 8003866:	3301      	adds	r3, #1
 8003868:	3702      	adds	r7, #2
 800386a:	f108 0802 	add.w	r8, r8, #2
 800386e:	9305      	str	r3, [sp, #20]
 8003870:	e778      	b.n	8003764 <BSP_TS_GetState+0x40>
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8003872:	2302      	movs	r3, #2
 8003874:	e7ef      	b.n	8003856 <BSP_TS_GetState+0x132>
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8003876:	2303      	movs	r3, #3
 8003878:	e7ed      	b.n	8003856 <BSP_TS_GetState+0x132>
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 800387a:	2300      	movs	r3, #0
 800387c:	e7eb      	b.n	8003856 <BSP_TS_GetState+0x132>
 800387e:	bf00      	nop
 8003880:	20000e2c 	.word	0x20000e2c

08003884 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003884:	490f      	ldr	r1, [pc, #60]	@ (80038c4 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003886:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003888:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 800388c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003890:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8003894:	4b0c      	ldr	r3, [pc, #48]	@ (80038c8 <SystemInit+0x44>)
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	f042 0201 	orr.w	r2, r2, #1
 800389c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800389e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	f022 7284 	bic.w	r2, r2, #17301504	@ 0x1080000
 80038a6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80038aa:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80038ac:	4a07      	ldr	r2, [pc, #28]	@ (80038cc <SystemInit+0x48>)
 80038ae:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80038b6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80038b8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80038ba:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80038be:	608b      	str	r3, [r1, #8]
#endif
}
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	e000ed00 	.word	0xe000ed00
 80038c8:	40023800 	.word	0x40023800
 80038cc:	24003010 	.word	0x24003010

080038d0 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80038d0:	4770      	bx	lr
	...

080038d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038d4:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038d6:	4e0e      	ldr	r6, [pc, #56]	@ (8003910 <HAL_InitTick+0x3c>)
 80038d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
{
 80038dc:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038de:	7832      	ldrb	r2, [r6, #0]
 80038e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80038e4:	4a0b      	ldr	r2, [pc, #44]	@ (8003914 <HAL_InitTick+0x40>)
 80038e6:	6810      	ldr	r0, [r2, #0]
 80038e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80038ec:	f000 f8b2 	bl	8003a54 <HAL_SYSTICK_Config>
 80038f0:	4604      	mov	r4, r0
 80038f2:	b950      	cbnz	r0, 800390a <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038f4:	2d0f      	cmp	r5, #15
 80038f6:	d808      	bhi.n	800390a <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038f8:	4602      	mov	r2, r0
 80038fa:	4629      	mov	r1, r5
 80038fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003900:	f000 f856 	bl	80039b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003904:	4620      	mov	r0, r4
 8003906:	6075      	str	r5, [r6, #4]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003908:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800390a:	2001      	movs	r0, #1
 800390c:	e7fc      	b.n	8003908 <HAL_InitTick+0x34>
 800390e:	bf00      	nop
 8003910:	200000a4 	.word	0x200000a4
 8003914:	200000a0 	.word	0x200000a0

08003918 <HAL_Init>:
{
 8003918:	b508      	push	{r3, lr}
  __HAL_FLASH_ART_ENABLE();
 800391a:	4b09      	ldr	r3, [pc, #36]	@ (8003940 <HAL_Init+0x28>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800391c:	2003      	movs	r0, #3
  __HAL_FLASH_ART_ENABLE();
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003924:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800392c:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800392e:	f000 f82d 	bl	800398c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003932:	200f      	movs	r0, #15
 8003934:	f7ff ffce 	bl	80038d4 <HAL_InitTick>
  HAL_MspInit();
 8003938:	f7ff ffca 	bl	80038d0 <HAL_MspInit>
}
 800393c:	2000      	movs	r0, #0
 800393e:	bd08      	pop	{r3, pc}
 8003940:	40023c00 	.word	0x40023c00

08003944 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003944:	4a03      	ldr	r2, [pc, #12]	@ (8003954 <HAL_IncTick+0x10>)
 8003946:	4b04      	ldr	r3, [pc, #16]	@ (8003958 <HAL_IncTick+0x14>)
 8003948:	6811      	ldr	r1, [r2, #0]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	440b      	add	r3, r1
 800394e:	6013      	str	r3, [r2, #0]
}
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	20000e60 	.word	0x20000e60
 8003958:	200000a4 	.word	0x200000a4

0800395c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800395c:	4b01      	ldr	r3, [pc, #4]	@ (8003964 <HAL_GetTick+0x8>)
 800395e:	6818      	ldr	r0, [r3, #0]
}
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	20000e60 	.word	0x20000e60

08003968 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003968:	b538      	push	{r3, r4, r5, lr}
 800396a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800396c:	f7ff fff6 	bl	800395c <HAL_GetTick>
 8003970:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003972:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8003974:	bf1e      	ittt	ne
 8003976:	4b04      	ldrne	r3, [pc, #16]	@ (8003988 <HAL_Delay+0x20>)
 8003978:	781b      	ldrbne	r3, [r3, #0]
 800397a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800397c:	f7ff ffee 	bl	800395c <HAL_GetTick>
 8003980:	1b43      	subs	r3, r0, r5
 8003982:	42a3      	cmp	r3, r4
 8003984:	d3fa      	bcc.n	800397c <HAL_Delay+0x14>
  {
  }
}
 8003986:	bd38      	pop	{r3, r4, r5, pc}
 8003988:	200000a4 	.word	0x200000a4

0800398c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800398c:	4907      	ldr	r1, [pc, #28]	@ (80039ac <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800398e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003990:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003992:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003996:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800399a:	0412      	lsls	r2, r2, #16
 800399c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800399e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80039a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80039a8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80039aa:	4770      	bx	lr
 80039ac:	e000ed00 	.word	0xe000ed00

080039b0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039b0:	4b16      	ldr	r3, [pc, #88]	@ (8003a0c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039b2:	b530      	push	{r4, r5, lr}
 80039b4:	68dc      	ldr	r4, [r3, #12]
 80039b6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039ba:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039be:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039c0:	2b04      	cmp	r3, #4
 80039c2:	bf28      	it	cs
 80039c4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039c6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039c8:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039cc:	bf8c      	ite	hi
 80039ce:	3c03      	subhi	r4, #3
 80039d0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039d2:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 80039d6:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039d8:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039dc:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039e0:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039e4:	fa03 f304 	lsl.w	r3, r3, r4
 80039e8:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ec:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80039f0:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80039f2:	db06      	blt.n	8003a02 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039f4:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80039f8:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80039fc:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003a00:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a02:	f000 000f 	and.w	r0, r0, #15
 8003a06:	4a02      	ldr	r2, [pc, #8]	@ (8003a10 <HAL_NVIC_SetPriority+0x60>)
 8003a08:	5413      	strb	r3, [r2, r0]
 8003a0a:	e7f9      	b.n	8003a00 <HAL_NVIC_SetPriority+0x50>
 8003a0c:	e000ed00 	.word	0xe000ed00
 8003a10:	e000ed14 	.word	0xe000ed14

08003a14 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003a14:	2800      	cmp	r0, #0
 8003a16:	db07      	blt.n	8003a28 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a18:	0941      	lsrs	r1, r0, #5
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	f000 001f 	and.w	r0, r0, #31
 8003a20:	4a02      	ldr	r2, [pc, #8]	@ (8003a2c <HAL_NVIC_EnableIRQ+0x18>)
 8003a22:	4083      	lsls	r3, r0
 8003a24:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	e000e100 	.word	0xe000e100

08003a30 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003a30:	2800      	cmp	r0, #0
 8003a32:	db0c      	blt.n	8003a4e <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a34:	0943      	lsrs	r3, r0, #5
 8003a36:	2201      	movs	r2, #1
 8003a38:	f000 001f 	and.w	r0, r0, #31
 8003a3c:	4904      	ldr	r1, [pc, #16]	@ (8003a50 <HAL_NVIC_DisableIRQ+0x20>)
 8003a3e:	3320      	adds	r3, #32
 8003a40:	4082      	lsls	r2, r0
 8003a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003a46:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003a4a:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8003a4e:	4770      	bx	lr
 8003a50:	e000e100 	.word	0xe000e100

08003a54 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a54:	3801      	subs	r0, #1
 8003a56:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8003a5a:	d20b      	bcs.n	8003a74 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a5c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a60:	4a05      	ldr	r2, [pc, #20]	@ (8003a78 <HAL_SYSTICK_Config+0x24>)
 8003a62:	21f0      	movs	r1, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a64:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a66:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a68:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a6c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a6e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a70:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a72:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003a74:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003a76:	4770      	bx	lr
 8003a78:	e000ed00 	.word	0xe000ed00

08003a7c <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8003a7c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003a80:	4b04      	ldr	r3, [pc, #16]	@ (8003a94 <HAL_MPU_Disable+0x18>)
 8003a82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a84:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003a88:	625a      	str	r2, [r3, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	e000ed00 	.word	0xe000ed00

08003a98 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003a98:	4b06      	ldr	r3, [pc, #24]	@ (8003ab4 <HAL_MPU_Enable+0x1c>)
 8003a9a:	f040 0001 	orr.w	r0, r0, #1
 8003a9e:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003aa2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003aa4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003aa8:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003aaa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003aae:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003ab2:	4770      	bx	lr
 8003ab4:	e000ed00 	.word	0xe000ed00

08003ab8 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003ab8:	7843      	ldrb	r3, [r0, #1]
 8003aba:	4a14      	ldr	r2, [pc, #80]	@ (8003b0c <HAL_MPU_ConfigRegion+0x54>)
 8003abc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003ac0:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8003ac4:	f023 0301 	bic.w	r3, r3, #1
 8003ac8:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003acc:	6843      	ldr	r3, [r0, #4]
 8003ace:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003ad2:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003ad4:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003ad6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003ad8:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003adc:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003ade:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003ae0:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003ae2:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003ae6:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003ae8:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003aec:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003aee:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003af2:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003af4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003af8:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003afa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003afe:	7a01      	ldrb	r1, [r0, #8]
 8003b00:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003b04:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	e000ed00 	.word	0xe000ed00

08003b10 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b10:	6803      	ldr	r3, [r0, #0]
{
 8003b12:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b14:	2018      	movs	r0, #24
 8003b16:	b2d9      	uxtb	r1, r3
 8003b18:	3910      	subs	r1, #16
 8003b1a:	fbb1 f0f0 	udiv	r0, r1, r0
{
 8003b1e:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b20:	4c05      	ldr	r4, [pc, #20]	@ (8003b38 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8003b22:	295f      	cmp	r1, #95	@ 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b24:	5c20      	ldrb	r0, [r4, r0]
 8003b26:	65d0      	str	r0, [r2, #92]	@ 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b28:	f423 707f 	bic.w	r0, r3, #1020	@ 0x3fc
 8003b2c:	f020 0003 	bic.w	r0, r0, #3
 8003b30:	bf88      	it	hi
 8003b32:	3004      	addhi	r0, #4
 8003b34:	6590      	str	r0, [r2, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8003b36:	bd10      	pop	{r4, pc}
 8003b38:	0800f708 	.word	0x0800f708

08003b3c <HAL_DMA_Init>:
{
 8003b3c:	b570      	push	{r4, r5, r6, lr}
 8003b3e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003b40:	f7ff ff0c 	bl	800395c <HAL_GetTick>
 8003b44:	4605      	mov	r5, r0
  if(hdma == NULL)
 8003b46:	2c00      	cmp	r4, #0
 8003b48:	d060      	beq.n	8003c0c <HAL_DMA_Init+0xd0>
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b4a:	2302      	movs	r3, #2
  __HAL_DMA_DISABLE(hdma);
 8003b4c:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b4e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8003b52:	2300      	movs	r3, #0
 8003b54:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 8003b58:	6813      	ldr	r3, [r2, #0]
 8003b5a:	f023 0301 	bic.w	r3, r3, #1
 8003b5e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b60:	6822      	ldr	r2, [r4, #0]
 8003b62:	6813      	ldr	r3, [r2, #0]
 8003b64:	07d8      	lsls	r0, r3, #31
 8003b66:	d42e      	bmi.n	8003bc6 <HAL_DMA_Init+0x8a>
  tmp = hdma->Instance->CR;
 8003b68:	6813      	ldr	r3, [r2, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b6a:	4832      	ldr	r0, [pc, #200]	@ (8003c34 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b6c:	69a1      	ldr	r1, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b6e:	4018      	ands	r0, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b70:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8003b74:	432b      	orrs	r3, r5
 8003b76:	68e5      	ldr	r5, [r4, #12]
 8003b78:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b7a:	6925      	ldr	r5, [r4, #16]
 8003b7c:	432b      	orrs	r3, r5
 8003b7e:	6965      	ldr	r5, [r4, #20]
 8003b80:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b82:	69e5      	ldr	r5, [r4, #28]
 8003b84:	430b      	orrs	r3, r1
 8003b86:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b88:	6a25      	ldr	r5, [r4, #32]
 8003b8a:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b8c:	4303      	orrs	r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b8e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8003b90:	2804      	cmp	r0, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b92:	bf02      	ittt	eq
 8003b94:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	@ 0x2c
 8003b98:	4335      	orreq	r5, r6
 8003b9a:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b9c:	2804      	cmp	r0, #4
  hdma->Instance->CR = tmp;  
 8003b9e:	6013      	str	r3, [r2, #0]
  tmp = hdma->Instance->FCR;
 8003ba0:	6953      	ldr	r3, [r2, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ba2:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8003ba6:	ea43 0300 	orr.w	r3, r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003baa:	d135      	bne.n	8003c18 <HAL_DMA_Init+0xdc>
    tmp |= hdma->Init.FIFOThreshold;
 8003bac:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003bae:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8003bb0:	4303      	orrs	r3, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003bb2:	b38d      	cbz	r5, 8003c18 <HAL_DMA_Init+0xdc>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003bb4:	b991      	cbnz	r1, 8003bdc <HAL_DMA_Init+0xa0>
  {
    switch (tmp)
 8003bb6:	2801      	cmp	r0, #1
 8003bb8:	d020      	beq.n	8003bfc <HAL_DMA_Init+0xc0>
 8003bba:	f030 0102 	bics.w	r1, r0, #2
 8003bbe:	d12b      	bne.n	8003c18 <HAL_DMA_Init+0xdc>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bc0:	01e9      	lsls	r1, r5, #7
 8003bc2:	d529      	bpl.n	8003c18 <HAL_DMA_Init+0xdc>
 8003bc4:	e01d      	b.n	8003c02 <HAL_DMA_Init+0xc6>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bc6:	f7ff fec9 	bl	800395c <HAL_GetTick>
 8003bca:	1b40      	subs	r0, r0, r5
 8003bcc:	2805      	cmp	r0, #5
 8003bce:	d9c7      	bls.n	8003b60 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bd0:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003bd2:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bd4:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003bd6:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8003bda:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003bdc:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8003be0:	d116      	bne.n	8003c10 <HAL_DMA_Init+0xd4>
    switch (tmp)
 8003be2:	2803      	cmp	r0, #3
 8003be4:	d818      	bhi.n	8003c18 <HAL_DMA_Init+0xdc>
 8003be6:	a101      	add	r1, pc, #4	@ (adr r1, 8003bec <HAL_DMA_Init+0xb0>)
 8003be8:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 8003bec:	08003c03 	.word	0x08003c03
 8003bf0:	08003bc1 	.word	0x08003bc1
 8003bf4:	08003c03 	.word	0x08003c03
 8003bf8:	08003bfd 	.word	0x08003bfd
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bfc:	f1b5 7fc0 	cmp.w	r5, #25165824	@ 0x1800000
 8003c00:	d10a      	bne.n	8003c18 <HAL_DMA_Init+0xdc>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c02:	2340      	movs	r3, #64	@ 0x40
 8003c04:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_RESET;
 8003c06:	2300      	movs	r3, #0
 8003c08:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 8003c0c:	2001      	movs	r0, #1
 8003c0e:	e7e4      	b.n	8003bda <HAL_DMA_Init+0x9e>
    switch (tmp)
 8003c10:	2802      	cmp	r0, #2
 8003c12:	d9f6      	bls.n	8003c02 <HAL_DMA_Init+0xc6>
 8003c14:	2803      	cmp	r0, #3
 8003c16:	d0d3      	beq.n	8003bc0 <HAL_DMA_Init+0x84>
  hdma->Instance->FCR = tmp;
 8003c18:	6153      	str	r3, [r2, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	f7ff ff78 	bl	8003b10 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c20:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8003c22:	233f      	movs	r3, #63	@ 0x3f
 8003c24:	4093      	lsls	r3, r2
 8003c26:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c28:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8003c2a:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c2c:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8003c2e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8003c32:	e7d2      	b.n	8003bda <HAL_DMA_Init+0x9e>
 8003c34:	f010803f 	.word	0xf010803f

08003c38 <HAL_DMA_DeInit>:
{
 8003c38:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 8003c3a:	4605      	mov	r5, r0
 8003c3c:	b320      	cbz	r0, 8003c88 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003c3e:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	b2dc      	uxtb	r4, r3
 8003c46:	d01d      	beq.n	8003c84 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 8003c48:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
 8003c4a:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	f022 0201 	bic.w	r2, r2, #1
 8003c52:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003c54:	2221      	movs	r2, #33	@ 0x21
  hdma->Instance->CR   = 0U;
 8003c56:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8003c58:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8003c5a:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8003c5c:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8003c5e:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003c60:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c62:	f7ff ff55 	bl	8003b10 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c66:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 8003c68:	233f      	movs	r3, #63	@ 0x3f
 8003c6a:	4093      	lsls	r3, r2
 8003c6c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c6e:	656c      	str	r4, [r5, #84]	@ 0x54
  __HAL_UNLOCK(hdma);
 8003c70:	f885 4034 	strb.w	r4, [r5, #52]	@ 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8003c74:	f885 4035 	strb.w	r4, [r5, #53]	@ 0x35
  hdma->XferHalfCpltCallback = NULL;
 8003c78:	e9c5 440f 	strd	r4, r4, [r5, #60]	@ 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8003c7c:	e9c5 4411 	strd	r4, r4, [r5, #68]	@ 0x44
  hdma->XferAbortCallback = NULL;  
 8003c80:	e9c5 4413 	strd	r4, r4, [r5, #76]	@ 0x4c
}
 8003c84:	4620      	mov	r0, r4
 8003c86:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003c88:	2401      	movs	r4, #1
 8003c8a:	e7fb      	b.n	8003c84 <HAL_DMA_DeInit+0x4c>

08003c8c <HAL_DMA_Start_IT>:
{
 8003c8c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8003c8e:	f890 4034 	ldrb.w	r4, [r0, #52]	@ 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c92:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8003c94:	2c01      	cmp	r4, #1
 8003c96:	d034      	beq.n	8003d02 <HAL_DMA_Start_IT+0x76>
 8003c98:	2401      	movs	r4, #1
 8003c9a:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c9e:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
 8003ca2:	2c01      	cmp	r4, #1
 8003ca4:	f04f 0400 	mov.w	r4, #0
 8003ca8:	d129      	bne.n	8003cfe <HAL_DMA_Start_IT+0x72>
    hdma->State = HAL_DMA_STATE_BUSY;
 8003caa:	2502      	movs	r5, #2
 8003cac:	f880 5035 	strb.w	r5, [r0, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cb0:	6544      	str	r4, [r0, #84]	@ 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003cb2:	6804      	ldr	r4, [r0, #0]
 8003cb4:	6825      	ldr	r5, [r4, #0]
 8003cb6:	f425 2580 	bic.w	r5, r5, #262144	@ 0x40000
 8003cba:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8003cbc:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cbe:	6883      	ldr	r3, [r0, #8]
 8003cc0:	2b40      	cmp	r3, #64	@ 0x40
 8003cc2:	d119      	bne.n	8003cf8 <HAL_DMA_Start_IT+0x6c>
    hdma->Instance->PAR = DstAddress;
 8003cc4:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8003cc6:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cc8:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8003cca:	233f      	movs	r3, #63	@ 0x3f
 8003ccc:	4093      	lsls	r3, r2
 8003cce:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003cd0:	6823      	ldr	r3, [r4, #0]
 8003cd2:	f043 0316 	orr.w	r3, r3, #22
 8003cd6:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003cd8:	6963      	ldr	r3, [r4, #20]
 8003cda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cde:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8003ce0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003ce2:	b11b      	cbz	r3, 8003cec <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ce4:	6823      	ldr	r3, [r4, #0]
 8003ce6:	f043 0308 	orr.w	r3, r3, #8
 8003cea:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8003cec:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cee:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8003cf0:	f043 0301 	orr.w	r3, r3, #1
 8003cf4:	6023      	str	r3, [r4, #0]
}
 8003cf6:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->PAR = SrcAddress;
 8003cf8:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8003cfa:	60e2      	str	r2, [r4, #12]
 8003cfc:	e7e4      	b.n	8003cc8 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8003cfe:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  __HAL_LOCK(hdma);
 8003d02:	2002      	movs	r0, #2
 8003d04:	e7f7      	b.n	8003cf6 <HAL_DMA_Start_IT+0x6a>

08003d06 <HAL_DMA_Abort>:
{
 8003d06:	b570      	push	{r4, r5, r6, lr}
 8003d08:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d0a:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  uint32_t tickstart = HAL_GetTick();
 8003d0c:	f7ff fe26 	bl	800395c <HAL_GetTick>
 8003d10:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d12:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d006      	beq.n	8003d28 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d1a:	2380      	movs	r3, #128	@ 0x80
    return HAL_ERROR;
 8003d1c:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d1e:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8003d20:	2300      	movs	r3, #0
 8003d22:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8003d26:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d28:	6823      	ldr	r3, [r4, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	f022 0216 	bic.w	r2, r2, #22
 8003d30:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d32:	695a      	ldr	r2, [r3, #20]
 8003d34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d38:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d3a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003d3c:	b90a      	cbnz	r2, 8003d42 <HAL_DMA_Abort+0x3c>
 8003d3e:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8003d40:	b11a      	cbz	r2, 8003d4a <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	f022 0208 	bic.w	r2, r2, #8
 8003d48:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	f022 0201 	bic.w	r2, r2, #1
 8003d50:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d52:	6823      	ldr	r3, [r4, #0]
 8003d54:	6818      	ldr	r0, [r3, #0]
 8003d56:	f010 0001 	ands.w	r0, r0, #1
 8003d5a:	d107      	bne.n	8003d6c <HAL_DMA_Abort+0x66>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d5c:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8003d5e:	233f      	movs	r3, #63	@ 0x3f
 8003d60:	4093      	lsls	r3, r2
 8003d62:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8003d64:	2301      	movs	r3, #1
 8003d66:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 8003d6a:	e7d9      	b.n	8003d20 <HAL_DMA_Abort+0x1a>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d6c:	f7ff fdf6 	bl	800395c <HAL_GetTick>
 8003d70:	1b40      	subs	r0, r0, r5
 8003d72:	2805      	cmp	r0, #5
 8003d74:	d9ed      	bls.n	8003d52 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d76:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d78:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d7a:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d7c:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_TIMEOUT;
 8003d80:	e7ce      	b.n	8003d20 <HAL_DMA_Abort+0x1a>
	...

08003d84 <HAL_DMA_IRQHandler>:
  __IO uint32_t count = 0;
 8003d84:	2300      	movs	r3, #0
{
 8003d86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0;
 8003d88:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d8a:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8003d8c:	4b5b      	ldr	r3, [pc, #364]	@ (8003efc <HAL_DMA_IRQHandler+0x178>)
{
 8003d8e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d90:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 8003d92:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d94:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
  tmpisr = regs->ISR;
 8003d96:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d98:	409a      	lsls	r2, r3
 8003d9a:	4232      	tst	r2, r6
 8003d9c:	d00c      	beq.n	8003db8 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d9e:	6801      	ldr	r1, [r0, #0]
 8003da0:	6808      	ldr	r0, [r1, #0]
 8003da2:	0740      	lsls	r0, r0, #29
 8003da4:	d508      	bpl.n	8003db8 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003da6:	6808      	ldr	r0, [r1, #0]
 8003da8:	f020 0004 	bic.w	r0, r0, #4
 8003dac:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003dae:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003db0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003db2:	f042 0201 	orr.w	r2, r2, #1
 8003db6:	6562      	str	r2, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003db8:	2201      	movs	r2, #1
 8003dba:	409a      	lsls	r2, r3
 8003dbc:	4232      	tst	r2, r6
 8003dbe:	d008      	beq.n	8003dd2 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003dc0:	6821      	ldr	r1, [r4, #0]
 8003dc2:	6949      	ldr	r1, [r1, #20]
 8003dc4:	0609      	lsls	r1, r1, #24
 8003dc6:	d504      	bpl.n	8003dd2 <HAL_DMA_IRQHandler+0x4e>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003dc8:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003dca:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003dcc:	f042 0202 	orr.w	r2, r2, #2
 8003dd0:	6562      	str	r2, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dd2:	2204      	movs	r2, #4
 8003dd4:	409a      	lsls	r2, r3
 8003dd6:	4232      	tst	r2, r6
 8003dd8:	d008      	beq.n	8003dec <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003dda:	6821      	ldr	r1, [r4, #0]
 8003ddc:	6809      	ldr	r1, [r1, #0]
 8003dde:	0788      	lsls	r0, r1, #30
 8003de0:	d504      	bpl.n	8003dec <HAL_DMA_IRQHandler+0x68>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003de2:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003de4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003de6:	f042 0204 	orr.w	r2, r2, #4
 8003dea:	6562      	str	r2, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003dec:	2210      	movs	r2, #16
 8003dee:	409a      	lsls	r2, r3
 8003df0:	4232      	tst	r2, r6
 8003df2:	d010      	beq.n	8003e16 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003df4:	6823      	ldr	r3, [r4, #0]
 8003df6:	6819      	ldr	r1, [r3, #0]
 8003df8:	0709      	lsls	r1, r1, #28
 8003dfa:	d50c      	bpl.n	8003e16 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003dfc:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	0350      	lsls	r0, r2, #13
 8003e02:	d537      	bpl.n	8003e74 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	0319      	lsls	r1, r3, #12
 8003e08:	d401      	bmi.n	8003e0e <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8003e0a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003e0c:	e000      	b.n	8003e10 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e0e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8003e10:	b10b      	cbz	r3, 8003e16 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8003e12:	4620      	mov	r0, r4
 8003e14:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e16:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8003e18:	2220      	movs	r2, #32
 8003e1a:	408a      	lsls	r2, r1
 8003e1c:	4232      	tst	r2, r6
 8003e1e:	d03a      	beq.n	8003e96 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e20:	6823      	ldr	r3, [r4, #0]
 8003e22:	6818      	ldr	r0, [r3, #0]
 8003e24:	06c6      	lsls	r6, r0, #27
 8003e26:	d536      	bpl.n	8003e96 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e28:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e2a:	f894 2035 	ldrb.w	r2, [r4, #53]	@ 0x35
 8003e2e:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e30:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e32:	d127      	bne.n	8003e84 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e34:	f022 0216 	bic.w	r2, r2, #22
 8003e38:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e3a:	695a      	ldr	r2, [r3, #20]
 8003e3c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e40:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e42:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003e44:	b90a      	cbnz	r2, 8003e4a <HAL_DMA_IRQHandler+0xc6>
 8003e46:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8003e48:	b11a      	cbz	r2, 8003e52 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	f022 0208 	bic.w	r2, r2, #8
 8003e50:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e52:	233f      	movs	r3, #63	@ 0x3f
 8003e54:	408b      	lsls	r3, r1
 8003e56:	60ab      	str	r3, [r5, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8003e5e:	2300      	movs	r3, #0
 8003e60:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8003e64:	6d23      	ldr	r3, [r4, #80]	@ 0x50
    if(hdma->XferErrorCallback != NULL)
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d045      	beq.n	8003ef6 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8003e6a:	4620      	mov	r0, r4
}
 8003e6c:	b003      	add	sp, #12
 8003e6e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8003e72:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	05d2      	lsls	r2, r2, #23
 8003e78:	d4c7      	bmi.n	8003e0a <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	f022 0208 	bic.w	r2, r2, #8
 8003e80:	601a      	str	r2, [r3, #0]
 8003e82:	e7c2      	b.n	8003e0a <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e84:	0350      	lsls	r0, r2, #13
 8003e86:	d527      	bpl.n	8003ed8 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	0319      	lsls	r1, r3, #12
 8003e8c:	d431      	bmi.n	8003ef2 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8003e8e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
        if(hdma->XferCpltCallback != NULL)
 8003e90:	b10b      	cbz	r3, 8003e96 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 8003e92:	4620      	mov	r0, r4
 8003e94:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e96:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003e98:	b36b      	cbz	r3, 8003ef6 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003e9a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003e9c:	07da      	lsls	r2, r3, #31
 8003e9e:	d519      	bpl.n	8003ed4 <HAL_DMA_IRQHandler+0x150>
  uint32_t timeout = SystemCoreClock / 9600;
 8003ea0:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
      __HAL_DMA_DISABLE(hdma);
 8003ea4:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8003ea6:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 8003eaa:	2305      	movs	r3, #5
 8003eac:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8003eb0:	6813      	ldr	r3, [r2, #0]
 8003eb2:	f023 0301 	bic.w	r3, r3, #1
 8003eb6:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8003eb8:	9b01      	ldr	r3, [sp, #4]
 8003eba:	3301      	adds	r3, #1
 8003ebc:	42bb      	cmp	r3, r7
 8003ebe:	9301      	str	r3, [sp, #4]
 8003ec0:	d802      	bhi.n	8003ec8 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ec2:	6813      	ldr	r3, [r2, #0]
 8003ec4:	07db      	lsls	r3, r3, #31
 8003ec6:	d4f7      	bmi.n	8003eb8 <HAL_DMA_IRQHandler+0x134>
      hdma->State = HAL_DMA_STATE_READY;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8003ece:	2300      	movs	r3, #0
 8003ed0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8003ed4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8003ed6:	e7c6      	b.n	8003e66 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	f412 7280 	ands.w	r2, r2, #256	@ 0x100
 8003ede:	d108      	bne.n	8003ef2 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ee0:	6819      	ldr	r1, [r3, #0]
 8003ee2:	f021 0110 	bic.w	r1, r1, #16
 8003ee6:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8003ee8:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8003eea:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8003eee:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        if(hdma->XferCpltCallback != NULL)
 8003ef2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003ef4:	e7cc      	b.n	8003e90 <HAL_DMA_IRQHandler+0x10c>
}
 8003ef6:	b003      	add	sp, #12
 8003ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003efa:	bf00      	nop
 8003efc:	200000a0 	.word	0x200000a0

08003f00 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003f00:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003f02:	6804      	ldr	r4, [r0, #0]
 8003f04:	9d04      	ldr	r5, [sp, #16]
 8003f06:	6c66      	ldr	r6, [r4, #68]	@ 0x44
 8003f08:	ea45 4503 	orr.w	r5, r5, r3, lsl #16

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003f0c:	6843      	ldr	r3, [r0, #4]
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003f0e:	f006 4640 	and.w	r6, r6, #3221225472	@ 0xc0000000
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003f12:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003f16:	ea45 0506 	orr.w	r5, r5, r6
 8003f1a:	6465      	str	r5, [r4, #68]	@ 0x44
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003f1c:	63e2      	str	r2, [r4, #60]	@ 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003f1e:	d130      	bne.n	8003f82 <DMA2D_SetConfig+0x82>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003f20:	6885      	ldr	r5, [r0, #8]
 8003f22:	b11d      	cbz	r5, 8003f2c <DMA2D_SetConfig+0x2c>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003f24:	2d01      	cmp	r5, #1
 8003f26:	d103      	bne.n	8003f30 <DMA2D_SetConfig+0x30>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003f28:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U);
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003f2c:	63a1      	str	r1, [r4, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003f2e:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003f30:	2d02      	cmp	r5, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003f32:	f401 037f 	and.w	r3, r1, #16711680	@ 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003f36:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003f3a:	b2ca      	uxtb	r2, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003f3c:	d107      	bne.n	8003f4e <DMA2D_SetConfig+0x4e>
      tmp2 = (tmp2 >> 19U);
 8003f3e:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 10U);
 8003f40:	0a80      	lsrs	r0, r0, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003f42:	02c9      	lsls	r1, r1, #11
 8003f44:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
 8003f48:	ea41 01d2 	orr.w	r1, r1, r2, lsr #3
 8003f4c:	e7ee      	b.n	8003f2c <DMA2D_SetConfig+0x2c>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003f4e:	2d03      	cmp	r5, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003f50:	f001 417f 	and.w	r1, r1, #4278190080	@ 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003f54:	d10a      	bne.n	8003f6c <DMA2D_SetConfig+0x6c>
      tmp2 = (tmp2 >> 19U);
 8003f56:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 8003f58:	0ac0      	lsrs	r0, r0, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003f5a:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31U);
 8003f5c:	0fc9      	lsrs	r1, r1, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003f5e:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
 8003f62:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 8003f66:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 8003f6a:	e7df      	b.n	8003f2c <DMA2D_SetConfig+0x2c>
      tmp2 = (tmp2 >> 20U);
 8003f6c:	0d1b      	lsrs	r3, r3, #20
      tmp3 = (tmp3 >> 12U);
 8003f6e:	0b00      	lsrs	r0, r0, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003f70:	021b      	lsls	r3, r3, #8
      tmp1 = (tmp1 >> 28U);
 8003f72:	0f09      	lsrs	r1, r1, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003f74:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8003f78:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8003f7c:	ea43 3101 	orr.w	r1, r3, r1, lsl #12
 8003f80:	e7d4      	b.n	8003f2c <DMA2D_SetConfig+0x2c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003f82:	60e1      	str	r1, [r4, #12]
}
 8003f84:	e7d3      	b.n	8003f2e <DMA2D_SetConfig+0x2e>

08003f86 <HAL_DMA2D_Init>:
{
 8003f86:	b510      	push	{r4, lr}
  if (hdma2d == NULL)
 8003f88:	4604      	mov	r4, r0
 8003f8a:	b330      	cbz	r0, 8003fda <HAL_DMA2D_Init+0x54>
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003f8c:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 8003f90:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003f94:	b91b      	cbnz	r3, 8003f9e <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
 8003f96:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8003f9a:	f004 fbad 	bl	80086f8 <HAL_DMA2D_MspInit>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003f9e:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003fa0:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003fa2:	6861      	ldr	r1, [r4, #4]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003fa4:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003fa6:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003faa:	6813      	ldr	r3, [r2, #0]
 8003fac:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8003fb0:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003fb2:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003fb4:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003fb6:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8003fb8:	f023 0307 	bic.w	r3, r3, #7
 8003fbc:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003fbe:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003fc0:	6353      	str	r3, [r2, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003fc2:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8003fc4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003fc8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003fcc:	430b      	orrs	r3, r1
 8003fce:	6413      	str	r3, [r2, #64]	@ 0x40
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003fd0:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003fd2:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003fd4:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
}
 8003fd8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003fda:	2001      	movs	r0, #1
 8003fdc:	e7fc      	b.n	8003fd8 <HAL_DMA2D_Init+0x52>

08003fde <HAL_DMA2D_Start>:
{
 8003fde:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 8003fe0:	f890 5038 	ldrb.w	r5, [r0, #56]	@ 0x38
{
 8003fe4:	4604      	mov	r4, r0
  __HAL_LOCK(hdma2d);
 8003fe6:	2d01      	cmp	r5, #1
 8003fe8:	f04f 0502 	mov.w	r5, #2
 8003fec:	d00f      	beq.n	800400e <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003fee:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
  __HAL_LOCK(hdma2d);
 8003ff2:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003ff4:	9d06      	ldr	r5, [sp, #24]
  __HAL_LOCK(hdma2d);
 8003ff6:	f880 6038 	strb.w	r6, [r0, #56]	@ 0x38
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003ffa:	9500      	str	r5, [sp, #0]
 8003ffc:	f7ff ff80 	bl	8003f00 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8004000:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
 8004002:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 8004004:	6813      	ldr	r3, [r2, #0]
 8004006:	4333      	orrs	r3, r6
 8004008:	6013      	str	r3, [r2, #0]
}
 800400a:	b002      	add	sp, #8
 800400c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 800400e:	4628      	mov	r0, r5
 8004010:	e7fb      	b.n	800400a <HAL_DMA2D_Start+0x2c>

08004012 <HAL_DMA2D_PollForTransfer>:
  __IO uint32_t isrflags = 0x0U;
 8004012:	2300      	movs	r3, #0
{
 8004014:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 8004016:	9301      	str	r3, [sp, #4]
{
 8004018:	4604      	mov	r4, r0
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800401a:	6803      	ldr	r3, [r0, #0]
{
 800401c:	460d      	mov	r5, r1
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	07db      	lsls	r3, r3, #31
 8004022:	d418      	bmi.n	8004056 <HAL_DMA2D_PollForTransfer+0x44>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004024:	6822      	ldr	r2, [r4, #0]
 8004026:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004028:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800402a:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 800402c:	069e      	lsls	r6, r3, #26
 800402e:	d506      	bpl.n	800403e <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
 8004030:	f7ff fc94 	bl	800395c <HAL_GetTick>
 8004034:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004036:	6823      	ldr	r3, [r4, #0]
 8004038:	685a      	ldr	r2, [r3, #4]
 800403a:	06d2      	lsls	r2, r2, #27
 800403c:	d53f      	bpl.n	80040be <HAL_DMA2D_PollForTransfer+0xac>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800403e:	6823      	ldr	r3, [r4, #0]
 8004040:	2212      	movs	r2, #18
  return HAL_OK;
 8004042:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8004044:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004046:	2301      	movs	r3, #1
 8004048:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
        __HAL_UNLOCK(hdma2d);
 800404c:	2300      	movs	r3, #0
 800404e:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
}
 8004052:	b002      	add	sp, #8
 8004054:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8004056:	f7ff fc81 	bl	800395c <HAL_GetTick>
 800405a:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800405c:	6823      	ldr	r3, [r4, #0]
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	0792      	lsls	r2, r2, #30
 8004062:	d4df      	bmi.n	8004024 <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004068:	9a01      	ldr	r2, [sp, #4]
 800406a:	f012 0f21 	tst.w	r2, #33	@ 0x21
 800406e:	d014      	beq.n	800409a <HAL_DMA2D_PollForTransfer+0x88>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004070:	9a01      	ldr	r2, [sp, #4]
 8004072:	0695      	lsls	r5, r2, #26
 8004074:	d503      	bpl.n	800407e <HAL_DMA2D_PollForTransfer+0x6c>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004076:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8004078:	f042 0202 	orr.w	r2, r2, #2
 800407c:	63e2      	str	r2, [r4, #60]	@ 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800407e:	9a01      	ldr	r2, [sp, #4]
 8004080:	07d0      	lsls	r0, r2, #31
 8004082:	d503      	bpl.n	800408c <HAL_DMA2D_PollForTransfer+0x7a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004084:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8004086:	f042 0201 	orr.w	r2, r2, #1
 800408a:	63e2      	str	r2, [r4, #60]	@ 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800408c:	2221      	movs	r2, #33	@ 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800408e:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004090:	2304      	movs	r3, #4
        return HAL_ERROR;
 8004092:	2001      	movs	r0, #1
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004094:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
        return HAL_ERROR;
 8004098:	e7d8      	b.n	800404c <HAL_DMA2D_PollForTransfer+0x3a>
      if (Timeout != HAL_MAX_DELAY)
 800409a:	1c69      	adds	r1, r5, #1
 800409c:	d0df      	beq.n	800405e <HAL_DMA2D_PollForTransfer+0x4c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800409e:	f7ff fc5d 	bl	800395c <HAL_GetTick>
 80040a2:	1b80      	subs	r0, r0, r6
 80040a4:	42a8      	cmp	r0, r5
 80040a6:	d801      	bhi.n	80040ac <HAL_DMA2D_PollForTransfer+0x9a>
 80040a8:	2d00      	cmp	r5, #0
 80040aa:	d1d7      	bne.n	800405c <HAL_DMA2D_PollForTransfer+0x4a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80040ac:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
          return HAL_TIMEOUT;
 80040ae:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80040b0:	f043 0320 	orr.w	r3, r3, #32
 80040b4:	63e3      	str	r3, [r4, #60]	@ 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
          return HAL_TIMEOUT;
 80040bc:	e7c6      	b.n	800404c <HAL_DMA2D_PollForTransfer+0x3a>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80040c2:	9a01      	ldr	r2, [sp, #4]
 80040c4:	f012 0f29 	tst.w	r2, #41	@ 0x29
 80040c8:	d016      	beq.n	80040f8 <HAL_DMA2D_PollForTransfer+0xe6>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80040ca:	9a01      	ldr	r2, [sp, #4]
 80040cc:	0716      	lsls	r6, r2, #28
 80040ce:	d503      	bpl.n	80040d8 <HAL_DMA2D_PollForTransfer+0xc6>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80040d0:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80040d2:	f042 0204 	orr.w	r2, r2, #4
 80040d6:	63e2      	str	r2, [r4, #60]	@ 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80040d8:	9a01      	ldr	r2, [sp, #4]
 80040da:	0695      	lsls	r5, r2, #26
 80040dc:	d503      	bpl.n	80040e6 <HAL_DMA2D_PollForTransfer+0xd4>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80040de:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80040e0:	f042 0202 	orr.w	r2, r2, #2
 80040e4:	63e2      	str	r2, [r4, #60]	@ 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80040e6:	9a01      	ldr	r2, [sp, #4]
 80040e8:	07d0      	lsls	r0, r2, #31
 80040ea:	d503      	bpl.n	80040f4 <HAL_DMA2D_PollForTransfer+0xe2>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80040ec:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80040ee:	f042 0201 	orr.w	r2, r2, #1
 80040f2:	63e2      	str	r2, [r4, #60]	@ 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80040f4:	2229      	movs	r2, #41	@ 0x29
 80040f6:	e7ca      	b.n	800408e <HAL_DMA2D_PollForTransfer+0x7c>
      if (Timeout != HAL_MAX_DELAY)
 80040f8:	1c69      	adds	r1, r5, #1
 80040fa:	d09d      	beq.n	8004038 <HAL_DMA2D_PollForTransfer+0x26>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80040fc:	f7ff fc2e 	bl	800395c <HAL_GetTick>
 8004100:	1b80      	subs	r0, r0, r6
 8004102:	42a8      	cmp	r0, r5
 8004104:	d8d2      	bhi.n	80040ac <HAL_DMA2D_PollForTransfer+0x9a>
 8004106:	2d00      	cmp	r5, #0
 8004108:	d195      	bne.n	8004036 <HAL_DMA2D_PollForTransfer+0x24>
 800410a:	e7cf      	b.n	80040ac <HAL_DMA2D_PollForTransfer+0x9a>

0800410c <HAL_DMA2D_LineEventCallback>:
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 800410c:	4770      	bx	lr

0800410e <HAL_DMA2D_CLUTLoadingCpltCallback>:
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 800410e:	4770      	bx	lr

08004110 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004110:	6803      	ldr	r3, [r0, #0]
{
 8004112:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004114:	685e      	ldr	r6, [r3, #4]
{
 8004116:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004118:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800411a:	07f2      	lsls	r2, r6, #31
 800411c:	d514      	bpl.n	8004148 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 800411e:	05e9      	lsls	r1, r5, #23
 8004120:	d512      	bpl.n	8004148 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004128:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800412a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800412c:	f042 0201 	orr.w	r2, r2, #1
 8004130:	63c2      	str	r2, [r0, #60]	@ 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004132:	2201      	movs	r2, #1
 8004134:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004136:	2304      	movs	r3, #4
 8004138:	f880 3039 	strb.w	r3, [r0, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 800413c:	2300      	movs	r3, #0
 800413e:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8004142:	6943      	ldr	r3, [r0, #20]
 8004144:	b103      	cbz	r3, 8004148 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 8004146:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004148:	06b2      	lsls	r2, r6, #26
 800414a:	d516      	bpl.n	800417a <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 800414c:	04ab      	lsls	r3, r5, #18
 800414e:	d514      	bpl.n	800417a <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004150:	6823      	ldr	r3, [r4, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004158:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800415a:	2220      	movs	r2, #32
 800415c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800415e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004160:	f043 0302 	orr.w	r3, r3, #2
 8004164:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004166:	2304      	movs	r3, #4
 8004168:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 800416c:	2300      	movs	r3, #0
 800416e:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8004172:	6963      	ldr	r3, [r4, #20]
 8004174:	b10b      	cbz	r3, 800417a <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 8004176:	4620      	mov	r0, r4
 8004178:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800417a:	0730      	lsls	r0, r6, #28
 800417c:	d516      	bpl.n	80041ac <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800417e:	0529      	lsls	r1, r5, #20
 8004180:	d514      	bpl.n	80041ac <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004182:	6823      	ldr	r3, [r4, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800418a:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800418c:	2208      	movs	r2, #8
 800418e:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004190:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004192:	f043 0304 	orr.w	r3, r3, #4
 8004196:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004198:	2304      	movs	r3, #4
 800419a:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 800419e:	2300      	movs	r3, #0
 80041a0:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 80041a4:	6963      	ldr	r3, [r4, #20]
 80041a6:	b10b      	cbz	r3, 80041ac <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 80041a8:	4620      	mov	r0, r4
 80041aa:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80041ac:	0772      	lsls	r2, r6, #29
 80041ae:	d50b      	bpl.n	80041c8 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 80041b0:	056b      	lsls	r3, r5, #21
 80041b2:	d509      	bpl.n	80041c8 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80041b4:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80041b6:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041be:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80041c0:	2204      	movs	r2, #4
 80041c2:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80041c4:	f7ff ffa2 	bl	800410c <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80041c8:	07b0      	lsls	r0, r6, #30
 80041ca:	d514      	bpl.n	80041f6 <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 80041cc:	05a9      	lsls	r1, r5, #22
 80041ce:	d512      	bpl.n	80041f6 <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80041d0:	6823      	ldr	r3, [r4, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80041d8:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80041da:	2202      	movs	r2, #2
 80041dc:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80041de:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80041e0:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80041e2:	2301      	movs	r3, #1
 80041e4:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 80041e8:	2300      	movs	r3, #0
 80041ea:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferCpltCallback != NULL)
 80041ee:	6923      	ldr	r3, [r4, #16]
 80041f0:	b10b      	cbz	r3, 80041f6 <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 80041f2:	4620      	mov	r0, r4
 80041f4:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80041f6:	06f2      	lsls	r2, r6, #27
 80041f8:	d513      	bpl.n	8004222 <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80041fa:	04eb      	lsls	r3, r5, #19
 80041fc:	d511      	bpl.n	8004222 <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80041fe:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004200:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004208:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800420a:	2210      	movs	r2, #16
 800420c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800420e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004210:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004212:	2301      	movs	r3, #1
 8004214:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 8004218:	2300      	movs	r3, #0
 800421a:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800421e:	f7ff ff76 	bl	800410e <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8004222:	bd70      	pop	{r4, r5, r6, pc}

08004224 <HAL_DMA2D_ConfigLayer>:
{
 8004224:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 8004226:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
{
 800422a:	4603      	mov	r3, r0
 800422c:	2002      	movs	r0, #2
  __HAL_LOCK(hdma2d);
 800422e:	2a01      	cmp	r2, #1
 8004230:	d02b      	beq.n	800428a <HAL_DMA2D_ConfigLayer+0x66>
 8004232:	2201      	movs	r2, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004234:	f883 0039 	strb.w	r0, [r3, #57]	@ 0x39
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004238:	010e      	lsls	r6, r1, #4
 800423a:	4f1c      	ldr	r7, [pc, #112]	@ (80042ac <HAL_DMA2D_ConfigLayer+0x88>)
  __HAL_LOCK(hdma2d);
 800423c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004240:	eb03 1201 	add.w	r2, r3, r1, lsl #4
 8004244:	e9d2 4007 	ldrd	r4, r0, [r2, #28]
 8004248:	6a55      	ldr	r5, [r2, #36]	@ 0x24
 800424a:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800424e:	3c09      	subs	r4, #9
 8004250:	2c01      	cmp	r4, #1
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004252:	bf96      	itet	ls
 8004254:	f005 427f 	andls.w	r2, r5, #4278190080	@ 0xff000000
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004258:	ea40 6005 	orrhi.w	r0, r0, r5, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800425c:	4310      	orrls	r0, r2
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800425e:	681a      	ldr	r2, [r3, #0]
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004260:	b9a1      	cbnz	r1, 800428c <HAL_DMA2D_ConfigLayer+0x68>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004262:	6a51      	ldr	r1, [r2, #36]	@ 0x24
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004264:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004266:	ea01 0107 	and.w	r1, r1, r7
 800426a:	ea41 0100 	orr.w	r1, r1, r0
 800426e:	6251      	str	r1, [r2, #36]	@ 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004270:	6999      	ldr	r1, [r3, #24]
 8004272:	6191      	str	r1, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004274:	d803      	bhi.n	800427e <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004276:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004278:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800427c:	6291      	str	r1, [r2, #40]	@ 0x28
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800427e:	2201      	movs	r2, #1
  __HAL_UNLOCK(hdma2d);
 8004280:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004282:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  __HAL_UNLOCK(hdma2d);
 8004286:	f883 0038 	strb.w	r0, [r3, #56]	@ 0x38
}
 800428a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800428c:	69d1      	ldr	r1, [r2, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800428e:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004290:	ea01 0107 	and.w	r1, r1, r7
 8004294:	ea41 0100 	orr.w	r1, r1, r0
 8004298:	61d1      	str	r1, [r2, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800429a:	eb03 0106 	add.w	r1, r3, r6
 800429e:	6989      	ldr	r1, [r1, #24]
 80042a0:	6111      	str	r1, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80042a2:	d8ec      	bhi.n	800427e <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80042a4:	f025 457f 	bic.w	r5, r5, #4278190080	@ 0xff000000
 80042a8:	6215      	str	r5, [r2, #32]
 80042aa:	e7e8      	b.n	800427e <HAL_DMA2D_ConfigLayer+0x5a>
 80042ac:	00fcfff0 	.word	0x00fcfff0

080042b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80042b4:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042b6:	f8df 91bc 	ldr.w	r9, [pc, #444]	@ 8004474 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042ba:	4a6c      	ldr	r2, [pc, #432]	@ (800446c <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 80042bc:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042be:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 80042c0:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042c2:	ea04 0605 	and.w	r6, r4, r5
    if (iocurrent == ioposition)
 80042c6:	43ac      	bics	r4, r5
 80042c8:	f040 80b7 	bne.w	800443a <HAL_GPIO_Init+0x18a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042cc:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80042ce:	2703      	movs	r7, #3
 80042d0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042d4:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80042d8:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042dc:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80042de:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042e2:	2f01      	cmp	r7, #1
 80042e4:	d834      	bhi.n	8004350 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR;
 80042e6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80042e8:	ea07 080c 	and.w	r8, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2));
 80042ec:	68cf      	ldr	r7, [r1, #12]
 80042ee:	fa07 f70e 	lsl.w	r7, r7, lr
 80042f2:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OSPEEDR = temp;
 80042f6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80042f8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042fa:	ea27 0806 	bic.w	r8, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042fe:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8004302:	409f      	lsls	r7, r3
 8004304:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8004308:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800430a:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800430c:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800430e:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004312:	688f      	ldr	r7, [r1, #8]
 8004314:	fa07 f70e 	lsl.w	r7, r7, lr
 8004318:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->PUPDR = temp;
 800431c:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800431e:	d119      	bne.n	8004354 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3];
 8004320:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004324:	f003 0a07 	and.w	sl, r3, #7
 8004328:	f04f 0b0f 	mov.w	fp, #15
 800432c:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8004330:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8004334:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004338:	fa0b fb0a 	lsl.w	fp, fp, sl
 800433c:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004340:	690f      	ldr	r7, [r1, #16]
 8004342:	fa07 f70a 	lsl.w	r7, r7, sl
 8004346:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3] = temp;
 800434a:	f8c8 7020 	str.w	r7, [r8, #32]
 800434e:	e001      	b.n	8004354 <HAL_GPIO_Init+0xa4>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004350:	2c03      	cmp	r4, #3
 8004352:	d1da      	bne.n	800430a <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8004354:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004356:	fa04 f40e 	lsl.w	r4, r4, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800435a:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800435e:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004362:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 8004366:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004368:	d067      	beq.n	800443a <HAL_GPIO_Init+0x18a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800436a:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 800436e:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004372:	f003 0c03 	and.w	ip, r3, #3
 8004376:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800437a:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 800437e:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004382:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004386:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 800438a:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 800438e:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004392:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004396:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 800439a:	9401      	str	r4, [sp, #4]
 800439c:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 800439e:	68bc      	ldr	r4, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80043a0:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80043a4:	4c32      	ldr	r4, [pc, #200]	@ (8004470 <HAL_GPIO_Init+0x1c0>)
 80043a6:	42a0      	cmp	r0, r4
 80043a8:	d04e      	beq.n	8004448 <HAL_GPIO_Init+0x198>
 80043aa:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80043ae:	42a0      	cmp	r0, r4
 80043b0:	d04c      	beq.n	800444c <HAL_GPIO_Init+0x19c>
 80043b2:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80043b6:	42a0      	cmp	r0, r4
 80043b8:	d04a      	beq.n	8004450 <HAL_GPIO_Init+0x1a0>
 80043ba:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80043be:	42a0      	cmp	r0, r4
 80043c0:	d048      	beq.n	8004454 <HAL_GPIO_Init+0x1a4>
 80043c2:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80043c6:	42a0      	cmp	r0, r4
 80043c8:	d046      	beq.n	8004458 <HAL_GPIO_Init+0x1a8>
 80043ca:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80043ce:	42a0      	cmp	r0, r4
 80043d0:	d044      	beq.n	800445c <HAL_GPIO_Init+0x1ac>
 80043d2:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80043d6:	42a0      	cmp	r0, r4
 80043d8:	d042      	beq.n	8004460 <HAL_GPIO_Init+0x1b0>
 80043da:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80043de:	42a0      	cmp	r0, r4
 80043e0:	d040      	beq.n	8004464 <HAL_GPIO_Init+0x1b4>
 80043e2:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80043e6:	42a0      	cmp	r0, r4
 80043e8:	d03e      	beq.n	8004468 <HAL_GPIO_Init+0x1b8>
 80043ea:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80043ee:	42a0      	cmp	r0, r4
 80043f0:	bf14      	ite	ne
 80043f2:	240a      	movne	r4, #10
 80043f4:	2409      	moveq	r4, #9
 80043f6:	fa04 f40c 	lsl.w	r4, r4, ip
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80043fa:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80043fe:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8004402:	60bc      	str	r4, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8004404:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->RTSR;
 8004408:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800440a:	bf0c      	ite	eq
 800440c:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 800440e:	4334      	orrne	r4, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004410:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        EXTI->RTSR = temp;
 8004414:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 8004416:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8004418:	bf0c      	ite	eq
 800441a:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 800441c:	4334      	orrne	r4, r6
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800441e:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        EXTI->FTSR = temp;
 8004422:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 8004424:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8004426:	bf0c      	ite	eq
 8004428:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 800442a:	4334      	orrne	r4, r6
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800442c:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 800442e:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 8004430:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8004432:	bf54      	ite	pl
 8004434:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8004436:	4334      	orrmi	r4, r6
        }
        EXTI->IMR = temp;
 8004438:	6014      	str	r4, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800443a:	3301      	adds	r3, #1
 800443c:	2b10      	cmp	r3, #16
 800443e:	f47f af3d 	bne.w	80042bc <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8004442:	b003      	add	sp, #12
 8004444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004448:	2400      	movs	r4, #0
 800444a:	e7d4      	b.n	80043f6 <HAL_GPIO_Init+0x146>
 800444c:	2401      	movs	r4, #1
 800444e:	e7d2      	b.n	80043f6 <HAL_GPIO_Init+0x146>
 8004450:	2402      	movs	r4, #2
 8004452:	e7d0      	b.n	80043f6 <HAL_GPIO_Init+0x146>
 8004454:	2403      	movs	r4, #3
 8004456:	e7ce      	b.n	80043f6 <HAL_GPIO_Init+0x146>
 8004458:	2404      	movs	r4, #4
 800445a:	e7cc      	b.n	80043f6 <HAL_GPIO_Init+0x146>
 800445c:	2405      	movs	r4, #5
 800445e:	e7ca      	b.n	80043f6 <HAL_GPIO_Init+0x146>
 8004460:	2406      	movs	r4, #6
 8004462:	e7c8      	b.n	80043f6 <HAL_GPIO_Init+0x146>
 8004464:	2407      	movs	r4, #7
 8004466:	e7c6      	b.n	80043f6 <HAL_GPIO_Init+0x146>
 8004468:	2408      	movs	r4, #8
 800446a:	e7c4      	b.n	80043f6 <HAL_GPIO_Init+0x146>
 800446c:	40013c00 	.word	0x40013c00
 8004470:	40020000 	.word	0x40020000
 8004474:	40023800 	.word	0x40023800

08004478 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800447c:	2200      	movs	r2, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800447e:	f04f 0a01 	mov.w	sl, #1

    if (iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004482:	f04f 080f 	mov.w	r8, #15
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004486:	f04f 0b03 	mov.w	fp, #3
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800448a:	4c46      	ldr	r4, [pc, #280]	@ (80045a4 <HAL_GPIO_DeInit+0x12c>)
    ioposition = ((uint32_t)0x01) << position;
 800448c:	fa0a fc02 	lsl.w	ip, sl, r2
    if (iocurrent == ioposition)
 8004490:	ea3c 0301 	bics.w	r3, ip, r1
    iocurrent = (GPIO_Pin) & ioposition;
 8004494:	ea0c 0601 	and.w	r6, ip, r1
    if (iocurrent == ioposition)
 8004498:	d16c      	bne.n	8004574 <HAL_GPIO_DeInit+0xfc>
      tmp = SYSCFG->EXTICR[position >> 2];
 800449a:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800449e:	f002 0703 	and.w	r7, r2, #3
 80044a2:	f105 4580 	add.w	r5, r5, #1073741824	@ 0x40000000
 80044a6:	00bf      	lsls	r7, r7, #2
 80044a8:	f505 359c 	add.w	r5, r5, #79872	@ 0x13800
 80044ac:	fa08 f907 	lsl.w	r9, r8, r7
      tmp = SYSCFG->EXTICR[position >> 2];
 80044b0:	68ab      	ldr	r3, [r5, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80044b2:	ea09 0e03 	and.w	lr, r9, r3
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80044b6:	4b3c      	ldr	r3, [pc, #240]	@ (80045a8 <HAL_GPIO_DeInit+0x130>)
 80044b8:	4298      	cmp	r0, r3
 80044ba:	d060      	beq.n	800457e <HAL_GPIO_DeInit+0x106>
 80044bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80044c0:	4298      	cmp	r0, r3
 80044c2:	d05e      	beq.n	8004582 <HAL_GPIO_DeInit+0x10a>
 80044c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80044c8:	4298      	cmp	r0, r3
 80044ca:	d05c      	beq.n	8004586 <HAL_GPIO_DeInit+0x10e>
 80044cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80044d0:	4298      	cmp	r0, r3
 80044d2:	d05a      	beq.n	800458a <HAL_GPIO_DeInit+0x112>
 80044d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80044d8:	4298      	cmp	r0, r3
 80044da:	d058      	beq.n	800458e <HAL_GPIO_DeInit+0x116>
 80044dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80044e0:	4298      	cmp	r0, r3
 80044e2:	d056      	beq.n	8004592 <HAL_GPIO_DeInit+0x11a>
 80044e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80044e8:	4298      	cmp	r0, r3
 80044ea:	d054      	beq.n	8004596 <HAL_GPIO_DeInit+0x11e>
 80044ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80044f0:	4298      	cmp	r0, r3
 80044f2:	d052      	beq.n	800459a <HAL_GPIO_DeInit+0x122>
 80044f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80044f8:	4298      	cmp	r0, r3
 80044fa:	d050      	beq.n	800459e <HAL_GPIO_DeInit+0x126>
 80044fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004500:	4298      	cmp	r0, r3
 8004502:	bf0c      	ite	eq
 8004504:	2309      	moveq	r3, #9
 8004506:	230a      	movne	r3, #10
 8004508:	40bb      	lsls	r3, r7
 800450a:	4573      	cmp	r3, lr
 800450c:	d113      	bne.n	8004536 <HAL_GPIO_DeInit+0xbe>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800450e:	6823      	ldr	r3, [r4, #0]
 8004510:	ea23 0306 	bic.w	r3, r3, r6
 8004514:	6023      	str	r3, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004516:	6863      	ldr	r3, [r4, #4]
 8004518:	ea23 0306 	bic.w	r3, r3, r6
 800451c:	6063      	str	r3, [r4, #4]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800451e:	68e3      	ldr	r3, [r4, #12]
 8004520:	ea23 0306 	bic.w	r3, r3, r6
 8004524:	60e3      	str	r3, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004526:	68a3      	ldr	r3, [r4, #8]
 8004528:	ea23 0306 	bic.w	r3, r3, r6
 800452c:	60a3      	str	r3, [r4, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800452e:	68ab      	ldr	r3, [r5, #8]
 8004530:	ea23 0309 	bic.w	r3, r3, r9
 8004534:	60ab      	str	r3, [r5, #8]
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004536:	0053      	lsls	r3, r2, #1
 8004538:	6805      	ldr	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800453a:	08d6      	lsrs	r6, r2, #3
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800453c:	fa0b f303 	lsl.w	r3, fp, r3
 8004540:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8004544:	ea25 0503 	bic.w	r5, r5, r3
 8004548:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800454a:	f002 0507 	and.w	r5, r2, #7
 800454e:	6a37      	ldr	r7, [r6, #32]
 8004550:	00ad      	lsls	r5, r5, #2
 8004552:	fa08 f505 	lsl.w	r5, r8, r5
 8004556:	ea27 0705 	bic.w	r7, r7, r5
 800455a:	6237      	str	r7, [r6, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800455c:	68c5      	ldr	r5, [r0, #12]
 800455e:	ea25 0503 	bic.w	r5, r5, r3
 8004562:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004564:	6845      	ldr	r5, [r0, #4]
 8004566:	ea25 050c 	bic.w	r5, r5, ip
 800456a:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800456c:	6885      	ldr	r5, [r0, #8]
 800456e:	ea25 0303 	bic.w	r3, r5, r3
 8004572:	6083      	str	r3, [r0, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 8004574:	3201      	adds	r2, #1
 8004576:	2a10      	cmp	r2, #16
 8004578:	d188      	bne.n	800448c <HAL_GPIO_DeInit+0x14>
    }
  }
}
 800457a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800457e:	2300      	movs	r3, #0
 8004580:	e7c2      	b.n	8004508 <HAL_GPIO_DeInit+0x90>
 8004582:	2301      	movs	r3, #1
 8004584:	e7c0      	b.n	8004508 <HAL_GPIO_DeInit+0x90>
 8004586:	2302      	movs	r3, #2
 8004588:	e7be      	b.n	8004508 <HAL_GPIO_DeInit+0x90>
 800458a:	2303      	movs	r3, #3
 800458c:	e7bc      	b.n	8004508 <HAL_GPIO_DeInit+0x90>
 800458e:	2304      	movs	r3, #4
 8004590:	e7ba      	b.n	8004508 <HAL_GPIO_DeInit+0x90>
 8004592:	2305      	movs	r3, #5
 8004594:	e7b8      	b.n	8004508 <HAL_GPIO_DeInit+0x90>
 8004596:	2306      	movs	r3, #6
 8004598:	e7b6      	b.n	8004508 <HAL_GPIO_DeInit+0x90>
 800459a:	2307      	movs	r3, #7
 800459c:	e7b4      	b.n	8004508 <HAL_GPIO_DeInit+0x90>
 800459e:	2308      	movs	r3, #8
 80045a0:	e7b2      	b.n	8004508 <HAL_GPIO_DeInit+0x90>
 80045a2:	bf00      	nop
 80045a4:	40013c00 	.word	0x40013c00
 80045a8:	40020000 	.word	0x40020000

080045ac <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80045ac:	6903      	ldr	r3, [r0, #16]
 80045ae:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80045b0:	bf14      	ite	ne
 80045b2:	2001      	movne	r0, #1
 80045b4:	2000      	moveq	r0, #0
 80045b6:	4770      	bx	lr

080045b8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80045b8:	b10a      	cbz	r2, 80045be <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80045ba:	6181      	str	r1, [r0, #24]
  }
}
 80045bc:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80045be:	0409      	lsls	r1, r1, #16
 80045c0:	e7fb      	b.n	80045ba <HAL_GPIO_WritePin+0x2>
	...

080045c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80045c4:	4a04      	ldr	r2, [pc, #16]	@ (80045d8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80045c6:	6951      	ldr	r1, [r2, #20]
 80045c8:	4201      	tst	r1, r0
{
 80045ca:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80045cc:	d002      	beq.n	80045d4 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80045ce:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80045d0:	f004 fe7e 	bl	80092d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80045d4:	bd08      	pop	{r3, pc}
 80045d6:	bf00      	nop
 80045d8:	40013c00 	.word	0x40013c00

080045dc <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80045dc:	6803      	ldr	r3, [r0, #0]
 80045de:	699a      	ldr	r2, [r3, #24]
 80045e0:	0791      	lsls	r1, r2, #30
 80045e2:	d501      	bpl.n	80045e8 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80045e4:	2200      	movs	r2, #0
 80045e6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045e8:	699a      	ldr	r2, [r3, #24]
 80045ea:	07d2      	lsls	r2, r2, #31
 80045ec:	d403      	bmi.n	80045f6 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80045ee:	699a      	ldr	r2, [r3, #24]
 80045f0:	f042 0201 	orr.w	r2, r2, #1
 80045f4:	619a      	str	r2, [r3, #24]
  }
}
 80045f6:	4770      	bx	lr

080045f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80045f8:	b530      	push	{r4, r5, lr}
 80045fa:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045fc:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004600:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004602:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8004604:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004606:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 800460a:	4a05      	ldr	r2, [pc, #20]	@ (8004620 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800460c:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 800460e:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004612:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8004616:	ea20 0002 	bic.w	r0, r0, r2
 800461a:	4303      	orrs	r3, r0
 800461c:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800461e:	bd30      	pop	{r4, r5, pc}
 8004620:	03ff63ff 	.word	0x03ff63ff

08004624 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 8004624:	6803      	ldr	r3, [r0, #0]
{
 8004626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 800462a:	699c      	ldr	r4, [r3, #24]
{
 800462c:	4605      	mov	r5, r0
 800462e:	460f      	mov	r7, r1
 8004630:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004632:	f014 0410 	ands.w	r4, r4, #16
 8004636:	d06f      	beq.n	8004718 <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 8004638:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800463a:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 800463c:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800463e:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004640:	682b      	ldr	r3, [r5, #0]
 8004642:	699a      	ldr	r2, [r3, #24]
 8004644:	0690      	lsls	r0, r2, #26
 8004646:	d461      	bmi.n	800470c <I2C_IsErrorOccurred+0xe8>
 8004648:	f1b8 0f00 	cmp.w	r8, #0
 800464c:	d035      	beq.n	80046ba <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 800464e:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 8004652:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 8004654:	682e      	ldr	r6, [r5, #0]
 8004656:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004658:	05d9      	lsls	r1, r3, #23
 800465a:	d505      	bpl.n	8004668 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800465c:	f44f 7280 	mov.w	r2, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8004660:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 8004664:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004666:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004668:	055a      	lsls	r2, r3, #21
 800466a:	d505      	bpl.n	8004678 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800466c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8004670:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 8004674:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004676:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004678:	059b      	lsls	r3, r3, #22
 800467a:	d54f      	bpl.n	800471c <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800467c:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8004680:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004684:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 8004686:	4628      	mov	r0, r5
 8004688:	f7ff ffa8 	bl	80045dc <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800468c:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 800468e:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8004690:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8004694:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8004698:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800469c:	f023 0301 	bic.w	r3, r3, #1
 80046a0:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 80046a2:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 80046a4:	4323      	orrs	r3, r4
 80046a6:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80046a8:	2320      	movs	r3, #32
 80046aa:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ae:	2300      	movs	r3, #0
 80046b0:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 80046b4:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 80046b8:	e032      	b.n	8004720 <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 80046ba:	1c7a      	adds	r2, r7, #1
 80046bc:	d0c1      	beq.n	8004642 <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80046be:	f7ff f94d 	bl	800395c <HAL_GetTick>
 80046c2:	1b80      	subs	r0, r0, r6
 80046c4:	42b8      	cmp	r0, r7
 80046c6:	d801      	bhi.n	80046cc <I2C_IsErrorOccurred+0xa8>
 80046c8:	2f00      	cmp	r7, #0
 80046ca:	d1b9      	bne.n	8004640 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80046cc:	682b      	ldr	r3, [r5, #0]
 80046ce:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 80046d0:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80046d4:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 80046d6:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80046d8:	0400      	lsls	r0, r0, #16
 80046da:	d50a      	bpl.n	80046f2 <I2C_IsErrorOccurred+0xce>
 80046dc:	0449      	lsls	r1, r1, #17
 80046de:	d408      	bmi.n	80046f2 <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 80046e0:	2a20      	cmp	r2, #32
 80046e2:	d006      	beq.n	80046f2 <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80046ea:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 80046ec:	f7ff f936 	bl	800395c <HAL_GetTick>
 80046f0:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046f2:	682b      	ldr	r3, [r5, #0]
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	069b      	lsls	r3, r3, #26
 80046f8:	d4a2      	bmi.n	8004640 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80046fa:	f7ff f92f 	bl	800395c <HAL_GetTick>
 80046fe:	1b80      	subs	r0, r0, r6
 8004700:	2819      	cmp	r0, #25
 8004702:	d9f6      	bls.n	80046f2 <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004704:	2420      	movs	r4, #32
              status = HAL_ERROR;
 8004706:	f04f 0801 	mov.w	r8, #1
 800470a:	e799      	b.n	8004640 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 800470c:	f1b8 0f00 	cmp.w	r8, #0
 8004710:	d19d      	bne.n	800464e <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004712:	2220      	movs	r2, #32
 8004714:	61da      	str	r2, [r3, #28]
 8004716:	e79a      	b.n	800464e <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 8004718:	4620      	mov	r0, r4
 800471a:	e79b      	b.n	8004654 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 800471c:	2800      	cmp	r0, #0
 800471e:	d1b2      	bne.n	8004686 <I2C_IsErrorOccurred+0x62>
}
 8004720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004724 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8004724:	b570      	push	{r4, r5, r6, lr}
 8004726:	4604      	mov	r4, r0
 8004728:	460d      	mov	r5, r1
 800472a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800472c:	6823      	ldr	r3, [r4, #0]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	079b      	lsls	r3, r3, #30
 8004732:	d501      	bpl.n	8004738 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8004734:	2000      	movs	r0, #0
 8004736:	e01f      	b.n	8004778 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004738:	4632      	mov	r2, r6
 800473a:	4629      	mov	r1, r5
 800473c:	4620      	mov	r0, r4
 800473e:	f7ff ff71 	bl	8004624 <I2C_IsErrorOccurred>
 8004742:	b9c0      	cbnz	r0, 8004776 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8004744:	1c6a      	adds	r2, r5, #1
 8004746:	d0f1      	beq.n	800472c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004748:	f7ff f908 	bl	800395c <HAL_GetTick>
 800474c:	1b80      	subs	r0, r0, r6
 800474e:	42a8      	cmp	r0, r5
 8004750:	d801      	bhi.n	8004756 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8004752:	2d00      	cmp	r5, #0
 8004754:	d1ea      	bne.n	800472c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004756:	6823      	ldr	r3, [r4, #0]
 8004758:	699b      	ldr	r3, [r3, #24]
 800475a:	f013 0302 	ands.w	r3, r3, #2
 800475e:	d1e5      	bne.n	800472c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004760:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 8004762:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004766:	f042 0220 	orr.w	r2, r2, #32
 800476a:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800476c:	2220      	movs	r2, #32
 800476e:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004772:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 8004776:	2001      	movs	r0, #1
}
 8004778:	bd70      	pop	{r4, r5, r6, pc}

0800477a <I2C_WaitOnFlagUntilTimeout>:
{
 800477a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800477e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8004782:	4604      	mov	r4, r0
 8004784:	460f      	mov	r7, r1
 8004786:	4616      	mov	r6, r2
 8004788:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800478a:	6823      	ldr	r3, [r4, #0]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	ea37 0303 	bics.w	r3, r7, r3
 8004792:	bf0c      	ite	eq
 8004794:	2301      	moveq	r3, #1
 8004796:	2300      	movne	r3, #0
 8004798:	42b3      	cmp	r3, r6
 800479a:	d001      	beq.n	80047a0 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 800479c:	2000      	movs	r0, #0
 800479e:	e025      	b.n	80047ec <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80047a0:	4642      	mov	r2, r8
 80047a2:	4629      	mov	r1, r5
 80047a4:	4620      	mov	r0, r4
 80047a6:	f7ff ff3d 	bl	8004624 <I2C_IsErrorOccurred>
 80047aa:	b9f0      	cbnz	r0, 80047ea <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
 80047ac:	1c6b      	adds	r3, r5, #1
 80047ae:	d0ec      	beq.n	800478a <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047b0:	f7ff f8d4 	bl	800395c <HAL_GetTick>
 80047b4:	eba0 0008 	sub.w	r0, r0, r8
 80047b8:	42a8      	cmp	r0, r5
 80047ba:	d801      	bhi.n	80047c0 <I2C_WaitOnFlagUntilTimeout+0x46>
 80047bc:	2d00      	cmp	r5, #0
 80047be:	d1e4      	bne.n	800478a <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80047c0:	6823      	ldr	r3, [r4, #0]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	ea37 0303 	bics.w	r3, r7, r3
 80047c8:	bf0c      	ite	eq
 80047ca:	2301      	moveq	r3, #1
 80047cc:	2300      	movne	r3, #0
 80047ce:	42b3      	cmp	r3, r6
 80047d0:	d1db      	bne.n	800478a <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047d2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80047d4:	f043 0320 	orr.w	r3, r3, #32
 80047d8:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80047da:	2320      	movs	r3, #32
 80047dc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047e0:	2300      	movs	r3, #0
 80047e2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 80047e6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80047ea:	2001      	movs	r0, #1
}
 80047ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080047f0 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80047f0:	b570      	push	{r4, r5, r6, lr}
 80047f2:	4604      	mov	r4, r0
 80047f4:	460d      	mov	r5, r1
 80047f6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047f8:	6823      	ldr	r3, [r4, #0]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	069b      	lsls	r3, r3, #26
 80047fe:	d501      	bpl.n	8004804 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8004800:	2000      	movs	r0, #0
 8004802:	e01d      	b.n	8004840 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004804:	4632      	mov	r2, r6
 8004806:	4629      	mov	r1, r5
 8004808:	4620      	mov	r0, r4
 800480a:	f7ff ff0b 	bl	8004624 <I2C_IsErrorOccurred>
 800480e:	b9b0      	cbnz	r0, 800483e <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004810:	f7ff f8a4 	bl	800395c <HAL_GetTick>
 8004814:	1b80      	subs	r0, r0, r6
 8004816:	42a8      	cmp	r0, r5
 8004818:	d801      	bhi.n	800481e <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800481a:	2d00      	cmp	r5, #0
 800481c:	d1ec      	bne.n	80047f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800481e:	6823      	ldr	r3, [r4, #0]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	f013 0320 	ands.w	r3, r3, #32
 8004826:	d1e7      	bne.n	80047f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004828:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800482a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800482e:	f042 0220 	orr.w	r2, r2, #32
 8004832:	6462      	str	r2, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004834:	2220      	movs	r2, #32
 8004836:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800483a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 800483e:	2001      	movs	r0, #1
}
 8004840:	bd70      	pop	{r4, r5, r6, pc}

08004842 <HAL_I2C_MspInit>:
}
 8004842:	4770      	bx	lr

08004844 <HAL_I2C_Init>:
{
 8004844:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8004846:	4604      	mov	r4, r0
 8004848:	2800      	cmp	r0, #0
 800484a:	d04e      	beq.n	80048ea <HAL_I2C_Init+0xa6>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800484c:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8004850:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004854:	b91b      	cbnz	r3, 800485e <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8004856:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 800485a:	f7ff fff2 	bl	8004842 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800485e:	2324      	movs	r3, #36	@ 0x24
 8004860:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8004864:	6823      	ldr	r3, [r4, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	f022 0201 	bic.w	r2, r2, #1
 800486c:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800486e:	6862      	ldr	r2, [r4, #4]
 8004870:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004874:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004876:	689a      	ldr	r2, [r3, #8]
 8004878:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800487c:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800487e:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004882:	2901      	cmp	r1, #1
 8004884:	d106      	bne.n	8004894 <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004886:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800488a:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800488c:	685a      	ldr	r2, [r3, #4]
 800488e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004892:	e007      	b.n	80048a4 <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004894:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004898:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800489a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800489c:	d1f6      	bne.n	800488c <HAL_I2C_Init+0x48>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800489e:	685a      	ldr	r2, [r3, #4]
 80048a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80048a4:	605a      	str	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048a6:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 80048ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80048b2:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80048b4:	68da      	ldr	r2, [r3, #12]
 80048b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80048ba:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80048bc:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 80048c0:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80048c2:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80048c4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80048c8:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80048ca:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	f042 0201 	orr.w	r2, r2, #1
 80048d8:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80048da:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048dc:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80048de:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80048e2:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048e4:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 80048e8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80048ea:	2001      	movs	r0, #1
 80048ec:	e7fc      	b.n	80048e8 <HAL_I2C_Init+0xa4>

080048ee <HAL_I2C_MspDeInit>:
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
 80048ee:	4770      	bx	lr

080048f0 <HAL_I2C_DeInit>:
{
 80048f0:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80048f2:	4604      	mov	r4, r0
 80048f4:	b198      	cbz	r0, 800491e <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 80048f6:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80048f8:	2324      	movs	r3, #36	@ 0x24
 80048fa:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 80048fe:	6813      	ldr	r3, [r2, #0]
 8004900:	f023 0301 	bic.w	r3, r3, #1
 8004904:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8004906:	f7ff fff2 	bl	80048ee <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800490a:	2000      	movs	r0, #0
 800490c:	6460      	str	r0, [r4, #68]	@ 0x44
  __HAL_UNLOCK(hi2c);
 800490e:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8004912:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004916:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004918:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 800491c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800491e:	2001      	movs	r0, #1
 8004920:	e7fc      	b.n	800491c <HAL_I2C_DeInit+0x2c>
	...

08004924 <HAL_I2C_Mem_Write>:
{
 8004924:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004928:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800492a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 800492e:	4604      	mov	r4, r0
 8004930:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004932:	2b20      	cmp	r3, #32
{
 8004934:	4616      	mov	r6, r2
 8004936:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 800493a:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800493e:	f040 80c6 	bne.w	8004ace <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 8004942:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004944:	b113      	cbz	r3, 800494c <HAL_I2C_Mem_Write+0x28>
 8004946:	f1ba 0f00 	cmp.w	sl, #0
 800494a:	d106      	bne.n	800495a <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800494c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004950:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8004952:	2001      	movs	r0, #1
}
 8004954:	b003      	add	sp, #12
 8004956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800495a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800495e:	2b01      	cmp	r3, #1
 8004960:	f000 80b5 	beq.w	8004ace <HAL_I2C_Mem_Write+0x1aa>
 8004964:	f04f 0b01 	mov.w	fp, #1
 8004968:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800496c:	f7fe fff6 	bl	800395c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004970:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8004972:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004974:	9000      	str	r0, [sp, #0]
 8004976:	465a      	mov	r2, fp
 8004978:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800497c:	4620      	mov	r0, r4
 800497e:	f7ff fefc 	bl	800477a <I2C_WaitOnFlagUntilTimeout>
 8004982:	2800      	cmp	r0, #0
 8004984:	d1e5      	bne.n	8004952 <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004986:	2321      	movs	r3, #33	@ 0x21
    hi2c->XferISR   = NULL;
 8004988:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800498a:	fa5f f289 	uxtb.w	r2, r9
 800498e:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004990:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004994:	2340      	movs	r3, #64	@ 0x40
 8004996:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 800499a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800499c:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800499e:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 80049a0:	6263      	str	r3, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80049a2:	4b4c      	ldr	r3, [pc, #304]	@ (8004ad4 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 80049a4:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80049a8:	9300      	str	r3, [sp, #0]
 80049aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80049ae:	f7ff fe23 	bl	80045f8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049b2:	462a      	mov	r2, r5
 80049b4:	4641      	mov	r1, r8
 80049b6:	4620      	mov	r0, r4
 80049b8:	f7ff feb4 	bl	8004724 <I2C_WaitOnTXISFlagUntilTimeout>
 80049bc:	bb18      	cbnz	r0, 8004a06 <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049be:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049c2:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049c4:	d115      	bne.n	80049f2 <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049c6:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80049c8:	2200      	movs	r2, #0
 80049ca:	2180      	movs	r1, #128	@ 0x80
 80049cc:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049ce:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80049d0:	4643      	mov	r3, r8
 80049d2:	9500      	str	r5, [sp, #0]
 80049d4:	f7ff fed1 	bl	800477a <I2C_WaitOnFlagUntilTimeout>
 80049d8:	b9a8      	cbnz	r0, 8004a06 <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049da:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80049dc:	b29b      	uxth	r3, r3
 80049de:	2bff      	cmp	r3, #255	@ 0xff
 80049e0:	d815      	bhi.n	8004a0e <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 80049e2:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80049e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 80049e8:	b292      	uxth	r2, r2
 80049ea:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80049ec:	b2d2      	uxtb	r2, r2
 80049ee:	9000      	str	r0, [sp, #0]
 80049f0:	e012      	b.n	8004a18 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80049f2:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049f4:	4641      	mov	r1, r8
 80049f6:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80049f8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049fa:	462a      	mov	r2, r5
 80049fc:	f7ff fe92 	bl	8004724 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a00:	b908      	cbnz	r0, 8004a06 <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a02:	6823      	ldr	r3, [r4, #0]
 8004a04:	e7df      	b.n	80049c6 <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 8004a06:	2300      	movs	r3, #0
 8004a08:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8004a0c:	e7a1      	b.n	8004952 <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a0e:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004a10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a14:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004a16:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004a18:	4639      	mov	r1, r7
 8004a1a:	4620      	mov	r0, r4
 8004a1c:	f7ff fdec 	bl	80045f8 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a20:	462a      	mov	r2, r5
 8004a22:	4641      	mov	r1, r8
 8004a24:	4620      	mov	r0, r4
 8004a26:	f7ff fe7d 	bl	8004724 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a2a:	2800      	cmp	r0, #0
 8004a2c:	d191      	bne.n	8004952 <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004a2e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004a30:	6822      	ldr	r2, [r4, #0]
 8004a32:	f813 1b01 	ldrb.w	r1, [r3], #1
 8004a36:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8004a38:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8004a3a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8004a3c:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8004a3e:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8004a40:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8004a42:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8004a44:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8004a46:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a48:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8004a4a:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	b1b3      	cbz	r3, 8004a7e <HAL_I2C_Mem_Write+0x15a>
 8004a50:	b9aa      	cbnz	r2, 8004a7e <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a52:	4643      	mov	r3, r8
 8004a54:	2180      	movs	r1, #128	@ 0x80
 8004a56:	4620      	mov	r0, r4
 8004a58:	9500      	str	r5, [sp, #0]
 8004a5a:	f7ff fe8e 	bl	800477a <I2C_WaitOnFlagUntilTimeout>
 8004a5e:	2800      	cmp	r0, #0
 8004a60:	f47f af77 	bne.w	8004952 <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a64:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	2bff      	cmp	r3, #255	@ 0xff
 8004a6a:	d928      	bls.n	8004abe <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a6c:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004a6e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a72:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004a74:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a76:	4639      	mov	r1, r7
 8004a78:	4620      	mov	r0, r4
 8004a7a:	f7ff fdbd 	bl	80045f8 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8004a7e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1cc      	bne.n	8004a20 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a86:	462a      	mov	r2, r5
 8004a88:	4641      	mov	r1, r8
 8004a8a:	4620      	mov	r0, r4
 8004a8c:	f7ff feb0 	bl	80047f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a90:	2800      	cmp	r0, #0
 8004a92:	f47f af5e 	bne.w	8004952 <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a96:	6823      	ldr	r3, [r4, #0]
 8004a98:	2120      	movs	r1, #32
 8004a9a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004a9c:	685a      	ldr	r2, [r3, #4]
 8004a9e:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8004aa2:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8004aa6:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8004aaa:	f022 0201 	bic.w	r2, r2, #1
 8004aae:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004ab0:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8004ab4:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ab8:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8004abc:	e74a      	b.n	8004954 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8004abe:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ac0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8004ac4:	b292      	uxth	r2, r2
 8004ac6:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ac8:	b2d2      	uxtb	r2, r2
 8004aca:	9000      	str	r0, [sp, #0]
 8004acc:	e7d3      	b.n	8004a76 <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 8004ace:	2002      	movs	r0, #2
 8004ad0:	e740      	b.n	8004954 <HAL_I2C_Mem_Write+0x30>
 8004ad2:	bf00      	nop
 8004ad4:	80002000 	.word	0x80002000

08004ad8 <HAL_I2C_Mem_Read>:
{
 8004ad8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004adc:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ade:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8004ae2:	4604      	mov	r4, r0
 8004ae4:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ae6:	2b20      	cmp	r3, #32
{
 8004ae8:	4616      	mov	r6, r2
 8004aea:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8004aee:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004af2:	f040 80c9 	bne.w	8004c88 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 8004af6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004af8:	b113      	cbz	r3, 8004b00 <HAL_I2C_Mem_Read+0x28>
 8004afa:	f1ba 0f00 	cmp.w	sl, #0
 8004afe:	d106      	bne.n	8004b0e <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004b00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004b04:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8004b06:	2001      	movs	r0, #1
}
 8004b08:	b003      	add	sp, #12
 8004b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8004b0e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	f000 80b8 	beq.w	8004c88 <HAL_I2C_Mem_Read+0x1b0>
 8004b18:	f04f 0b01 	mov.w	fp, #1
 8004b1c:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8004b20:	f7fe ff1c 	bl	800395c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b24:	2319      	movs	r3, #25
 8004b26:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8004b28:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b2a:	465a      	mov	r2, fp
 8004b2c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004b30:	4620      	mov	r0, r4
 8004b32:	f7ff fe22 	bl	800477a <I2C_WaitOnFlagUntilTimeout>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2800      	cmp	r0, #0
 8004b3a:	d1e4      	bne.n	8004b06 <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b3c:	2222      	movs	r2, #34	@ 0x22
    hi2c->XferISR   = NULL;
 8004b3e:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004b40:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b42:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b46:	2240      	movs	r2, #64	@ 0x40
 8004b48:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 8004b4c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b4e:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004b50:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8004b52:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004b54:	4a4d      	ldr	r2, [pc, #308]	@ (8004c8c <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 8004b56:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004b5a:	9200      	str	r2, [sp, #0]
 8004b5c:	fa5f f289 	uxtb.w	r2, r9
 8004b60:	f7ff fd4a 	bl	80045f8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b64:	462a      	mov	r2, r5
 8004b66:	4641      	mov	r1, r8
 8004b68:	4620      	mov	r0, r4
 8004b6a:	f7ff fddb 	bl	8004724 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b6e:	bb20      	cbnz	r0, 8004bba <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b70:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b74:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b76:	d116      	bne.n	8004ba6 <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b78:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	2140      	movs	r1, #64	@ 0x40
 8004b7e:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b80:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004b82:	4643      	mov	r3, r8
 8004b84:	9500      	str	r5, [sp, #0]
 8004b86:	f7ff fdf8 	bl	800477a <I2C_WaitOnFlagUntilTimeout>
 8004b8a:	b9b0      	cbnz	r0, 8004bba <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b8c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	2bff      	cmp	r3, #255	@ 0xff
 8004b92:	4b3f      	ldr	r3, [pc, #252]	@ (8004c90 <HAL_I2C_Mem_Read+0x1b8>)
 8004b94:	d815      	bhi.n	8004bc2 <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8004b96:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8004b98:	b292      	uxth	r2, r2
 8004b9a:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b9c:	b2d2      	uxtb	r2, r2
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ba4:	e012      	b.n	8004bcc <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004ba6:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ba8:	4641      	mov	r1, r8
 8004baa:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004bac:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bae:	462a      	mov	r2, r5
 8004bb0:	f7ff fdb8 	bl	8004724 <I2C_WaitOnTXISFlagUntilTimeout>
 8004bb4:	b908      	cbnz	r0, 8004bba <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004bb6:	6823      	ldr	r3, [r4, #0]
 8004bb8:	e7de      	b.n	8004b78 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 8004bba:	2300      	movs	r3, #0
 8004bbc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8004bc0:	e7a1      	b.n	8004b06 <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = 1U;
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004bc6:	9300      	str	r3, [sp, #0]
 8004bc8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004bcc:	4639      	mov	r1, r7
 8004bce:	4620      	mov	r0, r4
 8004bd0:	f7ff fd12 	bl	80045f8 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004bd4:	4643      	mov	r3, r8
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	2104      	movs	r1, #4
 8004bda:	4620      	mov	r0, r4
 8004bdc:	9500      	str	r5, [sp, #0]
 8004bde:	f7ff fdcc 	bl	800477a <I2C_WaitOnFlagUntilTimeout>
 8004be2:	2800      	cmp	r0, #0
 8004be4:	d18f      	bne.n	8004b06 <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004be6:	6823      	ldr	r3, [r4, #0]
 8004be8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004bea:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004bec:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004bee:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8004bf0:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8004bf2:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8004bf4:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8004bf6:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8004bf8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8004bfa:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8004bfc:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8004bfe:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c04:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	b1b3      	cbz	r3, 8004c38 <HAL_I2C_Mem_Read+0x160>
 8004c0a:	b9aa      	cbnz	r2, 8004c38 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c0c:	4643      	mov	r3, r8
 8004c0e:	2180      	movs	r1, #128	@ 0x80
 8004c10:	4620      	mov	r0, r4
 8004c12:	9500      	str	r5, [sp, #0]
 8004c14:	f7ff fdb1 	bl	800477a <I2C_WaitOnFlagUntilTimeout>
 8004c18:	2800      	cmp	r0, #0
 8004c1a:	f47f af74 	bne.w	8004b06 <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c1e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	2bff      	cmp	r3, #255	@ 0xff
 8004c24:	d928      	bls.n	8004c78 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = 1U;
 8004c26:	2201      	movs	r2, #1
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004c28:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = 1U;
 8004c2c:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004c2e:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c30:	4639      	mov	r1, r7
 8004c32:	4620      	mov	r0, r4
 8004c34:	f7ff fce0 	bl	80045f8 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8004c38:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1c9      	bne.n	8004bd4 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c40:	462a      	mov	r2, r5
 8004c42:	4641      	mov	r1, r8
 8004c44:	4620      	mov	r0, r4
 8004c46:	f7ff fdd3 	bl	80047f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c4a:	2800      	cmp	r0, #0
 8004c4c:	f47f af5b 	bne.w	8004b06 <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c50:	6823      	ldr	r3, [r4, #0]
 8004c52:	2120      	movs	r1, #32
 8004c54:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004c56:	685a      	ldr	r2, [r3, #4]
 8004c58:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8004c5c:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8004c60:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8004c64:	f022 0201 	bic.w	r2, r2, #1
 8004c68:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004c6a:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8004c6e:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c72:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8004c76:	e747      	b.n	8004b08 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8004c78:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8004c7e:	b292      	uxth	r2, r2
 8004c80:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c82:	b2d2      	uxtb	r2, r2
 8004c84:	9000      	str	r0, [sp, #0]
 8004c86:	e7d3      	b.n	8004c30 <HAL_I2C_Mem_Read+0x158>
    __HAL_LOCK(hi2c);
 8004c88:	2002      	movs	r0, #2
 8004c8a:	e73d      	b.n	8004b08 <HAL_I2C_Mem_Read+0x30>
 8004c8c:	80002000 	.word	0x80002000
 8004c90:	80002400 	.word	0x80002400

08004c94 <HAL_I2C_IsDeviceReady>:
{
 8004c94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c98:	461d      	mov	r5, r3
 8004c9a:	b085      	sub	sp, #20
  __IO uint32_t I2C_Trials = 0UL;
 8004c9c:	2300      	movs	r3, #0
{
 8004c9e:	4604      	mov	r4, r0
 8004ca0:	4617      	mov	r7, r2
  __IO uint32_t I2C_Trials = 0UL;
 8004ca2:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ca4:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8004ca8:	2b20      	cmp	r3, #32
 8004caa:	d172      	bne.n	8004d92 <HAL_I2C_IsDeviceReady+0xfe>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004cac:	6803      	ldr	r3, [r0, #0]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	f413 4300 	ands.w	r3, r3, #32768	@ 0x8000
 8004cb4:	d16d      	bne.n	8004d92 <HAL_I2C_IsDeviceReady+0xfe>
    __HAL_LOCK(hi2c);
 8004cb6:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8004cba:	2a01      	cmp	r2, #1
 8004cbc:	d069      	beq.n	8004d92 <HAL_I2C_IsDeviceReady+0xfe>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004cbe:	f3c1 0609 	ubfx	r6, r1, #0, #10
    __HAL_LOCK(hi2c);
 8004cc2:	2201      	movs	r2, #1
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004cc4:	f046 7800 	orr.w	r8, r6, #33554432	@ 0x2000000
    __HAL_LOCK(hi2c);
 8004cc8:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ccc:	2224      	movs	r2, #36	@ 0x24
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004cce:	f448 5820 	orr.w	r8, r8, #10240	@ 0x2800
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cd2:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cd6:	6443      	str	r3, [r0, #68]	@ 0x44
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004cd8:	68e3      	ldr	r3, [r4, #12]
 8004cda:	6822      	ldr	r2, [r4, #0]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	bf0a      	itet	eq
 8004ce0:	f046 7300 	orreq.w	r3, r6, #33554432	@ 0x2000000
 8004ce4:	4643      	movne	r3, r8
 8004ce6:	f443 5300 	orreq.w	r3, r3, #8192	@ 0x2000
 8004cea:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 8004cec:	f7fe fe36 	bl	800395c <HAL_GetTick>
 8004cf0:	4681      	mov	r9, r0
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cf2:	6822      	ldr	r2, [r4, #0]
 8004cf4:	6993      	ldr	r3, [r2, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004cf6:	6992      	ldr	r2, [r2, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cf8:	f3c3 1340 	ubfx	r3, r3, #5, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004cfc:	f3c2 1200 	ubfx	r2, r2, #4, #1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004d00:	4313      	orrs	r3, r2
 8004d02:	d016      	beq.n	8004d32 <HAL_I2C_IsDeviceReady+0x9e>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004d04:	6823      	ldr	r3, [r4, #0]
 8004d06:	699a      	ldr	r2, [r3, #24]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004d08:	462b      	mov	r3, r5
 8004d0a:	f8cd 9000 	str.w	r9, [sp]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004d0e:	f012 0210 	ands.w	r2, r2, #16
 8004d12:	d124      	bne.n	8004d5e <HAL_I2C_IsDeviceReady+0xca>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004d14:	2120      	movs	r1, #32
 8004d16:	4620      	mov	r0, r4
 8004d18:	f7ff fd2f 	bl	800477a <I2C_WaitOnFlagUntilTimeout>
 8004d1c:	b9e8      	cbnz	r0, 8004d5a <HAL_I2C_IsDeviceReady+0xc6>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d1e:	2320      	movs	r3, #32
 8004d20:	6822      	ldr	r2, [r4, #0]
 8004d22:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 8004d24:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        __HAL_UNLOCK(hi2c);
 8004d28:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
}
 8004d2c:	b005      	add	sp, #20
 8004d2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (Timeout != HAL_MAX_DELAY)
 8004d32:	1c6b      	adds	r3, r5, #1
 8004d34:	d0dd      	beq.n	8004cf2 <HAL_I2C_IsDeviceReady+0x5e>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004d36:	f7fe fe11 	bl	800395c <HAL_GetTick>
 8004d3a:	eba0 0009 	sub.w	r0, r0, r9
 8004d3e:	42a8      	cmp	r0, r5
 8004d40:	d801      	bhi.n	8004d46 <HAL_I2C_IsDeviceReady+0xb2>
 8004d42:	2d00      	cmp	r5, #0
 8004d44:	d1d5      	bne.n	8004cf2 <HAL_I2C_IsDeviceReady+0x5e>
            hi2c->State = HAL_I2C_STATE_READY;
 8004d46:	2320      	movs	r3, #32
 8004d48:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d4c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004d4e:	f043 0320 	orr.w	r3, r3, #32
 8004d52:	6463      	str	r3, [r4, #68]	@ 0x44
            __HAL_UNLOCK(hi2c);
 8004d54:	2300      	movs	r3, #0
 8004d56:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
            return HAL_ERROR;
 8004d5a:	2001      	movs	r0, #1
 8004d5c:	e7e6      	b.n	8004d2c <HAL_I2C_IsDeviceReady+0x98>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	2120      	movs	r1, #32
 8004d62:	4620      	mov	r0, r4
 8004d64:	f7ff fd09 	bl	800477a <I2C_WaitOnFlagUntilTimeout>
 8004d68:	2800      	cmp	r0, #0
 8004d6a:	d1f6      	bne.n	8004d5a <HAL_I2C_IsDeviceReady+0xc6>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d6c:	6823      	ldr	r3, [r4, #0]
 8004d6e:	2210      	movs	r2, #16
 8004d70:	61da      	str	r2, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d72:	2220      	movs	r2, #32
 8004d74:	61da      	str	r2, [r3, #28]
      I2C_Trials++;
 8004d76:	9b03      	ldr	r3, [sp, #12]
 8004d78:	3301      	adds	r3, #1
 8004d7a:	9303      	str	r3, [sp, #12]
    } while (I2C_Trials < Trials);
 8004d7c:	9b03      	ldr	r3, [sp, #12]
 8004d7e:	42bb      	cmp	r3, r7
 8004d80:	d3aa      	bcc.n	8004cd8 <HAL_I2C_IsDeviceReady+0x44>
    hi2c->State = HAL_I2C_STATE_READY;
 8004d82:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d86:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    __HAL_UNLOCK(hi2c);
 8004d88:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	6463      	str	r3, [r4, #68]	@ 0x44
    return HAL_ERROR;
 8004d90:	e7e3      	b.n	8004d5a <HAL_I2C_IsDeviceReady+0xc6>
      return HAL_BUSY;
 8004d92:	2002      	movs	r0, #2
 8004d94:	e7ca      	b.n	8004d2c <HAL_I2C_IsDeviceReady+0x98>

08004d96 <HAL_I2C_GetState>:
  return hi2c->State;
 8004d96:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 8004d9a:	4770      	bx	lr

08004d9c <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004d9c:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004d9e:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004da0:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004da4:	3284      	adds	r2, #132	@ 0x84
 8004da6:	1883      	adds	r3, r0, r2
{
 8004da8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004dac:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004dae:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004db2:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004db4:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004db8:	684c      	ldr	r4, [r1, #4]
 8004dba:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004dbe:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004dc2:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004dc6:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004dc8:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004dca:	68c5      	ldr	r5, [r0, #12]
 8004dcc:	f3c5 450b 	ubfx	r5, r5, #16, #12
 8004dd0:	443d      	add	r5, r7
 8004dd2:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004dd6:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004dd8:	68c6      	ldr	r6, [r0, #12]
 8004dda:	68cd      	ldr	r5, [r1, #12]
 8004ddc:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8004de0:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004de2:	689d      	ldr	r5, [r3, #8]
 8004de4:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 8004de8:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004dea:	688d      	ldr	r5, [r1, #8]
 8004dec:	68c7      	ldr	r7, [r0, #12]
 8004dee:	3501      	adds	r5, #1
 8004df0:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8004df4:	443d      	add	r5, r7
 8004df6:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004dfa:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004dfc:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004dfe:	691d      	ldr	r5, [r3, #16]
 8004e00:	f025 0507 	bic.w	r5, r5, #7
 8004e04:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004e06:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004e08:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004e0a:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004e0e:	f891 8031 	ldrb.w	r8, [r1, #49]	@ 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004e12:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004e16:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 8004e1a:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8004e1e:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8004e22:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8004e26:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004e28:	695d      	ldr	r5, [r3, #20]
 8004e2a:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 8004e2e:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004e30:	694d      	ldr	r5, [r1, #20]
 8004e32:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004e34:	69dd      	ldr	r5, [r3, #28]
 8004e36:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 8004e3a:	f025 0507 	bic.w	r5, r5, #7
 8004e3e:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004e40:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8004e44:	433d      	orrs	r5, r7
 8004e46:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004e48:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004e4a:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004e4c:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004e50:	629d      	str	r5, [r3, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004e52:	b31e      	cbz	r6, 8004e9c <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004e54:	2e01      	cmp	r6, #1
 8004e56:	d023      	beq.n	8004ea0 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004e58:	1eb5      	subs	r5, r6, #2
 8004e5a:	2d02      	cmp	r5, #2
 8004e5c:	d922      	bls.n	8004ea4 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 8004e5e:	2e07      	cmp	r6, #7
 8004e60:	bf14      	ite	ne
 8004e62:	2501      	movne	r5, #1
 8004e64:	2502      	moveq	r5, #2
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004e66:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004e68:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004e6c:	f006 26e0 	and.w	r6, r6, #3758153728	@ 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004e70:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004e72:	62de      	str	r6, [r3, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004e74:	3403      	adds	r4, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004e76:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004e78:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004e7a:	436e      	muls	r6, r5
 8004e7c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8004e80:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004e82:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8004e84:	f424 64ff 	bic.w	r4, r4, #2040	@ 0x7f8
 8004e88:	f024 0407 	bic.w	r4, r4, #7
 8004e8c:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004e8e:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004e90:	5883      	ldr	r3, [r0, r2]
 8004e92:	f043 0301 	orr.w	r3, r3, #1
 8004e96:	5083      	str	r3, [r0, r2]
}
 8004e98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8004e9c:	2504      	movs	r5, #4
 8004e9e:	e7e2      	b.n	8004e66 <LTDC_SetConfig+0xca>
    tmp = 3U;
 8004ea0:	2503      	movs	r5, #3
 8004ea2:	e7e0      	b.n	8004e66 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8004ea4:	2502      	movs	r5, #2
 8004ea6:	e7de      	b.n	8004e66 <LTDC_SetConfig+0xca>

08004ea8 <HAL_LTDC_MspInit>:
}
 8004ea8:	4770      	bx	lr
	...

08004eac <HAL_LTDC_Init>:
{
 8004eac:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8004eae:	4604      	mov	r4, r0
 8004eb0:	2800      	cmp	r0, #0
 8004eb2:	d063      	beq.n	8004f7c <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004eb4:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 8004eb8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004ebc:	b91b      	cbnz	r3, 8004ec6 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8004ebe:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 8004ec2:	f7ff fff1 	bl	8004ea8 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004ec6:	2302      	movs	r3, #2
 8004ec8:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004ecc:	6823      	ldr	r3, [r4, #0]
 8004ece:	699a      	ldr	r2, [r3, #24]
 8004ed0:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004ed4:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004ed6:	6999      	ldr	r1, [r3, #24]
 8004ed8:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8004edc:	4302      	orrs	r2, r0
 8004ede:	68e0      	ldr	r0, [r4, #12]
 8004ee0:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004ee2:	6920      	ldr	r0, [r4, #16]
 8004ee4:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004ee6:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004ee8:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004eea:	4925      	ldr	r1, [pc, #148]	@ (8004f80 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004eec:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004eee:	689a      	ldr	r2, [r3, #8]
 8004ef0:	400a      	ands	r2, r1
 8004ef2:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004ef4:	689a      	ldr	r2, [r3, #8]
 8004ef6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004efa:	69a0      	ldr	r0, [r4, #24]
 8004efc:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004efe:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004f00:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004f02:	68da      	ldr	r2, [r3, #12]
 8004f04:	400a      	ands	r2, r1
 8004f06:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004f08:	68da      	ldr	r2, [r3, #12]
 8004f0a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004f0e:	6a20      	ldr	r0, [r4, #32]
 8004f10:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004f12:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004f14:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004f16:	691a      	ldr	r2, [r3, #16]
 8004f18:	400a      	ands	r2, r1
 8004f1a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004f1c:	691a      	ldr	r2, [r3, #16]
 8004f1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004f22:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8004f24:	4302      	orrs	r2, r0
 8004f26:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004f28:	695a      	ldr	r2, [r3, #20]
 8004f2a:	400a      	ands	r2, r1
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004f2c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004f2e:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004f30:	695a      	ldr	r2, [r3, #20]
 8004f32:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004f36:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004f3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004f3e:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004f42:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004f46:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004f4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004f4c:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 8004f4e:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 8004f52:	432a      	orrs	r2, r5
 8004f54:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004f58:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004f5a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004f5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004f60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f62:	f042 0206 	orr.w	r2, r2, #6
 8004f66:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8004f68:	699a      	ldr	r2, [r3, #24]
 8004f6a:	f042 0201 	orr.w	r2, r2, #1
 8004f6e:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8004f70:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004f72:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8004f76:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 8004f7a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004f7c:	2001      	movs	r0, #1
 8004f7e:	e7fc      	b.n	8004f7a <HAL_LTDC_Init+0xce>
 8004f80:	f000f800 	.word	0xf000f800

08004f84 <HAL_LTDC_ConfigLayer>:
{
 8004f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8004f88:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
{
 8004f8c:	4606      	mov	r6, r0
 8004f8e:	460f      	mov	r7, r1
 8004f90:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	f04f 0002 	mov.w	r0, #2
 8004f98:	d01f      	beq.n	8004fda <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004f9a:	2434      	movs	r4, #52	@ 0x34
  __HAL_LOCK(hltdc);
 8004f9c:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004fa0:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004fa2:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004fa6:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8004faa:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004fae:	3438      	adds	r4, #56	@ 0x38
 8004fb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004fb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004fb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004fb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004fb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004fba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004fbc:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004fbe:	4630      	mov	r0, r6
 8004fc0:	4662      	mov	r2, ip
 8004fc2:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004fc4:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004fc6:	f7ff fee9 	bl	8004d9c <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004fca:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8004fcc:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004fce:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004fd2:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 8004fd6:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 8004fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004fde <HAL_LTDC_GetState>:
  return hltdc->State;
 8004fde:	f890 00a1 	ldrb.w	r0, [r0, #161]	@ 0xa1
}
 8004fe2:	4770      	bx	lr

08004fe4 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8004fe4:	4b19      	ldr	r3, [pc, #100]	@ (800504c <HAL_PWREx_EnableOverDrive+0x68>)
{
 8004fe6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8004fe8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004fea:	4c19      	ldr	r4, [pc, #100]	@ (8005050 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8004fec:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004ff0:	641a      	str	r2, [r3, #64]	@ 0x40
 8004ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ff8:	9301      	str	r3, [sp, #4]
 8004ffa:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004ffc:	6823      	ldr	r3, [r4, #0]
 8004ffe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005002:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005004:	f7fe fcaa 	bl	800395c <HAL_GetTick>
 8005008:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800500a:	6863      	ldr	r3, [r4, #4]
 800500c:	03da      	lsls	r2, r3, #15
 800500e:	d50c      	bpl.n	800502a <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005010:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005012:	4d0f      	ldr	r5, [pc, #60]	@ (8005050 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005014:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005018:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800501a:	f7fe fc9f 	bl	800395c <HAL_GetTick>
 800501e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005020:	686b      	ldr	r3, [r5, #4]
 8005022:	039b      	lsls	r3, r3, #14
 8005024:	d50a      	bpl.n	800503c <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8005026:	2000      	movs	r0, #0
 8005028:	e006      	b.n	8005038 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800502a:	f7fe fc97 	bl	800395c <HAL_GetTick>
 800502e:	1b40      	subs	r0, r0, r5
 8005030:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8005034:	d9e9      	bls.n	800500a <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8005036:	2003      	movs	r0, #3
}
 8005038:	b003      	add	sp, #12
 800503a:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800503c:	f7fe fc8e 	bl	800395c <HAL_GetTick>
 8005040:	1b00      	subs	r0, r0, r4
 8005042:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8005046:	d9eb      	bls.n	8005020 <HAL_PWREx_EnableOverDrive+0x3c>
 8005048:	e7f5      	b.n	8005036 <HAL_PWREx_EnableOverDrive+0x52>
 800504a:	bf00      	nop
 800504c:	40023800 	.word	0x40023800
 8005050:	40007000 	.word	0x40007000

08005054 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8005054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8005058:	6a4e      	ldr	r6, [r1, #36]	@ 0x24
 800505a:	b136      	cbz	r6, 800506a <QSPI_Config+0x16>
 800505c:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
 8005060:	d003      	beq.n	800506a <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8005062:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8005064:	6804      	ldr	r4, [r0, #0]
 8005066:	3b01      	subs	r3, #1
 8005068:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800506a:	f8d1 a018 	ldr.w	sl, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800506e:	e9d1 7e07 	ldrd	r7, lr, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8005072:	f1ba 0f00 	cmp.w	sl, #0
 8005076:	d04c      	beq.n	8005112 <QSPI_Config+0xbe>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005078:	694c      	ldr	r4, [r1, #20]
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800507a:	6805      	ldr	r5, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800507c:	ea4f 4c84 	mov.w	ip, r4, lsl #18
 8005080:	ea4a 0406 	orr.w	r4, sl, r6
 8005084:	680b      	ldr	r3, [r1, #0]
 8005086:	f8d1 8034 	ldr.w	r8, [r1, #52]	@ 0x34
 800508a:	ea44 0a02 	orr.w	sl, r4, r2
 800508e:	e9d1 090b 	ldrd	r0, r9, [r1, #44]	@ 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005092:	f1be 0f00 	cmp.w	lr, #0
 8005096:	d024      	beq.n	80050e2 <QSPI_Config+0x8e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005098:	688e      	ldr	r6, [r1, #8]
 800509a:	ea4a 040e 	orr.w	r4, sl, lr
 800509e:	61ee      	str	r6, [r5, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80050a0:	690e      	ldr	r6, [r1, #16]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80050a2:	b19f      	cbz	r7, 80050cc <QSPI_Config+0x78>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80050a4:	433b      	orrs	r3, r7
 80050a6:	4303      	orrs	r3, r0
 80050a8:	68c8      	ldr	r0, [r1, #12]
 80050aa:	ea43 0309 	orr.w	r3, r3, r9
 80050ae:	ea43 0308 	orr.w	r3, r3, r8
 80050b2:	4333      	orrs	r3, r6
 80050b4:	4303      	orrs	r3, r0
 80050b6:	ea43 030c 	orr.w	r3, r3, ip
 80050ba:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80050bc:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80050c0:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80050c2:	d001      	beq.n	80050c8 <QSPI_Config+0x74>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80050c4:	684b      	ldr	r3, [r1, #4]
 80050c6:	61ab      	str	r3, [r5, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80050c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80050cc:	4303      	orrs	r3, r0
 80050ce:	ea43 0309 	orr.w	r3, r3, r9
 80050d2:	ea43 0308 	orr.w	r3, r3, r8
 80050d6:	4333      	orrs	r3, r6
 80050d8:	ea43 030c 	orr.w	r3, r3, ip
 80050dc:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80050de:	616b      	str	r3, [r5, #20]
 80050e0:	e7f2      	b.n	80050c8 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80050e2:	b167      	cbz	r7, 80050fe <QSPI_Config+0xaa>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80050e4:	433b      	orrs	r3, r7
 80050e6:	4303      	orrs	r3, r0
 80050e8:	68c8      	ldr	r0, [r1, #12]
 80050ea:	ea43 0309 	orr.w	r3, r3, r9
 80050ee:	ea43 0308 	orr.w	r3, r3, r8
 80050f2:	4303      	orrs	r3, r0
 80050f4:	ea43 030c 	orr.w	r3, r3, ip
 80050f8:	ea43 030a 	orr.w	r3, r3, sl
 80050fc:	e7de      	b.n	80050bc <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80050fe:	4303      	orrs	r3, r0
 8005100:	ea43 0309 	orr.w	r3, r3, r9
 8005104:	ea43 0408 	orr.w	r4, r3, r8
 8005108:	ea44 030c 	orr.w	r3, r4, ip
 800510c:	ea43 030a 	orr.w	r3, r3, sl
 8005110:	e7e5      	b.n	80050de <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8005112:	f1be 0f00 	cmp.w	lr, #0
 8005116:	d02c      	beq.n	8005172 <QSPI_Config+0x11e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005118:	ea46 050e 	orr.w	r5, r6, lr
 800511c:	688b      	ldr	r3, [r1, #8]
 800511e:	6804      	ldr	r4, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005120:	694e      	ldr	r6, [r1, #20]
 8005122:	4315      	orrs	r5, r2
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8005124:	61e3      	str	r3, [r4, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005126:	f8d1 c034 	ldr.w	ip, [r1, #52]	@ 0x34
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800512a:	04b6      	lsls	r6, r6, #18
 800512c:	690b      	ldr	r3, [r1, #16]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800512e:	e9d1 8e0b 	ldrd	r8, lr, [r1, #44]	@ 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005132:	b1a7      	cbz	r7, 800515e <QSPI_Config+0x10a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005134:	433b      	orrs	r3, r7
 8005136:	68c8      	ldr	r0, [r1, #12]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005138:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800513c:	ea43 0308 	orr.w	r3, r3, r8
 8005140:	ea43 030e 	orr.w	r3, r3, lr
 8005144:	ea43 030c 	orr.w	r3, r3, ip
 8005148:	ea43 0300 	orr.w	r3, r3, r0
 800514c:	ea43 0306 	orr.w	r3, r3, r6
 8005150:	ea43 0305 	orr.w	r3, r3, r5
 8005154:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8005156:	d0b7      	beq.n	80050c8 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8005158:	684b      	ldr	r3, [r1, #4]
 800515a:	61a3      	str	r3, [r4, #24]
 800515c:	e7b4      	b.n	80050c8 <QSPI_Config+0x74>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800515e:	ea43 0308 	orr.w	r3, r3, r8
 8005162:	ea43 030e 	orr.w	r3, r3, lr
 8005166:	ea43 030c 	orr.w	r3, r3, ip
 800516a:	4333      	orrs	r3, r6
 800516c:	432b      	orrs	r3, r5
 800516e:	6163      	str	r3, [r4, #20]
 8005170:	e7aa      	b.n	80050c8 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8005172:	b1d7      	cbz	r7, 80051aa <QSPI_Config+0x156>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005174:	ea46 0307 	orr.w	r3, r6, r7
 8005178:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 800517a:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800517c:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8005180:	ea43 0302 	orr.w	r3, r3, r2
 8005184:	ea43 0304 	orr.w	r3, r3, r4
 8005188:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
 800518a:	ea43 0304 	orr.w	r3, r3, r4
 800518e:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 8005190:	ea43 0304 	orr.w	r3, r3, r4
 8005194:	68cc      	ldr	r4, [r1, #12]
 8005196:	ea43 0304 	orr.w	r3, r3, r4
 800519a:	694c      	ldr	r4, [r1, #20]
 800519c:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 80051a0:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80051a2:	d091      	beq.n	80050c8 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80051a4:	684b      	ldr	r3, [r1, #4]
 80051a6:	6183      	str	r3, [r0, #24]
 80051a8:	e78e      	b.n	80050c8 <QSPI_Config+0x74>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80051aa:	2e00      	cmp	r6, #0
 80051ac:	d08c      	beq.n	80050c8 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80051ae:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 80051b0:	6800      	ldr	r0, [r0, #0]
 80051b2:	4333      	orrs	r3, r6
 80051b4:	4313      	orrs	r3, r2
 80051b6:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80051b8:	4313      	orrs	r3, r2
 80051ba:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 80051bc:	4313      	orrs	r3, r2
 80051be:	694a      	ldr	r2, [r1, #20]
 80051c0:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 80051c4:	6143      	str	r3, [r0, #20]
}
 80051c6:	e77f      	b.n	80050c8 <QSPI_Config+0x74>

080051c8 <QSPI_WaitFlagStateUntilTimeout>:
{
 80051c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051cc:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80051d0:	4604      	mov	r4, r0
 80051d2:	460e      	mov	r6, r1
 80051d4:	4615      	mov	r5, r2
 80051d6:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80051d8:	6822      	ldr	r2, [r4, #0]
 80051da:	6893      	ldr	r3, [r2, #8]
 80051dc:	4233      	tst	r3, r6
 80051de:	bf14      	ite	ne
 80051e0:	2301      	movne	r3, #1
 80051e2:	2300      	moveq	r3, #0
 80051e4:	42ab      	cmp	r3, r5
 80051e6:	d101      	bne.n	80051ec <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 80051e8:	2000      	movs	r0, #0
 80051ea:	e012      	b.n	8005212 <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 80051ec:	f1b8 3fff 	cmp.w	r8, #4294967295
 80051f0:	d0f3      	beq.n	80051da <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051f2:	f7fe fbb3 	bl	800395c <HAL_GetTick>
 80051f6:	1bc0      	subs	r0, r0, r7
 80051f8:	4540      	cmp	r0, r8
 80051fa:	d802      	bhi.n	8005202 <QSPI_WaitFlagStateUntilTimeout+0x3a>
 80051fc:	f1b8 0f00 	cmp.w	r8, #0
 8005200:	d1ea      	bne.n	80051d8 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005202:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005204:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005206:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800520a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800520c:	f043 0301 	orr.w	r3, r3, #1
 8005210:	6463      	str	r3, [r4, #68]	@ 0x44
}
 8005212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005216 <HAL_QSPI_MspInit>:
}
 8005216:	4770      	bx	lr

08005218 <HAL_QSPI_Init>:
{
 8005218:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800521a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800521c:	f7fe fb9e 	bl	800395c <HAL_GetTick>
 8005220:	4605      	mov	r5, r0
  if(hqspi == NULL)
 8005222:	2c00      	cmp	r4, #0
 8005224:	d046      	beq.n	80052b4 <HAL_QSPI_Init+0x9c>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005226:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800522a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800522e:	b93b      	cbnz	r3, 8005240 <HAL_QSPI_Init+0x28>
    HAL_QSPI_MspInit(hqspi);
 8005230:	4620      	mov	r0, r4
    hqspi->Lock = HAL_UNLOCKED;
 8005232:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
    HAL_QSPI_MspInit(hqspi);
 8005236:	f7ff ffee 	bl	8005216 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 800523a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800523e:	64a3      	str	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005240:	6821      	ldr	r1, [r4, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005242:	4620      	mov	r0, r4
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005244:	68a3      	ldr	r3, [r4, #8]
 8005246:	680a      	ldr	r2, [r1, #0]
 8005248:	3b01      	subs	r3, #1
 800524a:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 800524e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005252:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005254:	600a      	str	r2, [r1, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005256:	2200      	movs	r2, #0
 8005258:	9300      	str	r3, [sp, #0]
 800525a:	2120      	movs	r1, #32
 800525c:	462b      	mov	r3, r5
 800525e:	f7ff ffb3 	bl	80051c8 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8005262:	bb10      	cbnz	r0, 80052aa <HAL_QSPI_Init+0x92>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8005264:	6822      	ldr	r2, [r4, #0]
 8005266:	69e5      	ldr	r5, [r4, #28]
 8005268:	68e3      	ldr	r3, [r4, #12]
 800526a:	6811      	ldr	r1, [r2, #0]
 800526c:	432b      	orrs	r3, r5
 800526e:	6a25      	ldr	r5, [r4, #32]
 8005270:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8005274:	432b      	orrs	r3, r5
 8005276:	6865      	ldr	r5, [r4, #4]
 8005278:	f021 01d0 	bic.w	r1, r1, #208	@ 0xd0
 800527c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8005280:	430b      	orrs	r3, r1
 8005282:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005284:	6855      	ldr	r5, [r2, #4]
 8005286:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 800528a:	430b      	orrs	r3, r1
 800528c:	6921      	ldr	r1, [r4, #16]
 800528e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005292:	4909      	ldr	r1, [pc, #36]	@ (80052b8 <HAL_QSPI_Init+0xa0>)
 8005294:	4029      	ands	r1, r5
 8005296:	430b      	orrs	r3, r1
 8005298:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 800529a:	6813      	ldr	r3, [r2, #0]
 800529c:	f043 0301 	orr.w	r3, r3, #1
 80052a0:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 80052a2:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80052a4:	6460      	str	r0, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 80052a6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 80052aa:	2300      	movs	r3, #0
 80052ac:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 80052b0:	b003      	add	sp, #12
 80052b2:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80052b4:	2001      	movs	r0, #1
 80052b6:	e7fb      	b.n	80052b0 <HAL_QSPI_Init+0x98>
 80052b8:	ffe0f8fe 	.word	0xffe0f8fe

080052bc <HAL_QSPI_MspDeInit>:
__weak void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef *hqspi)
 80052bc:	4770      	bx	lr

080052be <HAL_QSPI_DeInit>:
{
 80052be:	b510      	push	{r4, lr}
  if(hqspi == NULL)
 80052c0:	4604      	mov	r4, r0
 80052c2:	b168      	cbz	r0, 80052e0 <HAL_QSPI_DeInit+0x22>
  __HAL_QSPI_DISABLE(hqspi);
 80052c4:	6802      	ldr	r2, [r0, #0]
 80052c6:	6813      	ldr	r3, [r2, #0]
 80052c8:	f023 0301 	bic.w	r3, r3, #1
 80052cc:	6013      	str	r3, [r2, #0]
  HAL_QSPI_MspDeInit(hqspi);
 80052ce:	f7ff fff5 	bl	80052bc <HAL_QSPI_MspDeInit>
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80052d2:	2000      	movs	r0, #0
 80052d4:	6460      	str	r0, [r4, #68]	@ 0x44
  hqspi->State = HAL_QSPI_STATE_RESET;
 80052d6:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 80052da:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
}
 80052de:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80052e0:	2001      	movs	r0, #1
 80052e2:	e7fc      	b.n	80052de <HAL_QSPI_DeInit+0x20>

080052e4 <HAL_QSPI_Command>:
{
 80052e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80052e8:	4604      	mov	r4, r0
 80052ea:	468a      	mov	sl, r1
 80052ec:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 80052ee:	f7fe fb35 	bl	800395c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80052f2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 80052f6:	4607      	mov	r7, r0
  __HAL_LOCK(hqspi);
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d036      	beq.n	800536a <HAL_QSPI_Command+0x86>
 80052fc:	2301      	movs	r3, #1
 80052fe:	2602      	movs	r6, #2
 8005300:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005304:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8005308:	2b01      	cmp	r3, #1
 800530a:	fa5f f983 	uxtb.w	r9, r3
 800530e:	d128      	bne.n	8005362 <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005310:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005312:	4603      	mov	r3, r0
 8005314:	2120      	movs	r1, #32
 8005316:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005318:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800531a:	f884 6041 	strb.w	r6, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800531e:	f8cd 8000 	str.w	r8, [sp]
 8005322:	f7ff ff51 	bl	80051c8 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8005326:	4605      	mov	r5, r0
 8005328:	b9a0      	cbnz	r0, 8005354 <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800532a:	4602      	mov	r2, r0
 800532c:	4651      	mov	r1, sl
 800532e:	4620      	mov	r0, r4
 8005330:	f7ff fe90 	bl	8005054 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 8005334:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 8005338:	b953      	cbnz	r3, 8005350 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800533a:	463b      	mov	r3, r7
 800533c:	464a      	mov	r2, r9
 800533e:	4631      	mov	r1, r6
 8005340:	4620      	mov	r0, r4
 8005342:	f8cd 8000 	str.w	r8, [sp]
 8005346:	f7ff ff3f 	bl	80051c8 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800534a:	b960      	cbnz	r0, 8005366 <HAL_QSPI_Command+0x82>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800534c:	6823      	ldr	r3, [r4, #0]
 800534e:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8005350:	f884 9041 	strb.w	r9, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 8005354:	2300      	movs	r3, #0
 8005356:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800535a:	4628      	mov	r0, r5
 800535c:	b002      	add	sp, #8
 800535e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    status = HAL_BUSY;
 8005362:	4635      	mov	r5, r6
 8005364:	e7f6      	b.n	8005354 <HAL_QSPI_Command+0x70>
 8005366:	4605      	mov	r5, r0
 8005368:	e7f4      	b.n	8005354 <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 800536a:	2502      	movs	r5, #2
 800536c:	e7f5      	b.n	800535a <HAL_QSPI_Command+0x76>

0800536e <HAL_QSPI_AutoPolling>:
{
 800536e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005372:	4604      	mov	r4, r0
 8005374:	461f      	mov	r7, r3
 8005376:	4689      	mov	r9, r1
 8005378:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 800537a:	f7fe faef 	bl	800395c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800537e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 8005382:	4606      	mov	r6, r0
  __HAL_LOCK(hqspi);
 8005384:	2b01      	cmp	r3, #1
 8005386:	d041      	beq.n	800540c <HAL_QSPI_AutoPolling+0x9e>
 8005388:	2301      	movs	r3, #1
 800538a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800538e:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8005392:	2b01      	cmp	r3, #1
 8005394:	fa5f f883 	uxtb.w	r8, r3
 8005398:	d136      	bne.n	8005408 <HAL_QSPI_AutoPolling+0x9a>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800539a:	2342      	movs	r3, #66	@ 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800539c:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800539e:	2120      	movs	r1, #32
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80053a0:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80053a2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80053a6:	4603      	mov	r3, r0
 80053a8:	9700      	str	r7, [sp, #0]
 80053aa:	4620      	mov	r0, r4
 80053ac:	f7ff ff0c 	bl	80051c8 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80053b0:	bb20      	cbnz	r0, 80053fc <HAL_QSPI_AutoPolling+0x8e>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80053b2:	6822      	ldr	r2, [r4, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80053b4:	4620      	mov	r0, r4
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80053b6:	682b      	ldr	r3, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80053b8:	6929      	ldr	r1, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80053ba:	6293      	str	r3, [r2, #40]	@ 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 80053bc:	686b      	ldr	r3, [r5, #4]
 80053be:	6253      	str	r3, [r2, #36]	@ 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80053c0:	68ab      	ldr	r3, [r5, #8]
 80053c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80053c4:	6813      	ldr	r3, [r2, #0]
 80053c6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80053ca:	430b      	orrs	r3, r1
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80053cc:	4649      	mov	r1, r9
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80053ce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80053d2:	6013      	str	r3, [r2, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80053d4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
      cmd->NbData = cfg->StatusBytesSize;
 80053d8:	68eb      	ldr	r3, [r5, #12]
 80053da:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80053de:	f7ff fe39 	bl	8005054 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 80053e2:	4633      	mov	r3, r6
 80053e4:	4642      	mov	r2, r8
 80053e6:	2108      	movs	r1, #8
 80053e8:	4620      	mov	r0, r4
 80053ea:	9700      	str	r7, [sp, #0]
 80053ec:	f7ff feec 	bl	80051c8 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 80053f0:	b920      	cbnz	r0, 80053fc <HAL_QSPI_AutoPolling+0x8e>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80053f2:	6823      	ldr	r3, [r4, #0]
 80053f4:	2208      	movs	r2, #8
 80053f6:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 80053f8:	f884 8041 	strb.w	r8, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 80053fc:	2300      	movs	r3, #0
 80053fe:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8005402:	b003      	add	sp, #12
 8005404:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 8005408:	2002      	movs	r0, #2
 800540a:	e7f7      	b.n	80053fc <HAL_QSPI_AutoPolling+0x8e>
  __HAL_LOCK(hqspi);
 800540c:	2002      	movs	r0, #2
 800540e:	e7f8      	b.n	8005402 <HAL_QSPI_AutoPolling+0x94>

08005410 <HAL_QSPI_Abort>:
{
 8005410:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005412:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005414:	f7fe faa2 	bl	800395c <HAL_GetTick>
 8005418:	4605      	mov	r5, r0
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 800541a:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800541e:	0798      	lsls	r0, r3, #30
 8005420:	d534      	bpl.n	800548c <HAL_QSPI_Abort+0x7c>
    __HAL_UNLOCK(hqspi);
 8005422:	2300      	movs	r3, #0
 8005424:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 8005428:	6823      	ldr	r3, [r4, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	0751      	lsls	r1, r2, #29
 800542e:	d507      	bpl.n	8005440 <HAL_QSPI_Abort+0x30>
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005430:	681a      	ldr	r2, [r3, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 8005432:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8005434:	f022 0204 	bic.w	r2, r2, #4
 8005438:	601a      	str	r2, [r3, #0]
      status = HAL_DMA_Abort(hqspi->hdma);
 800543a:	f7fe fc64 	bl	8003d06 <HAL_DMA_Abort>
      if(status != HAL_OK)
 800543e:	bb40      	cbnz	r0, 8005492 <HAL_QSPI_Abort+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 8005440:	2000      	movs	r0, #0
    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 8005442:	6823      	ldr	r3, [r4, #0]
 8005444:	689a      	ldr	r2, [r3, #8]
 8005446:	0692      	lsls	r2, r2, #26
 8005448:	d528      	bpl.n	800549c <HAL_QSPI_Abort+0x8c>
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800544a:	681a      	ldr	r2, [r3, #0]
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 800544c:	2102      	movs	r1, #2
 800544e:	4620      	mov	r0, r4
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8005450:	f042 0202 	orr.w	r2, r2, #2
 8005454:	601a      	str	r2, [r3, #0]
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8005456:	2201      	movs	r2, #1
 8005458:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	462b      	mov	r3, r5
 800545e:	f7ff feb3 	bl	80051c8 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8005462:	b9a0      	cbnz	r0, 800548e <HAL_QSPI_Abort+0x7e>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005464:	6823      	ldr	r3, [r4, #0]
 8005466:	2202      	movs	r2, #2
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005468:	2120      	movs	r1, #32
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800546a:	60da      	str	r2, [r3, #12]
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800546c:	4602      	mov	r2, r0
 800546e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8005470:	4620      	mov	r0, r4
 8005472:	9300      	str	r3, [sp, #0]
 8005474:	462b      	mov	r3, r5
 8005476:	f7ff fea7 	bl	80051c8 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800547a:	b940      	cbnz	r0, 800548e <HAL_QSPI_Abort+0x7e>
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800547c:	6822      	ldr	r2, [r4, #0]
 800547e:	6953      	ldr	r3, [r2, #20]
 8005480:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8005484:	6153      	str	r3, [r2, #20]
        hqspi->State = HAL_QSPI_STATE_READY;
 8005486:	2301      	movs	r3, #1
 8005488:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  HAL_StatusTypeDef status = HAL_OK;
 800548c:	2000      	movs	r0, #0
}
 800548e:	b003      	add	sp, #12
 8005490:	bd30      	pop	{r4, r5, pc}
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8005492:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005494:	f043 0304 	orr.w	r3, r3, #4
 8005498:	6463      	str	r3, [r4, #68]	@ 0x44
 800549a:	e7d2      	b.n	8005442 <HAL_QSPI_Abort+0x32>
      hqspi->State = HAL_QSPI_STATE_READY;
 800549c:	2301      	movs	r3, #1
 800549e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80054a2:	e7f4      	b.n	800548e <HAL_QSPI_Abort+0x7e>

080054a4 <HAL_QSPI_Transmit>:
{
 80054a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80054a8:	4604      	mov	r4, r0
 80054aa:	4688      	mov	r8, r1
 80054ac:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 80054ae:	f7fe fa55 	bl	800395c <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80054b2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 80054b6:	4606      	mov	r6, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80054b8:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d04f      	beq.n	800555e <HAL_QSPI_Transmit+0xba>
 80054be:	2301      	movs	r3, #1
 80054c0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80054c4:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	b2d8      	uxtb	r0, r3
 80054cc:	d145      	bne.n	800555a <HAL_QSPI_Transmit+0xb6>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80054ce:	2300      	movs	r3, #0
 80054d0:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 80054d2:	f1b8 0f00 	cmp.w	r8, #0
 80054d6:	d03b      	beq.n	8005550 <HAL_QSPI_Transmit+0xac>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80054d8:	2312      	movs	r3, #18
 80054da:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80054de:	692b      	ldr	r3, [r5, #16]
 80054e0:	3301      	adds	r3, #1
 80054e2:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80054e4:	692b      	ldr	r3, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 80054e6:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80054ea:	3301      	adds	r3, #1
 80054ec:	62a3      	str	r3, [r4, #40]	@ 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80054ee:	696b      	ldr	r3, [r5, #20]
 80054f0:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80054f4:	616b      	str	r3, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 80054f6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80054f8:	b9b3      	cbnz	r3, 8005528 <HAL_QSPI_Transmit+0x84>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80054fa:	4633      	mov	r3, r6
 80054fc:	2201      	movs	r2, #1
 80054fe:	2102      	movs	r1, #2
 8005500:	4620      	mov	r0, r4
 8005502:	9700      	str	r7, [sp, #0]
 8005504:	f7ff fe60 	bl	80051c8 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8005508:	b928      	cbnz	r0, 8005516 <HAL_QSPI_Transmit+0x72>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800550a:	6823      	ldr	r3, [r4, #0]
 800550c:	2202      	movs	r2, #2
          status = HAL_QSPI_Abort(hqspi);
 800550e:	4620      	mov	r0, r4
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8005510:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 8005512:	f7ff ff7d 	bl	8005410 <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 8005516:	2301      	movs	r3, #1
 8005518:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800551c:	2300      	movs	r3, #0
 800551e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8005522:	b002      	add	sp, #8
 8005524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8005528:	4633      	mov	r3, r6
 800552a:	2201      	movs	r2, #1
 800552c:	2104      	movs	r1, #4
 800552e:	4620      	mov	r0, r4
 8005530:	9700      	str	r7, [sp, #0]
 8005532:	f7ff fe49 	bl	80051c8 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8005536:	2800      	cmp	r0, #0
 8005538:	d1ed      	bne.n	8005516 <HAL_QSPI_Transmit+0x72>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800553a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	f885 3020 	strb.w	r3, [r5, #32]
        hqspi->pTxBuffPtr++;
 8005542:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005544:	3301      	adds	r3, #1
 8005546:	6263      	str	r3, [r4, #36]	@ 0x24
        hqspi->TxXferCount--;
 8005548:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800554a:	3b01      	subs	r3, #1
 800554c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800554e:	e7d2      	b.n	80054f6 <HAL_QSPI_Transmit+0x52>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005550:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005552:	f043 0308 	orr.w	r3, r3, #8
 8005556:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 8005558:	e7e0      	b.n	800551c <HAL_QSPI_Transmit+0x78>
    status = HAL_BUSY;
 800555a:	2002      	movs	r0, #2
 800555c:	e7de      	b.n	800551c <HAL_QSPI_Transmit+0x78>
  __HAL_LOCK(hqspi);
 800555e:	2002      	movs	r0, #2
 8005560:	e7df      	b.n	8005522 <HAL_QSPI_Transmit+0x7e>

08005562 <HAL_QSPI_Receive>:
{
 8005562:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005566:	4604      	mov	r4, r0
 8005568:	4616      	mov	r6, r2
 800556a:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 800556c:	f7fe f9f6 	bl	800395c <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8005570:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8005572:	4607      	mov	r7, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8005574:	69aa      	ldr	r2, [r5, #24]
  __HAL_LOCK(hqspi);
 8005576:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800557a:	2b01      	cmp	r3, #1
 800557c:	d052      	beq.n	8005624 <HAL_QSPI_Receive+0xc2>
 800557e:	2301      	movs	r3, #1
 8005580:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8005584:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8005588:	2b01      	cmp	r3, #1
 800558a:	b2d8      	uxtb	r0, r3
 800558c:	d148      	bne.n	8005620 <HAL_QSPI_Receive+0xbe>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800558e:	2300      	movs	r3, #0
 8005590:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 8005592:	f1b8 0f00 	cmp.w	r8, #0
 8005596:	d03e      	beq.n	8005616 <HAL_QSPI_Receive+0xb4>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8005598:	2322      	movs	r3, #34	@ 0x22
 800559a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800559e:	692b      	ldr	r3, [r5, #16]
 80055a0:	3301      	adds	r3, #1
 80055a2:	63a3      	str	r3, [r4, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80055a4:	692b      	ldr	r3, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 80055a6:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80055aa:	3301      	adds	r3, #1
 80055ac:	6363      	str	r3, [r4, #52]	@ 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80055ae:	6969      	ldr	r1, [r5, #20]
 80055b0:	f021 6140 	bic.w	r1, r1, #201326592	@ 0xc000000
 80055b4:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 80055b8:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80055ba:	61aa      	str	r2, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 80055bc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80055be:	b9b3      	cbnz	r3, 80055ee <HAL_QSPI_Receive+0x8c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80055c0:	463b      	mov	r3, r7
 80055c2:	2201      	movs	r2, #1
 80055c4:	2102      	movs	r1, #2
 80055c6:	4620      	mov	r0, r4
 80055c8:	9600      	str	r6, [sp, #0]
 80055ca:	f7ff fdfd 	bl	80051c8 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 80055ce:	b928      	cbnz	r0, 80055dc <HAL_QSPI_Receive+0x7a>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80055d0:	6823      	ldr	r3, [r4, #0]
 80055d2:	2202      	movs	r2, #2
          status = HAL_QSPI_Abort(hqspi);
 80055d4:	4620      	mov	r0, r4
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80055d6:	60da      	str	r2, [r3, #12]
          status = HAL_QSPI_Abort(hqspi);
 80055d8:	f7ff ff1a 	bl	8005410 <HAL_QSPI_Abort>
      hqspi->State = HAL_QSPI_STATE_READY;
 80055dc:	2301      	movs	r3, #1
 80055de:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 80055e2:	2300      	movs	r3, #0
 80055e4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 80055e8:	b002      	add	sp, #8
 80055ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80055ee:	463b      	mov	r3, r7
 80055f0:	2201      	movs	r2, #1
 80055f2:	2106      	movs	r1, #6
 80055f4:	4620      	mov	r0, r4
 80055f6:	9600      	str	r6, [sp, #0]
 80055f8:	f7ff fde6 	bl	80051c8 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 80055fc:	2800      	cmp	r0, #0
 80055fe:	d1ed      	bne.n	80055dc <HAL_QSPI_Receive+0x7a>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8005600:	f895 2020 	ldrb.w	r2, [r5, #32]
 8005604:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005606:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8005608:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800560a:	3301      	adds	r3, #1
 800560c:	6323      	str	r3, [r4, #48]	@ 0x30
        hqspi->RxXferCount--;
 800560e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005610:	3b01      	subs	r3, #1
 8005612:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005614:	e7d2      	b.n	80055bc <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8005616:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005618:	f043 0308 	orr.w	r3, r3, #8
 800561c:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800561e:	e7e0      	b.n	80055e2 <HAL_QSPI_Receive+0x80>
    status = HAL_BUSY;
 8005620:	2002      	movs	r0, #2
 8005622:	e7de      	b.n	80055e2 <HAL_QSPI_Receive+0x80>
  __HAL_LOCK(hqspi);
 8005624:	2002      	movs	r0, #2
 8005626:	e7df      	b.n	80055e8 <HAL_QSPI_Receive+0x86>

08005628 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005628:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800562c:	4604      	mov	r4, r0
 800562e:	b340      	cbz	r0, 8005682 <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005630:	6803      	ldr	r3, [r0, #0]
 8005632:	07de      	lsls	r6, r3, #31
 8005634:	d410      	bmi.n	8005658 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005636:	6823      	ldr	r3, [r4, #0]
 8005638:	079d      	lsls	r5, r3, #30
 800563a:	d461      	bmi.n	8005700 <HAL_RCC_OscConfig+0xd8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800563c:	6823      	ldr	r3, [r4, #0]
 800563e:	0719      	lsls	r1, r3, #28
 8005640:	f100 80a6 	bmi.w	8005790 <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005644:	6823      	ldr	r3, [r4, #0]
 8005646:	075a      	lsls	r2, r3, #29
 8005648:	f100 80c7 	bmi.w	80057da <HAL_RCC_OscConfig+0x1b2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800564c:	69a2      	ldr	r2, [r4, #24]
 800564e:	2a00      	cmp	r2, #0
 8005650:	f040 8130 	bne.w	80058b4 <HAL_RCC_OscConfig+0x28c>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8005654:	2000      	movs	r0, #0
 8005656:	e02c      	b.n	80056b2 <HAL_RCC_OscConfig+0x8a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005658:	4b94      	ldr	r3, [pc, #592]	@ (80058ac <HAL_RCC_OscConfig+0x284>)
 800565a:	689a      	ldr	r2, [r3, #8]
 800565c:	f002 020c 	and.w	r2, r2, #12
 8005660:	2a04      	cmp	r2, #4
 8005662:	d007      	beq.n	8005674 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005664:	689a      	ldr	r2, [r3, #8]
 8005666:	f002 020c 	and.w	r2, r2, #12
 800566a:	2a08      	cmp	r2, #8
 800566c:	d10b      	bne.n	8005686 <HAL_RCC_OscConfig+0x5e>
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	0259      	lsls	r1, r3, #9
 8005672:	d508      	bpl.n	8005686 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005674:	4b8d      	ldr	r3, [pc, #564]	@ (80058ac <HAL_RCC_OscConfig+0x284>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	039a      	lsls	r2, r3, #14
 800567a:	d5dc      	bpl.n	8005636 <HAL_RCC_OscConfig+0xe>
 800567c:	6863      	ldr	r3, [r4, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1d9      	bne.n	8005636 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8005682:	2001      	movs	r0, #1
 8005684:	e015      	b.n	80056b2 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005686:	6863      	ldr	r3, [r4, #4]
 8005688:	4d88      	ldr	r5, [pc, #544]	@ (80058ac <HAL_RCC_OscConfig+0x284>)
 800568a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800568e:	d113      	bne.n	80056b8 <HAL_RCC_OscConfig+0x90>
 8005690:	682b      	ldr	r3, [r5, #0]
 8005692:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005696:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005698:	f7fe f960 	bl	800395c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800569c:	4e83      	ldr	r6, [pc, #524]	@ (80058ac <HAL_RCC_OscConfig+0x284>)
        tickstart = HAL_GetTick();
 800569e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056a0:	6833      	ldr	r3, [r6, #0]
 80056a2:	039b      	lsls	r3, r3, #14
 80056a4:	d4c7      	bmi.n	8005636 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056a6:	f7fe f959 	bl	800395c <HAL_GetTick>
 80056aa:	1b40      	subs	r0, r0, r5
 80056ac:	2864      	cmp	r0, #100	@ 0x64
 80056ae:	d9f7      	bls.n	80056a0 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 80056b0:	2003      	movs	r0, #3
}
 80056b2:	b002      	add	sp, #8
 80056b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056b8:	b99b      	cbnz	r3, 80056e2 <HAL_RCC_OscConfig+0xba>
 80056ba:	682b      	ldr	r3, [r5, #0]
 80056bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056c0:	602b      	str	r3, [r5, #0]
 80056c2:	682b      	ldr	r3, [r5, #0]
 80056c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056c8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80056ca:	f7fe f947 	bl	800395c <HAL_GetTick>
 80056ce:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056d0:	682b      	ldr	r3, [r5, #0]
 80056d2:	039f      	lsls	r7, r3, #14
 80056d4:	d5af      	bpl.n	8005636 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056d6:	f7fe f941 	bl	800395c <HAL_GetTick>
 80056da:	1b80      	subs	r0, r0, r6
 80056dc:	2864      	cmp	r0, #100	@ 0x64
 80056de:	d9f7      	bls.n	80056d0 <HAL_RCC_OscConfig+0xa8>
 80056e0:	e7e6      	b.n	80056b0 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80056e6:	682b      	ldr	r3, [r5, #0]
 80056e8:	d103      	bne.n	80056f2 <HAL_RCC_OscConfig+0xca>
 80056ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80056ee:	602b      	str	r3, [r5, #0]
 80056f0:	e7ce      	b.n	8005690 <HAL_RCC_OscConfig+0x68>
 80056f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056f6:	602b      	str	r3, [r5, #0]
 80056f8:	682b      	ldr	r3, [r5, #0]
 80056fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056fe:	e7ca      	b.n	8005696 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005700:	4b6a      	ldr	r3, [pc, #424]	@ (80058ac <HAL_RCC_OscConfig+0x284>)
 8005702:	689a      	ldr	r2, [r3, #8]
 8005704:	f012 0f0c 	tst.w	r2, #12
 8005708:	d007      	beq.n	800571a <HAL_RCC_OscConfig+0xf2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800570a:	689a      	ldr	r2, [r3, #8]
 800570c:	f002 020c 	and.w	r2, r2, #12
 8005710:	2a08      	cmp	r2, #8
 8005712:	d111      	bne.n	8005738 <HAL_RCC_OscConfig+0x110>
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	025d      	lsls	r5, r3, #9
 8005718:	d40e      	bmi.n	8005738 <HAL_RCC_OscConfig+0x110>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800571a:	4a64      	ldr	r2, [pc, #400]	@ (80058ac <HAL_RCC_OscConfig+0x284>)
 800571c:	6813      	ldr	r3, [r2, #0]
 800571e:	0799      	lsls	r1, r3, #30
 8005720:	d502      	bpl.n	8005728 <HAL_RCC_OscConfig+0x100>
 8005722:	68e3      	ldr	r3, [r4, #12]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d1ac      	bne.n	8005682 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005728:	6813      	ldr	r3, [r2, #0]
 800572a:	6921      	ldr	r1, [r4, #16]
 800572c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005730:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005734:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005736:	e781      	b.n	800563c <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005738:	68e3      	ldr	r3, [r4, #12]
 800573a:	4d5c      	ldr	r5, [pc, #368]	@ (80058ac <HAL_RCC_OscConfig+0x284>)
 800573c:	b1bb      	cbz	r3, 800576e <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_ENABLE();
 800573e:	682b      	ldr	r3, [r5, #0]
 8005740:	f043 0301 	orr.w	r3, r3, #1
 8005744:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005746:	f7fe f909 	bl	800395c <HAL_GetTick>
 800574a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800574c:	682b      	ldr	r3, [r5, #0]
 800574e:	079b      	lsls	r3, r3, #30
 8005750:	d507      	bpl.n	8005762 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005752:	682b      	ldr	r3, [r5, #0]
 8005754:	6922      	ldr	r2, [r4, #16]
 8005756:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800575a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800575e:	602b      	str	r3, [r5, #0]
 8005760:	e76c      	b.n	800563c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005762:	f7fe f8fb 	bl	800395c <HAL_GetTick>
 8005766:	1b80      	subs	r0, r0, r6
 8005768:	2802      	cmp	r0, #2
 800576a:	d9ef      	bls.n	800574c <HAL_RCC_OscConfig+0x124>
 800576c:	e7a0      	b.n	80056b0 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 800576e:	682b      	ldr	r3, [r5, #0]
 8005770:	f023 0301 	bic.w	r3, r3, #1
 8005774:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005776:	f7fe f8f1 	bl	800395c <HAL_GetTick>
 800577a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800577c:	682b      	ldr	r3, [r5, #0]
 800577e:	079f      	lsls	r7, r3, #30
 8005780:	f57f af5c 	bpl.w	800563c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005784:	f7fe f8ea 	bl	800395c <HAL_GetTick>
 8005788:	1b80      	subs	r0, r0, r6
 800578a:	2802      	cmp	r0, #2
 800578c:	d9f6      	bls.n	800577c <HAL_RCC_OscConfig+0x154>
 800578e:	e78f      	b.n	80056b0 <HAL_RCC_OscConfig+0x88>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005790:	6963      	ldr	r3, [r4, #20]
 8005792:	4d46      	ldr	r5, [pc, #280]	@ (80058ac <HAL_RCC_OscConfig+0x284>)
 8005794:	b183      	cbz	r3, 80057b8 <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_LSI_ENABLE();
 8005796:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8005798:	f043 0301 	orr.w	r3, r3, #1
 800579c:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800579e:	f7fe f8dd 	bl	800395c <HAL_GetTick>
 80057a2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057a4:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80057a6:	079b      	lsls	r3, r3, #30
 80057a8:	f53f af4c 	bmi.w	8005644 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057ac:	f7fe f8d6 	bl	800395c <HAL_GetTick>
 80057b0:	1b80      	subs	r0, r0, r6
 80057b2:	2802      	cmp	r0, #2
 80057b4:	d9f6      	bls.n	80057a4 <HAL_RCC_OscConfig+0x17c>
 80057b6:	e77b      	b.n	80056b0 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 80057b8:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80057ba:	f023 0301 	bic.w	r3, r3, #1
 80057be:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 80057c0:	f7fe f8cc 	bl	800395c <HAL_GetTick>
 80057c4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057c6:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80057c8:	079f      	lsls	r7, r3, #30
 80057ca:	f57f af3b 	bpl.w	8005644 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057ce:	f7fe f8c5 	bl	800395c <HAL_GetTick>
 80057d2:	1b80      	subs	r0, r0, r6
 80057d4:	2802      	cmp	r0, #2
 80057d6:	d9f6      	bls.n	80057c6 <HAL_RCC_OscConfig+0x19e>
 80057d8:	e76a      	b.n	80056b0 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057da:	4b34      	ldr	r3, [pc, #208]	@ (80058ac <HAL_RCC_OscConfig+0x284>)
 80057dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80057de:	00d5      	lsls	r5, r2, #3
 80057e0:	d427      	bmi.n	8005832 <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 80057e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
      pwrclkchanged = SET;
 80057e4:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80057e6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80057ea:	641a      	str	r2, [r3, #64]	@ 0x40
 80057ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057f2:	9301      	str	r3, [sp, #4]
 80057f4:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057f6:	4d2e      	ldr	r5, [pc, #184]	@ (80058b0 <HAL_RCC_OscConfig+0x288>)
 80057f8:	682b      	ldr	r3, [r5, #0]
 80057fa:	05d8      	lsls	r0, r3, #23
 80057fc:	d51b      	bpl.n	8005836 <HAL_RCC_OscConfig+0x20e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057fe:	68a3      	ldr	r3, [r4, #8]
 8005800:	4d2a      	ldr	r5, [pc, #168]	@ (80058ac <HAL_RCC_OscConfig+0x284>)
 8005802:	2b01      	cmp	r3, #1
 8005804:	d127      	bne.n	8005856 <HAL_RCC_OscConfig+0x22e>
 8005806:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8005808:	f043 0301 	orr.w	r3, r3, #1
 800580c:	672b      	str	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800580e:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8005812:	f7fe f8a3 	bl	800395c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005816:	4e25      	ldr	r6, [pc, #148]	@ (80058ac <HAL_RCC_OscConfig+0x284>)
      tickstart = HAL_GetTick();
 8005818:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800581a:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800581c:	079a      	lsls	r2, r3, #30
 800581e:	d53f      	bpl.n	80058a0 <HAL_RCC_OscConfig+0x278>
    if (pwrclkchanged == SET)
 8005820:	2f00      	cmp	r7, #0
 8005822:	f43f af13 	beq.w	800564c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005826:	4a21      	ldr	r2, [pc, #132]	@ (80058ac <HAL_RCC_OscConfig+0x284>)
 8005828:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800582a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800582e:	6413      	str	r3, [r2, #64]	@ 0x40
 8005830:	e70c      	b.n	800564c <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 8005832:	2700      	movs	r7, #0
 8005834:	e7df      	b.n	80057f6 <HAL_RCC_OscConfig+0x1ce>
      PWR->CR1 |= PWR_CR1_DBP;
 8005836:	682b      	ldr	r3, [r5, #0]
 8005838:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800583c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800583e:	f7fe f88d 	bl	800395c <HAL_GetTick>
 8005842:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005844:	682b      	ldr	r3, [r5, #0]
 8005846:	05d9      	lsls	r1, r3, #23
 8005848:	d4d9      	bmi.n	80057fe <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800584a:	f7fe f887 	bl	800395c <HAL_GetTick>
 800584e:	1b80      	subs	r0, r0, r6
 8005850:	2864      	cmp	r0, #100	@ 0x64
 8005852:	d9f7      	bls.n	8005844 <HAL_RCC_OscConfig+0x21c>
 8005854:	e72c      	b.n	80056b0 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005856:	b9ab      	cbnz	r3, 8005884 <HAL_RCC_OscConfig+0x25c>
 8005858:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800585a:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800585e:	f023 0301 	bic.w	r3, r3, #1
 8005862:	672b      	str	r3, [r5, #112]	@ 0x70
 8005864:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8005866:	f023 0304 	bic.w	r3, r3, #4
 800586a:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800586c:	f7fe f876 	bl	800395c <HAL_GetTick>
 8005870:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005872:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8005874:	079b      	lsls	r3, r3, #30
 8005876:	d5d3      	bpl.n	8005820 <HAL_RCC_OscConfig+0x1f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005878:	f7fe f870 	bl	800395c <HAL_GetTick>
 800587c:	1b80      	subs	r0, r0, r6
 800587e:	4540      	cmp	r0, r8
 8005880:	d9f7      	bls.n	8005872 <HAL_RCC_OscConfig+0x24a>
 8005882:	e715      	b.n	80056b0 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005884:	2b05      	cmp	r3, #5
 8005886:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8005888:	d103      	bne.n	8005892 <HAL_RCC_OscConfig+0x26a>
 800588a:	f043 0304 	orr.w	r3, r3, #4
 800588e:	672b      	str	r3, [r5, #112]	@ 0x70
 8005890:	e7b9      	b.n	8005806 <HAL_RCC_OscConfig+0x1de>
 8005892:	f023 0301 	bic.w	r3, r3, #1
 8005896:	672b      	str	r3, [r5, #112]	@ 0x70
 8005898:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800589a:	f023 0304 	bic.w	r3, r3, #4
 800589e:	e7b5      	b.n	800580c <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058a0:	f7fe f85c 	bl	800395c <HAL_GetTick>
 80058a4:	1b40      	subs	r0, r0, r5
 80058a6:	4540      	cmp	r0, r8
 80058a8:	d9b7      	bls.n	800581a <HAL_RCC_OscConfig+0x1f2>
 80058aa:	e701      	b.n	80056b0 <HAL_RCC_OscConfig+0x88>
 80058ac:	40023800 	.word	0x40023800
 80058b0:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058b4:	4d38      	ldr	r5, [pc, #224]	@ (8005998 <HAL_RCC_OscConfig+0x370>)
 80058b6:	68ab      	ldr	r3, [r5, #8]
 80058b8:	f003 030c 	and.w	r3, r3, #12
 80058bc:	2b08      	cmp	r3, #8
 80058be:	d041      	beq.n	8005944 <HAL_RCC_OscConfig+0x31c>
        __HAL_RCC_PLL_DISABLE();
 80058c0:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058c2:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80058c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058c8:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058ca:	d12e      	bne.n	800592a <HAL_RCC_OscConfig+0x302>
        tickstart = HAL_GetTick();
 80058cc:	f7fe f846 	bl	800395c <HAL_GetTick>
 80058d0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058d2:	682b      	ldr	r3, [r5, #0]
 80058d4:	0199      	lsls	r1, r3, #6
 80058d6:	d422      	bmi.n	800591e <HAL_RCC_OscConfig+0x2f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058d8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80058da:	085b      	lsrs	r3, r3, #1
 80058dc:	1e5a      	subs	r2, r3, #1
 80058de:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 80058e2:	430b      	orrs	r3, r1
 80058e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80058e8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80058ea:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80058ee:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80058f0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80058f4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80058f8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80058fa:	682b      	ldr	r3, [r5, #0]
 80058fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005900:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005902:	f7fe f82b 	bl	800395c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005906:	4d24      	ldr	r5, [pc, #144]	@ (8005998 <HAL_RCC_OscConfig+0x370>)
        tickstart = HAL_GetTick();
 8005908:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800590a:	682b      	ldr	r3, [r5, #0]
 800590c:	019a      	lsls	r2, r3, #6
 800590e:	f53f aea1 	bmi.w	8005654 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005912:	f7fe f823 	bl	800395c <HAL_GetTick>
 8005916:	1b00      	subs	r0, r0, r4
 8005918:	2802      	cmp	r0, #2
 800591a:	d9f6      	bls.n	800590a <HAL_RCC_OscConfig+0x2e2>
 800591c:	e6c8      	b.n	80056b0 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800591e:	f7fe f81d 	bl	800395c <HAL_GetTick>
 8005922:	1b80      	subs	r0, r0, r6
 8005924:	2802      	cmp	r0, #2
 8005926:	d9d4      	bls.n	80058d2 <HAL_RCC_OscConfig+0x2aa>
 8005928:	e6c2      	b.n	80056b0 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 800592a:	f7fe f817 	bl	800395c <HAL_GetTick>
 800592e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005930:	682b      	ldr	r3, [r5, #0]
 8005932:	019b      	lsls	r3, r3, #6
 8005934:	f57f ae8e 	bpl.w	8005654 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005938:	f7fe f810 	bl	800395c <HAL_GetTick>
 800593c:	1b00      	subs	r0, r0, r4
 800593e:	2802      	cmp	r0, #2
 8005940:	d9f6      	bls.n	8005930 <HAL_RCC_OscConfig+0x308>
 8005942:	e6b5      	b.n	80056b0 <HAL_RCC_OscConfig+0x88>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005944:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 8005946:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005948:	f43f ae9b 	beq.w	8005682 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800594c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005950:	69e1      	ldr	r1, [r4, #28]
 8005952:	428a      	cmp	r2, r1
 8005954:	f47f ae95 	bne.w	8005682 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005958:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800595c:	6a21      	ldr	r1, [r4, #32]
 800595e:	428a      	cmp	r2, r1
 8005960:	f47f ae8f 	bne.w	8005682 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005964:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005968:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800596a:	401a      	ands	r2, r3
 800596c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8005970:	f47f ae87 	bne.w	8005682 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005974:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8005976:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 800597a:	0852      	lsrs	r2, r2, #1
 800597c:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800597e:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8005982:	f47f ae7e 	bne.w	8005682 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005986:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005988:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800598c:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8005990:	bf14      	ite	ne
 8005992:	2001      	movne	r0, #1
 8005994:	2000      	moveq	r0, #0
 8005996:	e68c      	b.n	80056b2 <HAL_RCC_OscConfig+0x8a>
 8005998:	40023800 	.word	0x40023800

0800599c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800599c:	4913      	ldr	r1, [pc, #76]	@ (80059ec <HAL_RCC_GetSysClockFreq+0x50>)
{
 800599e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059a0:	688b      	ldr	r3, [r1, #8]
 80059a2:	f003 030c 	and.w	r3, r3, #12
 80059a6:	2b04      	cmp	r3, #4
 80059a8:	d01b      	beq.n	80059e2 <HAL_RCC_GetSysClockFreq+0x46>
 80059aa:	2b08      	cmp	r3, #8
 80059ac:	d11b      	bne.n	80059e6 <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059ae:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80059b0:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059b2:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059b4:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80059b8:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059bc:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80059c0:	bf1a      	itte	ne
 80059c2:	480b      	ldrne	r0, [pc, #44]	@ (80059f0 <HAL_RCC_GetSysClockFreq+0x54>)
 80059c4:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059c6:	480b      	ldreq	r0, [pc, #44]	@ (80059f4 <HAL_RCC_GetSysClockFreq+0x58>)
 80059c8:	fba1 0100 	umull	r0, r1, r1, r0
 80059cc:	f7fa fc78 	bl	80002c0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80059d0:	4b06      	ldr	r3, [pc, #24]	@ (80059ec <HAL_RCC_GetSysClockFreq+0x50>)
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80059d8:	3301      	adds	r3, #1
 80059da:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80059dc:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80059e0:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059e2:	4803      	ldr	r0, [pc, #12]	@ (80059f0 <HAL_RCC_GetSysClockFreq+0x54>)
 80059e4:	e7fc      	b.n	80059e0 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 80059e6:	4803      	ldr	r0, [pc, #12]	@ (80059f4 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 80059e8:	e7fa      	b.n	80059e0 <HAL_RCC_GetSysClockFreq+0x44>
 80059ea:	bf00      	nop
 80059ec:	40023800 	.word	0x40023800
 80059f0:	017d7840 	.word	0x017d7840
 80059f4:	00f42400 	.word	0x00f42400

080059f8 <HAL_RCC_ClockConfig>:
{
 80059f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059fc:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80059fe:	4604      	mov	r4, r0
 8005a00:	b910      	cbnz	r0, 8005a08 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8005a02:	2001      	movs	r0, #1
}
 8005a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a08:	4a45      	ldr	r2, [pc, #276]	@ (8005b20 <HAL_RCC_ClockConfig+0x128>)
 8005a0a:	6813      	ldr	r3, [r2, #0]
 8005a0c:	f003 030f 	and.w	r3, r3, #15
 8005a10:	428b      	cmp	r3, r1
 8005a12:	d328      	bcc.n	8005a66 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a14:	6821      	ldr	r1, [r4, #0]
 8005a16:	078f      	lsls	r7, r1, #30
 8005a18:	d430      	bmi.n	8005a7c <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a1a:	07c8      	lsls	r0, r1, #31
 8005a1c:	d443      	bmi.n	8005aa6 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a1e:	4a40      	ldr	r2, [pc, #256]	@ (8005b20 <HAL_RCC_ClockConfig+0x128>)
 8005a20:	6813      	ldr	r3, [r2, #0]
 8005a22:	f003 030f 	and.w	r3, r3, #15
 8005a26:	42ab      	cmp	r3, r5
 8005a28:	d866      	bhi.n	8005af8 <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a2a:	6822      	ldr	r2, [r4, #0]
 8005a2c:	0751      	lsls	r1, r2, #29
 8005a2e:	d46f      	bmi.n	8005b10 <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a30:	0713      	lsls	r3, r2, #28
 8005a32:	d507      	bpl.n	8005a44 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005a34:	4a3b      	ldr	r2, [pc, #236]	@ (8005b24 <HAL_RCC_ClockConfig+0x12c>)
 8005a36:	6921      	ldr	r1, [r4, #16]
 8005a38:	6893      	ldr	r3, [r2, #8]
 8005a3a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005a3e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005a42:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a44:	f7ff ffaa 	bl	800599c <HAL_RCC_GetSysClockFreq>
 8005a48:	4b36      	ldr	r3, [pc, #216]	@ (8005b24 <HAL_RCC_ClockConfig+0x12c>)
 8005a4a:	4a37      	ldr	r2, [pc, #220]	@ (8005b28 <HAL_RCC_ClockConfig+0x130>)
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005a52:	5cd3      	ldrb	r3, [r2, r3]
 8005a54:	40d8      	lsrs	r0, r3
 8005a56:	4b35      	ldr	r3, [pc, #212]	@ (8005b2c <HAL_RCC_ClockConfig+0x134>)
 8005a58:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8005a5a:	4b35      	ldr	r3, [pc, #212]	@ (8005b30 <HAL_RCC_ClockConfig+0x138>)
 8005a5c:	6818      	ldr	r0, [r3, #0]
 8005a5e:	f7fd ff39 	bl	80038d4 <HAL_InitTick>
  return HAL_OK;
 8005a62:	2000      	movs	r0, #0
 8005a64:	e7ce      	b.n	8005a04 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a66:	6813      	ldr	r3, [r2, #0]
 8005a68:	f023 030f 	bic.w	r3, r3, #15
 8005a6c:	430b      	orrs	r3, r1
 8005a6e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a70:	6813      	ldr	r3, [r2, #0]
 8005a72:	f003 030f 	and.w	r3, r3, #15
 8005a76:	428b      	cmp	r3, r1
 8005a78:	d1c3      	bne.n	8005a02 <HAL_RCC_ClockConfig+0xa>
 8005a7a:	e7cb      	b.n	8005a14 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a7c:	f011 0f04 	tst.w	r1, #4
 8005a80:	4b28      	ldr	r3, [pc, #160]	@ (8005b24 <HAL_RCC_ClockConfig+0x12c>)
 8005a82:	d003      	beq.n	8005a8c <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a84:	689a      	ldr	r2, [r3, #8]
 8005a86:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 8005a8a:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a8c:	070e      	lsls	r6, r1, #28
 8005a8e:	d503      	bpl.n	8005a98 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a90:	689a      	ldr	r2, [r3, #8]
 8005a92:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 8005a96:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a98:	689a      	ldr	r2, [r3, #8]
 8005a9a:	68a0      	ldr	r0, [r4, #8]
 8005a9c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8005aa0:	4302      	orrs	r2, r0
 8005aa2:	609a      	str	r2, [r3, #8]
 8005aa4:	e7b9      	b.n	8005a1a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005aa6:	6861      	ldr	r1, [r4, #4]
 8005aa8:	4b1e      	ldr	r3, [pc, #120]	@ (8005b24 <HAL_RCC_ClockConfig+0x12c>)
 8005aaa:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aac:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005aae:	d11b      	bne.n	8005ae8 <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ab0:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ab4:	d0a5      	beq.n	8005a02 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ab6:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ab8:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005abc:	4f19      	ldr	r7, [pc, #100]	@ (8005b24 <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005abe:	f022 0203 	bic.w	r2, r2, #3
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8005ac6:	f7fd ff49 	bl	800395c <HAL_GetTick>
 8005aca:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	6862      	ldr	r2, [r4, #4]
 8005ad0:	f003 030c 	and.w	r3, r3, #12
 8005ad4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005ad8:	d0a1      	beq.n	8005a1e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ada:	f7fd ff3f 	bl	800395c <HAL_GetTick>
 8005ade:	1b80      	subs	r0, r0, r6
 8005ae0:	4540      	cmp	r0, r8
 8005ae2:	d9f3      	bls.n	8005acc <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8005ae4:	2003      	movs	r0, #3
 8005ae6:	e78d      	b.n	8005a04 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ae8:	2902      	cmp	r1, #2
 8005aea:	d102      	bne.n	8005af2 <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005aec:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8005af0:	e7e0      	b.n	8005ab4 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005af2:	f012 0f02 	tst.w	r2, #2
 8005af6:	e7dd      	b.n	8005ab4 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005af8:	6813      	ldr	r3, [r2, #0]
 8005afa:	f023 030f 	bic.w	r3, r3, #15
 8005afe:	432b      	orrs	r3, r5
 8005b00:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b02:	6813      	ldr	r3, [r2, #0]
 8005b04:	f003 030f 	and.w	r3, r3, #15
 8005b08:	42ab      	cmp	r3, r5
 8005b0a:	f47f af7a 	bne.w	8005a02 <HAL_RCC_ClockConfig+0xa>
 8005b0e:	e78c      	b.n	8005a2a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b10:	4904      	ldr	r1, [pc, #16]	@ (8005b24 <HAL_RCC_ClockConfig+0x12c>)
 8005b12:	68e0      	ldr	r0, [r4, #12]
 8005b14:	688b      	ldr	r3, [r1, #8]
 8005b16:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8005b1a:	4303      	orrs	r3, r0
 8005b1c:	608b      	str	r3, [r1, #8]
 8005b1e:	e787      	b.n	8005a30 <HAL_RCC_ClockConfig+0x38>
 8005b20:	40023c00 	.word	0x40023c00
 8005b24:	40023800 	.word	0x40023800
 8005b28:	0800f6f0 	.word	0x0800f6f0
 8005b2c:	200000a0 	.word	0x200000a0
 8005b30:	200000a8 	.word	0x200000a8

08005b34 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005b34:	6803      	ldr	r3, [r0, #0]
{
 8005b36:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005b3a:	f013 0601 	ands.w	r6, r3, #1
{
 8005b3e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005b40:	d00b      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005b42:	4aad      	ldr	r2, [pc, #692]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005b44:	6891      	ldr	r1, [r2, #8]
 8005b46:	f421 0100 	bic.w	r1, r1, #8388608	@ 0x800000
 8005b4a:	6091      	str	r1, [r2, #8]
 8005b4c:	6b46      	ldr	r6, [r0, #52]	@ 0x34
 8005b4e:	6891      	ldr	r1, [r2, #8]
 8005b50:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005b52:	fab6 f686 	clz	r6, r6
 8005b56:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005b58:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005b5a:	f413 2500 	ands.w	r5, r3, #524288	@ 0x80000
 8005b5e:	d012      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b60:	49a5      	ldr	r1, [pc, #660]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005b62:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8005b64:	f8d1 208c 	ldr.w	r2, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005b68:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b6c:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
    {
      plli2sused = 1;
 8005b70:	bf08      	it	eq
 8005b72:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b74:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005b78:	bf16      	itet	ne
 8005b7a:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8005b7e:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005b80:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b82:	f8c1 208c 	str.w	r2, [r1, #140]	@ 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005b86:	02d8      	lsls	r0, r3, #11
 8005b88:	d510      	bpl.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005b8a:	489b      	ldr	r0, [pc, #620]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005b8c:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8005b8e:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005b92:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005b96:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8005b9a:	ea42 0201 	orr.w	r2, r2, r1
 8005b9e:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005ba2:	f000 8186 	beq.w	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8005ba6:	2900      	cmp	r1, #0
 8005ba8:	bf08      	it	eq
 8005baa:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8005bac:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8005bb0:	bf18      	it	ne
 8005bb2:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005bb4:	0699      	lsls	r1, r3, #26
 8005bb6:	d532      	bpl.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005bb8:	4b8f      	ldr	r3, [pc, #572]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005bba:	4f90      	ldr	r7, [pc, #576]	@ (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8005bbc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005bbe:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005bc2:	641a      	str	r2, [r3, #64]	@ 0x40
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bca:	9301      	str	r3, [sp, #4]
 8005bcc:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bd4:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bd6:	f7fd fec1 	bl	800395c <HAL_GetTick>
 8005bda:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	05da      	lsls	r2, r3, #23
 8005be0:	f140 8169 	bpl.w	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x382>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005be4:	4f84      	ldr	r7, [pc, #528]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005be6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005be8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005bea:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8005bee:	f040 816d 	bne.w	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x398>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bf2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005bf4:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8005bf8:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8005bfc:	4a7e      	ldr	r2, [pc, #504]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005bfe:	f040 818a 	bne.w	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8005c02:	6891      	ldr	r1, [r2, #8]
 8005c04:	f023 4070 	bic.w	r0, r3, #4026531840	@ 0xf0000000
 8005c08:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 8005c0c:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 8005c10:	4301      	orrs	r1, r0
 8005c12:	6091      	str	r1, [r2, #8]
 8005c14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c18:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8005c1a:	430b      	orrs	r3, r1
 8005c1c:	6713      	str	r3, [r2, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005c1e:	6823      	ldr	r3, [r4, #0]
 8005c20:	06d9      	lsls	r1, r3, #27
 8005c22:	d50c      	bpl.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c24:	4a74      	ldr	r2, [pc, #464]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005c26:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 8005c2a:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 8005c2e:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
 8005c32:	f8d2 108c 	ldr.w	r1, [r2, #140]	@ 0x8c
 8005c36:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8005c38:	4301      	orrs	r1, r0
 8005c3a:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c3e:	045a      	lsls	r2, r3, #17
 8005c40:	d508      	bpl.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c42:	496d      	ldr	r1, [pc, #436]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005c44:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8005c46:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8005c4a:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8005c4e:	4302      	orrs	r2, r0
 8005c50:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c54:	041f      	lsls	r7, r3, #16
 8005c56:	d508      	bpl.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005c58:	4967      	ldr	r1, [pc, #412]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005c5a:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8005c5c:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8005c60:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8005c64:	4302      	orrs	r2, r0
 8005c66:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c6a:	03d8      	lsls	r0, r3, #15
 8005c6c:	d508      	bpl.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c6e:	4962      	ldr	r1, [pc, #392]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005c70:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8005c72:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8005c76:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8005c7a:	4302      	orrs	r2, r0
 8005c7c:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005c80:	0399      	lsls	r1, r3, #14
 8005c82:	d508      	bpl.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005c84:	495c      	ldr	r1, [pc, #368]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005c86:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8005c88:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8005c8c:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8005c90:	4302      	orrs	r2, r0
 8005c92:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c96:	065a      	lsls	r2, r3, #25
 8005c98:	d508      	bpl.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c9a:	4957      	ldr	r1, [pc, #348]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005c9c:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8005c9e:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8005ca2:	f022 0203 	bic.w	r2, r2, #3
 8005ca6:	4302      	orrs	r2, r0
 8005ca8:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005cac:	061f      	lsls	r7, r3, #24
 8005cae:	d508      	bpl.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005cb0:	4951      	ldr	r1, [pc, #324]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005cb2:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8005cb4:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8005cb8:	f022 020c 	bic.w	r2, r2, #12
 8005cbc:	4302      	orrs	r2, r0
 8005cbe:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005cc2:	05d8      	lsls	r0, r3, #23
 8005cc4:	d508      	bpl.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005cc6:	494c      	ldr	r1, [pc, #304]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005cc8:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8005cca:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8005cce:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8005cd2:	4302      	orrs	r2, r0
 8005cd4:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005cd8:	0599      	lsls	r1, r3, #22
 8005cda:	d508      	bpl.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005cdc:	4946      	ldr	r1, [pc, #280]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005cde:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8005ce0:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8005ce4:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8005ce8:	4302      	orrs	r2, r0
 8005cea:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005cee:	055a      	lsls	r2, r3, #21
 8005cf0:	d508      	bpl.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005cf2:	4941      	ldr	r1, [pc, #260]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005cf4:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8005cf6:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8005cfa:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005cfe:	4302      	orrs	r2, r0
 8005d00:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005d04:	051f      	lsls	r7, r3, #20
 8005d06:	d508      	bpl.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005d08:	493b      	ldr	r1, [pc, #236]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005d0a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d0c:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8005d10:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005d14:	4302      	orrs	r2, r0
 8005d16:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005d1a:	04d8      	lsls	r0, r3, #19
 8005d1c:	d508      	bpl.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005d1e:	4936      	ldr	r1, [pc, #216]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005d20:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8005d22:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8005d26:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8005d2a:	4302      	orrs	r2, r0
 8005d2c:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005d30:	0499      	lsls	r1, r3, #18
 8005d32:	d508      	bpl.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005d34:	4930      	ldr	r1, [pc, #192]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005d36:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8005d38:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8005d3c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8005d40:	4302      	orrs	r2, r0
 8005d42:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005d46:	025a      	lsls	r2, r3, #9
 8005d48:	d508      	bpl.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005d4a:	492b      	ldr	r1, [pc, #172]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005d4c:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8005d4e:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8005d52:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8005d56:	4302      	orrs	r2, r0
 8005d58:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005d5c:	029f      	lsls	r7, r3, #10
 8005d5e:	d50c      	bpl.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005d60:	4825      	ldr	r0, [pc, #148]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005d62:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8005d64:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8005d68:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005d6c:	f022 6200 	bic.w	r2, r2, #134217728	@ 0x8000000
      pllsaiused = 1;
 8005d70:	bf08      	it	eq
 8005d72:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005d74:	430a      	orrs	r2, r1
 8005d76:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8005d7a:	f013 0f08 	tst.w	r3, #8
 8005d7e:	bf18      	it	ne
 8005d80:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d82:	0358      	lsls	r0, r3, #13
 8005d84:	d508      	bpl.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x264>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d86:	491c      	ldr	r1, [pc, #112]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005d88:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8005d8a:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8005d8e:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005d92:	4302      	orrs	r2, r0
 8005d94:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005d98:	0219      	lsls	r1, r3, #8
 8005d9a:	d509      	bpl.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005d9c:	4916      	ldr	r1, [pc, #88]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005d9e:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8005da2:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8005da6:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8005daa:	4302      	orrs	r2, r0
 8005dac:	f8c1 2090 	str.w	r2, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005db0:	2e01      	cmp	r6, #1
 8005db2:	f000 80b4 	beq.w	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8005db6:	019a      	lsls	r2, r3, #6
 8005db8:	f100 80b1 	bmi.w	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005dbc:	2d01      	cmp	r5, #1
 8005dbe:	d176      	bne.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x37a>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005dc0:	4d0d      	ldr	r5, [pc, #52]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005dc2:	682b      	ldr	r3, [r5, #0]
 8005dc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005dc8:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dca:	f7fd fdc7 	bl	800395c <HAL_GetTick>
 8005dce:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005dd0:	682b      	ldr	r3, [r5, #0]
 8005dd2:	009f      	lsls	r7, r3, #2
 8005dd4:	f100 8127 	bmi.w	8006026 <HAL_RCCEx_PeriphCLKConfig+0x4f2>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005dd8:	6821      	ldr	r1, [r4, #0]
 8005dda:	030e      	lsls	r6, r1, #12
 8005ddc:	d501      	bpl.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 8005dde:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005de0:	b11b      	cbz	r3, 8005dea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8005de2:	02cd      	lsls	r5, r1, #11
 8005de4:	d523      	bpl.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005de6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005de8:	bb0b      	cbnz	r3, 8005e2e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005dea:	4a03      	ldr	r2, [pc, #12]	@ (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005dec:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005df0:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88
 8005df4:	e004      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8005df6:	bf00      	nop
 8005df8:	40023800 	.word	0x40023800
 8005dfc:	40007000 	.word	0x40007000
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005e00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005e04:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8005e08:	4303      	orrs	r3, r0
 8005e0a:	6960      	ldr	r0, [r4, #20]
 8005e0c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005e10:	69a0      	ldr	r0, [r4, #24]
 8005e12:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8005e16:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005e1a:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8005e1e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8005e20:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8005e24:	3801      	subs	r0, #1
 8005e26:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8005e2a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005e2e:	0288      	lsls	r0, r1, #10
 8005e30:	d515      	bpl.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8005e32:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8005e34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e38:	d111      	bne.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x32a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005e3a:	4a82      	ldr	r2, [pc, #520]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8005e3c:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005e40:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005e44:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8005e48:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8005e4c:	4303      	orrs	r3, r0
 8005e4e:	6960      	ldr	r0, [r4, #20]
 8005e50:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005e54:	6a20      	ldr	r0, [r4, #32]
 8005e56:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005e5a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005e5e:	070a      	lsls	r2, r1, #28
 8005e60:	d519      	bpl.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005e62:	4a78      	ldr	r2, [pc, #480]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8005e64:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005e68:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005e6c:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 8005e70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005e74:	430b      	orrs	r3, r1
 8005e76:	6961      	ldr	r1, [r4, #20]
 8005e78:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8005e7c:	69e1      	ldr	r1, [r4, #28]
 8005e7e:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8005e82:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005e86:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8005e8a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005e8c:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8005e90:	430b      	orrs	r3, r1
 8005e92:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005e96:	4c6b      	ldr	r4, [pc, #428]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8005e98:	6823      	ldr	r3, [r4, #0]
 8005e9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e9e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ea0:	f7fd fd5c 	bl	800395c <HAL_GetTick>
 8005ea4:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005ea6:	6823      	ldr	r3, [r4, #0]
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	f140 80c3 	bpl.w	8006034 <HAL_RCCEx_PeriphCLKConfig+0x500>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8005eae:	2000      	movs	r0, #0
 8005eb0:	e009      	b.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x392>
      plli2sused = 1;
 8005eb2:	2601      	movs	r6, #1
 8005eb4:	e67a      	b.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005eb6:	f7fd fd51 	bl	800395c <HAL_GetTick>
 8005eba:	eba0 0008 	sub.w	r0, r0, r8
 8005ebe:	2864      	cmp	r0, #100	@ 0x64
 8005ec0:	f67f ae8c 	bls.w	8005bdc <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8005ec4:	2003      	movs	r0, #3
}
 8005ec6:	b003      	add	sp, #12
 8005ec8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ecc:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	f43f ae8e 	beq.w	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ed6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ed8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005eda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ede:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005ee2:	673a      	str	r2, [r7, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ee4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8005ee6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005eea:	673a      	str	r2, [r7, #112]	@ 0x70
      RCC->BDCR = tmpreg0;
 8005eec:	673b      	str	r3, [r7, #112]	@ 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005eee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ef0:	07db      	lsls	r3, r3, #31
 8005ef2:	f57f ae7e 	bpl.w	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
        tickstart = HAL_GetTick();
 8005ef6:	f7fd fd31 	bl	800395c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005efa:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8005efe:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f00:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f02:	0798      	lsls	r0, r3, #30
 8005f04:	f53f ae75 	bmi.w	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f08:	f7fd fd28 	bl	800395c <HAL_GetTick>
 8005f0c:	eba0 0008 	sub.w	r0, r0, r8
 8005f10:	4548      	cmp	r0, r9
 8005f12:	d9f5      	bls.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8005f14:	e7d6      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x390>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f16:	6891      	ldr	r1, [r2, #8]
 8005f18:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 8005f1c:	e679      	b.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_PLLI2S_DISABLE();
 8005f1e:	4e49      	ldr	r6, [pc, #292]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8005f20:	6833      	ldr	r3, [r6, #0]
 8005f22:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005f26:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005f28:	f7fd fd18 	bl	800395c <HAL_GetTick>
 8005f2c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f2e:	6833      	ldr	r3, [r6, #0]
 8005f30:	011b      	lsls	r3, r3, #4
 8005f32:	d472      	bmi.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005f34:	6822      	ldr	r2, [r4, #0]
 8005f36:	07d7      	lsls	r7, r2, #31
 8005f38:	d512      	bpl.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8005f3a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005f3c:	b983      	cbnz	r3, 8005f60 <HAL_RCCEx_PeriphCLKConfig+0x42c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005f3e:	f8d6 3084 	ldr.w	r3, [r6, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005f42:	f8d6 1084 	ldr.w	r1, [r6, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005f46:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005f4a:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 8005f4e:	430b      	orrs	r3, r1
 8005f50:	6861      	ldr	r1, [r4, #4]
 8005f52:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8005f56:	68a1      	ldr	r1, [r4, #8]
 8005f58:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8005f5c:	f8c6 3084 	str.w	r3, [r6, #132]	@ 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005f60:	0316      	lsls	r6, r2, #12
 8005f62:	d503      	bpl.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x438>
 8005f64:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005f66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f6a:	d005      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x444>
 8005f6c:	02d0      	lsls	r0, r2, #11
 8005f6e:	d51e      	bpl.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x47a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005f70:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005f72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f76:	d11a      	bne.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x47a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005f78:	4932      	ldr	r1, [pc, #200]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8005f7a:	f8d1 3084 	ldr.w	r3, [r1, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005f7e:	f8d1 0084 	ldr.w	r0, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005f82:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005f86:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8005f8a:	4303      	orrs	r3, r0
 8005f8c:	6860      	ldr	r0, [r4, #4]
 8005f8e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005f92:	68e0      	ldr	r0, [r4, #12]
 8005f94:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8005f98:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005f9c:	f8d1 008c 	ldr.w	r0, [r1, #140]	@ 0x8c
 8005fa0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005fa2:	f020 001f 	bic.w	r0, r0, #31
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	4303      	orrs	r3, r0
 8005faa:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005fae:	01d1      	lsls	r1, r2, #7
 8005fb0:	d511      	bpl.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005fb2:	4924      	ldr	r1, [pc, #144]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8005fb4:	f8d1 3084 	ldr.w	r3, [r1, #132]	@ 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005fb8:	f8d1 0084 	ldr.w	r0, [r1, #132]	@ 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005fbc:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
 8005fc0:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8005fc4:	4303      	orrs	r3, r0
 8005fc6:	6860      	ldr	r0, [r4, #4]
 8005fc8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005fcc:	6920      	ldr	r0, [r4, #16]
 8005fce:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005fd2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005fd6:	0192      	lsls	r2, r2, #6
 8005fd8:	d50d      	bpl.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005fda:	6923      	ldr	r3, [r4, #16]
 8005fdc:	6862      	ldr	r2, [r4, #4]
 8005fde:	041b      	lsls	r3, r3, #16
 8005fe0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005fe4:	68e2      	ldr	r2, [r4, #12]
 8005fe6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005fea:	68a2      	ldr	r2, [r4, #8]
 8005fec:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8005ff0:	4a14      	ldr	r2, [pc, #80]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8005ff2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8005ff6:	4e13      	ldr	r6, [pc, #76]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8005ff8:	6833      	ldr	r3, [r6, #0]
 8005ffa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005ffe:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8006000:	f7fd fcac 	bl	800395c <HAL_GetTick>
 8006004:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006006:	6833      	ldr	r3, [r6, #0]
 8006008:	011b      	lsls	r3, r3, #4
 800600a:	f53f aed7 	bmi.w	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x288>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800600e:	f7fd fca5 	bl	800395c <HAL_GetTick>
 8006012:	1bc0      	subs	r0, r0, r7
 8006014:	2864      	cmp	r0, #100	@ 0x64
 8006016:	d9f6      	bls.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006018:	e754      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800601a:	f7fd fc9f 	bl	800395c <HAL_GetTick>
 800601e:	1bc0      	subs	r0, r0, r7
 8006020:	2864      	cmp	r0, #100	@ 0x64
 8006022:	d984      	bls.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8006024:	e74e      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006026:	f7fd fc99 	bl	800395c <HAL_GetTick>
 800602a:	1b80      	subs	r0, r0, r6
 800602c:	2864      	cmp	r0, #100	@ 0x64
 800602e:	f67f aecf 	bls.w	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 8006032:	e747      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006034:	f7fd fc92 	bl	800395c <HAL_GetTick>
 8006038:	1b40      	subs	r0, r0, r5
 800603a:	2864      	cmp	r0, #100	@ 0x64
 800603c:	f67f af33 	bls.w	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006040:	e740      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x390>
 8006042:	bf00      	nop
 8006044:	40023800 	.word	0x40023800

08006048 <HAL_RCCEx_GetPeriphCLKConfig>:
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8006048:	4b53      	ldr	r3, [pc, #332]	@ (8006198 <HAL_RCCEx_GetPeriphCLKConfig+0x150>)
 800604a:	6003      	str	r3, [r0, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800604c:	4b53      	ldr	r3, [pc, #332]	@ (800619c <HAL_RCCEx_GetPeriphCLKConfig+0x154>)
 800604e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8006052:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8006056:	6042      	str	r2, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006058:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800605c:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8006060:	6102      	str	r2, [r0, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006062:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8006066:	f3c2 6203 	ubfx	r2, r2, #24, #4
 800606a:	60c2      	str	r2, [r0, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800606c:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8006070:	f3c2 7202 	ubfx	r2, r2, #28, #3
 8006074:	6082      	str	r2, [r0, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 8006076:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800607a:	f3c2 1288 	ubfx	r2, r2, #6, #9
 800607e:	6142      	str	r2, [r0, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006080:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006084:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8006088:	6202      	str	r2, [r0, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800608a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800608e:	f3c2 6203 	ubfx	r2, r2, #24, #4
 8006092:	6182      	str	r2, [r0, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006094:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006098:	f3c2 7202 	ubfx	r2, r2, #28, #3
 800609c:	61c2      	str	r2, [r0, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 800609e:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80060a2:	f002 021f 	and.w	r2, r2, #31
 80060a6:	6242      	str	r2, [r0, #36]	@ 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 80060a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80060ac:	f3c2 2204 	ubfx	r2, r2, #8, #5
 80060b0:	6282      	str	r2, [r0, #40]	@ 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 80060b2:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80060b6:	f3c2 4201 	ubfx	r2, r2, #16, #2
 80060ba:	62c2      	str	r2, [r0, #44]	@ 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 80060bc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80060c0:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
 80060c4:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 80060c6:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80060ca:	f402 0240 	and.w	r2, r2, #12582912	@ 0xc00000
 80060ce:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 80060d0:	689a      	ldr	r2, [r3, #8]
 80060d2:	f402 0200 	and.w	r2, r2, #8388608	@ 0x800000
 80060d6:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 80060d8:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80060dc:	f402 3240 	and.w	r2, r2, #196608	@ 0x30000
 80060e0:	6642      	str	r2, [r0, #100]	@ 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 80060e2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80060e6:	f402 2240 	and.w	r2, r2, #786432	@ 0xc0000
 80060ea:	6682      	str	r2, [r0, #104]	@ 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 80060ec:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80060f0:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
 80060f4:	66c2      	str	r2, [r0, #108]	@ 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 80060f6:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80060fa:	f402 0240 	and.w	r2, r2, #12582912	@ 0xc00000
 80060fe:	6702      	str	r2, [r0, #112]	@ 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8006100:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8006104:	f002 0203 	and.w	r2, r2, #3
 8006108:	6442      	str	r2, [r0, #68]	@ 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 800610a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800610e:	f002 020c 	and.w	r2, r2, #12
 8006112:	6482      	str	r2, [r0, #72]	@ 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 8006114:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8006118:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 800611c:	64c2      	str	r2, [r0, #76]	@ 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 800611e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8006122:	f002 02c0 	and.w	r2, r2, #192	@ 0xc0
 8006126:	6502      	str	r2, [r0, #80]	@ 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 8006128:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800612c:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8006130:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 8006132:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8006136:	f402 6240 	and.w	r2, r2, #3072	@ 0xc00
 800613a:	6582      	str	r2, [r0, #88]	@ 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 800613c:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8006140:	f402 5240 	and.w	r2, r2, #12288	@ 0x3000
 8006144:	65c2      	str	r2, [r0, #92]	@ 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 8006146:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800614a:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 800614e:	6602      	str	r2, [r0, #96]	@ 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006150:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8006154:	f002 7240 	and.w	r2, r2, #50331648	@ 0x3000000
 8006158:	6742      	str	r2, [r0, #116]	@ 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 800615a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800615e:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
 8006162:	6782      	str	r2, [r0, #120]	@ 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 8006164:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8006168:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800616c:	67c2      	str	r2, [r0, #124]	@ 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 800616e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8006172:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8006176:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800617a:	6899      	ldr	r1, [r3, #8]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800617c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800617e:	f401 11f8 	and.w	r1, r1, #2031616	@ 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8006182:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8006186:	430a      	orrs	r2, r1
 8006188:	6302      	str	r2, [r0, #48]	@ 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 800618a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800618e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006192:	6383      	str	r3, [r0, #56]	@ 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	00fffff1 	.word	0x00fffff1
 800619c:	40023800 	.word	0x40023800

080061a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80061a0:	f5b0 2f00 	cmp.w	r0, #524288	@ 0x80000
 80061a4:	d140      	bne.n	8006228 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  {
    saiclocksource = RCC->DCKCFGR1;
 80061a6:	4b2e      	ldr	r3, [pc, #184]	@ (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 80061a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80061ac:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
    switch (saiclocksource)
 80061b0:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 80061b4:	d046      	beq.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 80061b6:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
  {
    saiclocksource = RCC->DCKCFGR1;
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
    switch (saiclocksource)
 80061ba:	d04c      	beq.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80061bc:	2a00      	cmp	r2, #0
 80061be:	d14c      	bne.n	800625a <HAL_RCCEx_GetPeriphCLKFreq+0xba>
    {
    case 0: /* PLLSAI is the clock source for SAI*/
      {
        /* Configure the PLLSAI division factor */
        /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80061c0:	685a      	ldr	r2, [r3, #4]
 80061c2:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80061c6:	685a      	ldr	r2, [r3, #4]
 80061c8:	bf08      	it	eq
 80061ca:	4b26      	ldreq	r3, [pc, #152]	@ (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 80061cc:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        }
        else
        {
          /* In Case the PLL Source is HSE (External Clock) */
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80061d0:	bf18      	it	ne
 80061d2:	4b25      	ldrne	r3, [pc, #148]	@ (8006268 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 80061d4:	fbb3 f3f2 	udiv	r3, r3, r2
        }
        /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
        /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80061d8:	4a21      	ldr	r2, [pc, #132]	@ (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 80061da:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80061de:	f8d2 0088 	ldr.w	r0, [r2, #136]	@ 0x88
 80061e2:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80061e6:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80061e8:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80061ec:	fbb0 f0f3 	udiv	r0, r0, r3

        /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80061f0:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 80061f4:	f3c3 2304 	ubfx	r3, r3, #8, #5
 80061f8:	e012      	b.n	8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80061fa:	4b1b      	ldr	r3, [pc, #108]	@ (8006268 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>)
 80061fc:	fbb3 f3f2 	udiv	r3, r3, r2
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006200:	4a17      	ldr	r2, [pc, #92]	@ (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8006202:	f8d2 1084 	ldr.w	r1, [r2, #132]	@ 0x84
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006206:	f8d2 0084 	ldr.w	r0, [r2, #132]	@ 0x84
 800620a:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800620e:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006210:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006214:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8006218:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 800621c:	f003 031f 	and.w	r3, r3, #31
 8006220:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 8006222:	fbb0 f0f3 	udiv	r0, r0, r3
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006226:	4770      	bx	lr
 8006228:	f5b0 1f80 	cmp.w	r0, #1048576	@ 0x100000
 800622c:	d115      	bne.n	800625a <HAL_RCCEx_GetPeriphCLKFreq+0xba>
    saiclocksource = RCC->DCKCFGR1;
 800622e:	4b0c      	ldr	r3, [pc, #48]	@ (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8006230:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8006234:	f402 0240 	and.w	r2, r2, #12582912	@ 0xc00000
    switch (saiclocksource)
 8006238:	f5b2 0f80 	cmp.w	r2, #4194304	@ 0x400000
 800623c:	d002      	beq.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 800623e:	f5b2 0f00 	cmp.w	r2, #8388608	@ 0x800000
 8006242:	e7ba      	b.n	80061ba <HAL_RCCEx_GetPeriphCLKFreq+0x1a>
      }
    case RCC_DCKCFGR1_SAI2SEL_0: /* PLLI2S is the clock source for SAI2 */
      {
        /* Configure the PLLI2S division factor */
        /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006244:	685a      	ldr	r2, [r3, #4]
 8006246:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800624a:	685a      	ldr	r2, [r3, #4]
 800624c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006250:	d1d3      	bne.n	80061fa <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006252:	4b04      	ldr	r3, [pc, #16]	@ (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8006254:	e7d2      	b.n	80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8006256:	4805      	ldr	r0, [pc, #20]	@ (800626c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>)
 8006258:	4770      	bx	lr
    switch (saiclocksource)
 800625a:	2000      	movs	r0, #0
      }
    }
  }

  return frequency;
}
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	40023800 	.word	0x40023800
 8006264:	00f42400 	.word	0x00f42400
 8006268:	017d7840 	.word	0x017d7840
 800626c:	00bb8000 	.word	0x00bb8000

08006270 <SAI_InterruptFlag>:
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8006270:	2901      	cmp	r1, #1
  if (mode == SAI_MODE_IT)
  {
    tmpIT |= SAI_IT_FREQ;
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8006272:	6b01      	ldr	r1, [r0, #48]	@ 0x30
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8006274:	6842      	ldr	r2, [r0, #4]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8006276:	bf0c      	ite	eq
 8006278:	2309      	moveq	r3, #9
 800627a:	2301      	movne	r3, #1
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800627c:	2908      	cmp	r1, #8
 800627e:	d105      	bne.n	800628c <SAI_InterruptFlag+0x1c>
 8006280:	f022 0102 	bic.w	r1, r2, #2
 8006284:	2901      	cmp	r1, #1
  {
    tmpIT |= SAI_IT_CNRDY;
 8006286:	bf08      	it	eq
 8006288:	f043 0310 	orreq.w	r3, r3, #16
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800628c:	3a02      	subs	r2, #2
 800628e:	2a01      	cmp	r2, #1
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8006290:	bf94      	ite	ls
 8006292:	f043 0060 	orrls.w	r0, r3, #96	@ 0x60
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8006296:	f043 0004 	orrhi.w	r0, r3, #4
  }
  return tmpIT;
}
 800629a:	4770      	bx	lr

0800629c <SAI_Disable.isra.0>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800629c:	4b0c      	ldr	r3, [pc, #48]	@ (80062d0 <SAI_Disable.isra.0+0x34>)
 800629e:	f641 3258 	movw	r2, #7000	@ 0x1b58
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	fbb3 f3f2 	udiv	r3, r3, r2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80062a8:	6802      	ldr	r2, [r0, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 80062aa:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 80062ac:	6811      	ldr	r1, [r2, #0]
 80062ae:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 80062b2:	6011      	str	r1, [r2, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80062b4:	3b01      	subs	r3, #1
 80062b6:	d206      	bcs.n	80062c6 <SAI_Disable.isra.0+0x2a>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80062b8:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 80062bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062c0:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
      status = HAL_TIMEOUT;
      break;
 80062c4:	4770      	bx	lr
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80062c6:	6811      	ldr	r1, [r2, #0]
 80062c8:	03c9      	lsls	r1, r1, #15
 80062ca:	d4f3      	bmi.n	80062b4 <SAI_Disable.isra.0+0x18>

  return status;
}
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	200000a0 	.word	0x200000a0

080062d4 <HAL_SAI_MspInit>:
}
 80062d4:	4770      	bx	lr
	...

080062d8 <HAL_SAI_Init>:
{
 80062d8:	b570      	push	{r4, r5, r6, lr}
  if (hsai == NULL)
 80062da:	4604      	mov	r4, r0
 80062dc:	2800      	cmp	r0, #0
 80062de:	f000 80c8 	beq.w	8006472 <HAL_SAI_Init+0x19a>
  if (hsai->State == HAL_SAI_STATE_RESET)
 80062e2:	f890 307d 	ldrb.w	r3, [r0, #125]	@ 0x7d
 80062e6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80062ea:	b91b      	cbnz	r3, 80062f4 <HAL_SAI_Init+0x1c>
    hsai->Lock = HAL_UNLOCKED;
 80062ec:	f880 207c 	strb.w	r2, [r0, #124]	@ 0x7c
    HAL_SAI_MspInit(hsai);
 80062f0:	f7ff fff0 	bl	80062d4 <HAL_SAI_MspInit>
  hsai->State = HAL_SAI_STATE_BUSY;
 80062f4:	2302      	movs	r3, #2
  SAI_Disable(hsai);
 80062f6:	4620      	mov	r0, r4
  hsai->State = HAL_SAI_STATE_BUSY;
 80062f8:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
  SAI_Disable(hsai);
 80062fc:	f7ff ffce 	bl	800629c <SAI_Disable.isra.0>
  switch (hsai->Init.SynchroExt)
 8006300:	68e3      	ldr	r3, [r4, #12]
 8006302:	2b01      	cmp	r3, #1
 8006304:	f000 80a5 	beq.w	8006452 <HAL_SAI_Init+0x17a>
 8006308:	1e98      	subs	r0, r3, #2
 800630a:	4243      	negs	r3, r0
 800630c:	4143      	adcs	r3, r0
 800630e:	015b      	lsls	r3, r3, #5
  switch (hsai->Init.Synchro)
 8006310:	68a5      	ldr	r5, [r4, #8]
 8006312:	2d02      	cmp	r5, #2
 8006314:	f000 80a1 	beq.w	800645a <HAL_SAI_Init+0x182>
 8006318:	2d03      	cmp	r5, #3
 800631a:	f000 809c 	beq.w	8006456 <HAL_SAI_Init+0x17e>
 800631e:	1e69      	subs	r1, r5, #1
 8006320:	424d      	negs	r5, r1
 8006322:	414d      	adcs	r5, r1
 8006324:	02ad      	lsls	r5, r5, #10
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006326:	6822      	ldr	r2, [r4, #0]
 8006328:	4953      	ldr	r1, [pc, #332]	@ (8006478 <HAL_SAI_Init+0x1a0>)
 800632a:	4854      	ldr	r0, [pc, #336]	@ (800647c <HAL_SAI_Init+0x1a4>)
 800632c:	428a      	cmp	r2, r1
 800632e:	d003      	beq.n	8006338 <HAL_SAI_Init+0x60>
 8006330:	4e53      	ldr	r6, [pc, #332]	@ (8006480 <HAL_SAI_Init+0x1a8>)
 8006332:	42b2      	cmp	r2, r6
 8006334:	f040 8094 	bne.w	8006460 <HAL_SAI_Init+0x188>
    SAI1->GCR = tmpregisterGCR;
 8006338:	f8c0 3800 	str.w	r3, [r0, #2048]	@ 0x800
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800633c:	69e3      	ldr	r3, [r4, #28]
 800633e:	b33b      	cbz	r3, 8006390 <HAL_SAI_Init+0xb8>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8006340:	428a      	cmp	r2, r1
 8006342:	d003      	beq.n	800634c <HAL_SAI_Init+0x74>
 8006344:	4b4e      	ldr	r3, [pc, #312]	@ (8006480 <HAL_SAI_Init+0x1a8>)
 8006346:	429a      	cmp	r2, r3
 8006348:	f040 808d 	bne.w	8006466 <HAL_SAI_Init+0x18e>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800634c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8006350:	f7ff ff26 	bl	80061a0 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8006354:	6823      	ldr	r3, [r4, #0]
 8006356:	4a4b      	ldr	r2, [pc, #300]	@ (8006484 <HAL_SAI_Init+0x1ac>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d002      	beq.n	8006362 <HAL_SAI_Init+0x8a>
 800635c:	3220      	adds	r2, #32
 800635e:	4293      	cmp	r3, r2
 8006360:	d103      	bne.n	800636a <HAL_SAI_Init+0x92>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8006362:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8006366:	f7ff ff1b 	bl	80061a0 <HAL_RCCEx_GetPeriphCLKFreq>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800636a:	220a      	movs	r2, #10
 800636c:	69e3      	ldr	r3, [r4, #28]
 800636e:	4350      	muls	r0, r2
 8006370:	025b      	lsls	r3, r3, #9
 8006372:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
 8006376:	fbb0 f3f2 	udiv	r3, r0, r2
    if ((tmpval % 10) > 8)
 800637a:	fb02 0013 	mls	r0, r2, r3, r0
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800637e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
    if ((tmpval % 10) > 8)
 8006380:	2809      	cmp	r0, #9
      hsai->Init.Mckdiv += 1;
 8006382:	bf08      	it	eq
 8006384:	3301      	addeq	r3, #1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8006386:	2a04      	cmp	r2, #4
    hsai->Init.Mckdiv = tmpval / 10;
 8006388:	6223      	str	r3, [r4, #32]
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800638a:	bf04      	itt	eq
 800638c:	085b      	lsreq	r3, r3, #1
 800638e:	6223      	streq	r3, [r4, #32]
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006390:	6863      	ldr	r3, [r4, #4]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8006392:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006394:	f033 0202 	bics.w	r2, r3, #2
 8006398:	d167      	bne.n	800646a <HAL_SAI_Init+0x192>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800639a:	3901      	subs	r1, #1
 800639c:	bf18      	it	ne
 800639e:	2101      	movne	r1, #1
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80063a0:	6822      	ldr	r2, [r4, #0]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80063a2:	0249      	lsls	r1, r1, #9
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80063a4:	4838      	ldr	r0, [pc, #224]	@ (8006488 <HAL_SAI_Init+0x1b0>)
 80063a6:	6816      	ldr	r6, [r2, #0]
 80063a8:	4030      	ands	r0, r6
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80063aa:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 80063ac:	4333      	orrs	r3, r6
 80063ae:	6b66      	ldr	r6, [r4, #52]	@ 0x34
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80063b0:	6010      	str	r0, [r2, #0]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80063b2:	4333      	orrs	r3, r6
 80063b4:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80063b6:	6810      	ldr	r0, [r2, #0]
 80063b8:	4333      	orrs	r3, r6
 80063ba:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 80063bc:	4333      	orrs	r3, r6
 80063be:	6926      	ldr	r6, [r4, #16]
 80063c0:	4333      	orrs	r3, r6
 80063c2:	6966      	ldr	r6, [r4, #20]
 80063c4:	4333      	orrs	r3, r6
 80063c6:	4303      	orrs	r3, r0
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80063c8:	6a20      	ldr	r0, [r4, #32]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80063ca:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80063ce:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80063d0:	432b      	orrs	r3, r5
 80063d2:	430b      	orrs	r3, r1
 80063d4:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80063d6:	6853      	ldr	r3, [r2, #4]
 80063d8:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80063dc:	f023 030f 	bic.w	r3, r3, #15
 80063e0:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80063e2:	69a3      	ldr	r3, [r4, #24]
 80063e4:	6851      	ldr	r1, [r2, #4]
 80063e6:	4303      	orrs	r3, r0
 80063e8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80063ea:	4303      	orrs	r3, r0
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80063ec:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80063ee:	430b      	orrs	r3, r1
 80063f0:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80063f2:	4b26      	ldr	r3, [pc, #152]	@ (800648c <HAL_SAI_Init+0x1b4>)
 80063f4:	6891      	ldr	r1, [r2, #8]
 80063f6:	400b      	ands	r3, r1
 80063f8:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80063fa:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80063fc:	6891      	ldr	r1, [r2, #8]
 80063fe:	4303      	orrs	r3, r0
 8006400:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8006402:	4303      	orrs	r3, r0
 8006404:	430b      	orrs	r3, r1
 8006406:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8006408:	3901      	subs	r1, #1
 800640a:	430b      	orrs	r3, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800640c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800640e:	3901      	subs	r1, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8006410:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006414:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8006416:	68d3      	ldr	r3, [r2, #12]
 8006418:	f423 637d 	bic.w	r3, r3, #4048	@ 0xfd0
 800641c:	f023 030f 	bic.w	r3, r3, #15
 8006420:	041b      	lsls	r3, r3, #16
 8006422:	0c1b      	lsrs	r3, r3, #16
 8006424:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8006426:	68d1      	ldr	r1, [r2, #12]
 8006428:	e9d4 3015 	ldrd	r3, r0, [r4, #84]	@ 0x54
 800642c:	4303      	orrs	r3, r0
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800642e:	2000      	movs	r0, #0
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8006430:	430b      	orrs	r3, r1
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8006432:	6e21      	ldr	r1, [r4, #96]	@ 0x60
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8006434:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8006438:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 800643a:	3901      	subs	r1, #1
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800643c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006440:	60d3      	str	r3, [r2, #12]
  hsai->State = HAL_SAI_STATE_READY;
 8006442:	2301      	movs	r3, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006444:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  __HAL_UNLOCK(hsai);
 8006448:	f884 007c 	strb.w	r0, [r4, #124]	@ 0x7c
  hsai->State = HAL_SAI_STATE_READY;
 800644c:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
}
 8006450:	bd70      	pop	{r4, r5, r6, pc}
  switch (hsai->Init.SynchroExt)
 8006452:	2310      	movs	r3, #16
 8006454:	e75c      	b.n	8006310 <HAL_SAI_Init+0x38>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8006456:	f043 0301 	orr.w	r3, r3, #1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800645a:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 800645e:	e762      	b.n	8006326 <HAL_SAI_Init+0x4e>
    SAI2->GCR = tmpregisterGCR;
 8006460:	f8c0 3c00 	str.w	r3, [r0, #3072]	@ 0xc00
 8006464:	e76a      	b.n	800633c <HAL_SAI_Init+0x64>
    uint32_t freq = 0;
 8006466:	2000      	movs	r0, #0
 8006468:	e774      	b.n	8006354 <HAL_SAI_Init+0x7c>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800646a:	1e4a      	subs	r2, r1, #1
 800646c:	4251      	negs	r1, r2
 800646e:	4151      	adcs	r1, r2
 8006470:	e796      	b.n	80063a0 <HAL_SAI_Init+0xc8>
    return HAL_ERROR;
 8006472:	2001      	movs	r0, #1
 8006474:	e7ec      	b.n	8006450 <HAL_SAI_Init+0x178>
 8006476:	bf00      	nop
 8006478:	40015804 	.word	0x40015804
 800647c:	40015000 	.word	0x40015000
 8006480:	40015824 	.word	0x40015824
 8006484:	40015c04 	.word	0x40015c04
 8006488:	ff05c010 	.word	0xff05c010
 800648c:	fff88000 	.word	0xfff88000

08006490 <HAL_SAI_MspDeInit>:
__weak void HAL_SAI_MspDeInit(SAI_HandleTypeDef *hsai)
 8006490:	4770      	bx	lr

08006492 <HAL_SAI_DeInit>:
{
 8006492:	b570      	push	{r4, r5, r6, lr}
  if (hsai == NULL)
 8006494:	4605      	mov	r5, r0
 8006496:	b1c0      	cbz	r0, 80064ca <HAL_SAI_DeInit+0x38>
  hsai->State = HAL_SAI_STATE_BUSY;
 8006498:	2302      	movs	r3, #2
  hsai->Instance->IMR = 0;
 800649a:	6806      	ldr	r6, [r0, #0]
 800649c:	2400      	movs	r4, #0
  hsai->State = HAL_SAI_STATE_BUSY;
 800649e:	f880 307d 	strb.w	r3, [r0, #125]	@ 0x7d
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80064a2:	f04f 33ff 	mov.w	r3, #4294967295
  hsai->Instance->IMR = 0;
 80064a6:	6134      	str	r4, [r6, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80064a8:	61b3      	str	r3, [r6, #24]
  SAI_Disable(hsai);
 80064aa:	f7ff fef7 	bl	800629c <SAI_Disable.isra.0>
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80064ae:	6873      	ldr	r3, [r6, #4]
 80064b0:	f043 0308 	orr.w	r3, r3, #8
 80064b4:	6073      	str	r3, [r6, #4]
  HAL_SAI_MspDeInit(hsai);
 80064b6:	f7ff ffeb 	bl	8006490 <HAL_SAI_MspDeInit>
  return HAL_OK;
 80064ba:	4620      	mov	r0, r4
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80064bc:	f8c5 4080 	str.w	r4, [r5, #128]	@ 0x80
  __HAL_UNLOCK(hsai);
 80064c0:	f885 407c 	strb.w	r4, [r5, #124]	@ 0x7c
  hsai->State = HAL_SAI_STATE_RESET;
 80064c4:	f885 407d 	strb.w	r4, [r5, #125]	@ 0x7d
}
 80064c8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80064ca:	2001      	movs	r0, #1
 80064cc:	e7fc      	b.n	80064c8 <HAL_SAI_DeInit+0x36>

080064ce <HAL_SAI_DMAPause>:
  __HAL_LOCK(hsai);
 80064ce:	f890 207c 	ldrb.w	r2, [r0, #124]	@ 0x7c
{
 80064d2:	4603      	mov	r3, r0
  __HAL_LOCK(hsai);
 80064d4:	2a01      	cmp	r2, #1
 80064d6:	d008      	beq.n	80064ea <HAL_SAI_DMAPause+0x1c>
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80064d8:	6801      	ldr	r1, [r0, #0]
  __HAL_UNLOCK(hsai);
 80064da:	2000      	movs	r0, #0
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80064dc:	680a      	ldr	r2, [r1, #0]
 80064de:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80064e2:	600a      	str	r2, [r1, #0]
  __HAL_UNLOCK(hsai);
 80064e4:	f883 007c 	strb.w	r0, [r3, #124]	@ 0x7c
  return HAL_OK;
 80064e8:	4770      	bx	lr
  __HAL_LOCK(hsai);
 80064ea:	2002      	movs	r0, #2
}
 80064ec:	4770      	bx	lr

080064ee <HAL_SAI_DMAResume>:
  __HAL_LOCK(hsai);
 80064ee:	f890 207c 	ldrb.w	r2, [r0, #124]	@ 0x7c
{
 80064f2:	4603      	mov	r3, r0
  __HAL_LOCK(hsai);
 80064f4:	2a01      	cmp	r2, #1
 80064f6:	d00f      	beq.n	8006518 <HAL_SAI_DMAResume+0x2a>
  hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80064f8:	6802      	ldr	r2, [r0, #0]
 80064fa:	6811      	ldr	r1, [r2, #0]
 80064fc:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8006500:	6011      	str	r1, [r2, #0]
  if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8006502:	6811      	ldr	r1, [r2, #0]
 8006504:	03c9      	lsls	r1, r1, #15
 8006506:	d403      	bmi.n	8006510 <HAL_SAI_DMAResume+0x22>
    __HAL_SAI_ENABLE(hsai);
 8006508:	6811      	ldr	r1, [r2, #0]
 800650a:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800650e:	6011      	str	r1, [r2, #0]
  __HAL_UNLOCK(hsai);
 8006510:	2000      	movs	r0, #0
 8006512:	f883 007c 	strb.w	r0, [r3, #124]	@ 0x7c
  return HAL_OK;
 8006516:	4770      	bx	lr
  __HAL_LOCK(hsai);
 8006518:	2002      	movs	r0, #2
}
 800651a:	4770      	bx	lr

0800651c <HAL_SAI_DMAStop>:
{
 800651c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hsai);
 800651e:	f890 307c 	ldrb.w	r3, [r0, #124]	@ 0x7c
{
 8006522:	4604      	mov	r4, r0
  __HAL_LOCK(hsai);
 8006524:	2b01      	cmp	r3, #1
 8006526:	d040      	beq.n	80065aa <HAL_SAI_DMAStop+0x8e>
 8006528:	2501      	movs	r5, #1
 800652a:	f880 507c 	strb.w	r5, [r0, #124]	@ 0x7c
  SAI_Disable(hsai);
 800652e:	f7ff feb5 	bl	800629c <SAI_Disable.isra.0>
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006532:	6802      	ldr	r2, [r0, #0]
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8006534:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8006536:	6813      	ldr	r3, [r2, #0]
 8006538:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800653c:	6013      	str	r3, [r2, #0]
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 800653e:	bb08      	cbnz	r0, 8006584 <HAL_SAI_DMAStop+0x68>
  HAL_StatusTypeDef status = HAL_OK;
 8006540:	2500      	movs	r5, #0
  if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 8006542:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8006544:	b188      	cbz	r0, 800656a <HAL_SAI_DMAStop+0x4e>
 8006546:	f894 307d 	ldrb.w	r3, [r4, #125]	@ 0x7d
 800654a:	2b22      	cmp	r3, #34	@ 0x22
 800654c:	d10d      	bne.n	800656a <HAL_SAI_DMAStop+0x4e>
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 800654e:	f7fd fbda 	bl	8003d06 <HAL_DMA_Abort>
 8006552:	b150      	cbz	r0, 800656a <HAL_SAI_DMAStop+0x4e>
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8006554:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8006556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006558:	2b80      	cmp	r3, #128	@ 0x80
 800655a:	d006      	beq.n	800656a <HAL_SAI_DMAStop+0x4e>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800655c:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
        status = HAL_ERROR;
 8006560:	2501      	movs	r5, #1
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8006562:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006566:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800656a:	6822      	ldr	r2, [r4, #0]
 800656c:	6853      	ldr	r3, [r2, #4]
 800656e:	f043 0308 	orr.w	r3, r3, #8
 8006572:	6053      	str	r3, [r2, #4]
  hsai->State = HAL_SAI_STATE_READY;
 8006574:	2301      	movs	r3, #1
 8006576:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
  __HAL_UNLOCK(hsai);
 800657a:	2300      	movs	r3, #0
 800657c:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
}
 8006580:	4628      	mov	r0, r5
 8006582:	bd38      	pop	{r3, r4, r5, pc}
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8006584:	f894 307d 	ldrb.w	r3, [r4, #125]	@ 0x7d
 8006588:	2b12      	cmp	r3, #18
 800658a:	d1d9      	bne.n	8006540 <HAL_SAI_DMAStop+0x24>
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 800658c:	f7fd fbbb 	bl	8003d06 <HAL_DMA_Abort>
 8006590:	2800      	cmp	r0, #0
 8006592:	d0d5      	beq.n	8006540 <HAL_SAI_DMAStop+0x24>
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8006594:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8006596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006598:	2b80      	cmp	r3, #128	@ 0x80
 800659a:	d0d1      	beq.n	8006540 <HAL_SAI_DMAStop+0x24>
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800659c:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80065a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065a4:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
 80065a8:	e7cb      	b.n	8006542 <HAL_SAI_DMAStop+0x26>
  __HAL_LOCK(hsai);
 80065aa:	2502      	movs	r5, #2
 80065ac:	e7e8      	b.n	8006580 <HAL_SAI_DMAStop+0x64>
	...

080065b0 <HAL_SAI_Transmit_DMA>:
{
 80065b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065b4:	460e      	mov	r6, r1
 80065b6:	4604      	mov	r4, r0
 80065b8:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 80065ba:	f7fd f9cf 	bl	800395c <HAL_GetTick>
 80065be:	4607      	mov	r7, r0
  if ((pData == NULL) || (Size == 0))
 80065c0:	b34e      	cbz	r6, 8006616 <HAL_SAI_Transmit_DMA+0x66>
 80065c2:	b345      	cbz	r5, 8006616 <HAL_SAI_Transmit_DMA+0x66>
  if (hsai->State == HAL_SAI_STATE_READY)
 80065c4:	f894 307d 	ldrb.w	r3, [r4, #125]	@ 0x7d
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	b2da      	uxtb	r2, r3
 80065cc:	d153      	bne.n	8006676 <HAL_SAI_Transmit_DMA+0xc6>
    __HAL_LOCK(hsai);
 80065ce:	f894 307c 	ldrb.w	r3, [r4, #124]	@ 0x7c
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d04f      	beq.n	8006676 <HAL_SAI_Transmit_DMA+0xc6>
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80065d6:	f04f 0800 	mov.w	r8, #0
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80065da:	2312      	movs	r3, #18
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80065dc:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80065de:	4631      	mov	r1, r6
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80065e0:	f8c4 8080 	str.w	r8, [r4, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80065e4:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80065e8:	4b24      	ldr	r3, [pc, #144]	@ (800667c <HAL_SAI_Transmit_DMA+0xcc>)
    __HAL_LOCK(hsai);
 80065ea:	f884 207c 	strb.w	r2, [r4, #124]	@ 0x7c
    hsai->XferSize = Size;
 80065ee:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
    hsai->XferCount = Size;
 80065f2:	f8a4 506a 	strh.w	r5, [r4, #106]	@ 0x6a
    hsai->pBuffPtr = pData;
 80065f6:	6666      	str	r6, [r4, #100]	@ 0x64
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 80065f8:	6403      	str	r3, [r0, #64]	@ 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80065fa:	4b21      	ldr	r3, [pc, #132]	@ (8006680 <HAL_SAI_Transmit_DMA+0xd0>)
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80065fc:	6822      	ldr	r2, [r4, #0]
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80065fe:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8006600:	4b20      	ldr	r3, [pc, #128]	@ (8006684 <HAL_SAI_Transmit_DMA+0xd4>)
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8006602:	321c      	adds	r2, #28
    hsai->hdmatx->XferAbortCallback = NULL;
 8006604:	e9c0 3813 	strd	r3, r8, [r0, #76]	@ 0x4c
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8006608:	462b      	mov	r3, r5
 800660a:	f7fd fb3f 	bl	8003c8c <HAL_DMA_Start_IT>
 800660e:	4605      	mov	r5, r0
 8006610:	b128      	cbz	r0, 800661e <HAL_SAI_Transmit_DMA+0x6e>
      __HAL_UNLOCK(hsai);
 8006612:	f884 807c 	strb.w	r8, [r4, #124]	@ 0x7c
    return  HAL_ERROR;
 8006616:	2501      	movs	r5, #1
}
 8006618:	4628      	mov	r0, r5
 800661a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800661e:	4601      	mov	r1, r0
 8006620:	4620      	mov	r0, r4
 8006622:	f7ff fe25 	bl	8006270 <SAI_InterruptFlag>
 8006626:	6823      	ldr	r3, [r4, #0]
 8006628:	691a      	ldr	r2, [r3, #16]
 800662a:	4302      	orrs	r2, r0
 800662c:	611a      	str	r2, [r3, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8006634:	601a      	str	r2, [r3, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8006636:	6823      	ldr	r3, [r4, #0]
 8006638:	695e      	ldr	r6, [r3, #20]
 800663a:	f416 26e0 	ands.w	r6, r6, #458752	@ 0x70000
 800663e:	d00a      	beq.n	8006656 <HAL_SAI_Transmit_DMA+0xa6>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	03d2      	lsls	r2, r2, #15
 8006644:	d403      	bmi.n	800664e <HAL_SAI_Transmit_DMA+0x9e>
      __HAL_SAI_ENABLE(hsai);
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800664c:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 800664e:	2300      	movs	r3, #0
 8006650:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 8006654:	e7e0      	b.n	8006618 <HAL_SAI_Transmit_DMA+0x68>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8006656:	f7fd f981 	bl	800395c <HAL_GetTick>
 800665a:	1bc0      	subs	r0, r0, r7
 800665c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006660:	d9e9      	bls.n	8006636 <HAL_SAI_Transmit_DMA+0x86>
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006662:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
        return HAL_TIMEOUT;
 8006666:	2503      	movs	r5, #3
        __HAL_UNLOCK(hsai);
 8006668:	f884 607c 	strb.w	r6, [r4, #124]	@ 0x7c
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800666c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006670:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        return HAL_TIMEOUT;
 8006674:	e7d0      	b.n	8006618 <HAL_SAI_Transmit_DMA+0x68>
    __HAL_LOCK(hsai);
 8006676:	2502      	movs	r5, #2
 8006678:	e7ce      	b.n	8006618 <HAL_SAI_Transmit_DMA+0x68>
 800667a:	bf00      	nop
 800667c:	0800675d 	.word	0x0800675d
 8006680:	08006725 	.word	0x08006725
 8006684:	080067a9 	.word	0x080067a9

08006688 <HAL_SAI_Receive_DMA>:
{
 8006688:	4613      	mov	r3, r2
  if ((pData == NULL) || (Size == 0))
 800668a:	460a      	mov	r2, r1
{
 800668c:	b570      	push	{r4, r5, r6, lr}
 800668e:	4604      	mov	r4, r0
  if ((pData == NULL) || (Size == 0))
 8006690:	b331      	cbz	r1, 80066e0 <HAL_SAI_Receive_DMA+0x58>
 8006692:	b32b      	cbz	r3, 80066e0 <HAL_SAI_Receive_DMA+0x58>
  if (hsai->State == HAL_SAI_STATE_READY)
 8006694:	f890 107d 	ldrb.w	r1, [r0, #125]	@ 0x7d
 8006698:	2901      	cmp	r1, #1
 800669a:	b2c8      	uxtb	r0, r1
 800669c:	d13a      	bne.n	8006714 <HAL_SAI_Receive_DMA+0x8c>
    __HAL_LOCK(hsai);
 800669e:	f894 107c 	ldrb.w	r1, [r4, #124]	@ 0x7c
 80066a2:	2901      	cmp	r1, #1
 80066a4:	d036      	beq.n	8006714 <HAL_SAI_Receive_DMA+0x8c>
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80066a6:	2600      	movs	r6, #0
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 80066a8:	2122      	movs	r1, #34	@ 0x22
    __HAL_LOCK(hsai);
 80066aa:	f884 007c 	strb.w	r0, [r4, #124]	@ 0x7c
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80066ae:	f8c4 6080 	str.w	r6, [r4, #128]	@ 0x80
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80066b2:	6f20      	ldr	r0, [r4, #112]	@ 0x70
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 80066b4:	f884 107d 	strb.w	r1, [r4, #125]	@ 0x7d
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80066b8:	4917      	ldr	r1, [pc, #92]	@ (8006718 <HAL_SAI_Receive_DMA+0x90>)
    hsai->pBuffPtr = pData;
 80066ba:	6662      	str	r2, [r4, #100]	@ 0x64
    hsai->XferSize = Size;
 80066bc:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
    hsai->XferCount = Size;
 80066c0:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80066c4:	6401      	str	r1, [r0, #64]	@ 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 80066c6:	4915      	ldr	r1, [pc, #84]	@ (800671c <HAL_SAI_Receive_DMA+0x94>)
 80066c8:	63c1      	str	r1, [r0, #60]	@ 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 80066ca:	4915      	ldr	r1, [pc, #84]	@ (8006720 <HAL_SAI_Receive_DMA+0x98>)
    hsai->hdmarx->XferAbortCallback = NULL;
 80066cc:	e9c0 1613 	strd	r1, r6, [r0, #76]	@ 0x4c
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 80066d0:	6821      	ldr	r1, [r4, #0]
 80066d2:	311c      	adds	r1, #28
 80066d4:	f7fd fada 	bl	8003c8c <HAL_DMA_Start_IT>
 80066d8:	4605      	mov	r5, r0
 80066da:	b120      	cbz	r0, 80066e6 <HAL_SAI_Receive_DMA+0x5e>
      __HAL_UNLOCK(hsai);
 80066dc:	f884 607c 	strb.w	r6, [r4, #124]	@ 0x7c
    return  HAL_ERROR;
 80066e0:	2501      	movs	r5, #1
}
 80066e2:	4628      	mov	r0, r5
 80066e4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80066e6:	4601      	mov	r1, r0
 80066e8:	4620      	mov	r0, r4
 80066ea:	f7ff fdc1 	bl	8006270 <SAI_InterruptFlag>
 80066ee:	6823      	ldr	r3, [r4, #0]
 80066f0:	691a      	ldr	r2, [r3, #16]
 80066f2:	4302      	orrs	r2, r0
 80066f4:	611a      	str	r2, [r3, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80066fc:	601a      	str	r2, [r3, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	03d2      	lsls	r2, r2, #15
 8006702:	d403      	bmi.n	800670c <HAL_SAI_Receive_DMA+0x84>
      __HAL_SAI_ENABLE(hsai);
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800670a:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 800670c:	2300      	movs	r3, #0
 800670e:	f884 307c 	strb.w	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 8006712:	e7e6      	b.n	80066e2 <HAL_SAI_Receive_DMA+0x5a>
    __HAL_LOCK(hsai);
 8006714:	2502      	movs	r5, #2
 8006716:	e7e4      	b.n	80066e2 <HAL_SAI_Receive_DMA+0x5a>
 8006718:	0800679f 	.word	0x0800679f
 800671c:	08006767 	.word	0x08006767
 8006720:	080067a9 	.word	0x080067a9

08006724 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8006724:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006726:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006728:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800672a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800672e:	d011      	beq.n	8006754 <SAI_DMATxCplt+0x30>
  {
    hsai->XferCount = 0;

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8006730:	6825      	ldr	r5, [r4, #0]
    hsai->XferCount = 0;
 8006732:	2100      	movs	r1, #0

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006734:	4620      	mov	r0, r4
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8006736:	682b      	ldr	r3, [r5, #0]
    hsai->XferCount = 0;
 8006738:	f8a4 106a 	strh.w	r1, [r4, #106]	@ 0x6a
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800673c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006740:	602b      	str	r3, [r5, #0]
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006742:	f7ff fd95 	bl	8006270 <SAI_InterruptFlag>
 8006746:	692b      	ldr	r3, [r5, #16]
 8006748:	ea23 0300 	bic.w	r3, r3, r0
 800674c:	612b      	str	r3, [r5, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800674e:	2301      	movs	r3, #1
 8006750:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8006754:	4620      	mov	r0, r4
 8006756:	f7fa ff7f 	bl	8001658 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800675a:	bd38      	pop	{r3, r4, r5, pc}

0800675c <SAI_DMATxHalfCplt>:
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800675c:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 800675e:	b508      	push	{r3, lr}
  HAL_SAI_TxHalfCpltCallback(hsai);
 8006760:	f7fa ff7e 	bl	8001660 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8006764:	bd08      	pop	{r3, pc}

08006766 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8006766:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006768:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800676a:	6b84      	ldr	r4, [r0, #56]	@ 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800676c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006770:	d011      	beq.n	8006796 <SAI_DMARxCplt+0x30>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8006772:	6825      	ldr	r5, [r4, #0]
    hsai->XferCount = 0;
 8006774:	2100      	movs	r1, #0

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006776:	4620      	mov	r0, r4
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8006778:	682b      	ldr	r3, [r5, #0]
 800677a:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800677e:	602b      	str	r3, [r5, #0]
    hsai->XferCount = 0;
 8006780:	f8a4 106a 	strh.w	r1, [r4, #106]	@ 0x6a
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8006784:	f7ff fd74 	bl	8006270 <SAI_InterruptFlag>
 8006788:	692b      	ldr	r3, [r5, #16]
 800678a:	ea23 0300 	bic.w	r3, r3, r0
 800678e:	612b      	str	r3, [r5, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8006790:	2301      	movs	r3, #1
 8006792:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8006796:	4620      	mov	r0, r4
 8006798:	f7fb f920 	bl	80019dc <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800679c:	bd38      	pop	{r3, r4, r5, pc}

0800679e <SAI_DMARxHalfCplt>:
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800679e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 80067a0:	b508      	push	{r3, lr}
  HAL_SAI_RxHalfCpltCallback(hsai);
 80067a2:	f7fb f91f 	bl	80019e4 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80067a6:	bd08      	pop	{r3, pc}

080067a8 <SAI_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067a8:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 80067aa:	b508      	push	{r3, lr}

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80067ac:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 80067b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067b4:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 80067b8:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80067ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d003      	beq.n	80067c8 <SAI_DMAError+0x20>
 80067c0:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 80067c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d10c      	bne.n	80067e2 <SAI_DMAError+0x3a>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80067c8:	6802      	ldr	r2, [r0, #0]
 80067ca:	6813      	ldr	r3, [r2, #0]
 80067cc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80067d0:	6013      	str	r3, [r2, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 80067d2:	f7ff fd63 	bl	800629c <SAI_Disable.isra.0>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80067d6:	2301      	movs	r3, #1
 80067d8:	f880 307d 	strb.w	r3, [r0, #125]	@ 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80067dc:	2300      	movs	r3, #0
 80067de:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80067e2:	f7fb f903 	bl	80019ec <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80067e6:	bd08      	pop	{r3, pc}

080067e8 <HAL_SAI_GetState>:
  return hsai->State;
 80067e8:	f890 007d 	ldrb.w	r0, [r0, #125]	@ 0x7d
}
 80067ec:	4770      	bx	lr

080067ee <SD_FindSCR.constprop.0>:
  * @brief  Finds the SD card SCR register value.
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
 80067ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067f0:	4605      	mov	r5, r0
 80067f2:	b089      	sub	sp, #36	@ 0x24
 80067f4:	460e      	mov	r6, r1
{
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80067f6:	f7fd f8b1 	bl	800395c <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 80067fa:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 80067fc:	4607      	mov	r7, r0
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80067fe:	2108      	movs	r1, #8
 8006800:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2U] = {0U, 0U};
 8006802:	e9cd 3300 	strd	r3, r3, [sp]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006806:	f000 ff9f 	bl	8007748 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800680a:	4604      	mov	r4, r0
 800680c:	b9d8      	cbnz	r0, 8006846 <SD_FindSCR.constprop.0+0x58>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800680e:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 8006810:	6828      	ldr	r0, [r5, #0]
 8006812:	0409      	lsls	r1, r1, #16
 8006814:	f001 f893 	bl	800793e <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006818:	4604      	mov	r4, r0
 800681a:	b9a0      	cbnz	r0, 8006846 <SD_FindSCR.constprop.0+0x58>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
  config.DataLength    = 8U;
 800681c:	f04f 32ff 	mov.w	r2, #4294967295
 8006820:	2308      	movs	r3, #8
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006822:	2130      	movs	r1, #48	@ 0x30
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006824:	9006      	str	r0, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006826:	6828      	ldr	r0, [r5, #0]
  config.DataLength    = 8U;
 8006828:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800682c:	2302      	movs	r3, #2
 800682e:	e9cd 1304 	strd	r1, r3, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006832:	2301      	movs	r3, #1
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006834:	a902      	add	r1, sp, #8
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006836:	9307      	str	r3, [sp, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006838:	f000 febf 	bl	80075ba <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800683c:	6828      	ldr	r0, [r5, #0]
 800683e:	f001 f8b0 	bl	80079a2 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006842:	4604      	mov	r4, r0
 8006844:	b190      	cbz	r0, 800686c <SD_FindSCR.constprop.0+0x7e>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8006846:	4620      	mov	r0, r4
 8006848:	b009      	add	sp, #36	@ 0x24
 800684a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800684c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800684e:	029b      	lsls	r3, r3, #10
 8006850:	d512      	bpl.n	8006878 <SD_FindSCR.constprop.0+0x8a>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8006852:	f000 fe8c 	bl	800756e <SDMMC_ReadFIFO>
 8006856:	ab08      	add	r3, sp, #32
 8006858:	eb03 0384 	add.w	r3, r3, r4, lsl #2
      index++;
 800685c:	3401      	adds	r4, #1
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800685e:	f843 0c20 	str.w	r0, [r3, #-32]
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006862:	f7fd f87b 	bl	800395c <HAL_GetTick>
 8006866:	1bc0      	subs	r0, r0, r7
 8006868:	3001      	adds	r0, #1
 800686a:	d023      	beq.n	80068b4 <SD_FindSCR.constprop.0+0xc6>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800686c:	6828      	ldr	r0, [r5, #0]
 800686e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006870:	f013 0f2a 	tst.w	r3, #42	@ 0x2a
 8006874:	d0ea      	beq.n	800684c <SD_FindSCR.constprop.0+0x5e>
 8006876:	e002      	b.n	800687e <SD_FindSCR.constprop.0+0x90>
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8006878:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800687a:	0499      	lsls	r1, r3, #18
 800687c:	d4f1      	bmi.n	8006862 <SD_FindSCR.constprop.0+0x74>
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800687e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006880:	071a      	lsls	r2, r3, #28
 8006882:	d502      	bpl.n	800688a <SD_FindSCR.constprop.0+0x9c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006884:	2408      	movs	r4, #8
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006886:	6384      	str	r4, [r0, #56]	@ 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8006888:	e7dd      	b.n	8006846 <SD_FindSCR.constprop.0+0x58>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800688a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800688c:	079b      	lsls	r3, r3, #30
 800688e:	d501      	bpl.n	8006894 <SD_FindSCR.constprop.0+0xa6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006890:	2402      	movs	r4, #2
 8006892:	e7f8      	b.n	8006886 <SD_FindSCR.constprop.0+0x98>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006894:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8006896:	f014 0420 	ands.w	r4, r4, #32
 800689a:	d001      	beq.n	80068a0 <SD_FindSCR.constprop.0+0xb2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800689c:	2420      	movs	r4, #32
 800689e:	e7f2      	b.n	8006886 <SD_FindSCR.constprop.0+0x98>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80068a0:	f240 533a 	movw	r3, #1338	@ 0x53a
 80068a4:	6383      	str	r3, [r0, #56]	@ 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80068a6:	9b01      	ldr	r3, [sp, #4]
 80068a8:	ba1b      	rev	r3, r3
 80068aa:	6033      	str	r3, [r6, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80068ac:	9b00      	ldr	r3, [sp, #0]
 80068ae:	ba1b      	rev	r3, r3
 80068b0:	6073      	str	r3, [r6, #4]
  return HAL_SD_ERROR_NONE;
 80068b2:	e7c8      	b.n	8006846 <SD_FindSCR.constprop.0+0x58>
      return HAL_SD_ERROR_TIMEOUT;
 80068b4:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 80068b8:	e7c5      	b.n	8006846 <SD_FindSCR.constprop.0+0x58>

080068ba <HAL_SD_MspInit>:
}
 80068ba:	4770      	bx	lr

080068bc <HAL_SD_ReadBlocks>:
{
 80068bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068c0:	460d      	mov	r5, r1
 80068c2:	b087      	sub	sp, #28
 80068c4:	4604      	mov	r4, r0
 80068c6:	4616      	mov	r6, r2
 80068c8:	4699      	mov	r9, r3
 80068ca:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 80068ce:	f7fd f845 	bl	800395c <HAL_GetTick>
 80068d2:	4607      	mov	r7, r0
  if(NULL == pData)
 80068d4:	b93d      	cbnz	r5, 80068e6 <HAL_SD_ReadBlocks+0x2a>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80068d6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80068d8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80068dc:	63a3      	str	r3, [r4, #56]	@ 0x38
    return HAL_ERROR;
 80068de:	2001      	movs	r0, #1
}
 80068e0:	b007      	add	sp, #28
 80068e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 80068e6:	f894 3034 	ldrb.w	r3, [r4, #52]	@ 0x34
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	f040 80d7 	bne.w	8006a9e <HAL_SD_ReadBlocks+0x1e2>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80068f0:	eb06 0309 	add.w	r3, r6, r9
 80068f4:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80068f6:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80068f8:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80068fa:	63a1      	str	r1, [r4, #56]	@ 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80068fc:	d903      	bls.n	8006906 <HAL_SD_ReadBlocks+0x4a>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80068fe:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006900:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006904:	e7ea      	b.n	80068dc <HAL_SD_ReadBlocks+0x20>
    hsd->State = HAL_SD_STATE_BUSY;
 8006906:	2303      	movs	r3, #3
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006908:	f04f 0b02 	mov.w	fp, #2
    hsd->Instance->DCTRL = 0U;
 800690c:	6820      	ldr	r0, [r4, #0]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800690e:	f04f 0a01 	mov.w	sl, #1
    hsd->State = HAL_SD_STATE_BUSY;
 8006912:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006916:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    hsd->Instance->DCTRL = 0U;
 8006918:	62c1      	str	r1, [r0, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800691a:	4669      	mov	r1, sp
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800691c:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800691e:	f04f 33ff 	mov.w	r3, #4294967295
 8006922:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006924:	ea4f 2349 	mov.w	r3, r9, lsl #9
      add *= 512U;
 8006928:	bf18      	it	ne
 800692a:	0276      	lslne	r6, r6, #9
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800692c:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800692e:	2390      	movs	r3, #144	@ 0x90
 8006930:	e9cd 3b02 	strd	r3, fp, [sp, #8]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8006934:	2300      	movs	r3, #0
 8006936:	e9cd 3a04 	strd	r3, sl, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800693a:	f000 fe3e 	bl	80075ba <SDMMC_ConfigData>
    if(NumberOfBlocks > 1U)
 800693e:	45d1      	cmp	r9, sl
 8006940:	d912      	bls.n	8006968 <HAL_SD_ReadBlocks+0xac>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006942:	4631      	mov	r1, r6
 8006944:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006946:	f8c4 b030 	str.w	fp, [r4, #48]	@ 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800694a:	f000 ff2f 	bl	80077ac <SDMMC_CmdReadMultiBlock>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800694e:	6823      	ldr	r3, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006950:	b188      	cbz	r0, 8006976 <HAL_SD_ReadBlocks+0xba>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006952:	4a55      	ldr	r2, [pc, #340]	@ (8006aa8 <HAL_SD_ReadBlocks+0x1ec>)
 8006954:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8006956:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006958:	4303      	orrs	r3, r0
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800695a:	63a3      	str	r3, [r4, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800695c:	2301      	movs	r3, #1
 800695e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006962:	2300      	movs	r3, #0
 8006964:	6323      	str	r3, [r4, #48]	@ 0x30
        return HAL_ERROR;
 8006966:	e7ba      	b.n	80068de <HAL_SD_ReadBlocks+0x22>
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006968:	4631      	mov	r1, r6
 800696a:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800696c:	f8c4 a030 	str.w	sl, [r4, #48]	@ 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006970:	f000 ff03 	bl	800777a <SDMMC_CmdReadSingleBlock>
 8006974:	e7eb      	b.n	800694e <HAL_SD_ReadBlocks+0x92>
    dataremaining = config.DataLength;
 8006976:	9e01      	ldr	r6, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006978:	6820      	ldr	r0, [r4, #0]
 800697a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800697c:	f413 7f95 	tst.w	r3, #298	@ 0x12a
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8006980:	6b43      	ldr	r3, [r0, #52]	@ 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006982:	d00c      	beq.n	800699e <HAL_SD_ReadBlocks+0xe2>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006984:	05db      	lsls	r3, r3, #23
 8006986:	d538      	bpl.n	80069fa <HAL_SD_ReadBlocks+0x13e>
 8006988:	f1b9 0f01 	cmp.w	r9, #1
 800698c:	d935      	bls.n	80069fa <HAL_SD_ReadBlocks+0x13e>
      if(hsd->SdCard.CardType != CARD_SECURED)
 800698e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8006990:	2b03      	cmp	r3, #3
 8006992:	d032      	beq.n	80069fa <HAL_SD_ReadBlocks+0x13e>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006994:	f000 ffa0 	bl	80078d8 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8006998:	b378      	cbz	r0, 80069fa <HAL_SD_ReadBlocks+0x13e>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800699a:	6823      	ldr	r3, [r4, #0]
 800699c:	e7d9      	b.n	8006952 <HAL_SD_ReadBlocks+0x96>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800699e:	041a      	lsls	r2, r3, #16
 80069a0:	d518      	bpl.n	80069d4 <HAL_SD_ReadBlocks+0x118>
 80069a2:	b1be      	cbz	r6, 80069d4 <HAL_SD_ReadBlocks+0x118>
 80069a4:	f105 0a04 	add.w	sl, r5, #4
 80069a8:	f105 0b24 	add.w	fp, r5, #36	@ 0x24
          data = SDMMC_ReadFIFO(hsd->Instance);
 80069ac:	6820      	ldr	r0, [r4, #0]
        for(count = 0U; count < 8U; count++)
 80069ae:	f10a 0a04 	add.w	sl, sl, #4
          data = SDMMC_ReadFIFO(hsd->Instance);
 80069b2:	f000 fddc 	bl	800756e <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 80069b6:	f80a 0c08 	strb.w	r0, [sl, #-8]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80069ba:	0a03      	lsrs	r3, r0, #8
 80069bc:	f80a 3c07 	strb.w	r3, [sl, #-7]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80069c0:	0c03      	lsrs	r3, r0, #16
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80069c2:	0e00      	lsrs	r0, r0, #24
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80069c4:	f80a 3c06 	strb.w	r3, [sl, #-6]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80069c8:	f80a 0c05 	strb.w	r0, [sl, #-5]
        for(count = 0U; count < 8U; count++)
 80069cc:	45da      	cmp	sl, fp
 80069ce:	d1ed      	bne.n	80069ac <HAL_SD_ReadBlocks+0xf0>
          tempbuff++;
 80069d0:	3520      	adds	r5, #32
          dataremaining--;
 80069d2:	3e20      	subs	r6, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80069d4:	f7fc ffc2 	bl	800395c <HAL_GetTick>
 80069d8:	1bc0      	subs	r0, r0, r7
 80069da:	4540      	cmp	r0, r8
 80069dc:	d3cc      	bcc.n	8006978 <HAL_SD_ReadBlocks+0xbc>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80069de:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
 80069e0:	2003      	movs	r0, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80069e2:	4a31      	ldr	r2, [pc, #196]	@ (8006aa8 <HAL_SD_ReadBlocks+0x1ec>)
 80069e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80069e6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80069e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80069ec:	63a3      	str	r3, [r4, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80069ee:	2301      	movs	r3, #1
 80069f0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80069f4:	2300      	movs	r3, #0
 80069f6:	6323      	str	r3, [r4, #48]	@ 0x30
        return HAL_TIMEOUT;
 80069f8:	e772      	b.n	80068e0 <HAL_SD_ReadBlocks+0x24>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80069fa:	6823      	ldr	r3, [r4, #0]
 80069fc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80069fe:	f011 0108 	ands.w	r1, r1, #8
 8006a02:	d005      	beq.n	8006a10 <HAL_SD_ReadBlocks+0x154>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a04:	4a28      	ldr	r2, [pc, #160]	@ (8006aa8 <HAL_SD_ReadBlocks+0x1ec>)
 8006a06:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006a08:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006a0a:	f043 0308 	orr.w	r3, r3, #8
 8006a0e:	e7a4      	b.n	800695a <HAL_SD_ReadBlocks+0x9e>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006a10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a12:	f012 0202 	ands.w	r2, r2, #2
 8006a16:	d00a      	beq.n	8006a2e <HAL_SD_ReadBlocks+0x172>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a18:	4a23      	ldr	r2, [pc, #140]	@ (8006aa8 <HAL_SD_ReadBlocks+0x1ec>)
 8006a1a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006a1c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006a1e:	f043 0302 	orr.w	r3, r3, #2
 8006a22:	63a3      	str	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006a24:	2301      	movs	r3, #1
 8006a26:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006a2a:	6321      	str	r1, [r4, #48]	@ 0x30
      return HAL_ERROR;
 8006a2c:	e757      	b.n	80068de <HAL_SD_ReadBlocks+0x22>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006a2e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006a30:	0689      	lsls	r1, r1, #26
 8006a32:	d525      	bpl.n	8006a80 <HAL_SD_ReadBlocks+0x1c4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a34:	491c      	ldr	r1, [pc, #112]	@ (8006aa8 <HAL_SD_ReadBlocks+0x1ec>)
 8006a36:	6399      	str	r1, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006a38:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006a3a:	f043 0320 	orr.w	r3, r3, #32
 8006a3e:	63a3      	str	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006a40:	2301      	movs	r3, #1
 8006a42:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006a46:	6322      	str	r2, [r4, #48]	@ 0x30
      return HAL_ERROR;
 8006a48:	e749      	b.n	80068de <HAL_SD_ReadBlocks+0x22>
      data = SDMMC_ReadFIFO(hsd->Instance);
 8006a4a:	f000 fd90 	bl	800756e <SDMMC_ReadFIFO>
      *tempbuff = (uint8_t)(data & 0xFFU);
 8006a4e:	f805 0c04 	strb.w	r0, [r5, #-4]
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006a52:	0a03      	lsrs	r3, r0, #8
      dataremaining--;
 8006a54:	3e04      	subs	r6, #4
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006a56:	3504      	adds	r5, #4
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006a58:	f805 3c07 	strb.w	r3, [r5, #-7]
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006a5c:	0c03      	lsrs	r3, r0, #16
 8006a5e:	f805 3c06 	strb.w	r3, [r5, #-6]
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006a62:	0e03      	lsrs	r3, r0, #24
 8006a64:	f805 3c05 	strb.w	r3, [r5, #-5]
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006a68:	f7fc ff78 	bl	800395c <HAL_GetTick>
 8006a6c:	1bc0      	subs	r0, r0, r7
 8006a6e:	4540      	cmp	r0, r8
 8006a70:	d307      	bcc.n	8006a82 <HAL_SD_ReadBlocks+0x1c6>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a72:	6823      	ldr	r3, [r4, #0]
 8006a74:	4a0c      	ldr	r2, [pc, #48]	@ (8006aa8 <HAL_SD_ReadBlocks+0x1ec>)
 8006a76:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006a78:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006a7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a7e:	e76c      	b.n	800695a <HAL_SD_ReadBlocks+0x9e>
 8006a80:	3504      	adds	r5, #4
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8006a82:	6820      	ldr	r0, [r4, #0]
 8006a84:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006a86:	029b      	lsls	r3, r3, #10
 8006a88:	d501      	bpl.n	8006a8e <HAL_SD_ReadBlocks+0x1d2>
 8006a8a:	2e00      	cmp	r6, #0
 8006a8c:	d1dd      	bne.n	8006a4a <HAL_SD_ReadBlocks+0x18e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006a8e:	f240 533a 	movw	r3, #1338	@ 0x53a
 8006a92:	6383      	str	r3, [r0, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006a94:	2301      	movs	r3, #1
    return HAL_OK;
 8006a96:	2000      	movs	r0, #0
    hsd->State = HAL_SD_STATE_READY;
 8006a98:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_OK;
 8006a9c:	e720      	b.n	80068e0 <HAL_SD_ReadBlocks+0x24>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006a9e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006aa0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006aa4:	e71a      	b.n	80068dc <HAL_SD_ReadBlocks+0x20>
 8006aa6:	bf00      	nop
 8006aa8:	004005ff 	.word	0x004005ff

08006aac <HAL_SD_WriteBlocks>:
{
 8006aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ab0:	460d      	mov	r5, r1
 8006ab2:	b088      	sub	sp, #32
 8006ab4:	4604      	mov	r4, r0
 8006ab6:	4691      	mov	r9, r2
 8006ab8:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8006aba:	f7fc ff4f 	bl	800395c <HAL_GetTick>
 8006abe:	4680      	mov	r8, r0
  if(NULL == pData)
 8006ac0:	b93d      	cbnz	r5, 8006ad2 <HAL_SD_WriteBlocks+0x26>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006ac2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006ac4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006ac8:	63a3      	str	r3, [r4, #56]	@ 0x38
    return HAL_ERROR;
 8006aca:	2001      	movs	r0, #1
}
 8006acc:	b008      	add	sp, #32
 8006ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8006ad2:	f894 3034 	ldrb.w	r3, [r4, #52]	@ 0x34
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	f040 80a6 	bne.w	8006c28 <HAL_SD_WriteBlocks+0x17c>
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006adc:	eb09 0307 	add.w	r3, r9, r7
 8006ae0:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006ae2:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006ae4:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006ae6:	63a1      	str	r1, [r4, #56]	@ 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006ae8:	d903      	bls.n	8006af2 <HAL_SD_WriteBlocks+0x46>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006aea:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006aec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006af0:	e7ea      	b.n	8006ac8 <HAL_SD_WriteBlocks+0x1c>
    hsd->State = HAL_SD_STATE_BUSY;
 8006af2:	2303      	movs	r3, #3
    hsd->Instance->DCTRL = 0U;
 8006af4:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8006af6:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006afa:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    hsd->Instance->DCTRL = 0U;
 8006afc:	62c1      	str	r1, [r0, #44]	@ 0x2c
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006afe:	2190      	movs	r1, #144	@ 0x90
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006b00:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006b02:	f04f 33ff 	mov.w	r3, #4294967295
 8006b06:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006b08:	ea4f 2347 	mov.w	r3, r7, lsl #9
      add *= 512U;
 8006b0c:	bf18      	it	ne
 8006b0e:	ea4f 2949 	movne.w	r9, r9, lsl #9
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006b12:	9303      	str	r3, [sp, #12]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006b14:	2300      	movs	r3, #0
 8006b16:	e9cd 1304 	strd	r1, r3, [sp, #16]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006b1a:	9306      	str	r3, [sp, #24]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8006b1c:	2301      	movs	r3, #1
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006b1e:	a902      	add	r1, sp, #8
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8006b20:	9307      	str	r3, [sp, #28]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006b22:	f000 fd4a 	bl	80075ba <SDMMC_ConfigData>
    if(NumberOfBlocks > 1U)
 8006b26:	2f01      	cmp	r7, #1
 8006b28:	d912      	bls.n	8006b50 <HAL_SD_WriteBlocks+0xa4>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006b2a:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006b2c:	4649      	mov	r1, r9
 8006b2e:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006b30:	6323      	str	r3, [r4, #48]	@ 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006b32:	f000 fe6d 	bl	8007810 <SDMMC_CmdWriteMultiBlock>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b36:	6823      	ldr	r3, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b38:	b188      	cbz	r0, 8006b5e <HAL_SD_WriteBlocks+0xb2>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b3a:	4a3d      	ldr	r2, [pc, #244]	@ (8006c30 <HAL_SD_WriteBlocks+0x184>)
 8006b3c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8006b3e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006b40:	4303      	orrs	r3, r0
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006b42:	63a3      	str	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006b44:	2301      	movs	r3, #1
 8006b46:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	6323      	str	r3, [r4, #48]	@ 0x30
      return HAL_ERROR;
 8006b4e:	e7bc      	b.n	8006aca <HAL_SD_WriteBlocks+0x1e>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006b50:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006b52:	4649      	mov	r1, r9
 8006b54:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006b56:	6323      	str	r3, [r4, #48]	@ 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006b58:	f000 fe41 	bl	80077de <SDMMC_CmdWriteSingleBlock>
 8006b5c:	e7eb      	b.n	8006b36 <HAL_SD_WriteBlocks+0x8a>
    dataremaining = config.DataLength;
 8006b5e:	9e03      	ldr	r6, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006b60:	6820      	ldr	r0, [r4, #0]
 8006b62:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006b64:	f413 7f8d 	tst.w	r3, #282	@ 0x11a
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8006b68:	6b43      	ldr	r3, [r0, #52]	@ 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006b6a:	d00b      	beq.n	8006b84 <HAL_SD_WriteBlocks+0xd8>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006b6c:	05db      	lsls	r3, r3, #23
 8006b6e:	d52b      	bpl.n	8006bc8 <HAL_SD_WriteBlocks+0x11c>
 8006b70:	2f01      	cmp	r7, #1
 8006b72:	d929      	bls.n	8006bc8 <HAL_SD_WriteBlocks+0x11c>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006b74:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8006b76:	2b03      	cmp	r3, #3
 8006b78:	d026      	beq.n	8006bc8 <HAL_SD_WriteBlocks+0x11c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006b7a:	f000 fead 	bl	80078d8 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8006b7e:	b318      	cbz	r0, 8006bc8 <HAL_SD_WriteBlocks+0x11c>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b80:	6823      	ldr	r3, [r4, #0]
 8006b82:	e7da      	b.n	8006b3a <HAL_SD_WriteBlocks+0x8e>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8006b84:	045a      	lsls	r2, r3, #17
 8006b86:	d50c      	bpl.n	8006ba2 <HAL_SD_WriteBlocks+0xf6>
 8006b88:	b15e      	cbz	r6, 8006ba2 <HAL_SD_WriteBlocks+0xf6>
 8006b8a:	f105 0a20 	add.w	sl, r5, #32
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006b8e:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006b92:	a901      	add	r1, sp, #4
 8006b94:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006b96:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006b98:	f000 fcec 	bl	8007574 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8006b9c:	45aa      	cmp	sl, r5
 8006b9e:	d1f6      	bne.n	8006b8e <HAL_SD_WriteBlocks+0xe2>
          dataremaining--;
 8006ba0:	3e20      	subs	r6, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006ba2:	f7fc fedb 	bl	800395c <HAL_GetTick>
 8006ba6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006ba8:	eba0 0008 	sub.w	r0, r0, r8
 8006bac:	4298      	cmp	r0, r3
 8006bae:	d3d7      	bcc.n	8006b60 <HAL_SD_WriteBlocks+0xb4>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006bb0:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
 8006bb2:	2003      	movs	r0, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006bb4:	4a1e      	ldr	r2, [pc, #120]	@ (8006c30 <HAL_SD_WriteBlocks+0x184>)
 8006bb6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8006bb8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006bba:	63a3      	str	r3, [r4, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	6323      	str	r3, [r4, #48]	@ 0x30
        return HAL_TIMEOUT;
 8006bc6:	e781      	b.n	8006acc <HAL_SD_WriteBlocks+0x20>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006bc8:	6823      	ldr	r3, [r4, #0]
 8006bca:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006bcc:	f011 0108 	ands.w	r1, r1, #8
 8006bd0:	d005      	beq.n	8006bde <HAL_SD_WriteBlocks+0x132>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006bd2:	4a17      	ldr	r2, [pc, #92]	@ (8006c30 <HAL_SD_WriteBlocks+0x184>)
 8006bd4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006bd6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006bd8:	f043 0308 	orr.w	r3, r3, #8
 8006bdc:	e7b1      	b.n	8006b42 <HAL_SD_WriteBlocks+0x96>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006bde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006be0:	f012 0202 	ands.w	r2, r2, #2
 8006be4:	d00a      	beq.n	8006bfc <HAL_SD_WriteBlocks+0x150>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006be6:	4a12      	ldr	r2, [pc, #72]	@ (8006c30 <HAL_SD_WriteBlocks+0x184>)
 8006be8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006bea:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006bec:	f043 0302 	orr.w	r3, r3, #2
 8006bf0:	63a3      	str	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006bf8:	6321      	str	r1, [r4, #48]	@ 0x30
      return HAL_ERROR;
 8006bfa:	e766      	b.n	8006aca <HAL_SD_WriteBlocks+0x1e>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8006bfc:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8006bfe:	f010 0010 	ands.w	r0, r0, #16
 8006c02:	d00a      	beq.n	8006c1a <HAL_SD_WriteBlocks+0x16e>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c04:	490a      	ldr	r1, [pc, #40]	@ (8006c30 <HAL_SD_WriteBlocks+0x184>)
 8006c06:	6399      	str	r1, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006c08:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006c0a:	f043 0310 	orr.w	r3, r3, #16
 8006c0e:	63a3      	str	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006c10:	2301      	movs	r3, #1
 8006c12:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006c16:	6322      	str	r2, [r4, #48]	@ 0x30
      return HAL_ERROR;
 8006c18:	e757      	b.n	8006aca <HAL_SD_WriteBlocks+0x1e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006c1a:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006c1e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006c20:	2301      	movs	r3, #1
 8006c22:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_OK;
 8006c26:	e751      	b.n	8006acc <HAL_SD_WriteBlocks+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006c28:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006c2a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006c2e:	e74b      	b.n	8006ac8 <HAL_SD_WriteBlocks+0x1c>
 8006c30:	004005ff 	.word	0x004005ff

08006c34 <HAL_SD_Erase>:
{
 8006c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hsd->State == HAL_SD_STATE_READY)
 8006c36:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
{
 8006c3a:	4604      	mov	r4, r0
 8006c3c:	460e      	mov	r6, r1
 8006c3e:	4615      	mov	r5, r2
  if(hsd->State == HAL_SD_STATE_READY)
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	b2df      	uxtb	r7, r3
 8006c44:	d151      	bne.n	8006cea <HAL_SD_Erase+0xb6>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006c46:	2100      	movs	r1, #0
    if(end_add < start_add)
 8006c48:	4296      	cmp	r6, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006c4a:	6381      	str	r1, [r0, #56]	@ 0x38
    if(end_add < start_add)
 8006c4c:	d905      	bls.n	8006c5a <HAL_SD_Erase+0x26>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006c4e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8006c50:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006c54:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 8006c56:	4638      	mov	r0, r7
 8006c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(end_add > (hsd->SdCard.LogBlockNbr))
 8006c5a:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d203      	bcs.n	8006c68 <HAL_SD_Erase+0x34>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006c60:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8006c62:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006c66:	e7f5      	b.n	8006c54 <HAL_SD_Erase+0x20>
    hsd->State = HAL_SD_STATE_BUSY;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
    if(((hsd->SdCard.Class) & SDMMC_CCCC_ERASE) == 0U)
 8006c6e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c70:	6800      	ldr	r0, [r0, #0]
    if(((hsd->SdCard.Class) & SDMMC_CCCC_ERASE) == 0U)
 8006c72:	069a      	lsls	r2, r3, #26
 8006c74:	d408      	bmi.n	8006c88 <HAL_SD_Erase+0x54>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c76:	4b1e      	ldr	r3, [pc, #120]	@ (8006cf0 <HAL_SD_Erase+0xbc>)
 8006c78:	6383      	str	r3, [r0, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006c7a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006c7c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
      hsd->ErrorCode |= HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006c80:	63a3      	str	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006c82:	f884 7034 	strb.w	r7, [r4, #52]	@ 0x34
      return HAL_ERROR;
 8006c86:	e7e6      	b.n	8006c56 <HAL_SD_Erase+0x22>
    if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006c88:	f000 fc94 	bl	80075b4 <SDMMC_GetResponse>
 8006c8c:	0183      	lsls	r3, r0, #6
 8006c8e:	d506      	bpl.n	8006c9e <HAL_SD_Erase+0x6a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c90:	6823      	ldr	r3, [r4, #0]
 8006c92:	4a17      	ldr	r2, [pc, #92]	@ (8006cf0 <HAL_SD_Erase+0xbc>)
 8006c94:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006c96:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006c98:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006c9c:	e7f0      	b.n	8006c80 <HAL_SD_Erase+0x4c>
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006c9e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d003      	beq.n	8006cac <HAL_SD_Erase+0x78>
    if(hsd->SdCard.CardType != CARD_SECURED)
 8006ca4:	2b03      	cmp	r3, #3
 8006ca6:	d016      	beq.n	8006cd6 <HAL_SD_Erase+0xa2>
      start_add *= 512U;
 8006ca8:	0276      	lsls	r6, r6, #9
      end_add   *= 512U;
 8006caa:	026d      	lsls	r5, r5, #9
      errorstate = SDMMC_CmdSDEraseStartAdd(hsd->Instance, start_add);
 8006cac:	4631      	mov	r1, r6
 8006cae:	6820      	ldr	r0, [r4, #0]
 8006cb0:	f000 fdc7 	bl	8007842 <SDMMC_CmdSDEraseStartAdd>
      if(errorstate != HAL_SD_ERROR_NONE)
 8006cb4:	b148      	cbz	r0, 8006cca <HAL_SD_Erase+0x96>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006cb6:	6823      	ldr	r3, [r4, #0]
 8006cb8:	4a0d      	ldr	r2, [pc, #52]	@ (8006cf0 <HAL_SD_Erase+0xbc>)
 8006cba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8006cbc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006cbe:	4303      	orrs	r3, r0
 8006cc0:	63a3      	str	r3, [r4, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
      return HAL_ERROR;
 8006cc8:	e7c5      	b.n	8006c56 <HAL_SD_Erase+0x22>
      errorstate = SDMMC_CmdSDEraseEndAdd(hsd->Instance, end_add);
 8006cca:	4629      	mov	r1, r5
 8006ccc:	6820      	ldr	r0, [r4, #0]
 8006cce:	f000 fdd1 	bl	8007874 <SDMMC_CmdSDEraseEndAdd>
      if(errorstate != HAL_SD_ERROR_NONE)
 8006cd2:	2800      	cmp	r0, #0
 8006cd4:	d1ef      	bne.n	8006cb6 <HAL_SD_Erase+0x82>
    errorstate = SDMMC_CmdErase(hsd->Instance);
 8006cd6:	6820      	ldr	r0, [r4, #0]
 8006cd8:	f000 fde5 	bl	80078a6 <SDMMC_CmdErase>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006cdc:	2800      	cmp	r0, #0
 8006cde:	d1ea      	bne.n	8006cb6 <HAL_SD_Erase+0x82>
    hsd->State = HAL_SD_STATE_READY;
 8006ce0:	2301      	movs	r3, #1
    return HAL_OK;
 8006ce2:	4607      	mov	r7, r0
    hsd->State = HAL_SD_STATE_READY;
 8006ce4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_OK;
 8006ce8:	e7b5      	b.n	8006c56 <HAL_SD_Erase+0x22>
    return HAL_BUSY;
 8006cea:	2702      	movs	r7, #2
 8006cec:	e7b3      	b.n	8006c56 <HAL_SD_Erase+0x22>
 8006cee:	bf00      	nop
 8006cf0:	004005ff 	.word	0x004005ff

08006cf4 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006cf4:	6e42      	ldr	r2, [r0, #100]	@ 0x64
{
 8006cf6:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006cf8:	0f90      	lsrs	r0, r2, #30
{
 8006cfa:	b510      	push	{r4, lr}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006cfc:	7008      	strb	r0, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006cfe:	f3c2 6083 	ubfx	r0, r2, #26, #4
 8006d02:	7048      	strb	r0, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006d04:	f3c2 6001 	ubfx	r0, r2, #24, #2
 8006d08:	7088      	strb	r0, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006d0a:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8006d0e:	70c8      	strb	r0, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006d10:	f3c2 2007 	ubfx	r0, r2, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006d14:	b2d2      	uxtb	r2, r2
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006d16:	7108      	strb	r0, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006d18:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006d1a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006d1c:	0d10      	lsrs	r0, r2, #20
 8006d1e:	80c8      	strh	r0, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006d20:	f3c2 4003 	ubfx	r0, r2, #16, #4
 8006d24:	7208      	strb	r0, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006d26:	f3c2 30c0 	ubfx	r0, r2, #15, #1
 8006d2a:	7248      	strb	r0, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006d2c:	f3c2 3080 	ubfx	r0, r2, #14, #1
 8006d30:	7288      	strb	r0, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006d32:	f3c2 3040 	ubfx	r0, r2, #13, #1
 8006d36:	72c8      	strb	r0, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006d38:	f3c2 3000 	ubfx	r0, r2, #12, #1
 8006d3c:	7308      	strb	r0, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006d3e:	2000      	movs	r0, #0
 8006d40:	7348      	strb	r0, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8006d42:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8006d44:	2800      	cmp	r0, #0
 8006d46:	d16b      	bne.n	8006e20 <HAL_SD_GetCardCSD+0x12c>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006d48:	f640 74fc 	movw	r4, #4092	@ 0xffc
 8006d4c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8006d4e:	ea04 0282 	and.w	r2, r4, r2, lsl #2
 8006d52:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 8006d56:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006d58:	f3c0 62c2 	ubfx	r2, r0, #27, #3
 8006d5c:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006d5e:	f3c0 6202 	ubfx	r2, r0, #24, #3
 8006d62:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006d64:	f3c0 5242 	ubfx	r2, r0, #21, #3
 8006d68:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006d6a:	f3c0 4282 	ubfx	r2, r0, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006d6e:	f3c0 30c2 	ubfx	r0, r0, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006d72:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006d74:	7608      	strb	r0, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006d76:	6908      	ldr	r0, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006d78:	7e0a      	ldrb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006d7a:	3001      	adds	r0, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006d7c:	f002 0207 	and.w	r2, r2, #7
 8006d80:	3202      	adds	r2, #2
 8006d82:	4090      	lsls	r0, r2
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006d84:	2201      	movs	r2, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006d86:	6558      	str	r0, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006d88:	7a0c      	ldrb	r4, [r1, #8]
 8006d8a:	f004 040f 	and.w	r4, r4, #15
 8006d8e:	40a2      	lsls	r2, r4
 8006d90:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006d92:	0a52      	lsrs	r2, r2, #9
 8006d94:	4342      	muls	r2, r0
 8006d96:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006d98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d9c:	661a      	str	r2, [r3, #96]	@ 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006d9e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8006da0:	f3c2 3080 	ubfx	r0, r2, #14, #1
 8006da4:	7648      	strb	r0, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006da6:	f3c2 10c6 	ubfx	r0, r2, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006daa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006dae:	7688      	strb	r0, [r1, #26]
  pCSD->Reserved3 = 0;
 8006db0:	2000      	movs	r0, #0
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006db2:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006db6:	0fda      	lsrs	r2, r3, #31
 8006db8:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006dba:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8006dbe:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006dc0:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8006dc4:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006dc6:	f3c3 5283 	ubfx	r2, r3, #22, #4
 8006dca:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006dcc:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8006dd0:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006dd4:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3 = 0;
 8006dd8:	f881 0021 	strb.w	r0, [r1, #33]	@ 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006ddc:	f881 2022 	strb.w	r2, [r1, #34]	@ 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006de0:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8006de4:	f881 2023 	strb.w	r2, [r1, #35]	@ 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006de8:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8006dec:	f881 2024 	strb.w	r2, [r1, #36]	@ 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006df0:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8006df4:	f881 2025 	strb.w	r2, [r1, #37]	@ 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006df8:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8006dfc:	f881 2026 	strb.w	r2, [r1, #38]	@ 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006e00:	f3c3 2281 	ubfx	r2, r3, #10, #2
 8006e04:	f881 2027 	strb.w	r2, [r1, #39]	@ 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006e08:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006e0c:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006e10:	f881 2028 	strb.w	r2, [r1, #40]	@ 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006e14:	f881 3029 	strb.w	r3, [r1, #41]	@ 0x29
  pCSD->Reserved4 = 1;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	f881 302a 	strb.w	r3, [r1, #42]	@ 0x2a
  return HAL_OK;
 8006e1e:	e01b      	b.n	8006e58 <HAL_SD_GetCardCSD+0x164>
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006e20:	2801      	cmp	r0, #1
 8006e22:	d10f      	bne.n	8006e44 <HAL_SD_GetCardCSD+0x150>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006e24:	0412      	lsls	r2, r2, #16
 8006e26:	f8b3 006e 	ldrh.w	r0, [r3, #110]	@ 0x6e
 8006e2a:	f402 127c 	and.w	r2, r2, #4128768	@ 0x3f0000
 8006e2e:	4302      	orrs	r2, r0
 8006e30:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006e32:	690a      	ldr	r2, [r1, #16]
 8006e34:	3201      	adds	r2, #1
 8006e36:	0292      	lsls	r2, r2, #10
 8006e38:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006e3a:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006e3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e40:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006e42:	e7a9      	b.n	8006d98 <HAL_SD_GetCardCSD+0xa4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e44:	681a      	ldr	r2, [r3, #0]
    hsd->State = HAL_SD_STATE_READY;
 8006e46:	2001      	movs	r0, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e48:	4904      	ldr	r1, [pc, #16]	@ (8006e5c <HAL_SD_GetCardCSD+0x168>)
 8006e4a:	6391      	str	r1, [r2, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e4e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8006e52:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006e54:	f883 0034 	strb.w	r0, [r3, #52]	@ 0x34
}
 8006e58:	bd10      	pop	{r4, pc}
 8006e5a:	bf00      	nop
 8006e5c:	004005ff 	.word	0x004005ff

08006e60 <HAL_SD_InitCard>:
{
 8006e60:	b5f0      	push	{r4, r5, r6, r7, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006e62:	2300      	movs	r3, #0
{
 8006e64:	b099      	sub	sp, #100	@ 0x64
 8006e66:	4604      	mov	r4, r0
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006e68:	930b      	str	r3, [sp, #44]	@ 0x2c
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006e6a:	e9cd 3309 	strd	r3, r3, [sp, #36]	@ 0x24
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8006e6e:	e9cd 3307 	strd	r3, r3, [sp, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8006e72:	2376      	movs	r3, #118	@ 0x76
 8006e74:	930c      	str	r3, [sp, #48]	@ 0x30
  status = SDMMC_Init(hsd->Instance, Init);
 8006e76:	ab0a      	add	r3, sp, #40	@ 0x28
 8006e78:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006e7c:	ab07      	add	r3, sp, #28
 8006e7e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8006e82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e84:	6820      	ldr	r0, [r4, #0]
 8006e86:	f000 fb56 	bl	8007536 <SDMMC_Init>
  if(status != HAL_OK)
 8006e8a:	4605      	mov	r5, r0
 8006e8c:	bb70      	cbnz	r0, 8006eec <HAL_SD_InitCard+0x8c>
  __HAL_SD_DISABLE(hsd);
 8006e8e:	6820      	ldr	r0, [r4, #0]
 8006e90:	6843      	ldr	r3, [r0, #4]
 8006e92:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e96:	6043      	str	r3, [r0, #4]
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006e98:	f000 fb71 	bl	800757e <SDMMC_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8006e9c:	6822      	ldr	r2, [r4, #0]
  HAL_Delay(2);
 8006e9e:	2002      	movs	r0, #2
  __HAL_SD_ENABLE(hsd);
 8006ea0:	6853      	ldr	r3, [r2, #4]
 8006ea2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ea6:	6053      	str	r3, [r2, #4]
  HAL_Delay(2);
 8006ea8:	f7fc fd5e 	bl	8003968 <HAL_Delay>
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006eac:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 8006eae:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006eb0:	f000 fb96 	bl	80075e0 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006eb4:	4605      	mov	r5, r0
 8006eb6:	b998      	cbnz	r0, 8006ee0 <HAL_SD_InitCard+0x80>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006eb8:	6820      	ldr	r0, [r4, #0]
 8006eba:	f000 feb7 	bl	8007c2c <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ebe:	b130      	cbz	r0, 8006ece <HAL_SD_InitCard+0x6e>
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006ec0:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006ec2:	64a5      	str	r5, [r4, #72]	@ 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006ec4:	f000 fb8c 	bl	80075e0 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ec8:	b1a0      	cbz	r0, 8006ef4 <HAL_SD_InitCard+0x94>
      return errorstate;
 8006eca:	4605      	mov	r5, r0
 8006ecc:	e008      	b.n	8006ee0 <HAL_SD_InitCard+0x80>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	64a3      	str	r3, [r4, #72]	@ 0x48
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006ed2:	2100      	movs	r1, #0
 8006ed4:	6820      	ldr	r0, [r4, #0]
 8006ed6:	f000 fd32 	bl	800793e <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006eda:	b170      	cbz	r0, 8006efa <HAL_SD_InitCard+0x9a>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006edc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
    hsd->State = HAL_SD_STATE_READY;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8006ee6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006ee8:	432b      	orrs	r3, r5
 8006eea:	63a3      	str	r3, [r4, #56]	@ 0x38
    return HAL_ERROR;
 8006eec:	2501      	movs	r5, #1
}
 8006eee:	4628      	mov	r0, r5
 8006ef0:	b019      	add	sp, #100	@ 0x64
 8006ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006ef4:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d0eb      	beq.n	8006ed2 <HAL_SD_InitCard+0x72>
{
 8006efa:	2100      	movs	r1, #0
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006efc:	f64f 76fe 	movw	r6, #65534	@ 0xfffe
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006f00:	4f58      	ldr	r7, [pc, #352]	@ (8007064 <HAL_SD_InitCard+0x204>)
 8006f02:	e014      	b.n	8006f2e <HAL_SD_InitCard+0xce>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006f04:	6820      	ldr	r0, [r4, #0]
 8006f06:	f000 fd1a 	bl	800793e <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f0a:	4605      	mov	r5, r0
 8006f0c:	2800      	cmp	r0, #0
 8006f0e:	d1e7      	bne.n	8006ee0 <HAL_SD_InitCard+0x80>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006f10:	4639      	mov	r1, r7
 8006f12:	6820      	ldr	r0, [r4, #0]
 8006f14:	f000 fdec 	bl	8007af0 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f18:	2800      	cmp	r0, #0
 8006f1a:	d1df      	bne.n	8006edc <HAL_SD_InitCard+0x7c>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006f1c:	4629      	mov	r1, r5
 8006f1e:	6820      	ldr	r0, [r4, #0]
 8006f20:	f000 fb48 	bl	80075b4 <SDMMC_GetResponse>
    count++;
 8006f24:	9b06      	ldr	r3, [sp, #24]
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006f26:	4605      	mov	r5, r0
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006f28:	0fc1      	lsrs	r1, r0, #31
    count++;
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	9306      	str	r3, [sp, #24]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006f2e:	9b06      	ldr	r3, [sp, #24]
 8006f30:	42b3      	cmp	r3, r6
 8006f32:	d801      	bhi.n	8006f38 <HAL_SD_InitCard+0xd8>
 8006f34:	2900      	cmp	r1, #0
 8006f36:	d0e5      	beq.n	8006f04 <HAL_SD_InitCard+0xa4>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006f38:	9b06      	ldr	r3, [sp, #24]
 8006f3a:	42b3      	cmp	r3, r6
 8006f3c:	d811      	bhi.n	8006f62 <HAL_SD_InitCard+0x102>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006f3e:	f3c5 7580 	ubfx	r5, r5, #30, #1
  uint16_t sd_rca = 1U;
 8006f42:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006f44:	6820      	ldr	r0, [r4, #0]
 8006f46:	6465      	str	r5, [r4, #68]	@ 0x44
  uint16_t sd_rca = 1U;
 8006f48:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006f4c:	f000 fb1b 	bl	8007586 <SDMMC_GetPowerState>
 8006f50:	b950      	cbnz	r0, 8006f68 <HAL_SD_InitCard+0x108>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006f52:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 8006f56:	2301      	movs	r3, #1
 8006f58:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8006f5c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006f5e:	430b      	orrs	r3, r1
 8006f60:	e7c3      	b.n	8006eea <HAL_SD_InitCard+0x8a>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006f62:	f04f 7580 	mov.w	r5, #16777216	@ 0x1000000
 8006f66:	e7bb      	b.n	8006ee0 <HAL_SD_InitCard+0x80>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006f68:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006f6a:	6820      	ldr	r0, [r4, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006f6c:	2b03      	cmp	r3, #3
 8006f6e:	d043      	beq.n	8006ff8 <HAL_SD_InitCard+0x198>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006f70:	f000 fd70 	bl	8007a54 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f74:	4601      	mov	r1, r0
 8006f76:	2800      	cmp	r0, #0
 8006f78:	d1ed      	bne.n	8006f56 <HAL_SD_InitCard+0xf6>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006f7a:	6820      	ldr	r0, [r4, #0]
 8006f7c:	f000 fb1a 	bl	80075b4 <SDMMC_GetResponse>
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006f80:	2104      	movs	r1, #4
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006f82:	6760      	str	r0, [r4, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006f84:	6820      	ldr	r0, [r4, #0]
 8006f86:	f000 fb15 	bl	80075b4 <SDMMC_GetResponse>
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006f8a:	2108      	movs	r1, #8
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006f8c:	67a0      	str	r0, [r4, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006f8e:	6820      	ldr	r0, [r4, #0]
 8006f90:	f000 fb10 	bl	80075b4 <SDMMC_GetResponse>
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006f94:	210c      	movs	r1, #12
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006f96:	67e0      	str	r0, [r4, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006f98:	6820      	ldr	r0, [r4, #0]
 8006f9a:	f000 fb0b 	bl	80075b4 <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006f9e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006fa0:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006fa4:	2b03      	cmp	r3, #3
 8006fa6:	d027      	beq.n	8006ff8 <HAL_SD_InitCard+0x198>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006fa8:	f10d 0116 	add.w	r1, sp, #22
 8006fac:	6820      	ldr	r0, [r4, #0]
 8006fae:	f000 fdf9 	bl	8007ba4 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006fb2:	4601      	mov	r1, r0
 8006fb4:	2800      	cmp	r0, #0
 8006fb6:	d1ce      	bne.n	8006f56 <HAL_SD_InitCard+0xf6>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006fb8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006fba:	6820      	ldr	r0, [r4, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006fbc:	2b03      	cmp	r3, #3
 8006fbe:	d01b      	beq.n	8006ff8 <HAL_SD_InitCard+0x198>
    hsd->SdCard.RelCardAdd = sd_rca;
 8006fc0:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8006fc4:	6521      	str	r1, [r4, #80]	@ 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006fc6:	0409      	lsls	r1, r1, #16
 8006fc8:	f000 fd5a 	bl	8007a80 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006fcc:	4601      	mov	r1, r0
 8006fce:	2800      	cmp	r0, #0
 8006fd0:	d1c1      	bne.n	8006f56 <HAL_SD_InitCard+0xf6>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006fd2:	6820      	ldr	r0, [r4, #0]
 8006fd4:	f000 faee 	bl	80075b4 <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006fd8:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006fda:	6660      	str	r0, [r4, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006fdc:	6820      	ldr	r0, [r4, #0]
 8006fde:	f000 fae9 	bl	80075b4 <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006fe2:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006fe4:	66a0      	str	r0, [r4, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006fe6:	6820      	ldr	r0, [r4, #0]
 8006fe8:	f000 fae4 	bl	80075b4 <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006fec:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006fee:	66e0      	str	r0, [r4, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006ff0:	6820      	ldr	r0, [r4, #0]
 8006ff2:	f000 fadf 	bl	80075b4 <SDMMC_GetResponse>
 8006ff6:	6720      	str	r0, [r4, #112]	@ 0x70
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006ff8:	2104      	movs	r1, #4
 8006ffa:	6820      	ldr	r0, [r4, #0]
 8006ffc:	f000 fada 	bl	80075b4 <SDMMC_GetResponse>
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007000:	a90d      	add	r1, sp, #52	@ 0x34
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007002:	0d00      	lsrs	r0, r0, #20
 8007004:	64e0      	str	r0, [r4, #76]	@ 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007006:	4620      	mov	r0, r4
 8007008:	f7ff fe74 	bl	8006cf4 <HAL_SD_GetCardCSD>
 800700c:	4605      	mov	r5, r0
 800700e:	bb28      	cbnz	r0, 800705c <HAL_SD_InitCard+0x1fc>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007010:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8007012:	4603      	mov	r3, r0
 8007014:	6820      	ldr	r0, [r4, #0]
 8007016:	0412      	lsls	r2, r2, #16
 8007018:	f000 fc78 	bl	800790c <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 800701c:	4601      	mov	r1, r0
 800701e:	2800      	cmp	r0, #0
 8007020:	d199      	bne.n	8006f56 <HAL_SD_InitCard+0xf6>
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8007022:	f104 0310 	add.w	r3, r4, #16
 8007026:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800702a:	1d23      	adds	r3, r4, #4
 800702c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8007030:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007032:	6820      	ldr	r0, [r4, #0]
 8007034:	f000 fa7f 	bl	8007536 <SDMMC_Init>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007038:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800703c:	6820      	ldr	r0, [r4, #0]
 800703e:	f000 fb83 	bl	8007748 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007042:	2800      	cmp	r0, #0
 8007044:	f43f af53 	beq.w	8006eee <HAL_SD_InitCard+0x8e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007048:	6823      	ldr	r3, [r4, #0]
 800704a:	4a07      	ldr	r2, [pc, #28]	@ (8007068 <HAL_SD_InitCard+0x208>)
 800704c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800704e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007050:	4303      	orrs	r3, r0
 8007052:	63a3      	str	r3, [r4, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007054:	2301      	movs	r3, #1
 8007056:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 800705a:	e747      	b.n	8006eec <HAL_SD_InitCard+0x8c>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800705c:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 8007060:	e779      	b.n	8006f56 <HAL_SD_InitCard+0xf6>
 8007062:	bf00      	nop
 8007064:	c1100000 	.word	0xc1100000
 8007068:	004005ff 	.word	0x004005ff

0800706c <HAL_SD_Init>:
{
 800706c:	b510      	push	{r4, lr}
  if(hsd == NULL)
 800706e:	4604      	mov	r4, r0
 8007070:	b908      	cbnz	r0, 8007076 <HAL_SD_Init+0xa>
    return HAL_ERROR;
 8007072:	2001      	movs	r0, #1
}
 8007074:	bd10      	pop	{r4, pc}
  if(hsd->State == HAL_SD_STATE_RESET)
 8007076:	f890 3034 	ldrb.w	r3, [r0, #52]	@ 0x34
 800707a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800707e:	b913      	cbnz	r3, 8007086 <HAL_SD_Init+0x1a>
    hsd->Lock = HAL_UNLOCKED;
 8007080:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8007082:	f7ff fc1a 	bl	80068ba <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 8007086:	2303      	movs	r3, #3
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007088:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 800708a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800708e:	f7ff fee7 	bl	8006e60 <HAL_SD_InitCard>
 8007092:	2800      	cmp	r0, #0
 8007094:	d1ed      	bne.n	8007072 <HAL_SD_Init+0x6>
  hsd->State = HAL_SD_STATE_READY;
 8007096:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007098:	63a0      	str	r0, [r4, #56]	@ 0x38
  hsd->Context = SD_CONTEXT_NONE;
 800709a:	6320      	str	r0, [r4, #48]	@ 0x30
  hsd->State = HAL_SD_STATE_READY;
 800709c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  return HAL_OK;
 80070a0:	e7e8      	b.n	8007074 <HAL_SD_Init+0x8>
	...

080070a4 <HAL_SD_ConfigWideBusOperation>:
{
 80070a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 80070a6:	2303      	movs	r3, #3
{
 80070a8:	4604      	mov	r4, r0
 80070aa:	b08b      	sub	sp, #44	@ 0x2c
 80070ac:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 80070ae:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 80070b2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80070b4:	6800      	ldr	r0, [r0, #0]
  if(hsd->SdCard.CardType != CARD_SECURED)
 80070b6:	2b03      	cmp	r3, #3
 80070b8:	d002      	beq.n	80070c0 <HAL_SD_ConfigWideBusOperation+0x1c>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80070ba:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80070be:	d103      	bne.n	80070c8 <HAL_SD_ConfigWideBusOperation+0x24>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80070c0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80070c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070c6:	e01d      	b.n	8007104 <HAL_SD_ConfigWideBusOperation+0x60>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80070c8:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80070cc:	d137      	bne.n	800713e <HAL_SD_ConfigWideBusOperation+0x9a>
  uint32_t scr[2U] = {0U, 0U};
 80070ce:	2100      	movs	r1, #0
 80070d0:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80070d4:	f000 fa6e 	bl	80075b4 <SDMMC_GetResponse>
 80070d8:	0180      	lsls	r0, r0, #6
 80070da:	d449      	bmi.n	8007170 <HAL_SD_ConfigWideBusOperation+0xcc>
  errorstate = SD_FindSCR(hsd, scr);
 80070dc:	a904      	add	r1, sp, #16
 80070de:	4620      	mov	r0, r4
 80070e0:	f7ff fb85 	bl	80067ee <SD_FindSCR.constprop.0>
  if(errorstate != HAL_SD_ERROR_NONE)
 80070e4:	b960      	cbnz	r0, 8007100 <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80070e6:	9b05      	ldr	r3, [sp, #20]
 80070e8:	0359      	lsls	r1, r3, #13
 80070ea:	d544      	bpl.n	8007176 <HAL_SD_ConfigWideBusOperation+0xd2>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80070ec:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80070ee:	6820      	ldr	r0, [r4, #0]
 80070f0:	0409      	lsls	r1, r1, #16
 80070f2:	f000 fc24 	bl	800793e <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80070f6:	b918      	cbnz	r0, 8007100 <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80070f8:	2102      	movs	r1, #2
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80070fa:	6820      	ldr	r0, [r4, #0]
 80070fc:	f000 fc38 	bl	8007970 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8007100:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007102:	4303      	orrs	r3, r0
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007104:	63a3      	str	r3, [r4, #56]	@ 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007106:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007108:	6827      	ldr	r7, [r4, #0]
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800710a:	2e00      	cmp	r6, #0
 800710c:	d03a      	beq.n	8007184 <HAL_SD_ConfigWideBusOperation+0xe0>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800710e:	4b29      	ldr	r3, [pc, #164]	@ (80071b4 <HAL_SD_ConfigWideBusOperation+0x110>)
    hsd->State = HAL_SD_STATE_READY;
 8007110:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007112:	63bb      	str	r3, [r7, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007114:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007118:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800711c:	6820      	ldr	r0, [r4, #0]
 800711e:	f000 fb13 	bl	8007748 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007122:	b130      	cbz	r0, 8007132 <HAL_SD_ConfigWideBusOperation+0x8e>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007124:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 8007126:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007128:	4a22      	ldr	r2, [pc, #136]	@ (80071b4 <HAL_SD_ConfigWideBusOperation+0x110>)
 800712a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800712c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800712e:	4303      	orrs	r3, r0
 8007130:	63a3      	str	r3, [r4, #56]	@ 0x38
  hsd->State = HAL_SD_STATE_READY;
 8007132:	2301      	movs	r3, #1
}
 8007134:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 8007136:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 800713a:	b00b      	add	sp, #44	@ 0x2c
 800713c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800713e:	b9e9      	cbnz	r1, 800717c <HAL_SD_ConfigWideBusOperation+0xd8>
  uint32_t scr[2U] = {0U, 0U};
 8007140:	e9cd 1104 	strd	r1, r1, [sp, #16]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007144:	f000 fa36 	bl	80075b4 <SDMMC_GetResponse>
 8007148:	0182      	lsls	r2, r0, #6
 800714a:	d411      	bmi.n	8007170 <HAL_SD_ConfigWideBusOperation+0xcc>
  errorstate = SD_FindSCR(hsd, scr);
 800714c:	a904      	add	r1, sp, #16
 800714e:	4620      	mov	r0, r4
 8007150:	f7ff fb4d 	bl	80067ee <SD_FindSCR.constprop.0>
  if(errorstate != HAL_SD_ERROR_NONE)
 8007154:	2800      	cmp	r0, #0
 8007156:	d1d3      	bne.n	8007100 <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007158:	9b05      	ldr	r3, [sp, #20]
 800715a:	03db      	lsls	r3, r3, #15
 800715c:	d50b      	bpl.n	8007176 <HAL_SD_ConfigWideBusOperation+0xd2>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800715e:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8007160:	6820      	ldr	r0, [r4, #0]
 8007162:	0409      	lsls	r1, r1, #16
 8007164:	f000 fbeb 	bl	800793e <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8007168:	2800      	cmp	r0, #0
 800716a:	d1c9      	bne.n	8007100 <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800716c:	4601      	mov	r1, r0
 800716e:	e7c4      	b.n	80070fa <HAL_SD_ConfigWideBusOperation+0x56>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007170:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8007174:	e7c4      	b.n	8007100 <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007176:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800717a:	e7c1      	b.n	8007100 <HAL_SD_ConfigWideBusOperation+0x5c>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800717c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800717e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007182:	e7bf      	b.n	8007104 <HAL_SD_ConfigWideBusOperation+0x60>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007184:	6863      	ldr	r3, [r4, #4]
 8007186:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007188:	68a3      	ldr	r3, [r4, #8]
 800718a:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800718c:	68e3      	ldr	r3, [r4, #12]
    Init.BusWide             = WideMode;
 800718e:	e9cd 3506 	strd	r3, r5, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007192:	6963      	ldr	r3, [r4, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8007194:	4635      	mov	r5, r6
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007196:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007198:	69a3      	ldr	r3, [r4, #24]
 800719a:	9309      	str	r3, [sp, #36]	@ 0x24
    (void)SDMMC_Init(hsd->Instance, Init);
 800719c:	ab0a      	add	r3, sp, #40	@ 0x28
 800719e:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80071a2:	ab04      	add	r3, sp, #16
 80071a4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80071a8:	4638      	mov	r0, r7
 80071aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80071ac:	f000 f9c3 	bl	8007536 <SDMMC_Init>
 80071b0:	e7b2      	b.n	8007118 <HAL_SD_ConfigWideBusOperation+0x74>
 80071b2:	bf00      	nop
 80071b4:	004005ff 	.word	0x004005ff

080071b8 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80071b8:	6d01      	ldr	r1, [r0, #80]	@ 0x50
{
 80071ba:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80071bc:	0409      	lsls	r1, r1, #16
{
 80071be:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80071c0:	6800      	ldr	r0, [r0, #0]
 80071c2:	f000 fc07 	bl	80079d4 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 80071c6:	4601      	mov	r1, r0
 80071c8:	b928      	cbnz	r0, 80071d6 <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80071ca:	6820      	ldr	r0, [r4, #0]
 80071cc:	f000 f9f2 	bl	80075b4 <SDMMC_GetResponse>
}
 80071d0:	f3c0 2043 	ubfx	r0, r0, #9, #4
 80071d4:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 80071d6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80071d8:	4303      	orrs	r3, r0
  uint32_t resp1 = 0;
 80071da:	2000      	movs	r0, #0
    hsd->ErrorCode |= errorstate;
 80071dc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80071de:	e7f7      	b.n	80071d0 <HAL_SD_GetCardState+0x18>

080071e0 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 80071e0:	4770      	bx	lr

080071e2 <HAL_SDRAM_Init>:
{
 80071e2:	b538      	push	{r3, r4, r5, lr}
 80071e4:	460d      	mov	r5, r1
  if (hsdram == NULL)
 80071e6:	4604      	mov	r4, r0
 80071e8:	b1c8      	cbz	r0, 800721e <HAL_SDRAM_Init+0x3c>
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80071ea:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80071ee:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80071f2:	b91b      	cbnz	r3, 80071fc <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
 80071f4:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
    HAL_SDRAM_MspInit(hsdram);
 80071f8:	f7ff fff2 	bl	80071e0 <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80071fc:	2302      	movs	r3, #2
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80071fe:	1d21      	adds	r1, r4, #4
 8007200:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007202:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007206:	f000 f90c 	bl	8007422 <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800720a:	6862      	ldr	r2, [r4, #4]
 800720c:	4629      	mov	r1, r5
 800720e:	6820      	ldr	r0, [r4, #0]
 8007210:	f000 f93f 	bl	8007492 <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007214:	2301      	movs	r3, #1
  return HAL_OK;
 8007216:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007218:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 800721c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800721e:	2001      	movs	r0, #1
 8007220:	e7fc      	b.n	800721c <HAL_SDRAM_Init+0x3a>

08007222 <SDRAM_DMACpltProt>:
static void SDRAM_DMACpltProt(DMA_HandleTypeDef *hdma)
{
  SDRAM_HandleTypeDef *hsdram = (SDRAM_HandleTypeDef *)(hdma->Parent);

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8007222:	6802      	ldr	r2, [r0, #0]
  SDRAM_HandleTypeDef *hsdram = (SDRAM_HandleTypeDef *)(hdma->Parent);
 8007224:	6b81      	ldr	r1, [r0, #56]	@ 0x38
{
 8007226:	b508      	push	{r3, lr}
  __HAL_DMA_DISABLE(hdma);
 8007228:	6813      	ldr	r3, [r2, #0]
 800722a:	f023 0301 	bic.w	r3, r3, #1
 800722e:	6013      	str	r3, [r2, #0]

  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_WRITE_PROTECTED;
 8007230:	2304      	movs	r3, #4
 8007232:	f881 302c 	strb.w	r3, [r1, #44]	@ 0x2c

#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 1)
  hsdram->DmaXferCpltCallback(hdma);
#else
  HAL_SDRAM_DMA_XferCpltCallback(hdma);
 8007236:	f002 fd2f 	bl	8009c98 <HAL_SDRAM_DMA_XferCpltCallback>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
}
 800723a:	bd08      	pop	{r3, pc}

0800723c <SDRAM_DMACplt>:
  __HAL_DMA_DISABLE(hdma);
 800723c:	6802      	ldr	r2, [r0, #0]
  SDRAM_HandleTypeDef *hsdram = (SDRAM_HandleTypeDef *)(hdma->Parent);
 800723e:	6b81      	ldr	r1, [r0, #56]	@ 0x38
{
 8007240:	b508      	push	{r3, lr}
  __HAL_DMA_DISABLE(hdma);
 8007242:	6813      	ldr	r3, [r2, #0]
 8007244:	f023 0301 	bic.w	r3, r3, #1
 8007248:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800724a:	2301      	movs	r3, #1
 800724c:	f881 302c 	strb.w	r3, [r1, #44]	@ 0x2c
  HAL_SDRAM_DMA_XferCpltCallback(hdma);
 8007250:	f002 fd22 	bl	8009c98 <HAL_SDRAM_DMA_XferCpltCallback>
}
 8007254:	bd08      	pop	{r3, pc}

08007256 <SDRAM_DMAError>:
static void SDRAM_DMAError(DMA_HandleTypeDef *hdma)
{
  SDRAM_HandleTypeDef *hsdram = (SDRAM_HandleTypeDef *)(hdma->Parent);

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8007256:	6802      	ldr	r2, [r0, #0]
  SDRAM_HandleTypeDef *hsdram = (SDRAM_HandleTypeDef *)(hdma->Parent);
 8007258:	6b81      	ldr	r1, [r0, #56]	@ 0x38
{
 800725a:	b508      	push	{r3, lr}
  __HAL_DMA_DISABLE(hdma);
 800725c:	6813      	ldr	r3, [r2, #0]
 800725e:	f023 0301 	bic.w	r3, r3, #1
 8007262:	6013      	str	r3, [r2, #0]

  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_ERROR;
 8007264:	2303      	movs	r3, #3
 8007266:	f881 302c 	strb.w	r3, [r1, #44]	@ 0x2c

#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 1)
  hsdram->DmaXferErrorCallback(hdma);
#else
  HAL_SDRAM_DMA_XferErrorCallback(hdma);
 800726a:	f002 fd1d 	bl	8009ca8 <HAL_SDRAM_DMA_XferErrorCallback>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
}
 800726e:	bd08      	pop	{r3, pc}

08007270 <HAL_SDRAM_Read_32b>:
{
 8007270:	b530      	push	{r4, r5, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8007272:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
{
 8007276:	4604      	mov	r4, r0
  if (state == HAL_SDRAM_STATE_BUSY)
 8007278:	2d02      	cmp	r5, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800727a:	b2e8      	uxtb	r0, r5
  if (state == HAL_SDRAM_STATE_BUSY)
 800727c:	d011      	beq.n	80072a2 <HAL_SDRAM_Read_32b+0x32>
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_WRITE_PROTECTED))
 800727e:	2801      	cmp	r0, #1
 8007280:	d001      	beq.n	8007286 <HAL_SDRAM_Read_32b+0x16>
 8007282:	2804      	cmp	r0, #4
 8007284:	d114      	bne.n	80072b0 <HAL_SDRAM_Read_32b+0x40>
    __HAL_LOCK(hsdram);
 8007286:	f894 502d 	ldrb.w	r5, [r4, #45]	@ 0x2d
 800728a:	2d01      	cmp	r5, #1
 800728c:	f04f 0502 	mov.w	r5, #2
 8007290:	d010      	beq.n	80072b4 <HAL_SDRAM_Read_32b+0x44>
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007292:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
    for (size = BufferSize; size != 0U; size--)
 8007296:	b92b      	cbnz	r3, 80072a4 <HAL_SDRAM_Read_32b+0x34>
    hsdram->State = state;
 8007298:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
  return HAL_OK;
 800729c:	4618      	mov	r0, r3
    __HAL_UNLOCK(hsdram);
 800729e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
}
 80072a2:	bd30      	pop	{r4, r5, pc}
      *pdestbuff = *(__IO uint32_t *)pSdramAddress;
 80072a4:	f851 5b04 	ldr.w	r5, [r1], #4
    for (size = BufferSize; size != 0U; size--)
 80072a8:	3b01      	subs	r3, #1
      *pdestbuff = *(__IO uint32_t *)pSdramAddress;
 80072aa:	f842 5b04 	str.w	r5, [r2], #4
    for (size = BufferSize; size != 0U; size--)
 80072ae:	e7f2      	b.n	8007296 <HAL_SDRAM_Read_32b+0x26>
    return  HAL_ERROR;
 80072b0:	2001      	movs	r0, #1
 80072b2:	e7f6      	b.n	80072a2 <HAL_SDRAM_Read_32b+0x32>
    return HAL_BUSY;
 80072b4:	4628      	mov	r0, r5
 80072b6:	e7f4      	b.n	80072a2 <HAL_SDRAM_Read_32b+0x32>

080072b8 <HAL_SDRAM_Write_32b>:
{
 80072b8:	b530      	push	{r4, r5, lr}
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80072ba:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
{
 80072be:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80072c0:	2d02      	cmp	r5, #2
 80072c2:	b2e8      	uxtb	r0, r5
 80072c4:	d012      	beq.n	80072ec <HAL_SDRAM_Write_32b+0x34>
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80072c6:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80072ca:	2801      	cmp	r0, #1
 80072cc:	d115      	bne.n	80072fa <HAL_SDRAM_Write_32b+0x42>
    __HAL_LOCK(hsdram);
 80072ce:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 80072d2:	2801      	cmp	r0, #1
 80072d4:	f04f 0002 	mov.w	r0, #2
 80072d8:	d008      	beq.n	80072ec <HAL_SDRAM_Write_32b+0x34>
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80072da:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
    for (size = BufferSize; size != 0U; size--)
 80072de:	b933      	cbnz	r3, 80072ee <HAL_SDRAM_Write_32b+0x36>
    hsdram->State = HAL_SDRAM_STATE_READY;
 80072e0:	2201      	movs	r2, #1
  return HAL_OK;
 80072e2:	4618      	mov	r0, r3
    __HAL_UNLOCK(hsdram);
 80072e4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
    hsdram->State = HAL_SDRAM_STATE_READY;
 80072e8:	f884 202c 	strb.w	r2, [r4, #44]	@ 0x2c
}
 80072ec:	bd30      	pop	{r4, r5, pc}
      *pSdramAddress = *psrcbuff;
 80072ee:	f852 0b04 	ldr.w	r0, [r2], #4
    for (size = BufferSize; size != 0U; size--)
 80072f2:	3b01      	subs	r3, #1
      *pSdramAddress = *psrcbuff;
 80072f4:	f841 0b04 	str.w	r0, [r1], #4
    for (size = BufferSize; size != 0U; size--)
 80072f8:	e7f1      	b.n	80072de <HAL_SDRAM_Write_32b+0x26>
    return  HAL_ERROR;
 80072fa:	2001      	movs	r0, #1
 80072fc:	e7f6      	b.n	80072ec <HAL_SDRAM_Write_32b+0x34>
	...

08007300 <HAL_SDRAM_Read_DMA>:
{
 8007300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8007302:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
{
 8007306:	4604      	mov	r4, r0
  if (state == HAL_SDRAM_STATE_BUSY)
 8007308:	2d02      	cmp	r5, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800730a:	b2e8      	uxtb	r0, r5
  if (state == HAL_SDRAM_STATE_BUSY)
 800730c:	d01d      	beq.n	800734a <HAL_SDRAM_Read_DMA+0x4a>
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_WRITE_PROTECTED))
 800730e:	2801      	cmp	r0, #1
 8007310:	d001      	beq.n	8007316 <HAL_SDRAM_Read_DMA+0x16>
 8007312:	2804      	cmp	r0, #4
 8007314:	d11a      	bne.n	800734c <HAL_SDRAM_Read_DMA+0x4c>
    __HAL_LOCK(hsdram);
 8007316:	f894 502d 	ldrb.w	r5, [r4, #45]	@ 0x2d
 800731a:	2d01      	cmp	r5, #1
 800731c:	f04f 0502 	mov.w	r5, #2
 8007320:	d016      	beq.n	8007350 <HAL_SDRAM_Read_DMA+0x50>
 8007322:	2601      	movs	r6, #1
    if (state == HAL_SDRAM_STATE_READY)
 8007324:	4f0b      	ldr	r7, [pc, #44]	@ (8007354 <HAL_SDRAM_Read_DMA+0x54>)
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007326:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
    __HAL_LOCK(hsdram);
 800732a:	f884 602d 	strb.w	r6, [r4, #45]	@ 0x2d
    if (state == HAL_SDRAM_STATE_READY)
 800732e:	4e0a      	ldr	r6, [pc, #40]	@ (8007358 <HAL_SDRAM_Read_DMA+0x58>)
      hsdram->hdma->XferCpltCallback = SDRAM_DMACplt;
 8007330:	6b25      	ldr	r5, [r4, #48]	@ 0x30
    if (state == HAL_SDRAM_STATE_READY)
 8007332:	2801      	cmp	r0, #1
 8007334:	bf18      	it	ne
 8007336:	463e      	movne	r6, r7
    hsdram->hdma->XferErrorCallback = SDRAM_DMAError;
 8007338:	4808      	ldr	r0, [pc, #32]	@ (800735c <HAL_SDRAM_Read_DMA+0x5c>)
      hsdram->hdma->XferCpltCallback = SDRAM_DMACplt;
 800733a:	63ee      	str	r6, [r5, #60]	@ 0x3c
    hsdram->hdma->XferErrorCallback = SDRAM_DMAError;
 800733c:	64e8      	str	r0, [r5, #76]	@ 0x4c
    status = HAL_DMA_Start_IT(hsdram->hdma, (uint32_t)pAddress, (uint32_t)pDstBuffer, (uint32_t)BufferSize);
 800733e:	4628      	mov	r0, r5
 8007340:	f7fc fca4 	bl	8003c8c <HAL_DMA_Start_IT>
    __HAL_UNLOCK(hsdram);
 8007344:	2300      	movs	r3, #0
 8007346:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
}
 800734a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    status = HAL_ERROR;
 800734c:	2001      	movs	r0, #1
 800734e:	e7fc      	b.n	800734a <HAL_SDRAM_Read_DMA+0x4a>
    __HAL_LOCK(hsdram);
 8007350:	4628      	mov	r0, r5
 8007352:	e7fa      	b.n	800734a <HAL_SDRAM_Read_DMA+0x4a>
 8007354:	08007223 	.word	0x08007223
 8007358:	0800723d 	.word	0x0800723d
 800735c:	08007257 	.word	0x08007257

08007360 <HAL_SDRAM_Write_DMA>:
{
 8007360:	b570      	push	{r4, r5, r6, lr}
 8007362:	460d      	mov	r5, r1
 8007364:	4611      	mov	r1, r2
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007366:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
{
 800736a:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800736c:	2a02      	cmp	r2, #2
 800736e:	b2d0      	uxtb	r0, r2
 8007370:	d018      	beq.n	80073a4 <HAL_SDRAM_Write_DMA+0x44>
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8007372:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8007376:	2a01      	cmp	r2, #1
 8007378:	b2d6      	uxtb	r6, r2
 800737a:	d114      	bne.n	80073a6 <HAL_SDRAM_Write_DMA+0x46>
    __HAL_LOCK(hsdram);
 800737c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8007380:	2002      	movs	r0, #2
 8007382:	2a01      	cmp	r2, #1
 8007384:	d00e      	beq.n	80073a4 <HAL_SDRAM_Write_DMA+0x44>
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007386:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
    hsdram->hdma->XferCpltCallback = SDRAM_DMACplt;
 800738a:	4a08      	ldr	r2, [pc, #32]	@ (80073ac <HAL_SDRAM_Write_DMA+0x4c>)
 800738c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    __HAL_LOCK(hsdram);
 800738e:	f884 602d 	strb.w	r6, [r4, #45]	@ 0x2d
    hsdram->hdma->XferCpltCallback = SDRAM_DMACplt;
 8007392:	63c2      	str	r2, [r0, #60]	@ 0x3c
    hsdram->hdma->XferErrorCallback = SDRAM_DMAError;
 8007394:	4a06      	ldr	r2, [pc, #24]	@ (80073b0 <HAL_SDRAM_Write_DMA+0x50>)
 8007396:	64c2      	str	r2, [r0, #76]	@ 0x4c
    status = HAL_DMA_Start_IT(hsdram->hdma, (uint32_t)pSrcBuffer, (uint32_t)pAddress, (uint32_t)BufferSize);
 8007398:	462a      	mov	r2, r5
 800739a:	f7fc fc77 	bl	8003c8c <HAL_DMA_Start_IT>
    __HAL_UNLOCK(hsdram);
 800739e:	2300      	movs	r3, #0
 80073a0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
}
 80073a4:	bd70      	pop	{r4, r5, r6, pc}
    status = HAL_ERROR;
 80073a6:	2001      	movs	r0, #1
 80073a8:	e7fc      	b.n	80073a4 <HAL_SDRAM_Write_DMA+0x44>
 80073aa:	bf00      	nop
 80073ac:	0800723d 	.word	0x0800723d
 80073b0:	08007257 	.word	0x08007257

080073b4 <HAL_SDRAM_SendCommand>:
{
 80073b4:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80073b6:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 80073ba:	4605      	mov	r5, r0
 80073bc:	460e      	mov	r6, r1
  if (state == HAL_SDRAM_STATE_BUSY)
 80073be:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80073c0:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 80073c2:	d010      	beq.n	80073e6 <HAL_SDRAM_SendCommand+0x32>
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80073c4:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 80073c8:	2c01      	cmp	r4, #1
 80073ca:	d110      	bne.n	80073ee <HAL_SDRAM_SendCommand+0x3a>
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80073cc:	2302      	movs	r3, #2
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80073ce:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80073d0:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80073d4:	f000 f893 	bl	80074fe <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80073d8:	6833      	ldr	r3, [r6, #0]
 80073da:	2b02      	cmp	r3, #2
 80073dc:	d104      	bne.n	80073e8 <HAL_SDRAM_SendCommand+0x34>
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80073de:	2305      	movs	r3, #5
 80073e0:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
  return HAL_OK;
 80073e4:	2000      	movs	r0, #0
}
 80073e6:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 80073e8:	f885 402c 	strb.w	r4, [r5, #44]	@ 0x2c
 80073ec:	e7fa      	b.n	80073e4 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 80073ee:	2001      	movs	r0, #1
 80073f0:	e7f9      	b.n	80073e6 <HAL_SDRAM_SendCommand+0x32>

080073f2 <HAL_SDRAM_ProgramRefreshRate>:
{
 80073f2:	b538      	push	{r3, r4, r5, lr}
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80073f4:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 80073f8:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80073fa:	2b02      	cmp	r3, #2
 80073fc:	b2d8      	uxtb	r0, r3
 80073fe:	d00d      	beq.n	800741c <HAL_SDRAM_ProgramRefreshRate+0x2a>
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8007400:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8007404:	2b01      	cmp	r3, #1
 8007406:	b2dd      	uxtb	r5, r3
 8007408:	d109      	bne.n	800741e <HAL_SDRAM_ProgramRefreshRate+0x2c>
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800740a:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800740c:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800740e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8007412:	f000 f886 	bl	8007522 <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
 8007416:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007418:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
}
 800741c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800741e:	2001      	movs	r0, #1
 8007420:	e7fc      	b.n	800741c <HAL_SDRAM_ProgramRefreshRate+0x2a>

08007422 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007426:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 800742a:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 800742e:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
 8007432:	ea43 0308 	orr.w	r3, r3, r8
 8007436:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 800743a:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800743e:	6809      	ldr	r1, [r1, #0]
 8007440:	b991      	cbnz	r1, 8007468 <FMC_SDRAM_Init+0x46>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007442:	ea43 030e 	orr.w	r3, r3, lr
 8007446:	6801      	ldr	r1, [r0, #0]
 8007448:	4313      	orrs	r3, r2
 800744a:	f421 41ff 	bic.w	r1, r1, #32640	@ 0x7f80
 800744e:	ea43 030c 	orr.w	r3, r3, ip
 8007452:	f021 017f 	bic.w	r1, r1, #127	@ 0x7f
 8007456:	433b      	orrs	r3, r7
 8007458:	4333      	orrs	r3, r6
 800745a:	432b      	orrs	r3, r5
 800745c:	4323      	orrs	r3, r4
 800745e:	430b      	orrs	r3, r1
 8007460:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8007462:	2000      	movs	r0, #0
 8007464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007468:	6801      	ldr	r1, [r0, #0]
 800746a:	ea43 030e 	orr.w	r3, r3, lr
 800746e:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 8007472:	430b      	orrs	r3, r1
 8007474:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007476:	ea42 030c 	orr.w	r3, r2, ip
 800747a:	6841      	ldr	r1, [r0, #4]
 800747c:	433b      	orrs	r3, r7
 800747e:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 8007482:	4333      	orrs	r3, r6
 8007484:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8007488:	432b      	orrs	r3, r5
 800748a:	4323      	orrs	r3, r4
 800748c:	4313      	orrs	r3, r2
 800748e:	6043      	str	r3, [r0, #4]
 8007490:	e7e7      	b.n	8007462 <FMC_SDRAM_Init+0x40>

08007492 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007492:	68cb      	ldr	r3, [r1, #12]
 8007494:	f103 3cff 	add.w	ip, r3, #4294967295
 8007498:	694b      	ldr	r3, [r1, #20]
{
 800749a:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800749c:	3b01      	subs	r3, #1
 800749e:	680f      	ldr	r7, [r1, #0]
 80074a0:	684c      	ldr	r4, [r1, #4]
 80074a2:	688e      	ldr	r6, [r1, #8]
 80074a4:	051b      	lsls	r3, r3, #20
 80074a6:	690d      	ldr	r5, [r1, #16]
 80074a8:	3c01      	subs	r4, #1
 80074aa:	6989      	ldr	r1, [r1, #24]
 80074ac:	3e01      	subs	r6, #1
 80074ae:	3d01      	subs	r5, #1
 80074b0:	3f01      	subs	r7, #1
 80074b2:	3901      	subs	r1, #1
 80074b4:	0124      	lsls	r4, r4, #4
 80074b6:	0236      	lsls	r6, r6, #8
 80074b8:	042d      	lsls	r5, r5, #16
 80074ba:	0609      	lsls	r1, r1, #24
 80074bc:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 80074c0:	b95a      	cbnz	r2, 80074da <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80074c2:	433b      	orrs	r3, r7
 80074c4:	6882      	ldr	r2, [r0, #8]
 80074c6:	4323      	orrs	r3, r4
 80074c8:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 80074cc:	4333      	orrs	r3, r6
 80074ce:	432b      	orrs	r3, r5
 80074d0:	430b      	orrs	r3, r1
 80074d2:	4313      	orrs	r3, r2
 80074d4:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 80074d6:	2000      	movs	r0, #0
 80074d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80074da:	6882      	ldr	r2, [r0, #8]
 80074dc:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80074e0:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 80074e4:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80074e6:	ea44 0306 	orr.w	r3, r4, r6
 80074ea:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80074ec:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80074ee:	68c2      	ldr	r2, [r0, #12]
 80074f0:	432b      	orrs	r3, r5
 80074f2:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 80074f6:	430b      	orrs	r3, r1
 80074f8:	4313      	orrs	r3, r2
 80074fa:	60c3      	str	r3, [r0, #12]
 80074fc:	e7eb      	b.n	80074d6 <FMC_SDRAM_Timing_Init+0x44>

080074fe <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80074fe:	6902      	ldr	r2, [r0, #16]
{
 8007500:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8007502:	e9d1 3400 	ldrd	r3, r4, [r1]
 8007506:	0d92      	lsrs	r2, r2, #22
 8007508:	4323      	orrs	r3, r4
 800750a:	68cc      	ldr	r4, [r1, #12]
 800750c:	0592      	lsls	r2, r2, #22
 800750e:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 8007512:	4313      	orrs	r3, r2
 8007514:	688a      	ldr	r2, [r1, #8]
 8007516:	3a01      	subs	r2, #1
 8007518:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800751c:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800751e:	2000      	movs	r0, #0
 8007520:	bd10      	pop	{r4, pc}

08007522 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8007522:	6943      	ldr	r3, [r0, #20]
 8007524:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8007528:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 800752c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8007530:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 8007532:	2000      	movs	r0, #0
 8007534:	4770      	bx	lr

08007536 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8007536:	b084      	sub	sp, #16
 8007538:	b510      	push	{r4, lr}
 800753a:	ac03      	add	r4, sp, #12
 800753c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007540:	460b      	mov	r3, r1
 8007542:	9904      	ldr	r1, [sp, #16]
             Init.HardwareFlowControl |\
             Init.ClockDiv
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007544:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 8007546:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 8007548:	9905      	ldr	r1, [sp, #20]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800754a:	f422 42fd 	bic.w	r2, r2, #32384	@ 0x7e80
             Init.ClockBypass         |\
 800754e:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 8007550:	9906      	ldr	r1, [sp, #24]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007552:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
             Init.ClockPowerSave      |\
 8007556:	430b      	orrs	r3, r1
             Init.BusWide             |\
 8007558:	9907      	ldr	r1, [sp, #28]
 800755a:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 800755c:	9908      	ldr	r1, [sp, #32]
 800755e:	430b      	orrs	r3, r1

  return HAL_OK;
}
 8007560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007564:	4313      	orrs	r3, r2
}
 8007566:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007568:	6043      	str	r3, [r0, #4]
}
 800756a:	2000      	movs	r0, #0
 800756c:	4770      	bx	lr

0800756e <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800756e:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
}
 8007572:	4770      	bx	lr

08007574 <SDMMC_WriteFIFO>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8007574:	680b      	ldr	r3, [r1, #0]
 8007576:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80

  return HAL_OK;
}
 800757a:	2000      	movs	r0, #0
 800757c:	4770      	bx	lr

0800757e <SDMMC_PowerState_ON>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800757e:	2303      	movs	r3, #3
 8007580:	6003      	str	r3, [r0, #0]

  return HAL_OK;
}
 8007582:	2000      	movs	r0, #0
 8007584:	4770      	bx	lr

08007586 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8007586:	6800      	ldr	r0, [r0, #0]
}
 8007588:	f000 0003 	and.w	r0, r0, #3
 800758c:	4770      	bx	lr

0800758e <SDMMC_SendCommand>:
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800758e:	680b      	ldr	r3, [r1, #0]
{
 8007590:	b510      	push	{r4, lr}
  SDMMCx->ARG = Command->Argument;
 8007592:	6083      	str	r3, [r0, #8]
                       Command->Response         |\
                       Command->WaitForInterrupt |\
                       Command->CPSM);
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007594:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007596:	e9d1 3401 	ldrd	r3, r4, [r1, #4]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800759a:	f422 627f 	bic.w	r2, r2, #4080	@ 0xff0
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800759e:	4323      	orrs	r3, r4
                       Command->Response         |\
 80075a0:	68cc      	ldr	r4, [r1, #12]
                       Command->WaitForInterrupt |\
 80075a2:	6909      	ldr	r1, [r1, #16]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80075a4:	f022 020f 	bic.w	r2, r2, #15
                       Command->Response         |\
 80075a8:	4323      	orrs	r3, r4
                       Command->WaitForInterrupt |\
 80075aa:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80075ac:	4313      	orrs	r3, r2
 80075ae:	60c3      	str	r3, [r0, #12]
  
  return HAL_OK;  
}
 80075b0:	2000      	movs	r0, #0
 80075b2:	bd10      	pop	{r4, pc}

080075b4 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80075b4:	3014      	adds	r0, #20
  
  return (*(__IO uint32_t *) tmp);
 80075b6:	5840      	ldr	r0, [r0, r1]
}  
 80075b8:	4770      	bx	lr

080075ba <SDMMC_ConfigData>:
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80075ba:	680b      	ldr	r3, [r1, #0]
{
 80075bc:	b510      	push	{r4, lr}
  SDMMCx->DTIMER = Data->DataTimeOut;
 80075be:	6243      	str	r3, [r0, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80075c0:	684b      	ldr	r3, [r1, #4]
 80075c2:	6283      	str	r3, [r0, #40]	@ 0x28
                       Data->TransferDir   |\
                       Data->TransferMode  |\
                       Data->DPSM);
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80075c4:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80075c6:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80075ca:	f022 02f7 	bic.w	r2, r2, #247	@ 0xf7
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80075ce:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 80075d0:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
 80075d2:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 80075d4:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 80075d6:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80075d8:	4313      	orrs	r3, r2
 80075da:	62c3      	str	r3, [r0, #44]	@ 0x2c

  return HAL_OK;

}
 80075dc:	2000      	movs	r0, #0
 80075de:	bd10      	pop	{r4, pc}

080075e0 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80075e0:	b510      	push	{r4, lr}
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80075e2:	2300      	movs	r3, #0
{
 80075e4:	b086      	sub	sp, #24
 80075e6:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80075e8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80075ea:	e9cd 3301 	strd	r3, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80075ee:	e9cd 3303 	strd	r3, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80075f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80075f6:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80075f8:	f7ff ffc9 	bl	800758e <SDMMC_SendCommand>
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80075fc:	4b0a      	ldr	r3, [pc, #40]	@ (8007628 <SDMMC_CmdGoIdleState+0x48>)
 80075fe:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	fbb3 f3f2 	udiv	r3, r3, r2
 8007608:	f241 3288 	movw	r2, #5000	@ 0x1388
 800760c:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 800760e:	3b01      	subs	r3, #1
 8007610:	d307      	bcc.n	8007622 <SDMMC_CmdGoIdleState+0x42>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007612:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8007614:	0612      	lsls	r2, r2, #24
 8007616:	d5fa      	bpl.n	800760e <SDMMC_CmdGoIdleState+0x2e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007618:	23c5      	movs	r3, #197	@ 0xc5
  
  return SDMMC_ERROR_NONE;
 800761a:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800761c:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 800761e:	b006      	add	sp, #24
 8007620:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 8007622:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
  return errorstate;
 8007626:	e7fa      	b.n	800761e <SDMMC_CmdGoIdleState+0x3e>
 8007628:	200000a0 	.word	0x200000a0

0800762c <SDMMC_GetCmdResp1>:
{
 800762c:	4603      	mov	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800762e:	4844      	ldr	r0, [pc, #272]	@ (8007740 <SDMMC_GetCmdResp1+0x114>)
{
 8007630:	b510      	push	{r4, lr}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007632:	6800      	ldr	r0, [r0, #0]
 8007634:	f44f 54fa 	mov.w	r4, #8000	@ 0x1f40
 8007638:	fbb0 f0f4 	udiv	r0, r0, r4
 800763c:	4342      	muls	r2, r0
    if (count-- == 0U)
 800763e:	2a00      	cmp	r2, #0
 8007640:	d049      	beq.n	80076d6 <SDMMC_GetCmdResp1+0xaa>
    sta_reg = SDMMCx->STA;
 8007642:	6b58      	ldr	r0, [r3, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007644:	f010 0f45 	tst.w	r0, #69	@ 0x45
 8007648:	d007      	beq.n	800765a <SDMMC_GetCmdResp1+0x2e>
 800764a:	0500      	lsls	r0, r0, #20
 800764c:	d405      	bmi.n	800765a <SDMMC_GetCmdResp1+0x2e>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800764e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007650:	0754      	lsls	r4, r2, #29
 8007652:	d504      	bpl.n	800765e <SDMMC_GetCmdResp1+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007654:	2004      	movs	r0, #4
 8007656:	6398      	str	r0, [r3, #56]	@ 0x38
}
 8007658:	bd10      	pop	{r4, pc}
 800765a:	3a01      	subs	r2, #1
 800765c:	e7ef      	b.n	800763e <SDMMC_GetCmdResp1+0x12>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800765e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007660:	07d0      	lsls	r0, r2, #31
 8007662:	d503      	bpl.n	800766c <SDMMC_GetCmdResp1+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007664:	2201      	movs	r2, #1
 8007666:	639a      	str	r2, [r3, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007668:	2001      	movs	r0, #1
 800766a:	e7f5      	b.n	8007658 <SDMMC_GetCmdResp1+0x2c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800766c:	22c5      	movs	r2, #197	@ 0xc5
 800766e:	639a      	str	r2, [r3, #56]	@ 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8007670:	691a      	ldr	r2, [r3, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007672:	b2d2      	uxtb	r2, r2
 8007674:	4291      	cmp	r1, r2
 8007676:	d1f7      	bne.n	8007668 <SDMMC_GetCmdResp1+0x3c>
  return (*(__IO uint32_t *) tmp);
 8007678:	695b      	ldr	r3, [r3, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800767a:	4832      	ldr	r0, [pc, #200]	@ (8007744 <SDMMC_GetCmdResp1+0x118>)
 800767c:	4018      	ands	r0, r3
 800767e:	2800      	cmp	r0, #0
 8007680:	d0ea      	beq.n	8007658 <SDMMC_GetCmdResp1+0x2c>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007682:	2b00      	cmp	r3, #0
 8007684:	db2a      	blt.n	80076dc <SDMMC_GetCmdResp1+0xb0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007686:	005a      	lsls	r2, r3, #1
 8007688:	d42b      	bmi.n	80076e2 <SDMMC_GetCmdResp1+0xb6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800768a:	009c      	lsls	r4, r3, #2
 800768c:	d42b      	bmi.n	80076e6 <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800768e:	00d9      	lsls	r1, r3, #3
 8007690:	d42b      	bmi.n	80076ea <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007692:	011a      	lsls	r2, r3, #4
 8007694:	d42c      	bmi.n	80076f0 <SDMMC_GetCmdResp1+0xc4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007696:	015c      	lsls	r4, r3, #5
 8007698:	d42d      	bmi.n	80076f6 <SDMMC_GetCmdResp1+0xca>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800769a:	01d9      	lsls	r1, r3, #7
 800769c:	d42e      	bmi.n	80076fc <SDMMC_GetCmdResp1+0xd0>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800769e:	021a      	lsls	r2, r3, #8
 80076a0:	d42f      	bmi.n	8007702 <SDMMC_GetCmdResp1+0xd6>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80076a2:	025c      	lsls	r4, r3, #9
 80076a4:	d430      	bmi.n	8007708 <SDMMC_GetCmdResp1+0xdc>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80076a6:	0299      	lsls	r1, r3, #10
 80076a8:	d431      	bmi.n	800770e <SDMMC_GetCmdResp1+0xe2>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80076aa:	02da      	lsls	r2, r3, #11
 80076ac:	d432      	bmi.n	8007714 <SDMMC_GetCmdResp1+0xe8>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80076ae:	035c      	lsls	r4, r3, #13
 80076b0:	d433      	bmi.n	800771a <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80076b2:	0399      	lsls	r1, r3, #14
 80076b4:	d434      	bmi.n	8007720 <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80076b6:	03da      	lsls	r2, r3, #15
 80076b8:	d435      	bmi.n	8007726 <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80076ba:	041c      	lsls	r4, r3, #16
 80076bc:	d436      	bmi.n	800772c <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80076be:	0459      	lsls	r1, r3, #17
 80076c0:	d437      	bmi.n	8007732 <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80076c2:	049a      	lsls	r2, r3, #18
 80076c4:	d438      	bmi.n	8007738 <SDMMC_GetCmdResp1+0x10c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80076c6:	f013 0f08 	tst.w	r3, #8
 80076ca:	bf0c      	ite	eq
 80076cc:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 80076d0:	f44f 0000 	movne.w	r0, #8388608	@ 0x800000
 80076d4:	e7c0      	b.n	8007658 <SDMMC_GetCmdResp1+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 80076d6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80076da:	e7bd      	b.n	8007658 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80076dc:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 80076e0:	e7ba      	b.n	8007658 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80076e2:	2040      	movs	r0, #64	@ 0x40
 80076e4:	e7b8      	b.n	8007658 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80076e6:	2080      	movs	r0, #128	@ 0x80
 80076e8:	e7b6      	b.n	8007658 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80076ea:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80076ee:	e7b3      	b.n	8007658 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80076f0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80076f4:	e7b0      	b.n	8007658 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80076f6:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80076fa:	e7ad      	b.n	8007658 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80076fc:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8007700:	e7aa      	b.n	8007658 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007702:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8007706:	e7a7      	b.n	8007658 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007708:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800770c:	e7a4      	b.n	8007658 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800770e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8007712:	e7a1      	b.n	8007658 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CC_ERR;
 8007714:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8007718:	e79e      	b.n	8007658 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800771a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800771e:	e79b      	b.n	8007658 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007720:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8007724:	e798      	b.n	8007658 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007726:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800772a:	e795      	b.n	8007658 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800772c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8007730:	e792      	b.n	8007658 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007732:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8007736:	e78f      	b.n	8007658 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_RESET;
 8007738:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800773c:	e78c      	b.n	8007658 <SDMMC_GetCmdResp1+0x2c>
 800773e:	bf00      	nop
 8007740:	200000a0 	.word	0x200000a0
 8007744:	fdffe008 	.word	0xfdffe008

08007748 <SDMMC_CmdBlockLength>:
{
 8007748:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800774a:	2340      	movs	r3, #64	@ 0x40
{
 800774c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800774e:	2510      	movs	r5, #16
{
 8007750:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007752:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007754:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007756:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007758:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800775c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007760:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007764:	f7ff ff13 	bl	800758e <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007768:	f241 3288 	movw	r2, #5000	@ 0x1388
 800776c:	4629      	mov	r1, r5
 800776e:	4620      	mov	r0, r4
}
 8007770:	b007      	add	sp, #28
 8007772:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007776:	f7ff bf59 	b.w	800762c <SDMMC_GetCmdResp1>

0800777a <SDMMC_CmdReadSingleBlock>:
{
 800777a:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800777c:	2340      	movs	r3, #64	@ 0x40
{
 800777e:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007780:	2511      	movs	r5, #17
{
 8007782:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007784:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007786:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007788:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800778a:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800778e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007792:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007796:	f7ff fefa 	bl	800758e <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800779a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800779e:	4629      	mov	r1, r5
 80077a0:	4620      	mov	r0, r4
}
 80077a2:	b007      	add	sp, #28
 80077a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80077a8:	f7ff bf40 	b.w	800762c <SDMMC_GetCmdResp1>

080077ac <SDMMC_CmdReadMultiBlock>:
{
 80077ac:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80077ae:	2340      	movs	r3, #64	@ 0x40
{
 80077b0:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80077b2:	2512      	movs	r5, #18
{
 80077b4:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80077b6:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80077b8:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80077ba:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80077bc:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80077c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80077c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80077c8:	f7ff fee1 	bl	800758e <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80077cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077d0:	4629      	mov	r1, r5
 80077d2:	4620      	mov	r0, r4
}
 80077d4:	b007      	add	sp, #28
 80077d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80077da:	f7ff bf27 	b.w	800762c <SDMMC_GetCmdResp1>

080077de <SDMMC_CmdWriteSingleBlock>:
{
 80077de:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80077e0:	2340      	movs	r3, #64	@ 0x40
{
 80077e2:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80077e4:	2518      	movs	r5, #24
{
 80077e6:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80077e8:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80077ea:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80077ec:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80077ee:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80077f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80077f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80077fa:	f7ff fec8 	bl	800758e <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80077fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007802:	4629      	mov	r1, r5
 8007804:	4620      	mov	r0, r4
}
 8007806:	b007      	add	sp, #28
 8007808:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800780c:	f7ff bf0e 	b.w	800762c <SDMMC_GetCmdResp1>

08007810 <SDMMC_CmdWriteMultiBlock>:
{
 8007810:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007812:	2340      	movs	r3, #64	@ 0x40
{
 8007814:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007816:	2519      	movs	r5, #25
{
 8007818:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800781a:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800781c:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800781e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007820:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007824:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007828:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800782c:	f7ff feaf 	bl	800758e <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007830:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007834:	4629      	mov	r1, r5
 8007836:	4620      	mov	r0, r4
}
 8007838:	b007      	add	sp, #28
 800783a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800783e:	f7ff bef5 	b.w	800762c <SDMMC_GetCmdResp1>

08007842 <SDMMC_CmdSDEraseStartAdd>:
{
 8007842:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007844:	2340      	movs	r3, #64	@ 0x40
{
 8007846:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007848:	2520      	movs	r5, #32
{
 800784a:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800784c:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = (uint32_t)StartAdd;
 800784e:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007850:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007852:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007856:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800785a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800785e:	f7ff fe96 	bl	800758e <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_ERASE_GRP_START, SDMMC_CMDTIMEOUT);
 8007862:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007866:	4629      	mov	r1, r5
 8007868:	4620      	mov	r0, r4
}
 800786a:	b007      	add	sp, #28
 800786c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_ERASE_GRP_START, SDMMC_CMDTIMEOUT);
 8007870:	f7ff bedc 	b.w	800762c <SDMMC_GetCmdResp1>

08007874 <SDMMC_CmdSDEraseEndAdd>:
{
 8007874:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007876:	2340      	movs	r3, #64	@ 0x40
{
 8007878:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800787a:	2521      	movs	r5, #33	@ 0x21
{
 800787c:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800787e:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = (uint32_t)EndAdd;
 8007880:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007882:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007884:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007888:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800788c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007890:	f7ff fe7d 	bl	800758e <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_ERASE_GRP_END, SDMMC_CMDTIMEOUT);
 8007894:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007898:	4629      	mov	r1, r5
 800789a:	4620      	mov	r0, r4
}
 800789c:	b007      	add	sp, #28
 800789e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_ERASE_GRP_END, SDMMC_CMDTIMEOUT);
 80078a2:	f7ff bec3 	b.w	800762c <SDMMC_GetCmdResp1>

080078a6 <SDMMC_CmdErase>:
{
 80078a6:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ERASE;
 80078a8:	2300      	movs	r3, #0
{
 80078aa:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ERASE;
 80078ac:	2526      	movs	r5, #38	@ 0x26
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80078ae:	2240      	movs	r2, #64	@ 0x40
{
 80078b0:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80078b2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80078b4:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ERASE;
 80078b8:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80078bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80078c0:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80078c2:	f7ff fe64 	bl	800758e <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_ERASE, SDMMC_MAXERASETIMEOUT);
 80078c6:	f24f 6218 	movw	r2, #63000	@ 0xf618
 80078ca:	4629      	mov	r1, r5
 80078cc:	4620      	mov	r0, r4
}
 80078ce:	b007      	add	sp, #28
 80078d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_ERASE, SDMMC_MAXERASETIMEOUT);
 80078d4:	f7ff beaa 	b.w	800762c <SDMMC_GetCmdResp1>

080078d8 <SDMMC_CmdStopTransfer>:
{
 80078d8:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80078da:	2300      	movs	r3, #0
{
 80078dc:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80078de:	250c      	movs	r5, #12
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80078e0:	2240      	movs	r2, #64	@ 0x40
{
 80078e2:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80078e4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80078e6:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80078ea:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80078ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80078f2:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80078f4:	f7ff fe4b 	bl	800758e <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80078f8:	4a03      	ldr	r2, [pc, #12]	@ (8007908 <SDMMC_CmdStopTransfer+0x30>)
 80078fa:	4629      	mov	r1, r5
 80078fc:	4620      	mov	r0, r4
}
 80078fe:	b007      	add	sp, #28
 8007900:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8007904:	f7ff be92 	b.w	800762c <SDMMC_GetCmdResp1>
 8007908:	05f5e100 	.word	0x05f5e100

0800790c <SDMMC_CmdSelDesel>:
{
 800790c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800790e:	2340      	movs	r3, #64	@ 0x40
{
 8007910:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007912:	2507      	movs	r5, #7
{
 8007914:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007916:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007918:	2200      	movs	r2, #0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800791a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800791c:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007920:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007924:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007928:	f7ff fe31 	bl	800758e <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800792c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007930:	4629      	mov	r1, r5
 8007932:	4620      	mov	r0, r4
}
 8007934:	b007      	add	sp, #28
 8007936:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800793a:	f7ff be77 	b.w	800762c <SDMMC_GetCmdResp1>

0800793e <SDMMC_CmdAppCommand>:
{
 800793e:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007940:	2340      	movs	r3, #64	@ 0x40
{
 8007942:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007944:	2537      	movs	r5, #55	@ 0x37
{
 8007946:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007948:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800794a:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800794c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800794e:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007952:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007956:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800795a:	f7ff fe18 	bl	800758e <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800795e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007962:	4629      	mov	r1, r5
 8007964:	4620      	mov	r0, r4
}
 8007966:	b007      	add	sp, #28
 8007968:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800796c:	f7ff be5e 	b.w	800762c <SDMMC_GetCmdResp1>

08007970 <SDMMC_CmdBusWidth>:
{
 8007970:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007972:	2340      	movs	r3, #64	@ 0x40
{
 8007974:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007976:	2506      	movs	r5, #6
{
 8007978:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800797a:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800797c:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800797e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007980:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007984:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007988:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800798c:	f7ff fdff 	bl	800758e <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8007990:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007994:	4629      	mov	r1, r5
 8007996:	4620      	mov	r0, r4
}
 8007998:	b007      	add	sp, #28
 800799a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800799e:	f7ff be45 	b.w	800762c <SDMMC_GetCmdResp1>

080079a2 <SDMMC_CmdSendSCR>:
{
 80079a2:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80079a4:	2300      	movs	r3, #0
{
 80079a6:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80079a8:	2533      	movs	r5, #51	@ 0x33
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80079aa:	2240      	movs	r2, #64	@ 0x40
{
 80079ac:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80079ae:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80079b0:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80079b4:	e9cd 3501 	strd	r3, r5, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80079b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80079bc:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80079be:	f7ff fde6 	bl	800758e <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80079c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079c6:	4629      	mov	r1, r5
 80079c8:	4620      	mov	r0, r4
}
 80079ca:	b007      	add	sp, #28
 80079cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80079d0:	f7ff be2c 	b.w	800762c <SDMMC_GetCmdResp1>

080079d4 <SDMMC_CmdSendStatus>:
{
 80079d4:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80079d6:	2340      	movs	r3, #64	@ 0x40
{
 80079d8:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80079da:	250d      	movs	r5, #13
{
 80079dc:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80079de:	2200      	movs	r2, #0
  sdmmc_cmdinit.Argument         = Argument;
 80079e0:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80079e2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80079e4:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80079e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80079ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80079f0:	f7ff fdcd 	bl	800758e <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80079f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079f8:	4629      	mov	r1, r5
 80079fa:	4620      	mov	r0, r4
}
 80079fc:	b007      	add	sp, #28
 80079fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8007a02:	f7ff be13 	b.w	800762c <SDMMC_GetCmdResp1>
	...

08007a08 <SDMMC_GetCmdResp2>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007a08:	4b11      	ldr	r3, [pc, #68]	@ (8007a50 <SDMMC_GetCmdResp2+0x48>)
 8007a0a:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
{
 8007a0e:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8007a16:	f241 3188 	movw	r1, #5000	@ 0x1388
 8007a1a:	434b      	muls	r3, r1
    if (count-- == 0U)
 8007a1c:	3b01      	subs	r3, #1
 8007a1e:	d313      	bcc.n	8007a48 <SDMMC_GetCmdResp2+0x40>
    sta_reg = SDMMCx->STA;
 8007a20:	6b51      	ldr	r1, [r2, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007a22:	f011 0f45 	tst.w	r1, #69	@ 0x45
 8007a26:	d0f9      	beq.n	8007a1c <SDMMC_GetCmdResp2+0x14>
 8007a28:	0509      	lsls	r1, r1, #20
 8007a2a:	d4f7      	bmi.n	8007a1c <SDMMC_GetCmdResp2+0x14>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007a2c:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8007a2e:	075b      	lsls	r3, r3, #29
 8007a30:	d502      	bpl.n	8007a38 <SDMMC_GetCmdResp2+0x30>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007a32:	2004      	movs	r0, #4
 8007a34:	6390      	str	r0, [r2, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007a36:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007a38:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8007a3a:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007a3e:	bf14      	ite	ne
 8007a40:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007a42:	23c5      	moveq	r3, #197	@ 0xc5
 8007a44:	6393      	str	r3, [r2, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 8007a46:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8007a48:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	200000a0 	.word	0x200000a0

08007a54 <SDMMC_CmdSendCID>:
{
 8007a54:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007a56:	2300      	movs	r3, #0
{
 8007a58:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007a5a:	2202      	movs	r2, #2
{
 8007a5c:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007a5e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007a60:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007a64:	22c0      	movs	r2, #192	@ 0xc0
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007a66:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007a6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a6e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007a70:	f7ff fd8d 	bl	800758e <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007a74:	4620      	mov	r0, r4
}
 8007a76:	b006      	add	sp, #24
 8007a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007a7c:	f7ff bfc4 	b.w	8007a08 <SDMMC_GetCmdResp2>

08007a80 <SDMMC_CmdSendCSD>:
{
 8007a80:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007a82:	2209      	movs	r2, #9
{
 8007a84:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007a86:	23c0      	movs	r3, #192	@ 0xc0
{
 8007a88:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8007a8a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007a8c:	2100      	movs	r1, #0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007a8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007a92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a96:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007a9a:	a901      	add	r1, sp, #4
 8007a9c:	f7ff fd77 	bl	800758e <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007aa0:	4620      	mov	r0, r4
}
 8007aa2:	b006      	add	sp, #24
 8007aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007aa8:	f7ff bfae 	b.w	8007a08 <SDMMC_GetCmdResp2>

08007aac <SDMMC_GetCmdResp3>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007aac:	4b0f      	ldr	r3, [pc, #60]	@ (8007aec <SDMMC_GetCmdResp3+0x40>)
 8007aae:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
{
 8007ab2:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	fbb3 f3f1 	udiv	r3, r3, r1
 8007aba:	f241 3188 	movw	r1, #5000	@ 0x1388
 8007abe:	434b      	muls	r3, r1
    if (count-- == 0U)
 8007ac0:	3b01      	subs	r3, #1
 8007ac2:	d30f      	bcc.n	8007ae4 <SDMMC_GetCmdResp3+0x38>
    sta_reg = SDMMCx->STA;
 8007ac4:	6b51      	ldr	r1, [r2, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007ac6:	f011 0f45 	tst.w	r1, #69	@ 0x45
 8007aca:	d0f9      	beq.n	8007ac0 <SDMMC_GetCmdResp3+0x14>
 8007acc:	0509      	lsls	r1, r1, #20
 8007ace:	d4f7      	bmi.n	8007ac0 <SDMMC_GetCmdResp3+0x14>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007ad0:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8007ad2:	f010 0004 	ands.w	r0, r0, #4
 8007ad6:	d002      	beq.n	8007ade <SDMMC_GetCmdResp3+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007ad8:	2004      	movs	r0, #4
 8007ada:	6390      	str	r0, [r2, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007adc:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007ade:	23c5      	movs	r3, #197	@ 0xc5
 8007ae0:	6393      	str	r3, [r2, #56]	@ 0x38
  return SDMMC_ERROR_NONE;
 8007ae2:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8007ae4:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	200000a0 	.word	0x200000a0

08007af0 <SDMMC_CmdAppOperCommand>:
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007af0:	f041 4100 	orr.w	r1, r1, #2147483648	@ 0x80000000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007af4:	2229      	movs	r2, #41	@ 0x29
 8007af6:	2340      	movs	r3, #64	@ 0x40
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007af8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
{
 8007afc:	b510      	push	{r4, lr}
 8007afe:	b086      	sub	sp, #24
 8007b00:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007b02:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007b04:	2100      	movs	r1, #0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007b06:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007b0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b0e:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007b12:	a901      	add	r1, sp, #4
 8007b14:	f7ff fd3b 	bl	800758e <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8007b18:	4620      	mov	r0, r4
}
 8007b1a:	b006      	add	sp, #24
 8007b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8007b20:	f7ff bfc4 	b.w	8007aac <SDMMC_GetCmdResp3>

08007b24 <SDMMC_GetCmdResp6>:
{
 8007b24:	4603      	mov	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007b26:	481e      	ldr	r0, [pc, #120]	@ (8007ba0 <SDMMC_GetCmdResp6+0x7c>)
{
 8007b28:	b510      	push	{r4, lr}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007b2a:	6800      	ldr	r0, [r0, #0]
 8007b2c:	f44f 54fa 	mov.w	r4, #8000	@ 0x1f40
 8007b30:	fbb0 f0f4 	udiv	r0, r0, r4
 8007b34:	f241 3488 	movw	r4, #5000	@ 0x1388
 8007b38:	4360      	muls	r0, r4
    if (count-- == 0U)
 8007b3a:	3801      	subs	r0, #1
 8007b3c:	d329      	bcc.n	8007b92 <SDMMC_GetCmdResp6+0x6e>
    sta_reg = SDMMCx->STA;
 8007b3e:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007b40:	f014 0f45 	tst.w	r4, #69	@ 0x45
 8007b44:	d0f9      	beq.n	8007b3a <SDMMC_GetCmdResp6+0x16>
 8007b46:	0524      	lsls	r4, r4, #20
 8007b48:	d4f7      	bmi.n	8007b3a <SDMMC_GetCmdResp6+0x16>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007b4a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8007b4c:	0744      	lsls	r4, r0, #29
 8007b4e:	d502      	bpl.n	8007b56 <SDMMC_GetCmdResp6+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007b50:	2004      	movs	r0, #4
 8007b52:	6398      	str	r0, [r3, #56]	@ 0x38
}
 8007b54:	bd10      	pop	{r4, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007b56:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8007b58:	07c0      	lsls	r0, r0, #31
 8007b5a:	d503      	bpl.n	8007b64 <SDMMC_GetCmdResp6+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	639a      	str	r2, [r3, #56]	@ 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007b60:	2001      	movs	r0, #1
 8007b62:	e7f7      	b.n	8007b54 <SDMMC_GetCmdResp6+0x30>
  return (uint8_t)(SDMMCx->RESPCMD);
 8007b64:	6918      	ldr	r0, [r3, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007b66:	b2c0      	uxtb	r0, r0
 8007b68:	4281      	cmp	r1, r0
 8007b6a:	d1f9      	bne.n	8007b60 <SDMMC_GetCmdResp6+0x3c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007b6c:	21c5      	movs	r1, #197	@ 0xc5
 8007b6e:	6399      	str	r1, [r3, #56]	@ 0x38
  return (*(__IO uint32_t *) tmp);
 8007b70:	695b      	ldr	r3, [r3, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007b72:	f413 4060 	ands.w	r0, r3, #57344	@ 0xe000
 8007b76:	d102      	bne.n	8007b7e <SDMMC_GetCmdResp6+0x5a>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007b78:	0c1b      	lsrs	r3, r3, #16
 8007b7a:	8013      	strh	r3, [r2, #0]
    return SDMMC_ERROR_NONE;
 8007b7c:	e7ea      	b.n	8007b54 <SDMMC_GetCmdResp6+0x30>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007b7e:	045a      	lsls	r2, r3, #17
 8007b80:	d40a      	bmi.n	8007b98 <SDMMC_GetCmdResp6+0x74>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007b82:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8007b86:	bf0c      	ite	eq
 8007b88:	f44f 3080 	moveq.w	r0, #65536	@ 0x10000
 8007b8c:	f44f 5080 	movne.w	r0, #4096	@ 0x1000
 8007b90:	e7e0      	b.n	8007b54 <SDMMC_GetCmdResp6+0x30>
      return SDMMC_ERROR_TIMEOUT;
 8007b92:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8007b96:	e7dd      	b.n	8007b54 <SDMMC_GetCmdResp6+0x30>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007b98:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8007b9c:	e7da      	b.n	8007b54 <SDMMC_GetCmdResp6+0x30>
 8007b9e:	bf00      	nop
 8007ba0:	200000a0 	.word	0x200000a0

08007ba4 <SDMMC_CmdSetRelAdd>:
{
 8007ba4:	b570      	push	{r4, r5, r6, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007ba6:	2300      	movs	r3, #0
{
 8007ba8:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007baa:	2603      	movs	r6, #3
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007bac:	2240      	movs	r2, #64	@ 0x40
{
 8007bae:	4604      	mov	r4, r0
 8007bb0:	460d      	mov	r5, r1
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007bb2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007bb4:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007bb8:	e9cd 3601 	strd	r3, r6, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007bbc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007bc0:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007bc2:	f7ff fce4 	bl	800758e <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007bc6:	462a      	mov	r2, r5
 8007bc8:	4631      	mov	r1, r6
 8007bca:	4620      	mov	r0, r4
}
 8007bcc:	b006      	add	sp, #24
 8007bce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007bd2:	f7ff bfa7 	b.w	8007b24 <SDMMC_GetCmdResp6>
	...

08007bd8 <SDMMC_GetCmdResp7>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007bd8:	4b13      	ldr	r3, [pc, #76]	@ (8007c28 <SDMMC_GetCmdResp7+0x50>)
 8007bda:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
{
 8007bde:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8007be6:	f241 3188 	movw	r1, #5000	@ 0x1388
 8007bea:	434b      	muls	r3, r1
    if (count-- == 0U)
 8007bec:	3b01      	subs	r3, #1
 8007bee:	d317      	bcc.n	8007c20 <SDMMC_GetCmdResp7+0x48>
    sta_reg = SDMMCx->STA;
 8007bf0:	6b51      	ldr	r1, [r2, #52]	@ 0x34
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007bf2:	f011 0f45 	tst.w	r1, #69	@ 0x45
 8007bf6:	d0f9      	beq.n	8007bec <SDMMC_GetCmdResp7+0x14>
 8007bf8:	0508      	lsls	r0, r1, #20
 8007bfa:	d4f7      	bmi.n	8007bec <SDMMC_GetCmdResp7+0x14>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007bfc:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8007bfe:	0759      	lsls	r1, r3, #29
 8007c00:	d502      	bpl.n	8007c08 <SDMMC_GetCmdResp7+0x30>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007c02:	2004      	movs	r0, #4
 8007c04:	6390      	str	r0, [r2, #56]	@ 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007c06:	4770      	bx	lr
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007c08:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8007c0a:	f010 0001 	ands.w	r0, r0, #1
 8007c0e:	d002      	beq.n	8007c16 <SDMMC_GetCmdResp7+0x3e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007c10:	2301      	movs	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007c12:	6393      	str	r3, [r2, #56]	@ 0x38
 8007c14:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007c16:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8007c18:	065b      	lsls	r3, r3, #25
 8007c1a:	d503      	bpl.n	8007c24 <SDMMC_GetCmdResp7+0x4c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007c1c:	2340      	movs	r3, #64	@ 0x40
 8007c1e:	e7f8      	b.n	8007c12 <SDMMC_GetCmdResp7+0x3a>
      return SDMMC_ERROR_TIMEOUT;
 8007c20:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
}
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	200000a0 	.word	0x200000a0

08007c2c <SDMMC_CmdOperCond>:
{
 8007c2c:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007c2e:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
{
 8007c32:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007c34:	2308      	movs	r3, #8
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007c36:	2140      	movs	r1, #64	@ 0x40
{
 8007c38:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007c3a:	e9cd 2301 	strd	r2, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	e9cd 1303 	strd	r1, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007c44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007c48:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007c4a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007c4c:	f7ff fc9f 	bl	800758e <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8007c50:	4620      	mov	r0, r4
}
 8007c52:	b006      	add	sp, #24
 8007c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8007c58:	f7ff bfbe 	b.w	8007bd8 <SDMMC_GetCmdResp7>

08007c5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007c5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8007c94 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007c60:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007c62:	e003      	b.n	8007c6c <LoopCopyDataInit>

08007c64 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007c64:	4b0c      	ldr	r3, [pc, #48]	@ (8007c98 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007c66:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007c68:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007c6a:	3104      	adds	r1, #4

08007c6c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007c6c:	480b      	ldr	r0, [pc, #44]	@ (8007c9c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8007ca0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007c70:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007c72:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007c74:	d3f6      	bcc.n	8007c64 <CopyDataInit>
  ldr  r2, =_sbss
 8007c76:	4a0b      	ldr	r2, [pc, #44]	@ (8007ca4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007c78:	e002      	b.n	8007c80 <LoopFillZerobss>

08007c7a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007c7a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007c7c:	f842 3b04 	str.w	r3, [r2], #4

08007c80 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007c80:	4b09      	ldr	r3, [pc, #36]	@ (8007ca8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007c82:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007c84:	d3f9      	bcc.n	8007c7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007c86:	f7fb fdfd 	bl	8003884 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007c8a:	f002 ff29 	bl	800aae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007c8e:	f001 fa05 	bl	800909c <main>
  bx  lr    
 8007c92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007c94:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8007c98:	080126f0 	.word	0x080126f0
  ldr  r0, =_sdata
 8007c9c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007ca0:	200005d4 	.word	0x200005d4
  ldr  r2, =_sbss
 8007ca4:	200005e0 	.word	0x200005e0
  ldr  r3, = _ebss
 8007ca8:	20028160 	.word	0x20028160

08007cac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007cac:	e7fe      	b.n	8007cac <ADC_IRQHandler>

08007cae <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8007cae:	b570      	push	{r4, r5, r6, lr}
 8007cb0:	460d      	mov	r5, r1
 8007cb2:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007cb4:	460e      	mov	r6, r1
 8007cb6:	1b73      	subs	r3, r6, r5
 8007cb8:	429c      	cmp	r4, r3
 8007cba:	dc01      	bgt.n	8007cc0 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8007cc0:	f3af 8000 	nop.w
 8007cc4:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007cc8:	e7f5      	b.n	8007cb6 <_read+0x8>

08007cca <_write>:

int _write(int file, char *ptr, int len)
{
 8007cca:	b570      	push	{r4, r5, r6, lr}
 8007ccc:	460d      	mov	r5, r1
 8007cce:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007cd0:	460e      	mov	r6, r1
 8007cd2:	1b73      	subs	r3, r6, r5
 8007cd4:	429c      	cmp	r4, r3
 8007cd6:	dc01      	bgt.n	8007cdc <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8007cd8:	4620      	mov	r0, r4
 8007cda:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8007cdc:	f816 0b01 	ldrb.w	r0, [r6], #1
 8007ce0:	f002 fc52 	bl	800a588 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007ce4:	e7f5      	b.n	8007cd2 <_write+0x8>
	...

08007ce8 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007ce8:	4a0a      	ldr	r2, [pc, #40]	@ (8007d14 <_sbrk+0x2c>)
 8007cea:	6811      	ldr	r1, [r2, #0]
{
 8007cec:	b508      	push	{r3, lr}
 8007cee:	4603      	mov	r3, r0
	if (heap_end == 0)
 8007cf0:	b909      	cbnz	r1, 8007cf6 <_sbrk+0xe>
		heap_end = &end;
 8007cf2:	4909      	ldr	r1, [pc, #36]	@ (8007d18 <_sbrk+0x30>)
 8007cf4:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 8007cf6:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8007cf8:	4669      	mov	r1, sp
 8007cfa:	4403      	add	r3, r0
 8007cfc:	428b      	cmp	r3, r1
 8007cfe:	d906      	bls.n	8007d0e <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8007d00:	f002 fee8 	bl	800aad4 <__errno>
 8007d04:	230c      	movs	r3, #12
 8007d06:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8007d08:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8007d0c:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8007d0e:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8007d10:	e7fc      	b.n	8007d0c <_sbrk+0x24>
 8007d12:	bf00      	nop
 8007d14:	20000e64 	.word	0x20000e64
 8007d18:	20028160 	.word	0x20028160

08007d1c <_close>:

int _close(int file)
{
	return -1;
}
 8007d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d20:	4770      	bx	lr

08007d22 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8007d22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
 8007d26:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8007d28:	604b      	str	r3, [r1, #4]
}
 8007d2a:	4770      	bx	lr

08007d2c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8007d2c:	2001      	movs	r0, #1
 8007d2e:	4770      	bx	lr

08007d30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8007d30:	2000      	movs	r0, #0
 8007d32:	4770      	bx	lr

08007d34 <AudioLoopback_demo>:
  * @brief  Audio Play demo
  * @param  None
  * @retval None
  */
void AudioLoopback_demo (void)
{
 8007d34:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  * @retval None
  */
static void AudioLoopback_SetHint(void)
{
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8007d38:	f04f 30ff 	mov.w	r0, #4294967295
 8007d3c:	f7fa f934 	bl	8001fa8 <BSP_LCD_Clear>

  /* Set Audio Demo description */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8007d40:	486b      	ldr	r0, [pc, #428]	@ (8007ef0 <AudioLoopback_demo+0x1bc>)
 8007d42:	f7fa f901 	bl	8001f48 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 90);
 8007d46:	f7fa f8a5 	bl	8001e94 <BSP_LCD_GetXSize>
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	b282      	uxth	r2, r0
 8007d4e:	235a      	movs	r3, #90	@ 0x5a
 8007d50:	4608      	mov	r0, r1
 8007d52:	f7fa fcd3 	bl	80026fc <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8007d56:	f04f 30ff 	mov.w	r0, #4294967295
 8007d5a:	f7fa f8f5 	bl	8001f48 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8007d5e:	4864      	ldr	r0, [pc, #400]	@ (8007ef0 <AudioLoopback_demo+0x1bc>)
 8007d60:	f7fa f8fe 	bl	8001f60 <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 8007d64:	4863      	ldr	r0, [pc, #396]	@ (8007ef4 <AudioLoopback_demo+0x1c0>)
 8007d66:	f7fa f907 	bl	8001f78 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"AUDIO LOOPBACK EXAMPLE", CENTER_MODE);
 8007d6a:	2100      	movs	r1, #0
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	4a62      	ldr	r2, [pc, #392]	@ (8007ef8 <AudioLoopback_demo+0x1c4>)
 8007d70:	4608      	mov	r0, r1
 8007d72:	f7fa fa29 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 8007d76:	4861      	ldr	r0, [pc, #388]	@ (8007efc <AudioLoopback_demo+0x1c8>)
 8007d78:	f7fa f8fe 	bl	8001f78 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t *)"Press User button for next menu", CENTER_MODE);
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	4a60      	ldr	r2, [pc, #384]	@ (8007f00 <AudioLoopback_demo+0x1cc>)
 8007d80:	211e      	movs	r1, #30
 8007d82:	2000      	movs	r0, #0
 8007d84:	f7fa fa20 	bl	80021c8 <BSP_LCD_DisplayStringAt>

  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8007d88:	4859      	ldr	r0, [pc, #356]	@ (8007ef0 <AudioLoopback_demo+0x1bc>)
 8007d8a:	f7fa f8dd 	bl	8001f48 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 100, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 110);
 8007d8e:	f7fa f881 	bl	8001e94 <BSP_LCD_GetXSize>
 8007d92:	4604      	mov	r4, r0
 8007d94:	f7fa f88a 	bl	8001eac <BSP_LCD_GetYSize>
 8007d98:	f1a0 036e 	sub.w	r3, r0, #110	@ 0x6e
 8007d9c:	f1a4 0214 	sub.w	r2, r4, #20
 8007da0:	2164      	movs	r1, #100	@ 0x64
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	200a      	movs	r0, #10
 8007da6:	b292      	uxth	r2, r2
 8007da8:	f7fa f978 	bl	800209c <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 101, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize() - 112);
 8007dac:	f7fa f872 	bl	8001e94 <BSP_LCD_GetXSize>
 8007db0:	4604      	mov	r4, r0
 8007db2:	f7fa f87b 	bl	8001eac <BSP_LCD_GetYSize>
 8007db6:	f1a0 0370 	sub.w	r3, r0, #112	@ 0x70
 8007dba:	f1a4 0216 	sub.w	r2, r4, #22
 8007dbe:	2165      	movs	r1, #101	@ 0x65
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	200b      	movs	r0, #11
 8007dc4:	b292      	uxth	r2, r2
 8007dc6:	f7fa f969 	bl	800209c <BSP_LCD_DrawRect>
  if (BSP_AUDIO_IN_OUT_Init(INPUT_DEVICE_DIGITAL_MICROPHONE_2, OUTPUT_DEVICE_HEADPHONE, DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR) == AUDIO_OK)
 8007dca:	2102      	movs	r1, #2
 8007dcc:	2310      	movs	r3, #16
 8007dce:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8007dd2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8007dd6:	9100      	str	r1, [sp, #0]
 8007dd8:	f7f9 fefe 	bl	8001bd8 <BSP_AUDIO_IN_OUT_Init>
 8007ddc:	4604      	mov	r4, r0
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007dde:	f04f 30ff 	mov.w	r0, #4294967295
  if (BSP_AUDIO_IN_OUT_Init(INPUT_DEVICE_DIGITAL_MICROPHONE_2, OUTPUT_DEVICE_HEADPHONE, DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR) == AUDIO_OK)
 8007de2:	2c00      	cmp	r4, #0
 8007de4:	d15c      	bne.n	8007ea0 <AudioLoopback_demo+0x16c>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007de6:	f7fa f8bb 	bl	8001f60 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8007dea:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 8007dee:	f7fa f8ab 	bl	8001f48 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95, (uint8_t *)"  AUDIO RECORD INIT OK  ", CENTER_MODE);
 8007df2:	f7fa f85b 	bl	8001eac <BSP_LCD_GetYSize>
 8007df6:	2301      	movs	r3, #1
 8007df8:	f1a0 015f 	sub.w	r1, r0, #95	@ 0x5f
 8007dfc:	4a41      	ldr	r2, [pc, #260]	@ (8007f04 <AudioLoopback_demo+0x1d0>)
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)" Try to reset board ", CENTER_MODE);
 8007dfe:	b289      	uxth	r1, r1
 8007e00:	2000      	movs	r0, #0
 8007e02:	f7fa f9e1 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007e06:	f04f 30ff 	mov.w	r0, #4294967295
 8007e0a:	f7fa f8a9 	bl	8001f60 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8007e0e:	4838      	ldr	r0, [pc, #224]	@ (8007ef0 <AudioLoopback_demo+0x1bc>)
 8007e10:	f7fa f89a 	bl	8001f48 <BSP_LCD_SetTextColor>
  audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8007e14:	4c3c      	ldr	r4, [pc, #240]	@ (8007f08 <AudioLoopback_demo+0x1d4>)
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"Microphones sound streamed to headphones", CENTER_MODE);
 8007e16:	f7fa f849 	bl	8001eac <BSP_LCD_GetYSize>
 8007e1a:	f1a0 0150 	sub.w	r1, r0, #80	@ 0x50
 8007e1e:	2301      	movs	r3, #1
 8007e20:	4a3a      	ldr	r2, [pc, #232]	@ (8007f0c <AudioLoopback_demo+0x1d8>)
 8007e22:	b289      	uxth	r1, r1
 8007e24:	2000      	movs	r0, #0
 8007e26:	f7fa f9cf 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  memset((uint16_t*)AUDIO_BUFFER_IN, 0, AUDIO_BLOCK_SIZE*2);
 8007e2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007e2e:	2100      	movs	r1, #0
 8007e30:	4837      	ldr	r0, [pc, #220]	@ (8007f10 <AudioLoopback_demo+0x1dc>)
 8007e32:	f002 fe00 	bl	800aa36 <memset>
  audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8007e36:	2600      	movs	r6, #0
  memset((uint16_t*)AUDIO_BUFFER_OUT, 0, AUDIO_BLOCK_SIZE*2);
 8007e38:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007e3c:	2100      	movs	r1, #0
 8007e3e:	4835      	ldr	r0, [pc, #212]	@ (8007f14 <AudioLoopback_demo+0x1e0>)
 8007e40:	f002 fdf9 	bl	800aa36 <memset>
  BSP_AUDIO_IN_Record((uint16_t*)AUDIO_BUFFER_IN, AUDIO_BLOCK_SIZE);
 8007e44:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007e48:	4831      	ldr	r0, [pc, #196]	@ (8007f10 <AudioLoopback_demo+0x1dc>)
  audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8007e4a:	6026      	str	r6, [r4, #0]
  BSP_AUDIO_IN_Record((uint16_t*)AUDIO_BUFFER_IN, AUDIO_BLOCK_SIZE);
 8007e4c:	f7f9 fda2 	bl	8001994 <BSP_AUDIO_IN_Record>
    memcpy((uint16_t *)(AUDIO_BUFFER_OUT),
 8007e50:	4f2f      	ldr	r7, [pc, #188]	@ (8007f10 <AudioLoopback_demo+0x1dc>)
  BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
 8007e52:	2005      	movs	r0, #5
    memcpy((uint16_t *)(AUDIO_BUFFER_OUT),
 8007e54:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 8007f14 <AudioLoopback_demo+0x1e0>
  BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
 8007e58:	f7f9 fbea 	bl	8001630 <BSP_AUDIO_OUT_SetAudioFrameSlot>
  BSP_AUDIO_OUT_Play((uint16_t*)AUDIO_BUFFER_OUT, AUDIO_BLOCK_SIZE * 2);
 8007e5c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007e60:	482c      	ldr	r0, [pc, #176]	@ (8007f14 <AudioLoopback_demo+0x1e0>)
 8007e62:	f7f9 fb7d 	bl	8001560 <BSP_AUDIO_OUT_Play>
    while(audio_rec_buffer_state != BUFFER_OFFSET_HALF)
 8007e66:	6823      	ldr	r3, [r4, #0]
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d12f      	bne.n	8007ecc <AudioLoopback_demo+0x198>
    memcpy((uint16_t *)(AUDIO_BUFFER_OUT),
 8007e6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007e70:	4639      	mov	r1, r7
 8007e72:	4640      	mov	r0, r8
    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8007e74:	6026      	str	r6, [r4, #0]
    memcpy((uint16_t *)(AUDIO_BUFFER_OUT),
 8007e76:	f002 fe62 	bl	800ab3e <memcpy>
    while(audio_rec_buffer_state != BUFFER_OFFSET_FULL)
 8007e7a:	6825      	ldr	r5, [r4, #0]
 8007e7c:	2d02      	cmp	r5, #2
 8007e7e:	d132      	bne.n	8007ee6 <AudioLoopback_demo+0x1b2>
    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8007e80:	2300      	movs	r3, #0
    memcpy((uint16_t *)(AUDIO_BUFFER_OUT + (AUDIO_BLOCK_SIZE)),
 8007e82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007e86:	4924      	ldr	r1, [pc, #144]	@ (8007f18 <AudioLoopback_demo+0x1e4>)
 8007e88:	4824      	ldr	r0, [pc, #144]	@ (8007f1c <AudioLoopback_demo+0x1e8>)
    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8007e8a:	6023      	str	r3, [r4, #0]
    memcpy((uint16_t *)(AUDIO_BUFFER_OUT + (AUDIO_BLOCK_SIZE)),
 8007e8c:	f002 fe57 	bl	800ab3e <memcpy>
    if (CheckForUserInput() > 0)
 8007e90:	f001 fa0e 	bl	80092b0 <CheckForUserInput>
 8007e94:	2800      	cmp	r0, #0
 8007e96:	d0e6      	beq.n	8007e66 <AudioLoopback_demo+0x132>
      BSP_AUDIO_IN_Stop(CODEC_PDWN_SW);
 8007e98:	4628      	mov	r0, r5
 8007e9a:	f7f9 fd85 	bl	80019a8 <BSP_AUDIO_IN_Stop>
      BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8007e9e:	e01c      	b.n	8007eda <AudioLoopback_demo+0x1a6>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007ea0:	f7fa f85e 	bl	8001f60 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8007ea4:	481e      	ldr	r0, [pc, #120]	@ (8007f20 <AudioLoopback_demo+0x1ec>)
 8007ea6:	f7fa f84f 	bl	8001f48 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95, (uint8_t *)"  AUDIO RECORD INIT FAIL", CENTER_MODE);
 8007eaa:	f7f9 ffff 	bl	8001eac <BSP_LCD_GetYSize>
 8007eae:	f1a0 015f 	sub.w	r1, r0, #95	@ 0x5f
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	4a1b      	ldr	r2, [pc, #108]	@ (8007f24 <AudioLoopback_demo+0x1f0>)
 8007eb6:	b289      	uxth	r1, r1
 8007eb8:	2000      	movs	r0, #0
 8007eba:	f7fa f985 	bl	80021c8 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)" Try to reset board ", CENTER_MODE);
 8007ebe:	f7f9 fff5 	bl	8001eac <BSP_LCD_GetYSize>
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	f1a0 0150 	sub.w	r1, r0, #80	@ 0x50
 8007ec8:	4a17      	ldr	r2, [pc, #92]	@ (8007f28 <AudioLoopback_demo+0x1f4>)
 8007eca:	e798      	b.n	8007dfe <AudioLoopback_demo+0xca>
      if (CheckForUserInput() > 0)
 8007ecc:	f001 f9f0 	bl	80092b0 <CheckForUserInput>
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	d0c8      	beq.n	8007e66 <AudioLoopback_demo+0x132>
        BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8007ed4:	2002      	movs	r0, #2
 8007ed6:	f7f9 fb85 	bl	80015e4 <BSP_AUDIO_OUT_Stop>
        BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8007eda:	2002      	movs	r0, #2
}
 8007edc:	b002      	add	sp, #8
 8007ede:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8007ee2:	f7f9 bb7f 	b.w	80015e4 <BSP_AUDIO_OUT_Stop>
      if (CheckForUserInput() > 0)
 8007ee6:	f001 f9e3 	bl	80092b0 <CheckForUserInput>
 8007eea:	2800      	cmp	r0, #0
 8007eec:	d0c5      	beq.n	8007e7a <AudioLoopback_demo+0x146>
 8007eee:	e7f1      	b.n	8007ed4 <AudioLoopback_demo+0x1a0>
 8007ef0:	ff0000ff 	.word	0xff0000ff
 8007ef4:	20000074 	.word	0x20000074
 8007ef8:	08011afe 	.word	0x08011afe
 8007efc:	20000084 	.word	0x20000084
 8007f00:	08011b15 	.word	0x08011b15
 8007f04:	08011b35 	.word	0x08011b35
 8007f08:	200016b4 	.word	0x200016b4
 8007f0c:	08011b7c 	.word	0x08011b7c
 8007f10:	c0115800 	.word	0xc0115800
 8007f14:	c0115c00 	.word	0xc0115c00
 8007f18:	c0115a00 	.word	0xc0115a00
 8007f1c:	c0115e00 	.word	0xc0115e00
 8007f20:	ffff0000 	.word	0xffff0000
 8007f24:	08011b4e 	.word	0x08011b4e
 8007f28:	08011b67 	.word	0x08011b67

08007f2c <GetData>:
  * @brief  Gets Data from storage unit.
  * @param  None
  * @retval None
  */
static uint32_t GetData(void *pdata, uint32_t offset, uint8_t *pbuf, uint32_t NbrOfData)
{
 8007f2c:	b570      	push	{r4, r5, r6, lr}
  uint8_t *lptr = pdata;
  uint32_t ReadDataNbr;
  
  ReadDataNbr = 0;
  while(((offset + ReadDataNbr) < AudioFileSize) && (ReadDataNbr < NbrOfData))
 8007f2e:	4c07      	ldr	r4, [pc, #28]	@ (8007f4c <GetData+0x20>)
 8007f30:	6825      	ldr	r5, [r4, #0]
 8007f32:	1844      	adds	r4, r0, r1
  ReadDataNbr = 0;
 8007f34:	2000      	movs	r0, #0
  while(((offset + ReadDataNbr) < AudioFileSize) && (ReadDataNbr < NbrOfData))
 8007f36:	1846      	adds	r6, r0, r1
 8007f38:	42b5      	cmp	r5, r6
 8007f3a:	d901      	bls.n	8007f40 <GetData+0x14>
 8007f3c:	4298      	cmp	r0, r3
 8007f3e:	d100      	bne.n	8007f42 <GetData+0x16>
  {
    pbuf[ReadDataNbr]= lptr [offset + ReadDataNbr];
    ReadDataNbr++;
  }
  return ReadDataNbr;
}
 8007f40:	bd70      	pop	{r4, r5, r6, pc}
    pbuf[ReadDataNbr]= lptr [offset + ReadDataNbr];
 8007f42:	f814 6b01 	ldrb.w	r6, [r4], #1
 8007f46:	5416      	strb	r6, [r2, r0]
    ReadDataNbr++;
 8007f48:	3001      	adds	r0, #1
 8007f4a:	e7f4      	b.n	8007f36 <GetData+0xa>
 8007f4c:	20000e80 	.word	0x20000e80

08007f50 <SCB_CleanDCache_by_Addr.constprop.0>:
  __ASM volatile ("dsb 0xF":::"memory");
 8007f50:	f3bf 8f4f 	dsb	sy
      SCB->DCCMVAC = op_addr;
 8007f54:	4a06      	ldr	r2, [pc, #24]	@ (8007f70 <SCB_CleanDCache_by_Addr.constprop.0+0x20>)
 8007f56:	f500 6380 	add.w	r3, r0, #1024	@ 0x400
 8007f5a:	f8c2 0268 	str.w	r0, [r2, #616]	@ 0x268
      op_addr += (uint32_t)linesize;
 8007f5e:	3020      	adds	r0, #32
    while (op_size > 0) {
 8007f60:	4298      	cmp	r0, r3
 8007f62:	d1fa      	bne.n	8007f5a <SCB_CleanDCache_by_Addr.constprop.0+0xa>
 8007f64:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007f68:	f3bf 8f6f 	isb	sy
}
 8007f6c:	4770      	bx	lr
 8007f6e:	bf00      	nop
 8007f70:	e000ed00 	.word	0xe000ed00

08007f74 <AUDIO_Start>:
{
 8007f74:	b570      	push	{r4, r5, r6, lr}
  buffer_ctl.state = BUFFER_OFFSET_NONE;
 8007f76:	4d11      	ldr	r5, [pc, #68]	@ (8007fbc <AUDIO_Start+0x48>)
 8007f78:	2400      	movs	r4, #0
  bytesread = GetData( (void *)AudioStartAddress,
 8007f7a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  AudioFileSize = audio_file_size;
 8007f7e:	462a      	mov	r2, r5
  buffer_ctl.state = BUFFER_OFFSET_NONE;
 8007f80:	f885 4824 	strb.w	r4, [r5, #2084]	@ 0x824
  AudioStartAddress = audio_start_address;
 8007f84:	f8c5 0828 	str.w	r0, [r5, #2088]	@ 0x828
  AudioFileSize = audio_file_size;
 8007f88:	f842 1b20 	str.w	r1, [r2], #32
  bytesread = GetData( (void *)AudioStartAddress,
 8007f8c:	4621      	mov	r1, r4
 8007f8e:	f7ff ffcd 	bl	8007f2c <GetData>
  if(bytesread > 0)
 8007f92:	4606      	mov	r6, r0
 8007f94:	b178      	cbz	r0, 8007fb6 <AUDIO_Start+0x42>
    SCB_CleanDCache_by_Addr((uint32_t*)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE/2);
 8007f96:	4610      	mov	r0, r2
    BSP_AUDIO_OUT_Play((uint16_t*)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE);
 8007f98:	f44f 6100 	mov.w	r1, #2048	@ 0x800
    SCB_CleanDCache_by_Addr((uint32_t*)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE/2);
 8007f9c:	f7ff ffd8 	bl	8007f50 <SCB_CleanDCache_by_Addr.constprop.0>
    BSP_AUDIO_OUT_Play((uint16_t*)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE);
 8007fa0:	f105 0020 	add.w	r0, r5, #32
 8007fa4:	f7f9 fadc 	bl	8001560 <BSP_AUDIO_OUT_Play>
    audio_state = AUDIO_STATE_PLAYING;      
 8007fa8:	2302      	movs	r3, #2
    return AUDIO_ERROR_NONE;
 8007faa:	4620      	mov	r0, r4
    buffer_ctl.fptr = bytesread;
 8007fac:	f8c5 6820 	str.w	r6, [r5, #2080]	@ 0x820
    audio_state = AUDIO_STATE_PLAYING;      
 8007fb0:	f885 382c 	strb.w	r3, [r5, #2092]	@ 0x82c
}
 8007fb4:	bd70      	pop	{r4, r5, r6, pc}
  return AUDIO_ERROR_IO;
 8007fb6:	2002      	movs	r0, #2
 8007fb8:	e7fc      	b.n	8007fb4 <AUDIO_Start+0x40>
 8007fba:	bf00      	nop
 8007fbc:	20000e80 	.word	0x20000e80

08007fc0 <AUDIO_Process>:
{
 8007fc0:	b538      	push	{r3, r4, r5, lr}
  switch(audio_state)
 8007fc2:	4c22      	ldr	r4, [pc, #136]	@ (800804c <AUDIO_Process+0x8c>)
 8007fc4:	f894 382c 	ldrb.w	r3, [r4, #2092]	@ 0x82c
 8007fc8:	2b02      	cmp	r3, #2
 8007fca:	d13c      	bne.n	8008046 <AUDIO_Process+0x86>
    if(buffer_ctl.fptr >= AudioFileSize)
 8007fcc:	f8d4 2820 	ldr.w	r2, [r4, #2080]	@ 0x820
 8007fd0:	2500      	movs	r5, #0
 8007fd2:	6823      	ldr	r3, [r4, #0]
 8007fd4:	429a      	cmp	r2, r3
    if(buffer_ctl.state == BUFFER_OFFSET_HALF)
 8007fd6:	f894 3824 	ldrb.w	r3, [r4, #2084]	@ 0x824
      buffer_ctl.fptr = 0; 
 8007fda:	bf24      	itt	cs
 8007fdc:	f8c4 5820 	strcs.w	r5, [r4, #2080]	@ 0x820
      error_state = AUDIO_ERROR_EOF;
 8007fe0:	2503      	movcs	r5, #3
    if(buffer_ctl.state == BUFFER_OFFSET_HALF)
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d114      	bne.n	8008010 <AUDIO_Process+0x50>
      bytesread = GetData((void *)AudioStartAddress,
 8007fe6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007fea:	4a19      	ldr	r2, [pc, #100]	@ (8008050 <AUDIO_Process+0x90>)
 8007fec:	f8d4 1820 	ldr.w	r1, [r4, #2080]	@ 0x820
 8007ff0:	f8d4 0828 	ldr.w	r0, [r4, #2088]	@ 0x828
 8007ff4:	f7ff ff9a 	bl	8007f2c <GetData>
      if( bytesread >0)
 8007ff8:	b150      	cbz	r0, 8008010 <AUDIO_Process+0x50>
        buffer_ctl.state = BUFFER_OFFSET_NONE;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	f884 3824 	strb.w	r3, [r4, #2084]	@ 0x824
        buffer_ctl.fptr += bytesread; 
 8008000:	f8d4 3820 	ldr.w	r3, [r4, #2080]	@ 0x820
 8008004:	4403      	add	r3, r0
        SCB_CleanDCache_by_Addr((uint32_t*)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE/2);
 8008006:	4610      	mov	r0, r2
        buffer_ctl.fptr += bytesread; 
 8008008:	f8c4 3820 	str.w	r3, [r4, #2080]	@ 0x820
        SCB_CleanDCache_by_Addr((uint32_t*)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE/2);
 800800c:	f7ff ffa0 	bl	8007f50 <SCB_CleanDCache_by_Addr.constprop.0>
    if(buffer_ctl.state == BUFFER_OFFSET_FULL)
 8008010:	f894 3824 	ldrb.w	r3, [r4, #2084]	@ 0x824
 8008014:	2b02      	cmp	r3, #2
 8008016:	d114      	bne.n	8008042 <AUDIO_Process+0x82>
      bytesread = GetData((void *)AudioStartAddress,
 8008018:	4a0e      	ldr	r2, [pc, #56]	@ (8008054 <AUDIO_Process+0x94>)
 800801a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800801e:	f8d4 1820 	ldr.w	r1, [r4, #2080]	@ 0x820
 8008022:	f8d4 0828 	ldr.w	r0, [r4, #2088]	@ 0x828
 8008026:	f7ff ff81 	bl	8007f2c <GetData>
      if( bytesread > 0)
 800802a:	b150      	cbz	r0, 8008042 <AUDIO_Process+0x82>
        buffer_ctl.state = BUFFER_OFFSET_NONE;
 800802c:	2300      	movs	r3, #0
 800802e:	f884 3824 	strb.w	r3, [r4, #2084]	@ 0x824
        buffer_ctl.fptr += bytesread;
 8008032:	f8d4 3820 	ldr.w	r3, [r4, #2080]	@ 0x820
 8008036:	4403      	add	r3, r0
        SCB_CleanDCache_by_Addr((uint32_t*)&buffer_ctl.buff[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2);
 8008038:	4610      	mov	r0, r2
        buffer_ctl.fptr += bytesread;
 800803a:	f8c4 3820 	str.w	r3, [r4, #2080]	@ 0x820
        SCB_CleanDCache_by_Addr((uint32_t*)&buffer_ctl.buff[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2);
 800803e:	f7ff ff87 	bl	8007f50 <SCB_CleanDCache_by_Addr.constprop.0>
}
 8008042:	4628      	mov	r0, r5
 8008044:	bd38      	pop	{r3, r4, r5, pc}
    error_state = AUDIO_ERROR_NOTREADY;
 8008046:	2501      	movs	r5, #1
 8008048:	e7fb      	b.n	8008042 <AUDIO_Process+0x82>
 800804a:	bf00      	nop
 800804c:	20000e80 	.word	0x20000e80
 8008050:	20000ea0 	.word	0x20000ea0
 8008054:	200012a0 	.word	0x200012a0

08008058 <AudioPlay_demo>:
{
 8008058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t FreqStr[256] = {0};
 800805c:	2500      	movs	r5, #0
{
 800805e:	b0cc      	sub	sp, #304	@ 0x130
  uint8_t FreqStr[256] = {0};
 8008060:	22fc      	movs	r2, #252	@ 0xfc
  uwPauseEnabledStatus = 1; /* 0 when audio is running, 1 when Pause is on */
 8008062:	2601      	movs	r6, #1
  uint8_t FreqStr[256] = {0};
 8008064:	4629      	mov	r1, r5
 8008066:	a80d      	add	r0, sp, #52	@ 0x34
  uwVolume = 70;
 8008068:	4cbf      	ldr	r4, [pc, #764]	@ (8008368 <AudioPlay_demo+0x310>)
  uwPauseEnabledStatus = 1; /* 0 when audio is running, 1 when Pause is on */
 800806a:	f8df 8354 	ldr.w	r8, [pc, #852]	@ 80083c0 <AudioPlay_demo+0x368>
  uint8_t FreqStr[256] = {0};
 800806e:	950c      	str	r5, [sp, #48]	@ 0x30
 8008070:	f002 fce1 	bl	800aa36 <memset>
  uwVolume = 70;
 8008074:	2346      	movs	r3, #70	@ 0x46
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8008076:	f04f 30ff 	mov.w	r0, #4294967295
  uwPauseEnabledStatus = 1; /* 0 when audio is running, 1 when Pause is on */
 800807a:	f8c8 6830 	str.w	r6, [r8, #2096]	@ 0x830
  uwVolume = 70;
 800807e:	6263      	str	r3, [r4, #36]	@ 0x24
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8008080:	f7f9 ff92 	bl	8001fa8 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8008084:	48b9      	ldr	r0, [pc, #740]	@ (800836c <AudioPlay_demo+0x314>)
 8008086:	f7f9 ff5f 	bl	8001f48 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 90);
 800808a:	f7f9 ff03 	bl	8001e94 <BSP_LCD_GetXSize>
 800808e:	235a      	movs	r3, #90	@ 0x5a
 8008090:	b282      	uxth	r2, r0
 8008092:	4629      	mov	r1, r5
 8008094:	4628      	mov	r0, r5
 8008096:	f7fa fb31 	bl	80026fc <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800809a:	f04f 30ff 	mov.w	r0, #4294967295
 800809e:	f7f9 ff53 	bl	8001f48 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 80080a2:	48b2      	ldr	r0, [pc, #712]	@ (800836c <AudioPlay_demo+0x314>)
 80080a4:	f7f9 ff5c 	bl	8001f60 <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 80080a8:	48b1      	ldr	r0, [pc, #708]	@ (8008370 <AudioPlay_demo+0x318>)
 80080aa:	f7f9 ff65 	bl	8001f78 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"AUDIO EXAMPLE", CENTER_MODE);
 80080ae:	4633      	mov	r3, r6
 80080b0:	4ab0      	ldr	r2, [pc, #704]	@ (8008374 <AudioPlay_demo+0x31c>)
 80080b2:	4629      	mov	r1, r5
 80080b4:	4628      	mov	r0, r5
 80080b6:	f7fa f887 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 80080ba:	48af      	ldr	r0, [pc, #700]	@ (8008378 <AudioPlay_demo+0x320>)
 80080bc:	f7f9 ff5c 	bl	8001f78 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t *)"Press User button for next menu", CENTER_MODE);
 80080c0:	4633      	mov	r3, r6
 80080c2:	4aae      	ldr	r2, [pc, #696]	@ (800837c <AudioPlay_demo+0x324>)
 80080c4:	211e      	movs	r1, #30
 80080c6:	4628      	mov	r0, r5
 80080c8:	f7fa f87e 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 45, (uint8_t *)"Press Top/Bottom screen to change Volume   ", CENTER_MODE);
 80080cc:	4633      	mov	r3, r6
 80080ce:	4aac      	ldr	r2, [pc, #688]	@ (8008380 <AudioPlay_demo+0x328>)
 80080d0:	212d      	movs	r1, #45	@ 0x2d
 80080d2:	4628      	mov	r0, r5
 80080d4:	f7fa f878 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 60, (uint8_t *)"Press Left/Right screen to change Frequency", CENTER_MODE);
 80080d8:	4633      	mov	r3, r6
 80080da:	4aaa      	ldr	r2, [pc, #680]	@ (8008384 <AudioPlay_demo+0x32c>)
 80080dc:	213c      	movs	r1, #60	@ 0x3c
 80080de:	4628      	mov	r0, r5
 80080e0:	f7fa f872 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 75, (uint8_t *)"Press 2 fingers for Pause/Resume           ", CENTER_MODE);
 80080e4:	4633      	mov	r3, r6
 80080e6:	4aa8      	ldr	r2, [pc, #672]	@ (8008388 <AudioPlay_demo+0x330>)
 80080e8:	214b      	movs	r1, #75	@ 0x4b
 80080ea:	4628      	mov	r0, r5
 80080ec:	f7fa f86c 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80080f0:	489e      	ldr	r0, [pc, #632]	@ (800836c <AudioPlay_demo+0x314>)
 80080f2:	f7f9 ff29 	bl	8001f48 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 100, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 110);
 80080f6:	f7f9 fecd 	bl	8001e94 <BSP_LCD_GetXSize>
 80080fa:	4607      	mov	r7, r0
 80080fc:	f7f9 fed6 	bl	8001eac <BSP_LCD_GetYSize>
 8008100:	f1a0 036e 	sub.w	r3, r0, #110	@ 0x6e
 8008104:	f1a7 0214 	sub.w	r2, r7, #20
 8008108:	2164      	movs	r1, #100	@ 0x64
 800810a:	b29b      	uxth	r3, r3
 800810c:	200a      	movs	r0, #10
 800810e:	b292      	uxth	r2, r2
 8008110:	f7f9 ffc4 	bl	800209c <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 101, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize() - 112);
 8008114:	f7f9 febe 	bl	8001e94 <BSP_LCD_GetXSize>
 8008118:	4607      	mov	r7, r0
 800811a:	f7f9 fec7 	bl	8001eac <BSP_LCD_GetYSize>
 800811e:	f1a0 0370 	sub.w	r3, r0, #112	@ 0x70
 8008122:	f1a7 0216 	sub.w	r2, r7, #22
 8008126:	2165      	movs	r1, #101	@ 0x65
 8008128:	b29b      	uxth	r3, r3
 800812a:	200b      	movs	r0, #11
 800812c:	b292      	uxth	r2, r2
 800812e:	f7f9 ffb5 	bl	800209c <BSP_LCD_DrawRect>
  if (BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_HEADPHONE, uwVolume, *AudioFreq_ptr) == 0)
 8008132:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008134:	69a2      	ldr	r2, [r4, #24]
 8008136:	2002      	movs	r0, #2
 8008138:	b2c9      	uxtb	r1, r1
 800813a:	f7f9 fba7 	bl	800188c <BSP_AUDIO_OUT_Init>
 800813e:	4607      	mov	r7, r0
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8008140:	f04f 30ff 	mov.w	r0, #4294967295
  if (BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_HEADPHONE, uwVolume, *AudioFreq_ptr) == 0)
 8008144:	2f00      	cmp	r7, #0
 8008146:	f040 80b1 	bne.w	80082ac <AudioPlay_demo+0x254>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800814a:	f7f9 ff09 	bl	8001f60 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 800814e:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 8008152:	f7f9 fef9 	bl	8001f48 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95, (uint8_t *)"  AUDIO CODEC   OK  ", CENTER_MODE);
 8008156:	f7f9 fea9 	bl	8001eac <BSP_LCD_GetYSize>
 800815a:	f1a0 015f 	sub.w	r1, r0, #95	@ 0x5f
 800815e:	4633      	mov	r3, r6
 8008160:	4a8a      	ldr	r2, [pc, #552]	@ (800838c <AudioPlay_demo+0x334>)
 8008162:	b289      	uxth	r1, r1
 8008164:	4638      	mov	r0, r7
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)" Try to reset board ", CENTER_MODE);
 8008166:	f7fa f82f 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  if (BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize()) != TS_OK)
 800816a:	f7f9 fe93 	bl	8001e94 <BSP_LCD_GetXSize>
 800816e:	4605      	mov	r5, r0
 8008170:	f7f9 fe9c 	bl	8001eac <BSP_LCD_GetYSize>
 8008174:	b281      	uxth	r1, r0
 8008176:	b2a8      	uxth	r0, r5
 8008178:	f7fb fa8c 	bl	8003694 <BSP_TS_Init>
 800817c:	b1d0      	cbz	r0, 80081b4 <AudioPlay_demo+0x15c>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800817e:	f04f 30ff 	mov.w	r0, #4294967295
 8008182:	f7f9 feed 	bl	8001f60 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8008186:	4882      	ldr	r0, [pc, #520]	@ (8008390 <AudioPlay_demo+0x338>)
 8008188:	f7f9 fede 	bl	8001f48 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 65, (uint8_t *)"ERROR", CENTER_MODE);
 800818c:	f7f9 fe8e 	bl	8001eac <BSP_LCD_GetYSize>
 8008190:	f1a0 0141 	sub.w	r1, r0, #65	@ 0x41
 8008194:	2301      	movs	r3, #1
 8008196:	4a7f      	ldr	r2, [pc, #508]	@ (8008394 <AudioPlay_demo+0x33c>)
 8008198:	b289      	uxth	r1, r1
 800819a:	2000      	movs	r0, #0
 800819c:	f7fa f814 	bl	80021c8 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 50, (uint8_t *)"Touchscreen cannot be initialized", CENTER_MODE);
 80081a0:	f7f9 fe84 	bl	8001eac <BSP_LCD_GetYSize>
 80081a4:	f1a0 0132 	sub.w	r1, r0, #50	@ 0x32
 80081a8:	2301      	movs	r3, #1
 80081aa:	4a7b      	ldr	r2, [pc, #492]	@ (8008398 <AudioPlay_demo+0x340>)
 80081ac:	b289      	uxth	r1, r1
 80081ae:	2000      	movs	r0, #0
 80081b0:	f7fa f80a 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  AUDIO_Start(AUDIO_FILE_ADDRESS, AUDIO_FILE_SIZE);
 80081b4:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80081b8:	4878      	ldr	r0, [pc, #480]	@ (800839c <AudioPlay_demo+0x344>)
 80081ba:	f7ff fedb 	bl	8007f74 <AUDIO_Start>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80081be:	f04f 30ff 	mov.w	r0, #4294967295
 80081c2:	f7f9 fecd 	bl	8001f60 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80081c6:	4869      	ldr	r0, [pc, #420]	@ (800836c <AudioPlay_demo+0x314>)
 80081c8:	f7f9 febe 	bl	8001f48 <BSP_LCD_SetTextColor>
  AudioFreq_ptr = AudioFreq+6; /*AF_48K*/
 80081cc:	4d74      	ldr	r5, [pc, #464]	@ (80083a0 <AudioPlay_demo+0x348>)
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"       PLAYING...     ", CENTER_MODE);
 80081ce:	f7f9 fe6d 	bl	8001eac <BSP_LCD_GetYSize>
 80081d2:	f1a0 0150 	sub.w	r1, r0, #80	@ 0x50
 80081d6:	2301      	movs	r3, #1
 80081d8:	4a72      	ldr	r2, [pc, #456]	@ (80083a4 <AudioPlay_demo+0x34c>)
 80081da:	b289      	uxth	r1, r1
 80081dc:	2000      	movs	r0, #0
 80081de:	f7f9 fff3 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  sprintf((char*)FreqStr, "       VOL:    %3lu     ", uwVolume);
 80081e2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80081e4:	4970      	ldr	r1, [pc, #448]	@ (80083a8 <AudioPlay_demo+0x350>)
 80081e6:	a80c      	add	r0, sp, #48	@ 0x30
 80081e8:	f002 fbc2 	bl	800a970 <siprintf>
        BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"       PAUSE  ...     ", CENTER_MODE);
 80081ec:	4e6f      	ldr	r6, [pc, #444]	@ (80083ac <AudioPlay_demo+0x354>)
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 65, (uint8_t *)FreqStr, CENTER_MODE);
 80081ee:	f7f9 fe5d 	bl	8001eac <BSP_LCD_GetYSize>
 80081f2:	f1a0 0141 	sub.w	r1, r0, #65	@ 0x41
 80081f6:	2301      	movs	r3, #1
 80081f8:	aa0c      	add	r2, sp, #48	@ 0x30
 80081fa:	b289      	uxth	r1, r1
 80081fc:	2000      	movs	r0, #0
 80081fe:	f7f9 ffe3 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  sprintf((char*)FreqStr, "      FREQ: %6lu     ", *AudioFreq_ptr);
 8008202:	69a2      	ldr	r2, [r4, #24]
 8008204:	496a      	ldr	r1, [pc, #424]	@ (80083b0 <AudioPlay_demo+0x358>)
 8008206:	a80c      	add	r0, sp, #48	@ 0x30
 8008208:	f002 fbb2 	bl	800a970 <siprintf>
        BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"       PLAYING...     ", CENTER_MODE);
 800820c:	4f65      	ldr	r7, [pc, #404]	@ (80083a4 <AudioPlay_demo+0x34c>)
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 50, (uint8_t *)FreqStr, CENTER_MODE);
 800820e:	f7f9 fe4d 	bl	8001eac <BSP_LCD_GetYSize>
 8008212:	f1a0 0132 	sub.w	r1, r0, #50	@ 0x32
 8008216:	2301      	movs	r3, #1
 8008218:	aa0c      	add	r2, sp, #48	@ 0x30
 800821a:	b289      	uxth	r1, r1
 800821c:	2000      	movs	r0, #0
 800821e:	f7f9 ffd3 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  BSP_AUDIO_OUT_SetVolume(70);
 8008222:	2046      	movs	r0, #70	@ 0x46
 8008224:	f7f9 f9f6 	bl	8001614 <BSP_AUDIO_OUT_SetVolume>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8008228:	f04f 30ff 	mov.w	r0, #4294967295
 800822c:	f7f9 fe98 	bl	8001f60 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8008230:	484e      	ldr	r0, [pc, #312]	@ (800836c <AudioPlay_demo+0x314>)
 8008232:	f7f9 fe89 	bl	8001f48 <BSP_LCD_SetTextColor>
    AUDIO_Process();
 8008236:	f7ff fec3 	bl	8007fc0 <AUDIO_Process>
    BSP_TS_GetState(&TS_State);
 800823a:	a801      	add	r0, sp, #4
 800823c:	f7fb fa72 	bl	8003724 <BSP_TS_GetState>
    if(TS_State.touchDetected == 1)
 8008240:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008244:	2b01      	cmp	r3, #1
 8008246:	f040 80bd 	bne.w	80083c4 <AudioPlay_demo+0x36c>
      if (TS_State.touchY[0] < 30)
 800824a:	f8bd 9010 	ldrh.w	r9, [sp, #16]
 800824e:	f1b9 0f1d 	cmp.w	r9, #29
 8008252:	d845      	bhi.n	80082e0 <AudioPlay_demo+0x288>
        if (uwVolume < 95)
 8008254:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008256:	2b5e      	cmp	r3, #94	@ 0x5e
 8008258:	d840      	bhi.n	80082dc <AudioPlay_demo+0x284>
          uwVolume += 5;
 800825a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800825c:	3305      	adds	r3, #5
        sprintf((char*)FreqStr, "       VOL:    %3lu     ", uwVolume);
 800825e:	4952      	ldr	r1, [pc, #328]	@ (80083a8 <AudioPlay_demo+0x350>)
 8008260:	a80c      	add	r0, sp, #48	@ 0x30
          uwVolume = 0;
 8008262:	6263      	str	r3, [r4, #36]	@ 0x24
        sprintf((char*)FreqStr, "       VOL:    %3lu     ", uwVolume);
 8008264:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008266:	f002 fb83 	bl	800a970 <siprintf>
        BSP_AUDIO_OUT_SetVolume(uwVolume);
 800826a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800826c:	b2c0      	uxtb	r0, r0
 800826e:	f7f9 f9d1 	bl	8001614 <BSP_AUDIO_OUT_SetVolume>
        BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 65, (uint8_t *)FreqStr, CENTER_MODE);
 8008272:	f7f9 fe1b 	bl	8001eac <BSP_LCD_GetYSize>
 8008276:	f1a0 0141 	sub.w	r1, r0, #65	@ 0x41
        BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 50, (uint8_t *)FreqStr, CENTER_MODE);
 800827a:	2301      	movs	r3, #1
 800827c:	aa0c      	add	r2, sp, #48	@ 0x30
 800827e:	b289      	uxth	r1, r1
 8008280:	2000      	movs	r0, #0
 8008282:	f7f9 ffa1 	bl	80021c8 <BSP_LCD_DisplayStringAt>
        BSP_TS_GetState(&TS_State);
 8008286:	a801      	add	r0, sp, #4
 8008288:	f7fb fa4c 	bl	8003724 <BSP_TS_GetState>
      }while(TS_State.touchDetected > 0);
 800828c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d1f8      	bne.n	8008286 <AudioPlay_demo+0x22e>
    if (CheckForUserInput() > 0)
 8008294:	f001 f80c 	bl	80092b0 <CheckForUserInput>
 8008298:	2800      	cmp	r0, #0
 800829a:	d0cc      	beq.n	8008236 <AudioPlay_demo+0x1de>
      BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 800829c:	2002      	movs	r0, #2
 800829e:	f7f9 f9a1 	bl	80015e4 <BSP_AUDIO_OUT_Stop>
      BSP_AUDIO_OUT_DeInit();
 80082a2:	f7f9 fab7 	bl	8001814 <BSP_AUDIO_OUT_DeInit>
}
 80082a6:	b04c      	add	sp, #304	@ 0x130
 80082a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80082ac:	f7f9 fe58 	bl	8001f60 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80082b0:	4837      	ldr	r0, [pc, #220]	@ (8008390 <AudioPlay_demo+0x338>)
 80082b2:	f7f9 fe49 	bl	8001f48 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95, (uint8_t *)"  AUDIO CODEC  FAIL ", CENTER_MODE);
 80082b6:	f7f9 fdf9 	bl	8001eac <BSP_LCD_GetYSize>
 80082ba:	f1a0 015f 	sub.w	r1, r0, #95	@ 0x5f
 80082be:	4633      	mov	r3, r6
 80082c0:	4a3c      	ldr	r2, [pc, #240]	@ (80083b4 <AudioPlay_demo+0x35c>)
 80082c2:	b289      	uxth	r1, r1
 80082c4:	4628      	mov	r0, r5
 80082c6:	f7f9 ff7f 	bl	80021c8 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)" Try to reset board ", CENTER_MODE);
 80082ca:	f7f9 fdef 	bl	8001eac <BSP_LCD_GetYSize>
 80082ce:	f1a0 0150 	sub.w	r1, r0, #80	@ 0x50
 80082d2:	4633      	mov	r3, r6
 80082d4:	4a38      	ldr	r2, [pc, #224]	@ (80083b8 <AudioPlay_demo+0x360>)
 80082d6:	b289      	uxth	r1, r1
 80082d8:	4628      	mov	r0, r5
 80082da:	e744      	b.n	8008166 <AudioPlay_demo+0x10e>
          uwVolume = 100;
 80082dc:	2364      	movs	r3, #100	@ 0x64
 80082de:	e7be      	b.n	800825e <AudioPlay_demo+0x206>
      else if (TS_State.touchY[0] > (BSP_LCD_GetYSize() - 30))
 80082e0:	f7f9 fde4 	bl	8001eac <BSP_LCD_GetYSize>
 80082e4:	381e      	subs	r0, #30
 80082e6:	4581      	cmp	r9, r0
 80082e8:	d907      	bls.n	80082fa <AudioPlay_demo+0x2a2>
        if (uwVolume > 5)
 80082ea:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80082ec:	2b05      	cmp	r3, #5
 80082ee:	d902      	bls.n	80082f6 <AudioPlay_demo+0x29e>
          uwVolume -= 5;
 80082f0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80082f2:	3b05      	subs	r3, #5
 80082f4:	e7b3      	b.n	800825e <AudioPlay_demo+0x206>
          uwVolume = 0;
 80082f6:	2300      	movs	r3, #0
 80082f8:	e7b1      	b.n	800825e <AudioPlay_demo+0x206>
      else if (TS_State.touchX[0] < 30)
 80082fa:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 80082fe:	f1b9 0f1d 	cmp.w	r9, #29
 8008302:	d81d      	bhi.n	8008340 <AudioPlay_demo+0x2e8>
        if (*AudioFreq_ptr != 8000)
 8008304:	682b      	ldr	r3, [r5, #0]
 8008306:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 800830a:	d014      	beq.n	8008336 <AudioPlay_demo+0x2de>
          sprintf((char*)FreqStr, "      FREQ: %6lu     ", *AudioFreq_ptr);
 800830c:	f855 2c04 	ldr.w	r2, [r5, #-4]
 8008310:	a80c      	add	r0, sp, #48	@ 0x30
 8008312:	4927      	ldr	r1, [pc, #156]	@ (80083b0 <AudioPlay_demo+0x358>)
          AudioFreq_ptr--;
 8008314:	f1a5 0904 	sub.w	r9, r5, #4
          sprintf((char*)FreqStr, "      FREQ: %6lu     ", *AudioFreq_ptr);
 8008318:	f002 fb2a 	bl	800a970 <siprintf>
          BSP_AUDIO_OUT_Pause();
 800831c:	f7f9 f93e 	bl	800159c <BSP_AUDIO_OUT_Pause>
          BSP_AUDIO_OUT_SetFrequency(*AudioFreq_ptr);
 8008320:	f855 0c04 	ldr.w	r0, [r5, #-4]
          BSP_AUDIO_OUT_SetFrequency(*AudioFreq_ptr);
 8008324:	f7f9 fb1c 	bl	8001960 <BSP_AUDIO_OUT_SetFrequency>
          AudioFreq_ptr++;
 8008328:	464d      	mov	r5, r9
          BSP_AUDIO_OUT_Resume();
 800832a:	f7f9 f949 	bl	80015c0 <BSP_AUDIO_OUT_Resume>
          BSP_AUDIO_OUT_SetVolume(uwVolume);
 800832e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8008330:	b2c0      	uxtb	r0, r0
 8008332:	f7f9 f96f 	bl	8001614 <BSP_AUDIO_OUT_SetVolume>
        BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 50, (uint8_t *)FreqStr, CENTER_MODE);
 8008336:	f7f9 fdb9 	bl	8001eac <BSP_LCD_GetYSize>
 800833a:	f1a0 0132 	sub.w	r1, r0, #50	@ 0x32
 800833e:	e79c      	b.n	800827a <AudioPlay_demo+0x222>
      else if (TS_State.touchX[0] > (BSP_LCD_GetXSize() - 30))
 8008340:	f7f9 fda8 	bl	8001e94 <BSP_LCD_GetXSize>
 8008344:	381e      	subs	r0, #30
 8008346:	4581      	cmp	r9, r0
 8008348:	d99d      	bls.n	8008286 <AudioPlay_demo+0x22e>
        if (*AudioFreq_ptr != 96000)
 800834a:	682a      	ldr	r2, [r5, #0]
 800834c:	4b1b      	ldr	r3, [pc, #108]	@ (80083bc <AudioPlay_demo+0x364>)
 800834e:	429a      	cmp	r2, r3
 8008350:	d0f1      	beq.n	8008336 <AudioPlay_demo+0x2de>
          sprintf((char*)FreqStr, "      FREQ: %6lu     ", *AudioFreq_ptr);
 8008352:	686a      	ldr	r2, [r5, #4]
 8008354:	a80c      	add	r0, sp, #48	@ 0x30
 8008356:	4916      	ldr	r1, [pc, #88]	@ (80083b0 <AudioPlay_demo+0x358>)
          AudioFreq_ptr++;
 8008358:	f105 0904 	add.w	r9, r5, #4
          sprintf((char*)FreqStr, "      FREQ: %6lu     ", *AudioFreq_ptr);
 800835c:	f002 fb08 	bl	800a970 <siprintf>
          BSP_AUDIO_OUT_Pause();
 8008360:	f7f9 f91c 	bl	800159c <BSP_AUDIO_OUT_Pause>
          BSP_AUDIO_OUT_SetFrequency(*AudioFreq_ptr);
 8008364:	6868      	ldr	r0, [r5, #4]
 8008366:	e7dd      	b.n	8008324 <AudioPlay_demo+0x2cc>
 8008368:	200000ac 	.word	0x200000ac
 800836c:	ff0000ff 	.word	0xff0000ff
 8008370:	20000074 	.word	0x20000074
 8008374:	08011ba5 	.word	0x08011ba5
 8008378:	20000084 	.word	0x20000084
 800837c:	08011b15 	.word	0x08011b15
 8008380:	08011bb3 	.word	0x08011bb3
 8008384:	08011bdf 	.word	0x08011bdf
 8008388:	08011c0b 	.word	0x08011c0b
 800838c:	08011c37 	.word	0x08011c37
 8008390:	ffff0000 	.word	0xffff0000
 8008394:	080125b0 	.word	0x080125b0
 8008398:	08011c61 	.word	0x08011c61
 800839c:	08080000 	.word	0x08080000
 80083a0:	200000c4 	.word	0x200000c4
 80083a4:	08011c83 	.word	0x08011c83
 80083a8:	08011c9a 	.word	0x08011c9a
 80083ac:	08011cc9 	.word	0x08011cc9
 80083b0:	08011cb3 	.word	0x08011cb3
 80083b4:	08011c4c 	.word	0x08011c4c
 80083b8:	08011b67 	.word	0x08011b67
 80083bc:	00017700 	.word	0x00017700
 80083c0:	20000e80 	.word	0x20000e80
    if (TS_State.touchDetected >= 2)
 80083c4:	f67f af66 	bls.w	8008294 <AudioPlay_demo+0x23c>
      if (uwPauseEnabledStatus == 1)
 80083c8:	f8d8 a830 	ldr.w	sl, [r8, #2096]	@ 0x830
 80083cc:	f1ba 0f01 	cmp.w	sl, #1
 80083d0:	d117      	bne.n	8008402 <AudioPlay_demo+0x3aa>
        uwPauseEnabledStatus = 0;
 80083d2:	f04f 0900 	mov.w	r9, #0
        BSP_AUDIO_OUT_Resume();
 80083d6:	f7f9 f8f3 	bl	80015c0 <BSP_AUDIO_OUT_Resume>
        uwPauseEnabledStatus = 0;
 80083da:	f8c8 9830 	str.w	r9, [r8, #2096]	@ 0x830
        BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"       PLAYING...     ", CENTER_MODE);
 80083de:	f7f9 fd65 	bl	8001eac <BSP_LCD_GetYSize>
 80083e2:	4653      	mov	r3, sl
 80083e4:	f1a0 0150 	sub.w	r1, r0, #80	@ 0x50
 80083e8:	463a      	mov	r2, r7
        BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"       PAUSE  ...     ", CENTER_MODE);
 80083ea:	b289      	uxth	r1, r1
 80083ec:	2000      	movs	r0, #0
 80083ee:	f7f9 feeb 	bl	80021c8 <BSP_LCD_DisplayStringAt>
        BSP_TS_GetState(&TS_State);
 80083f2:	a801      	add	r0, sp, #4
 80083f4:	f7fb f996 	bl	8003724 <BSP_TS_GetState>
      }while(TS_State.touchDetected > 0);
 80083f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d1f8      	bne.n	80083f2 <AudioPlay_demo+0x39a>
 8008400:	e748      	b.n	8008294 <AudioPlay_demo+0x23c>
        uwPauseEnabledStatus = 1;
 8008402:	f04f 0901 	mov.w	r9, #1
        BSP_AUDIO_OUT_Pause();
 8008406:	f7f9 f8c9 	bl	800159c <BSP_AUDIO_OUT_Pause>
        uwPauseEnabledStatus = 1;
 800840a:	f8c8 9830 	str.w	r9, [r8, #2096]	@ 0x830
        BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"       PAUSE  ...     ", CENTER_MODE);
 800840e:	f7f9 fd4d 	bl	8001eac <BSP_LCD_GetYSize>
 8008412:	464b      	mov	r3, r9
 8008414:	f1a0 0150 	sub.w	r1, r0, #80	@ 0x50
 8008418:	4632      	mov	r2, r6
 800841a:	e7e6      	b.n	80083ea <AudioPlay_demo+0x392>

0800841c <BSP_AUDIO_OUT_TransferComplete_CallBack>:
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
  if(audio_state == AUDIO_STATE_PLAYING)
 800841c:	4b03      	ldr	r3, [pc, #12]	@ (800842c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x10>)
 800841e:	f893 282c 	ldrb.w	r2, [r3, #2092]	@ 0x82c
 8008422:	2a02      	cmp	r2, #2
  {
    /* allows AUDIO_Process() to refill 2nd part of the buffer  */
    buffer_ctl.state = BUFFER_OFFSET_FULL;
 8008424:	bf08      	it	eq
 8008426:	f883 2824 	strbeq.w	r2, [r3, #2084]	@ 0x824
  }
}
 800842a:	4770      	bx	lr
 800842c:	20000e80 	.word	0x20000e80

08008430 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{
  if(audio_state == AUDIO_STATE_PLAYING)
 8008430:	4b04      	ldr	r3, [pc, #16]	@ (8008444 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x14>)
 8008432:	f893 282c 	ldrb.w	r2, [r3, #2092]	@ 0x82c
 8008436:	2a02      	cmp	r2, #2
  {
    /* allows AUDIO_Process() to refill 1st part of the buffer  */
    buffer_ctl.state = BUFFER_OFFSET_HALF;
 8008438:	bf04      	itt	eq
 800843a:	2201      	moveq	r2, #1
 800843c:	f883 2824 	strbeq.w	r2, [r3, #2084]	@ 0x824
  }
}
 8008440:	4770      	bx	lr
 8008442:	bf00      	nop
 8008444:	20000e80 	.word	0x20000e80

08008448 <BSP_AUDIO_OUT_Error_CallBack>:
  * @brief  Manages the DMA FIFO error event.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8008448:	b508      	push	{r3, lr}
  /* Display message on the LCD screen */
  BSP_LCD_SetBackColor(LCD_COLOR_RED);
 800844a:	4806      	ldr	r0, [pc, #24]	@ (8008464 <BSP_AUDIO_OUT_Error_CallBack+0x1c>)
 800844c:	f7f9 fd88 	bl	8001f60 <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAtLine(14, (uint8_t *)"       DMA  ERROR     ");
 8008450:	200e      	movs	r0, #14
 8008452:	4905      	ldr	r1, [pc, #20]	@ (8008468 <BSP_AUDIO_OUT_Error_CallBack+0x20>)
 8008454:	f7f9 ff0c 	bl	8002270 <BSP_LCD_DisplayStringAtLine>

  /* Stop the program with an infinite loop */
  while (BSP_PB_GetState(BUTTON_KEY) != RESET)
 8008458:	2002      	movs	r0, #2
    return;
  }

  /* could also generate a system reset to recover from the error */
  /* .... */
}
 800845a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  while (BSP_PB_GetState(BUTTON_KEY) != RESET)
 800845e:	f7f8 bf45 	b.w	80012ec <BSP_PB_GetState>
 8008462:	bf00      	nop
 8008464:	ffff0000 	.word	0xffff0000
 8008468:	08011ce0 	.word	0x08011ce0

0800846c <AudioRec_demo>:
  * @brief  Audio Play demo
  * @param  None
  * @retval None
  */
void AudioRec_demo (void)
{
 800846c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  * @retval None
  */
static void AudioRec_SetHint(void)
{
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800846e:	f04f 30ff 	mov.w	r0, #4294967295
 8008472:	f7f9 fd99 	bl	8001fa8 <BSP_LCD_Clear>

  /* Set Audio Demo description */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8008476:	4877      	ldr	r0, [pc, #476]	@ (8008654 <AudioRec_demo+0x1e8>)
 8008478:	f7f9 fd66 	bl	8001f48 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 90);
 800847c:	f7f9 fd0a 	bl	8001e94 <BSP_LCD_GetXSize>
 8008480:	2100      	movs	r1, #0
 8008482:	b282      	uxth	r2, r0
 8008484:	235a      	movs	r3, #90	@ 0x5a
 8008486:	4608      	mov	r0, r1
 8008488:	f7fa f938 	bl	80026fc <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800848c:	f04f 30ff 	mov.w	r0, #4294967295
 8008490:	f7f9 fd5a 	bl	8001f48 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8008494:	486f      	ldr	r0, [pc, #444]	@ (8008654 <AudioRec_demo+0x1e8>)
 8008496:	f7f9 fd63 	bl	8001f60 <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 800849a:	486f      	ldr	r0, [pc, #444]	@ (8008658 <AudioRec_demo+0x1ec>)
 800849c:	f7f9 fd6c 	bl	8001f78 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"AUDIO RECORD EXAMPLE", CENTER_MODE);
 80084a0:	2100      	movs	r1, #0
 80084a2:	2301      	movs	r3, #1
 80084a4:	4a6d      	ldr	r2, [pc, #436]	@ (800865c <AudioRec_demo+0x1f0>)
 80084a6:	4608      	mov	r0, r1
 80084a8:	f7f9 fe8e 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 80084ac:	486c      	ldr	r0, [pc, #432]	@ (8008660 <AudioRec_demo+0x1f4>)
 80084ae:	f7f9 fd63 	bl	8001f78 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t *)"Press User button for next menu", CENTER_MODE);
 80084b2:	2301      	movs	r3, #1
 80084b4:	4a6b      	ldr	r2, [pc, #428]	@ (8008664 <AudioRec_demo+0x1f8>)
 80084b6:	211e      	movs	r1, #30
 80084b8:	2000      	movs	r0, #0
 80084ba:	f7f9 fe85 	bl	80021c8 <BSP_LCD_DisplayStringAt>

  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80084be:	4865      	ldr	r0, [pc, #404]	@ (8008654 <AudioRec_demo+0x1e8>)
 80084c0:	f7f9 fd42 	bl	8001f48 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 100, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 110);
 80084c4:	f7f9 fce6 	bl	8001e94 <BSP_LCD_GetXSize>
 80084c8:	4604      	mov	r4, r0
 80084ca:	f7f9 fcef 	bl	8001eac <BSP_LCD_GetYSize>
 80084ce:	f1a0 036e 	sub.w	r3, r0, #110	@ 0x6e
 80084d2:	f1a4 0214 	sub.w	r2, r4, #20
 80084d6:	2164      	movs	r1, #100	@ 0x64
 80084d8:	b29b      	uxth	r3, r3
 80084da:	200a      	movs	r0, #10
 80084dc:	b292      	uxth	r2, r2
 80084de:	f7f9 fddd 	bl	800209c <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 101, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize() - 112);
 80084e2:	f7f9 fcd7 	bl	8001e94 <BSP_LCD_GetXSize>
 80084e6:	4604      	mov	r4, r0
 80084e8:	f7f9 fce0 	bl	8001eac <BSP_LCD_GetYSize>
 80084ec:	f1a0 0370 	sub.w	r3, r0, #112	@ 0x70
 80084f0:	f1a4 0216 	sub.w	r2, r4, #22
 80084f4:	2165      	movs	r1, #101	@ 0x65
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	200b      	movs	r0, #11
 80084fa:	b292      	uxth	r2, r2
 80084fc:	f7f9 fdce 	bl	800209c <BSP_LCD_DrawRect>
  if (BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR) == AUDIO_OK)
 8008500:	2202      	movs	r2, #2
 8008502:	2110      	movs	r1, #16
 8008504:	f44f 507a 	mov.w	r0, #16000	@ 0x3e80
 8008508:	f7f9 fb5e 	bl	8001bc8 <BSP_AUDIO_IN_Init>
 800850c:	4604      	mov	r4, r0
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800850e:	f04f 30ff 	mov.w	r0, #4294967295
  if (BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION, DEFAULT_AUDIO_IN_CHANNEL_NBR) == AUDIO_OK)
 8008512:	2c00      	cmp	r4, #0
 8008514:	d17a      	bne.n	800860c <AudioRec_demo+0x1a0>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8008516:	f7f9 fd23 	bl	8001f60 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 800851a:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 800851e:	f7f9 fd13 	bl	8001f48 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95, (uint8_t *)"  AUDIO RECORD INIT OK  ", CENTER_MODE);
 8008522:	f7f9 fcc3 	bl	8001eac <BSP_LCD_GetYSize>
 8008526:	2301      	movs	r3, #1
 8008528:	f1a0 015f 	sub.w	r1, r0, #95	@ 0x5f
 800852c:	4a4e      	ldr	r2, [pc, #312]	@ (8008668 <AudioRec_demo+0x1fc>)
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)" Try to reset board ", CENTER_MODE);
 800852e:	b289      	uxth	r1, r1
  audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8008530:	2400      	movs	r4, #0
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)" Try to reset board ", CENTER_MODE);
 8008532:	2000      	movs	r0, #0
  audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8008534:	4d4d      	ldr	r5, [pc, #308]	@ (800866c <AudioRec_demo+0x200>)
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)" Try to reset board ", CENTER_MODE);
 8008536:	f7f9 fe47 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800853a:	f04f 30ff 	mov.w	r0, #4294967295
  audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 800853e:	602c      	str	r4, [r5, #0]
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8008540:	f7f9 fd0e 	bl	8001f60 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8008544:	4843      	ldr	r0, [pc, #268]	@ (8008654 <AudioRec_demo+0x1e8>)
 8008546:	f7f9 fcff 	bl	8001f48 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"       RECORDING...     ", CENTER_MODE);
 800854a:	f7f9 fcaf 	bl	8001eac <BSP_LCD_GetYSize>
 800854e:	f1a0 0150 	sub.w	r1, r0, #80	@ 0x50
 8008552:	2301      	movs	r3, #1
 8008554:	4620      	mov	r0, r4
 8008556:	4a46      	ldr	r2, [pc, #280]	@ (8008670 <AudioRec_demo+0x204>)
 8008558:	b289      	uxth	r1, r1
  BSP_AUDIO_IN_Record(internal_buffer, AUDIO_BLOCK_SIZE);
 800855a:	4c46      	ldr	r4, [pc, #280]	@ (8008674 <AudioRec_demo+0x208>)
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"       RECORDING...     ", CENTER_MODE);
 800855c:	f7f9 fe34 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  BSP_AUDIO_IN_Record(internal_buffer, AUDIO_BLOCK_SIZE);
 8008560:	f64f 71fe 	movw	r1, #65534	@ 0xfffe
 8008564:	4844      	ldr	r0, [pc, #272]	@ (8008678 <AudioRec_demo+0x20c>)
 8008566:	f7f9 fa15 	bl	8001994 <BSP_AUDIO_IN_Record>
    while(audio_rec_buffer_state != BUFFER_OFFSET_HALF)
 800856a:	682b      	ldr	r3, [r5, #0]
 800856c:	2b01      	cmp	r3, #1
 800856e:	d163      	bne.n	8008638 <AudioRec_demo+0x1cc>
    memcpy((uint32_t *)(AUDIO_REC_START_ADDR + (block_number * AUDIO_BLOCK_SIZE * 2)),
 8008570:	f5a4 407f 	sub.w	r0, r4, #65280	@ 0xff00
    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8008574:	2300      	movs	r3, #0
    memcpy((uint32_t *)(AUDIO_REC_START_ADDR + (block_number * AUDIO_BLOCK_SIZE * 2)),
 8008576:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800857a:	493f      	ldr	r1, [pc, #252]	@ (8008678 <AudioRec_demo+0x20c>)
 800857c:	38fe      	subs	r0, #254	@ 0xfe
    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 800857e:	602b      	str	r3, [r5, #0]
    memcpy((uint32_t *)(AUDIO_REC_START_ADDR + (block_number * AUDIO_BLOCK_SIZE * 2)),
 8008580:	f002 fadd 	bl	800ab3e <memcpy>
    while(audio_rec_buffer_state != BUFFER_OFFSET_FULL)
 8008584:	682f      	ldr	r7, [r5, #0]
 8008586:	2f02      	cmp	r7, #2
 8008588:	d15f      	bne.n	800864a <AudioRec_demo+0x1de>
    memcpy((uint32_t *)(AUDIO_REC_START_ADDR + (block_number * AUDIO_BLOCK_SIZE * 2) + (AUDIO_BLOCK_SIZE)),
 800858a:	4620      	mov	r0, r4
    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 800858c:	2600      	movs	r6, #0
  for (block_number = 0; block_number < AUDIO_NB_BLOCKS; block_number++)
 800858e:	f504 34ff 	add.w	r4, r4, #130560	@ 0x1fe00
    memcpy((uint32_t *)(AUDIO_REC_START_ADDR + (block_number * AUDIO_BLOCK_SIZE * 2) + (AUDIO_BLOCK_SIZE)),
 8008592:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8008596:	4939      	ldr	r1, [pc, #228]	@ (800867c <AudioRec_demo+0x210>)
  for (block_number = 0; block_number < AUDIO_NB_BLOCKS; block_number++)
 8008598:	f504 74fe 	add.w	r4, r4, #508	@ 0x1fc
    audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 800859c:	602e      	str	r6, [r5, #0]
    memcpy((uint32_t *)(AUDIO_REC_START_ADDR + (block_number * AUDIO_BLOCK_SIZE * 2) + (AUDIO_BLOCK_SIZE)),
 800859e:	f002 face 	bl	800ab3e <memcpy>
  for (block_number = 0; block_number < AUDIO_NB_BLOCKS; block_number++)
 80085a2:	4b37      	ldr	r3, [pc, #220]	@ (8008680 <AudioRec_demo+0x214>)
 80085a4:	429c      	cmp	r4, r3
 80085a6:	d1e0      	bne.n	800856a <AudioRec_demo+0xfe>
  BSP_AUDIO_IN_Stop(CODEC_PDWN_SW);
 80085a8:	4638      	mov	r0, r7
 80085aa:	f7f9 f9fd 	bl	80019a8 <BSP_AUDIO_IN_Stop>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80085ae:	f04f 30ff 	mov.w	r0, #4294967295
 80085b2:	f7f9 fcd5 	bl	8001f60 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80085b6:	4827      	ldr	r0, [pc, #156]	@ (8008654 <AudioRec_demo+0x1e8>)
 80085b8:	f7f9 fcc6 	bl	8001f48 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 65, (uint8_t *)"RECORDING DONE, START PLAYBACK...", CENTER_MODE);
 80085bc:	f7f9 fc76 	bl	8001eac <BSP_LCD_GetYSize>
 80085c0:	f1a0 0141 	sub.w	r1, r0, #65	@ 0x41
 80085c4:	2301      	movs	r3, #1
 80085c6:	4a2f      	ldr	r2, [pc, #188]	@ (8008684 <AudioRec_demo+0x218>)
 80085c8:	b289      	uxth	r1, r1
 80085ca:	4630      	mov	r0, r6
 80085cc:	f7f9 fdfc 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  BSP_AUDIO_OUT_Init(OUTPUT_DEVICE_HEADPHONE, 70, DEFAULT_AUDIO_IN_FREQ);
 80085d0:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80085d4:	2146      	movs	r1, #70	@ 0x46
 80085d6:	4638      	mov	r0, r7
 80085d8:	f7f9 f958 	bl	800188c <BSP_AUDIO_OUT_Init>
  BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
 80085dc:	2005      	movs	r0, #5
 80085de:	f7f9 f827 	bl	8001630 <BSP_AUDIO_OUT_SetAudioFrameSlot>
  AUDIO_Start(AUDIO_REC_START_ADDR, AUDIO_BLOCK_SIZE * AUDIO_NB_BLOCKS * 2);  /* Use Audio play demo to playback sound */
 80085e2:	4929      	ldr	r1, [pc, #164]	@ (8008688 <AudioRec_demo+0x21c>)
 80085e4:	4829      	ldr	r0, [pc, #164]	@ (800868c <AudioRec_demo+0x220>)
 80085e6:	f7ff fcc5 	bl	8007f74 <AUDIO_Start>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 40, (uint8_t *)"PLAYBACK DONE", CENTER_MODE);
 80085ea:	f7f9 fc5f 	bl	8001eac <BSP_LCD_GetYSize>
 80085ee:	f1a0 0128 	sub.w	r1, r0, #40	@ 0x28
 80085f2:	2301      	movs	r3, #1
 80085f4:	4a26      	ldr	r2, [pc, #152]	@ (8008690 <AudioRec_demo+0x224>)
 80085f6:	b289      	uxth	r1, r1
 80085f8:	4630      	mov	r0, r6
 80085fa:	f7f9 fde5 	bl	80021c8 <BSP_LCD_DisplayStringAt>
    AUDIO_Process();
 80085fe:	f7ff fcdf 	bl	8007fc0 <AUDIO_Process>
    if (CheckForUserInput() > 0)
 8008602:	f000 fe55 	bl	80092b0 <CheckForUserInput>
 8008606:	2800      	cmp	r0, #0
 8008608:	d0f9      	beq.n	80085fe <AudioRec_demo+0x192>
 800860a:	e019      	b.n	8008640 <AudioRec_demo+0x1d4>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800860c:	f7f9 fca8 	bl	8001f60 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8008610:	4820      	ldr	r0, [pc, #128]	@ (8008694 <AudioRec_demo+0x228>)
 8008612:	f7f9 fc99 	bl	8001f48 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95, (uint8_t *)"  AUDIO RECORD INIT FAIL", CENTER_MODE);
 8008616:	f7f9 fc49 	bl	8001eac <BSP_LCD_GetYSize>
 800861a:	f1a0 015f 	sub.w	r1, r0, #95	@ 0x5f
 800861e:	2301      	movs	r3, #1
 8008620:	4a1d      	ldr	r2, [pc, #116]	@ (8008698 <AudioRec_demo+0x22c>)
 8008622:	b289      	uxth	r1, r1
 8008624:	2000      	movs	r0, #0
 8008626:	f7f9 fdcf 	bl	80021c8 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)" Try to reset board ", CENTER_MODE);
 800862a:	f7f9 fc3f 	bl	8001eac <BSP_LCD_GetYSize>
 800862e:	2301      	movs	r3, #1
 8008630:	f1a0 0150 	sub.w	r1, r0, #80	@ 0x50
 8008634:	4a19      	ldr	r2, [pc, #100]	@ (800869c <AudioRec_demo+0x230>)
 8008636:	e77a      	b.n	800852e <AudioRec_demo+0xc2>
      if (CheckForUserInput() > 0)
 8008638:	f000 fe3a 	bl	80092b0 <CheckForUserInput>
 800863c:	2800      	cmp	r0, #0
 800863e:	d094      	beq.n	800856a <AudioRec_demo+0xfe>
        BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8008640:	2002      	movs	r0, #2
}
 8008642:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8008646:	f7f8 bfcd 	b.w	80015e4 <BSP_AUDIO_OUT_Stop>
      if (CheckForUserInput() > 0)
 800864a:	f000 fe31 	bl	80092b0 <CheckForUserInput>
 800864e:	2800      	cmp	r0, #0
 8008650:	d098      	beq.n	8008584 <AudioRec_demo+0x118>
 8008652:	e7f5      	b.n	8008640 <AudioRec_demo+0x1d4>
 8008654:	ff0000ff 	.word	0xff0000ff
 8008658:	20000074 	.word	0x20000074
 800865c:	08011cf7 	.word	0x08011cf7
 8008660:	20000084 	.word	0x20000084
 8008664:	08011b15 	.word	0x08011b15
 8008668:	08011b35 	.word	0x08011b35
 800866c:	200016b4 	.word	0x200016b4
 8008670:	08011d0c 	.word	0x08011d0c
 8008674:	c01257fe 	.word	0xc01257fe
 8008678:	200016b8 	.word	0x200016b8
 800867c:	200116b6 	.word	0x200116b6
 8008680:	c01a57ee 	.word	0xc01a57ee
 8008684:	08011d25 	.word	0x08011d25
 8008688:	0007fff0 	.word	0x0007fff0
 800868c:	c0115800 	.word	0xc0115800
 8008690:	08011d47 	.word	0x08011d47
 8008694:	ffff0000 	.word	0xffff0000
 8008698:	08011b4e 	.word	0x08011b4e
 800869c:	08011b67 	.word	0x08011b67

080086a0 <BSP_AUDIO_IN_TransferComplete_CallBack>:
  * @param None
  * @retval None
  */
void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
  audio_rec_buffer_state = BUFFER_OFFSET_FULL;
 80086a0:	4b01      	ldr	r3, [pc, #4]	@ (80086a8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x8>)
 80086a2:	2202      	movs	r2, #2
 80086a4:	601a      	str	r2, [r3, #0]
  return;
}
 80086a6:	4770      	bx	lr
 80086a8:	200016b4 	.word	0x200016b4

080086ac <BSP_AUDIO_IN_HalfTransfer_CallBack>:
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{
  audio_rec_buffer_state = BUFFER_OFFSET_HALF;
 80086ac:	4b01      	ldr	r3, [pc, #4]	@ (80086b4 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8>)
 80086ae:	2201      	movs	r2, #1
 80086b0:	601a      	str	r2, [r3, #0]
  return;
}
 80086b2:	4770      	bx	lr
 80086b4:	200016b4 	.word	0x200016b4

080086b8 <BSP_AUDIO_IN_Error_CallBack>:
  * @brief  Audio IN Error callback function.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_Error_CallBack(void)
{
 80086b8:	b508      	push	{r3, lr}
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
  /* Display message on the LCD screen */
  BSP_LCD_SetBackColor(LCD_COLOR_RED);
 80086ba:	480a      	ldr	r0, [pc, #40]	@ (80086e4 <BSP_AUDIO_IN_Error_CallBack+0x2c>)
 80086bc:	f7f9 fc50 	bl	8001f60 <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"       DMA  ERROR     ", CENTER_MODE);
 80086c0:	f7f9 fc66 	bl	8001f90 <BSP_LCD_GetFont>
 80086c4:	88c1      	ldrh	r1, [r0, #6]
 80086c6:	2301      	movs	r3, #1
 80086c8:	2000      	movs	r0, #0
 80086ca:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80086ce:	4a06      	ldr	r2, [pc, #24]	@ (80086e8 <BSP_AUDIO_IN_Error_CallBack+0x30>)
 80086d0:	0049      	lsls	r1, r1, #1
 80086d2:	b289      	uxth	r1, r1
 80086d4:	f7f9 fd78 	bl	80021c8 <BSP_LCD_DisplayStringAt>

  /* Stop the program with an infinite loop */
  while (BSP_PB_GetState(BUTTON_KEY) != RESET)
 80086d8:	2002      	movs	r0, #2
  {
    return;
  }
  /* could also generate a system reset to recover from the error */
  /* .... */
}
 80086da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  while (BSP_PB_GetState(BUTTON_KEY) != RESET)
 80086de:	f7f8 be05 	b.w	80012ec <BSP_PB_GetState>
 80086e2:	bf00      	nop
 80086e4:	ffff0000 	.word	0xffff0000
 80086e8:	08011ce0 	.word	0x08011ce0

080086ec <BSP_LCD_DMA2D_IRQHandler>:
  * @param  None
  * @retval None
  */
void BSP_LCD_DMA2D_IRQHandler(void)
{
  HAL_DMA2D_IRQHandler(&hdma2d_camera);
 80086ec:	4801      	ldr	r0, [pc, #4]	@ (80086f4 <BSP_LCD_DMA2D_IRQHandler+0x8>)
 80086ee:	f7fb bd0f 	b.w	8004110 <HAL_DMA2D_IRQHandler>
 80086f2:	bf00      	nop
 80086f4:	200216bc 	.word	0x200216bc

080086f8 <HAL_DMA2D_MspInit>:
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80086f8:	4b0a      	ldr	r3, [pc, #40]	@ (8008724 <HAL_DMA2D_MspInit+0x2c>)
{
 80086fa:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80086fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30

  /*##-2- NVIC configuration  ################################################*/
  /* NVIC configuration for DMA2D transfer complete interrupt */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 80086fe:	205a      	movs	r0, #90	@ 0x5a
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8008700:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8008704:	631a      	str	r2, [r3, #48]	@ 0x30
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8008706:	2200      	movs	r2, #0
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8008708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800870a:	4611      	mov	r1, r2
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800870c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008710:	9301      	str	r3, [sp, #4]
 8008712:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8008714:	f7fb f94c 	bl	80039b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8008718:	205a      	movs	r0, #90	@ 0x5a
}
 800871a:	b003      	add	sp, #12
 800871c:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8008720:	f7fb b978 	b.w	8003a14 <HAL_NVIC_EnableIRQ>
 8008724:	40023800 	.word	0x40023800

08008728 <EEPROM_Show_Feature>:
  * @brief  Show EEPROM Features
  * @param  Feature : feature index
  * @retval None
  */
static void EEPROM_Show_Feature(uint8_t Feature)
{
 8008728:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  __IO TestStatus TransferStatus1 = FAILED;
 800872c:	2500      	movs	r5, #0
{
 800872e:	4604      	mov	r4, r0
  __IO uint16_t NumDataRead = 0;

  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8008730:	f04f 30ff 	mov.w	r0, #4294967295
  __IO TestStatus TransferStatus1 = FAILED;
 8008734:	f88d 500d 	strb.w	r5, [sp, #13]
  __IO uint16_t NumDataRead = 0;
 8008738:	f8ad 500e 	strh.w	r5, [sp, #14]
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800873c:	f7f9 fc10 	bl	8001f60 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8008740:	f04f 30ff 	mov.w	r0, #4294967295
 8008744:	f7f9 fc00 	bl	8001f48 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(12, 92, BSP_LCD_GetXSize() - 24, BSP_LCD_GetYSize() - 104);
 8008748:	f7f9 fba4 	bl	8001e94 <BSP_LCD_GetXSize>
 800874c:	4606      	mov	r6, r0
 800874e:	f7f9 fbad 	bl	8001eac <BSP_LCD_GetYSize>
 8008752:	f1a0 0368 	sub.w	r3, r0, #104	@ 0x68
 8008756:	f1a6 0218 	sub.w	r2, r6, #24
 800875a:	215c      	movs	r1, #92	@ 0x5c
 800875c:	b29b      	uxth	r3, r3
 800875e:	200c      	movs	r0, #12
 8008760:	b292      	uxth	r2, r2
 8008762:	f7f9 ffcb 	bl	80026fc <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8008766:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800876a:	f7f9 fbed 	bl	8001f48 <BSP_LCD_SetTextColor>

  /* Initialize the I2C EEPROM driver ----------------------------------------*/
  if (BSP_EEPROM_Init() != EEPROM_OK)
 800876e:	f7f9 fa7f 	bl	8001c70 <BSP_EEPROM_Init>
 8008772:	4606      	mov	r6, r0
 8008774:	b1a8      	cbz	r0, 80087a2 <EEPROM_Show_Feature+0x7a>
  {
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8008776:	489b      	ldr	r0, [pc, #620]	@ (80089e4 <EEPROM_Show_Feature+0x2bc>)
 8008778:	f7f9 fbe6 	bl	8001f48 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Initialization problem", CENTER_MODE);
 800877c:	2301      	movs	r3, #1
 800877e:	4a9a      	ldr	r2, [pc, #616]	@ (80089e8 <EEPROM_Show_Feature+0x2c0>)
 8008780:	2173      	movs	r1, #115	@ 0x73
 8008782:	4628      	mov	r0, r5
 8008784:	f7f9 fd20 	bl	80021c8 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Check if HW connected or", CENTER_MODE);
 8008788:	2301      	movs	r3, #1
 800878a:	4a98      	ldr	r2, [pc, #608]	@ (80089ec <EEPROM_Show_Feature+0x2c4>)
 800878c:	2182      	movs	r1, #130	@ 0x82
 800878e:	4628      	mov	r0, r5
 8008790:	f7f9 fd1a 	bl	80021c8 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, 145, (uint8_t *)"HW version not supported", CENTER_MODE);
 8008794:	2301      	movs	r3, #1
 8008796:	4a96      	ldr	r2, [pc, #600]	@ (80089f0 <EEPROM_Show_Feature+0x2c8>)
      else
      {
        BSP_LCD_SetTextColor(LCD_COLOR_RED);
        BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Problem to communicate", CENTER_MODE);
        BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"with EEPROM", CENTER_MODE);
        BSP_LCD_DisplayStringAt(0, 145, (uint8_t *)"Press again USER key", CENTER_MODE);
 8008798:	2191      	movs	r1, #145	@ 0x91
        if (TransferStatus1 != FAILED)
        {
          BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"PASSED String write", CENTER_MODE);
          BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"in EEPROM:", CENTER_MODE);
          BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
          BSP_LCD_DisplayStringAt(0, 160, Tx2Buffer, CENTER_MODE);
 800879a:	2000      	movs	r0, #0
      else
      {
        BSP_LCD_SetTextColor(LCD_COLOR_RED);
        BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Problem to communicate", CENTER_MODE);
        BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"again with EEPROM", CENTER_MODE);
        BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Press USER key to end test", CENTER_MODE);
 800879c:	f7f9 fd14 	bl	80021c8 <BSP_LCD_DisplayStringAt>
 80087a0:	e009      	b.n	80087b6 <EEPROM_Show_Feature+0x8e>
  EEPROMConnected = 1;
 80087a2:	4f94      	ldr	r7, [pc, #592]	@ (80089f4 <EEPROM_Show_Feature+0x2cc>)
 80087a4:	f04f 0801 	mov.w	r8, #1
 80087a8:	f887 8000 	strb.w	r8, [r7]
  BSP_EEPROM_WaitEepromStandbyState();
 80087ac:	f7f9 fa8c 	bl	8001cc8 <BSP_EEPROM_WaitEepromStandbyState>
  switch (Feature)
 80087b0:	b124      	cbz	r4, 80087bc <EEPROM_Show_Feature+0x94>
 80087b2:	4544      	cmp	r4, r8
 80087b4:	d05d      	beq.n	8008872 <EEPROM_Show_Feature+0x14a>
      }
      break;
  }
}
 80087b6:	b004      	add	sp, #16
 80087b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (EEPROMConnected == 1)
 80087bc:	783d      	ldrb	r5, [r7, #0]
 80087be:	2d01      	cmp	r5, #1
 80087c0:	d145      	bne.n	800884e <EEPROM_Show_Feature+0x126>
        NumDataRead = BUFFER_SIZE1;
 80087c2:	f240 230f 	movw	r3, #527	@ 0x20f
        if (BSP_EEPROM_ReadBuffer(Rx1Buffer, EEPROM_READ_ADDRESS1, (uint16_t *)(&NumDataRead)) != EEPROM_OK)
 80087c6:	f10d 020e 	add.w	r2, sp, #14
 80087ca:	2149      	movs	r1, #73	@ 0x49
 80087cc:	488a      	ldr	r0, [pc, #552]	@ (80089f8 <EEPROM_Show_Feature+0x2d0>)
        NumDataRead = BUFFER_SIZE1;
 80087ce:	f8ad 300e 	strh.w	r3, [sp, #14]
        if (BSP_EEPROM_ReadBuffer(Rx1Buffer, EEPROM_READ_ADDRESS1, (uint16_t *)(&NumDataRead)) != EEPROM_OK)
 80087d2:	f7f9 fa69 	bl	8001ca8 <BSP_EEPROM_ReadBuffer>
 80087d6:	4606      	mov	r6, r0
 80087d8:	b1b0      	cbz	r0, 8008808 <EEPROM_Show_Feature+0xe0>
          BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80087da:	4882      	ldr	r0, [pc, #520]	@ (80089e4 <EEPROM_Show_Feature+0x2bc>)
 80087dc:	f7f9 fbb4 	bl	8001f48 <BSP_LCD_SetTextColor>
          BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Init issue at read old data", CENTER_MODE);
 80087e0:	462b      	mov	r3, r5
 80087e2:	4a86      	ldr	r2, [pc, #536]	@ (80089fc <EEPROM_Show_Feature+0x2d4>)
 80087e4:	2173      	movs	r1, #115	@ 0x73
 80087e6:	4620      	mov	r0, r4
 80087e8:	f7f9 fcee 	bl	80021c8 <BSP_LCD_DisplayStringAt>
          BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80087ec:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80087f0:	f7f9 fbaa 	bl	8001f48 <BSP_LCD_SetTextColor>
          BSP_LCD_DisplayStringAt(0, 145, (uint8_t *)"Press again USER key", CENTER_MODE);
 80087f4:	462b      	mov	r3, r5
 80087f6:	4a82      	ldr	r2, [pc, #520]	@ (8008a00 <EEPROM_Show_Feature+0x2d8>)
 80087f8:	2191      	movs	r1, #145	@ 0x91
 80087fa:	4620      	mov	r0, r4
 80087fc:	f7f9 fce4 	bl	80021c8 <BSP_LCD_DisplayStringAt>
          BSP_LCD_DisplayStringAt(0, 160, (uint8_t *)"To write new data", CENTER_MODE);
 8008800:	462b      	mov	r3, r5
 8008802:	4a80      	ldr	r2, [pc, #512]	@ (8008a04 <EEPROM_Show_Feature+0x2dc>)
          BSP_LCD_DisplayStringAt(0, 160, Tx2Buffer, CENTER_MODE);
 8008804:	21a0      	movs	r1, #160	@ 0xa0
 8008806:	e7c8      	b.n	800879a <EEPROM_Show_Feature+0x72>
        BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"PASSED String read", CENTER_MODE);
 8008808:	462b      	mov	r3, r5
 800880a:	4a7f      	ldr	r2, [pc, #508]	@ (8008a08 <EEPROM_Show_Feature+0x2e0>)
 800880c:	2173      	movs	r1, #115	@ 0x73
 800880e:	f7f9 fcdb 	bl	80021c8 <BSP_LCD_DisplayStringAt>
        BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"in EEPROM:", CENTER_MODE);
 8008812:	462b      	mov	r3, r5
 8008814:	4a7d      	ldr	r2, [pc, #500]	@ (8008a0c <EEPROM_Show_Feature+0x2e4>)
 8008816:	2182      	movs	r1, #130	@ 0x82
 8008818:	4630      	mov	r0, r6
 800881a:	f7f9 fcd5 	bl	80021c8 <BSP_LCD_DisplayStringAt>
        BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800881e:	487c      	ldr	r0, [pc, #496]	@ (8008a10 <EEPROM_Show_Feature+0x2e8>)
 8008820:	f7f9 fb92 	bl	8001f48 <BSP_LCD_SetTextColor>
        BSP_LCD_DisplayStringAt(0, 160, Rx1Buffer, CENTER_MODE);
 8008824:	462b      	mov	r3, r5
 8008826:	4a74      	ldr	r2, [pc, #464]	@ (80089f8 <EEPROM_Show_Feature+0x2d0>)
 8008828:	21a0      	movs	r1, #160	@ 0xa0
 800882a:	4630      	mov	r0, r6
 800882c:	f7f9 fccc 	bl	80021c8 <BSP_LCD_DisplayStringAt>
        BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8008830:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8008834:	f7f9 fb88 	bl	8001f48 <BSP_LCD_SetTextColor>
        BSP_LCD_DisplayStringAt(0, 190, (uint8_t *)"Press USER key", CENTER_MODE);
 8008838:	462b      	mov	r3, r5
 800883a:	4a76      	ldr	r2, [pc, #472]	@ (8008a14 <EEPROM_Show_Feature+0x2ec>)
 800883c:	21be      	movs	r1, #190	@ 0xbe
 800883e:	4630      	mov	r0, r6
 8008840:	f7f9 fcc2 	bl	80021c8 <BSP_LCD_DisplayStringAt>
        BSP_LCD_DisplayStringAt(0, 205, (uint8_t *)"To write new data", CENTER_MODE);
 8008844:	462b      	mov	r3, r5
 8008846:	4a6f      	ldr	r2, [pc, #444]	@ (8008a04 <EEPROM_Show_Feature+0x2dc>)
 8008848:	21cd      	movs	r1, #205	@ 0xcd
        BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Press USER key to end test", CENTER_MODE);
 800884a:	4630      	mov	r0, r6
 800884c:	e7a6      	b.n	800879c <EEPROM_Show_Feature+0x74>
        BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800884e:	4865      	ldr	r0, [pc, #404]	@ (80089e4 <EEPROM_Show_Feature+0x2bc>)
 8008850:	f7f9 fb7a 	bl	8001f48 <BSP_LCD_SetTextColor>
        BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Problem to communicate", CENTER_MODE);
 8008854:	4643      	mov	r3, r8
 8008856:	4a70      	ldr	r2, [pc, #448]	@ (8008a18 <EEPROM_Show_Feature+0x2f0>)
 8008858:	2173      	movs	r1, #115	@ 0x73
 800885a:	4620      	mov	r0, r4
 800885c:	f7f9 fcb4 	bl	80021c8 <BSP_LCD_DisplayStringAt>
        BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"with EEPROM", CENTER_MODE);
 8008860:	4643      	mov	r3, r8
 8008862:	4a6e      	ldr	r2, [pc, #440]	@ (8008a1c <EEPROM_Show_Feature+0x2f4>)
 8008864:	2182      	movs	r1, #130	@ 0x82
 8008866:	4620      	mov	r0, r4
 8008868:	f7f9 fcae 	bl	80021c8 <BSP_LCD_DisplayStringAt>
        BSP_LCD_DisplayStringAt(0, 145, (uint8_t *)"Press again USER key", CENTER_MODE);
 800886c:	4643      	mov	r3, r8
 800886e:	4a64      	ldr	r2, [pc, #400]	@ (8008a00 <EEPROM_Show_Feature+0x2d8>)
 8008870:	e792      	b.n	8008798 <EEPROM_Show_Feature+0x70>
      if (EEPROMConnected == 1)
 8008872:	783d      	ldrb	r5, [r7, #0]
 8008874:	2d01      	cmp	r5, #1
 8008876:	f040 80a2 	bne.w	80089be <EEPROM_Show_Feature+0x296>
        BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800887a:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800887e:	f7f9 fb63 	bl	8001f48 <BSP_LCD_SetTextColor>
        BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Writing...", CENTER_MODE);
 8008882:	462b      	mov	r3, r5
 8008884:	4a66      	ldr	r2, [pc, #408]	@ (8008a20 <EEPROM_Show_Feature+0x2f8>)
 8008886:	2173      	movs	r1, #115	@ 0x73
 8008888:	4630      	mov	r0, r6
 800888a:	f7f9 fc9d 	bl	80021c8 <BSP_LCD_DisplayStringAt>
        snprintf((char*)Tx2Buffer, BUFFER_SIZE1, "%s Test %d", Tx1Buffer, NbLoop);
 800888e:	4b65      	ldr	r3, [pc, #404]	@ (8008a24 <EEPROM_Show_Feature+0x2fc>)
 8008890:	4a65      	ldr	r2, [pc, #404]	@ (8008a28 <EEPROM_Show_Feature+0x300>)
 8008892:	f240 210f 	movw	r1, #527	@ 0x20f
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	4864      	ldr	r0, [pc, #400]	@ (8008a2c <EEPROM_Show_Feature+0x304>)
 800889a:	9300      	str	r3, [sp, #0]
 800889c:	1c7b      	adds	r3, r7, #1
 800889e:	f002 f833 	bl	800a908 <sniprintf>
        if (BSP_EEPROM_WriteBuffer(Tx2Buffer, EEPROM_WRITE_ADDRESS1, BUFFER_SIZE1) != EEPROM_OK)
 80088a2:	f240 220f 	movw	r2, #527	@ 0x20f
 80088a6:	2149      	movs	r1, #73	@ 0x49
 80088a8:	4860      	ldr	r0, [pc, #384]	@ (8008a2c <EEPROM_Show_Feature+0x304>)
 80088aa:	f7f9 fa35 	bl	8001d18 <BSP_EEPROM_WriteBuffer>
 80088ae:	b130      	cbz	r0, 80088be <EEPROM_Show_Feature+0x196>
          BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80088b0:	484c      	ldr	r0, [pc, #304]	@ (80089e4 <EEPROM_Show_Feature+0x2bc>)
 80088b2:	f7f9 fb49 	bl	8001f48 <BSP_LCD_SetTextColor>
          BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Init issue at write 1", CENTER_MODE);
 80088b6:	462b      	mov	r3, r5
 80088b8:	4a5d      	ldr	r2, [pc, #372]	@ (8008a30 <EEPROM_Show_Feature+0x308>)
          BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Init issue at write 4", CENTER_MODE);
 80088ba:	2173      	movs	r1, #115	@ 0x73
 80088bc:	e7c5      	b.n	800884a <EEPROM_Show_Feature+0x122>
        if (BSP_EEPROM_WriteBuffer(Tx2Buffer, EEPROM_WRITE_ADDRESS1, BUFFER_SIZE1) != EEPROM_OK)
 80088be:	f240 220f 	movw	r2, #527	@ 0x20f
 80088c2:	2149      	movs	r1, #73	@ 0x49
 80088c4:	4859      	ldr	r0, [pc, #356]	@ (8008a2c <EEPROM_Show_Feature+0x304>)
 80088c6:	f7f9 fa27 	bl	8001d18 <BSP_EEPROM_WriteBuffer>
 80088ca:	b130      	cbz	r0, 80088da <EEPROM_Show_Feature+0x1b2>
          BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80088cc:	4845      	ldr	r0, [pc, #276]	@ (80089e4 <EEPROM_Show_Feature+0x2bc>)
 80088ce:	f7f9 fb3b 	bl	8001f48 <BSP_LCD_SetTextColor>
          BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Init issue at write 2", CENTER_MODE);
 80088d2:	462b      	mov	r3, r5
 80088d4:	4a57      	ldr	r2, [pc, #348]	@ (8008a34 <EEPROM_Show_Feature+0x30c>)
          BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Init issue at read", CENTER_MODE);
 80088d6:	2173      	movs	r1, #115	@ 0x73
 80088d8:	e75f      	b.n	800879a <EEPROM_Show_Feature+0x72>
        if (BSP_EEPROM_WriteBuffer(Tx2Buffer, EEPROM_WRITE_ADDRESS1, BUFFER_SIZE1) != EEPROM_OK)
 80088da:	f240 220f 	movw	r2, #527	@ 0x20f
 80088de:	2149      	movs	r1, #73	@ 0x49
 80088e0:	4852      	ldr	r0, [pc, #328]	@ (8008a2c <EEPROM_Show_Feature+0x304>)
 80088e2:	f7f9 fa19 	bl	8001d18 <BSP_EEPROM_WriteBuffer>
 80088e6:	4606      	mov	r6, r0
 80088e8:	b128      	cbz	r0, 80088f6 <EEPROM_Show_Feature+0x1ce>
          BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80088ea:	483e      	ldr	r0, [pc, #248]	@ (80089e4 <EEPROM_Show_Feature+0x2bc>)
 80088ec:	f7f9 fb2c 	bl	8001f48 <BSP_LCD_SetTextColor>
          BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Init issue at write 3", CENTER_MODE);
 80088f0:	462b      	mov	r3, r5
 80088f2:	4a51      	ldr	r2, [pc, #324]	@ (8008a38 <EEPROM_Show_Feature+0x310>)
 80088f4:	e7ef      	b.n	80088d6 <EEPROM_Show_Feature+0x1ae>
        if (BSP_EEPROM_WriteBuffer(Tx2Buffer, EEPROM_WRITE_ADDRESS1, BUFFER_SIZE1) != EEPROM_OK)
 80088f6:	f240 220f 	movw	r2, #527	@ 0x20f
 80088fa:	2149      	movs	r1, #73	@ 0x49
 80088fc:	484b      	ldr	r0, [pc, #300]	@ (8008a2c <EEPROM_Show_Feature+0x304>)
 80088fe:	f7f9 fa0b 	bl	8001d18 <BSP_EEPROM_WriteBuffer>
 8008902:	b128      	cbz	r0, 8008910 <EEPROM_Show_Feature+0x1e8>
          BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8008904:	4837      	ldr	r0, [pc, #220]	@ (80089e4 <EEPROM_Show_Feature+0x2bc>)
 8008906:	f7f9 fb1f 	bl	8001f48 <BSP_LCD_SetTextColor>
          BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Init issue at write 4", CENTER_MODE);
 800890a:	462b      	mov	r3, r5
 800890c:	4a4b      	ldr	r2, [pc, #300]	@ (8008a3c <EEPROM_Show_Feature+0x314>)
 800890e:	e7d4      	b.n	80088ba <EEPROM_Show_Feature+0x192>
        if (BSP_EEPROM_WriteBuffer(Tx2Buffer, EEPROM_WRITE_ADDRESS1, BUFFER_SIZE1) != EEPROM_OK)
 8008910:	f240 220f 	movw	r2, #527	@ 0x20f
 8008914:	2149      	movs	r1, #73	@ 0x49
 8008916:	4845      	ldr	r0, [pc, #276]	@ (8008a2c <EEPROM_Show_Feature+0x304>)
 8008918:	f7f9 f9fe 	bl	8001d18 <BSP_EEPROM_WriteBuffer>
 800891c:	b128      	cbz	r0, 800892a <EEPROM_Show_Feature+0x202>
          BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800891e:	4831      	ldr	r0, [pc, #196]	@ (80089e4 <EEPROM_Show_Feature+0x2bc>)
 8008920:	f7f9 fb12 	bl	8001f48 <BSP_LCD_SetTextColor>
          BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Init issue at write 5", CENTER_MODE);
 8008924:	462b      	mov	r3, r5
 8008926:	4a46      	ldr	r2, [pc, #280]	@ (8008a40 <EEPROM_Show_Feature+0x318>)
 8008928:	e7d5      	b.n	80088d6 <EEPROM_Show_Feature+0x1ae>
        BSP_EEPROM_WaitEepromStandbyState();
 800892a:	f7f9 f9cd 	bl	8001cc8 <BSP_EEPROM_WaitEepromStandbyState>
        NumDataRead = BUFFER_SIZE1;
 800892e:	f240 230f 	movw	r3, #527	@ 0x20f
        if (BSP_EEPROM_ReadBuffer(Rx1Buffer, EEPROM_READ_ADDRESS1, (uint16_t *)(&NumDataRead)) != EEPROM_OK)
 8008932:	f10d 020e 	add.w	r2, sp, #14
 8008936:	2149      	movs	r1, #73	@ 0x49
 8008938:	482f      	ldr	r0, [pc, #188]	@ (80089f8 <EEPROM_Show_Feature+0x2d0>)
        NumDataRead = BUFFER_SIZE1;
 800893a:	f8ad 300e 	strh.w	r3, [sp, #14]
        if (BSP_EEPROM_ReadBuffer(Rx1Buffer, EEPROM_READ_ADDRESS1, (uint16_t *)(&NumDataRead)) != EEPROM_OK)
 800893e:	f7f9 f9b3 	bl	8001ca8 <BSP_EEPROM_ReadBuffer>
 8008942:	b128      	cbz	r0, 8008950 <EEPROM_Show_Feature+0x228>
          BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8008944:	4827      	ldr	r0, [pc, #156]	@ (80089e4 <EEPROM_Show_Feature+0x2bc>)
 8008946:	f7f9 faff 	bl	8001f48 <BSP_LCD_SetTextColor>
          BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Init issue at read", CENTER_MODE);
 800894a:	2301      	movs	r3, #1
 800894c:	4a3d      	ldr	r2, [pc, #244]	@ (8008a44 <EEPROM_Show_Feature+0x31c>)
 800894e:	e7c2      	b.n	80088d6 <EEPROM_Show_Feature+0x1ae>
 8008950:	4a36      	ldr	r2, [pc, #216]	@ (8008a2c <EEPROM_Show_Feature+0x304>)
        if (BSP_EEPROM_ReadBuffer(Rx1Buffer, EEPROM_READ_ADDRESS1, (uint16_t *)(&NumDataRead)) != EEPROM_OK)
 8008952:	f240 230f 	movw	r3, #527	@ 0x20f
 8008956:	f2a2 210f 	subw	r1, r2, #527	@ 0x20f
  */
static TestStatus Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength)
{
  while (BufferLength--)
  {
    if (*pBuffer1 != *pBuffer2)
 800895a:	f812 4b01 	ldrb.w	r4, [r2], #1
 800895e:	f811 0b01 	ldrb.w	r0, [r1], #1
 8008962:	4284      	cmp	r4, r0
 8008964:	d11c      	bne.n	80089a0 <EEPROM_Show_Feature+0x278>
  while (BufferLength--)
 8008966:	3b01      	subs	r3, #1
 8008968:	b29b      	uxth	r3, r3
 800896a:	2b00      	cmp	r3, #0
 800896c:	d1f5      	bne.n	800895a <EEPROM_Show_Feature+0x232>
        TransferStatus1 = Buffercmp(Tx2Buffer, Rx1Buffer, BUFFER_SIZE1);
 800896e:	f88d 500d 	strb.w	r5, [sp, #13]
        if (TransferStatus1 != FAILED)
 8008972:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8008976:	f003 04ff 	and.w	r4, r3, #255	@ 0xff
 800897a:	b19b      	cbz	r3, 80089a4 <EEPROM_Show_Feature+0x27c>
          BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"PASSED String write", CENTER_MODE);
 800897c:	2301      	movs	r3, #1
 800897e:	4a32      	ldr	r2, [pc, #200]	@ (8008a48 <EEPROM_Show_Feature+0x320>)
 8008980:	2173      	movs	r1, #115	@ 0x73
 8008982:	2000      	movs	r0, #0
 8008984:	f7f9 fc20 	bl	80021c8 <BSP_LCD_DisplayStringAt>
          BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"in EEPROM:", CENTER_MODE);
 8008988:	2301      	movs	r3, #1
 800898a:	4a20      	ldr	r2, [pc, #128]	@ (8008a0c <EEPROM_Show_Feature+0x2e4>)
 800898c:	2182      	movs	r1, #130	@ 0x82
 800898e:	2000      	movs	r0, #0
 8008990:	f7f9 fc1a 	bl	80021c8 <BSP_LCD_DisplayStringAt>
          BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8008994:	481e      	ldr	r0, [pc, #120]	@ (8008a10 <EEPROM_Show_Feature+0x2e8>)
 8008996:	f7f9 fad7 	bl	8001f48 <BSP_LCD_SetTextColor>
          BSP_LCD_DisplayStringAt(0, 160, Tx2Buffer, CENTER_MODE);
 800899a:	2301      	movs	r3, #1
 800899c:	4a23      	ldr	r2, [pc, #140]	@ (8008a2c <EEPROM_Show_Feature+0x304>)
 800899e:	e731      	b.n	8008804 <EEPROM_Show_Feature+0xdc>
    {
      return FAILED;
 80089a0:	2500      	movs	r5, #0
 80089a2:	e7e4      	b.n	800896e <EEPROM_Show_Feature+0x246>
          BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80089a4:	480f      	ldr	r0, [pc, #60]	@ (80089e4 <EEPROM_Show_Feature+0x2bc>)
 80089a6:	f7f9 facf 	bl	8001f48 <BSP_LCD_SetTextColor>
          BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"FAILED to write!", CENTER_MODE);
 80089aa:	2301      	movs	r3, #1
 80089ac:	4a27      	ldr	r2, [pc, #156]	@ (8008a4c <EEPROM_Show_Feature+0x324>)
 80089ae:	2173      	movs	r1, #115	@ 0x73
 80089b0:	4620      	mov	r0, r4
 80089b2:	f7f9 fc09 	bl	80021c8 <BSP_LCD_DisplayStringAt>
          BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Press USER key to end test", CENTER_MODE);
 80089b6:	2301      	movs	r3, #1
 80089b8:	4a25      	ldr	r2, [pc, #148]	@ (8008a50 <EEPROM_Show_Feature+0x328>)
 80089ba:	2182      	movs	r1, #130	@ 0x82
 80089bc:	e6ed      	b.n	800879a <EEPROM_Show_Feature+0x72>
        BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80089be:	4809      	ldr	r0, [pc, #36]	@ (80089e4 <EEPROM_Show_Feature+0x2bc>)
 80089c0:	f7f9 fac2 	bl	8001f48 <BSP_LCD_SetTextColor>
        BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Problem to communicate", CENTER_MODE);
 80089c4:	4623      	mov	r3, r4
 80089c6:	4a14      	ldr	r2, [pc, #80]	@ (8008a18 <EEPROM_Show_Feature+0x2f0>)
 80089c8:	2173      	movs	r1, #115	@ 0x73
 80089ca:	4630      	mov	r0, r6
 80089cc:	f7f9 fbfc 	bl	80021c8 <BSP_LCD_DisplayStringAt>
        BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"again with EEPROM", CENTER_MODE);
 80089d0:	4623      	mov	r3, r4
 80089d2:	4a20      	ldr	r2, [pc, #128]	@ (8008a54 <EEPROM_Show_Feature+0x32c>)
 80089d4:	2182      	movs	r1, #130	@ 0x82
 80089d6:	4630      	mov	r0, r6
 80089d8:	f7f9 fbf6 	bl	80021c8 <BSP_LCD_DisplayStringAt>
        BSP_LCD_DisplayStringAt(0, 130, (uint8_t *)"Press USER key to end test", CENTER_MODE);
 80089dc:	4623      	mov	r3, r4
 80089de:	4a1c      	ldr	r2, [pc, #112]	@ (8008a50 <EEPROM_Show_Feature+0x328>)
 80089e0:	2182      	movs	r1, #130	@ 0x82
 80089e2:	e732      	b.n	800884a <EEPROM_Show_Feature+0x122>
 80089e4:	ffff0000 	.word	0xffff0000
 80089e8:	08011d55 	.word	0x08011d55
 80089ec:	08011d6c 	.word	0x08011d6c
 80089f0:	08011d85 	.word	0x08011d85
 80089f4:	200000d4 	.word	0x200000d4
 80089f8:	20021718 	.word	0x20021718
 80089fc:	08011d9e 	.word	0x08011d9e
 8008a00:	08011dba 	.word	0x08011dba
 8008a04:	08011dcf 	.word	0x08011dcf
 8008a08:	08011de1 	.word	0x08011de1
 8008a0c:	08011df4 	.word	0x08011df4
 8008a10:	ff0000ff 	.word	0xff0000ff
 8008a14:	08011dff 	.word	0x08011dff
 8008a18:	08011e0e 	.word	0x08011e0e
 8008a1c:	08011f02 	.word	0x08011f02
 8008a20:	08011e25 	.word	0x08011e25
 8008a24:	20000574 	.word	0x20000574
 8008a28:	08011e30 	.word	0x08011e30
 8008a2c:	20021927 	.word	0x20021927
 8008a30:	08011e3b 	.word	0x08011e3b
 8008a34:	08011e51 	.word	0x08011e51
 8008a38:	08011e67 	.word	0x08011e67
 8008a3c:	08011e7d 	.word	0x08011e7d
 8008a40:	08011e93 	.word	0x08011e93
 8008a44:	08011ea9 	.word	0x08011ea9
 8008a48:	08011ebc 	.word	0x08011ebc
 8008a4c:	08011ed0 	.word	0x08011ed0
 8008a50:	08011ee1 	.word	0x08011ee1
 8008a54:	08011efc 	.word	0x08011efc

08008a58 <EEPROM_demo>:
{
 8008a58:	b510      	push	{r4, lr}
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8008a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a5e:	f7f9 faa3 	bl	8001fa8 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8008a62:	4834      	ldr	r0, [pc, #208]	@ (8008b34 <EEPROM_demo+0xdc>)
 8008a64:	f7f9 fa70 	bl	8001f48 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 80);
 8008a68:	f7f9 fa14 	bl	8001e94 <BSP_LCD_GetXSize>
 8008a6c:	2100      	movs	r1, #0
 8008a6e:	b282      	uxth	r2, r0
 8008a70:	2350      	movs	r3, #80	@ 0x50
 8008a72:	4608      	mov	r0, r1
 8008a74:	f7f9 fe42 	bl	80026fc <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8008a78:	f04f 30ff 	mov.w	r0, #4294967295
 8008a7c:	f7f9 fa64 	bl	8001f48 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8008a80:	482c      	ldr	r0, [pc, #176]	@ (8008b34 <EEPROM_demo+0xdc>)
 8008a82:	f7f9 fa6d 	bl	8001f60 <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 8008a86:	482c      	ldr	r0, [pc, #176]	@ (8008b38 <EEPROM_demo+0xe0>)
 8008a88:	f7f9 fa76 	bl	8001f78 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"EEPROM", CENTER_MODE);
 8008a8c:	2100      	movs	r1, #0
 8008a8e:	2301      	movs	r3, #1
 8008a90:	4a2a      	ldr	r2, [pc, #168]	@ (8008b3c <EEPROM_demo+0xe4>)
 8008a92:	4608      	mov	r0, r1
 8008a94:	f7f9 fb98 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 8008a98:	4829      	ldr	r0, [pc, #164]	@ (8008b40 <EEPROM_demo+0xe8>)
 8008a9a:	f7f9 fa6d 	bl	8001f78 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t *)"This example shows the different", CENTER_MODE);
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	4a28      	ldr	r2, [pc, #160]	@ (8008b44 <EEPROM_demo+0xec>)
 8008aa2:	211e      	movs	r1, #30
 8008aa4:	2000      	movs	r0, #0
 8008aa6:	f7f9 fb8f 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 45, (uint8_t *)"EEPROM Features, use BUTTON", CENTER_MODE);
 8008aaa:	2301      	movs	r3, #1
 8008aac:	4a26      	ldr	r2, [pc, #152]	@ (8008b48 <EEPROM_demo+0xf0>)
 8008aae:	212d      	movs	r1, #45	@ 0x2d
 8008ab0:	2000      	movs	r0, #0
 8008ab2:	f7f9 fb89 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 60, (uint8_t *)"to start EEPROM data transfer", CENTER_MODE);
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	4a24      	ldr	r2, [pc, #144]	@ (8008b4c <EEPROM_demo+0xf4>)
 8008aba:	213c      	movs	r1, #60	@ 0x3c
 8008abc:	2000      	movs	r0, #0
 8008abe:	f7f9 fb83 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8008ac2:	481c      	ldr	r0, [pc, #112]	@ (8008b34 <EEPROM_demo+0xdc>)
 8008ac4:	f7f9 fa40 	bl	8001f48 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 90, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 100);
 8008ac8:	f7f9 f9e4 	bl	8001e94 <BSP_LCD_GetXSize>
 8008acc:	4604      	mov	r4, r0
 8008ace:	f7f9 f9ed 	bl	8001eac <BSP_LCD_GetYSize>
 8008ad2:	f1a0 0364 	sub.w	r3, r0, #100	@ 0x64
 8008ad6:	f1a4 0214 	sub.w	r2, r4, #20
 8008ada:	215a      	movs	r1, #90	@ 0x5a
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	200a      	movs	r0, #10
 8008ae0:	b292      	uxth	r2, r2
 8008ae2:	f7f9 fadb 	bl	800209c <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize() - 102);
 8008ae6:	f7f9 f9d5 	bl	8001e94 <BSP_LCD_GetXSize>
 8008aea:	4604      	mov	r4, r0
 8008aec:	f7f9 f9de 	bl	8001eac <BSP_LCD_GetYSize>
 8008af0:	f1a0 0366 	sub.w	r3, r0, #102	@ 0x66
 8008af4:	f1a4 0216 	sub.w	r2, r4, #22
 8008af8:	200b      	movs	r0, #11
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	215b      	movs	r1, #91	@ 0x5b
 8008afe:	b292      	uxth	r2, r2
  EEPROMFeature = 0;
 8008b00:	4c13      	ldr	r4, [pc, #76]	@ (8008b50 <EEPROM_demo+0xf8>)
  BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize() - 102);
 8008b02:	f7f9 facb 	bl	800209c <BSP_LCD_DrawRect>
  EEPROMFeature = 0;
 8008b06:	2000      	movs	r0, #0
 8008b08:	f884 041e 	strb.w	r0, [r4, #1054]	@ 0x41e
  EEPROM_Show_Feature (EEPROMFeature);
 8008b0c:	f7ff fe0c 	bl	8008728 <EEPROM_Show_Feature>
    if (CheckForUserInput() > 0)
 8008b10:	f000 fbce 	bl	80092b0 <CheckForUserInput>
 8008b14:	b148      	cbz	r0, 8008b2a <EEPROM_demo+0xd2>
      if (++EEPROMFeature < EEPROM_FEATURES_NUM)
 8008b16:	f894 041e 	ldrb.w	r0, [r4, #1054]	@ 0x41e
 8008b1a:	3001      	adds	r0, #1
 8008b1c:	b2c0      	uxtb	r0, r0
 8008b1e:	2801      	cmp	r0, #1
 8008b20:	f884 041e 	strb.w	r0, [r4, #1054]	@ 0x41e
 8008b24:	d805      	bhi.n	8008b32 <EEPROM_demo+0xda>
        EEPROM_Show_Feature (EEPROMFeature);
 8008b26:	f7ff fdff 	bl	8008728 <EEPROM_Show_Feature>
    HAL_Delay(100);
 8008b2a:	2064      	movs	r0, #100	@ 0x64
 8008b2c:	f7fa ff1c 	bl	8003968 <HAL_Delay>
    if (CheckForUserInput() > 0)
 8008b30:	e7ee      	b.n	8008b10 <EEPROM_demo+0xb8>
}
 8008b32:	bd10      	pop	{r4, pc}
 8008b34:	ff0000ff 	.word	0xff0000ff
 8008b38:	20000074 	.word	0x20000074
 8008b3c:	08011f07 	.word	0x08011f07
 8008b40:	20000084 	.word	0x20000084
 8008b44:	08011f0e 	.word	0x08011f0e
 8008b48:	08011f2f 	.word	0x08011f2f
 8008b4c:	08011f4b 	.word	0x08011f4b
 8008b50:	20021718 	.word	0x20021718

08008b54 <BSP_EEPROM_TIMEOUT_UserCallback>:
  EEPROMConnected = 0;
 8008b54:	4b01      	ldr	r3, [pc, #4]	@ (8008b5c <BSP_EEPROM_TIMEOUT_UserCallback+0x8>)
 8008b56:	2200      	movs	r2, #0
 8008b58:	701a      	strb	r2, [r3, #0]
}
 8008b5a:	4770      	bx	lr
 8008b5c:	200000d4 	.word	0x200000d4

08008b60 <LCD_Show_Feature>:
  * @brief  Show LCD Features
  * @param  feature : feature index
  * @retval None
  */
static void LCD_Show_Feature(uint8_t feature)
{
 8008b60:	b570      	push	{r4, r5, r6, lr}
  Point Points[] = {{20, 150}, {80, 150}, {80, 200}};
 8008b62:	4b9a      	ldr	r3, [pc, #616]	@ (8008dcc <LCD_Show_Feature+0x26c>)
{
 8008b64:	b086      	sub	sp, #24
 8008b66:	4604      	mov	r4, r0
  Point Points[] = {{20, 150}, {80, 150}, {80, 200}};
 8008b68:	6859      	ldr	r1, [r3, #4]
 8008b6a:	466a      	mov	r2, sp
 8008b6c:	6818      	ldr	r0, [r3, #0]
 8008b6e:	c203      	stmia	r2!, {r0, r1}
 8008b70:	6898      	ldr	r0, [r3, #8]
  Point Points2[] = {{100, 150}, {160, 150}, {160, 200}};
 8008b72:	6919      	ldr	r1, [r3, #16]
  Point Points[] = {{20, 150}, {80, 150}, {80, 200}};
 8008b74:	6010      	str	r0, [r2, #0]
  Point Points2[] = {{100, 150}, {160, 150}, {160, 200}};
 8008b76:	aa03      	add	r2, sp, #12
 8008b78:	68d8      	ldr	r0, [r3, #12]
 8008b7a:	c203      	stmia	r2!, {r0, r1}
 8008b7c:	6958      	ldr	r0, [r3, #20]
 8008b7e:	6010      	str	r0, [r2, #0]

  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8008b80:	f04f 30ff 	mov.w	r0, #4294967295
 8008b84:	f7f9 f9ec 	bl	8001f60 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8008b88:	f04f 30ff 	mov.w	r0, #4294967295
 8008b8c:	f7f9 f9dc 	bl	8001f48 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(12, 92, BSP_LCD_GetXSize() - 24, BSP_LCD_GetYSize() - 104);
 8008b90:	f7f9 f980 	bl	8001e94 <BSP_LCD_GetXSize>
 8008b94:	4605      	mov	r5, r0
 8008b96:	f7f9 f989 	bl	8001eac <BSP_LCD_GetYSize>
 8008b9a:	f1a0 0368 	sub.w	r3, r0, #104	@ 0x68
 8008b9e:	f1a5 0218 	sub.w	r2, r5, #24
 8008ba2:	215c      	movs	r1, #92	@ 0x5c
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	200c      	movs	r0, #12
 8008ba8:	b292      	uxth	r2, r2
 8008baa:	f7f9 fda7 	bl	80026fc <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8008bae:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8008bb2:	f7f9 f9c9 	bl	8001f48 <BSP_LCD_SetTextColor>

  switch (feature)
 8008bb6:	2c01      	cmp	r4, #1
 8008bb8:	d039      	beq.n	8008c2e <LCD_Show_Feature+0xce>
 8008bba:	2c02      	cmp	r4, #2
 8008bbc:	f000 80bd 	beq.w	8008d3a <LCD_Show_Feature+0x1da>
 8008bc0:	bb9c      	cbnz	r4, 8008c2a <LCD_Show_Feature+0xca>
  {
    case 0:
      /* Text Feature */

      BSP_LCD_DisplayStringAt(14, 100, (uint8_t *)"Left aligned Text", LEFT_MODE);
 8008bc2:	2303      	movs	r3, #3
 8008bc4:	4a82      	ldr	r2, [pc, #520]	@ (8008dd0 <LCD_Show_Feature+0x270>)
 8008bc6:	2164      	movs	r1, #100	@ 0x64
 8008bc8:	200e      	movs	r0, #14
 8008bca:	f7f9 fafd 	bl	80021c8 <BSP_LCD_DisplayStringAt>
      BSP_LCD_DisplayStringAt(0, 115, (uint8_t *)"Center aligned Text", CENTER_MODE);
 8008bce:	2301      	movs	r3, #1
 8008bd0:	4a80      	ldr	r2, [pc, #512]	@ (8008dd4 <LCD_Show_Feature+0x274>)
 8008bd2:	2173      	movs	r1, #115	@ 0x73
 8008bd4:	4620      	mov	r0, r4
 8008bd6:	f7f9 faf7 	bl	80021c8 <BSP_LCD_DisplayStringAt>
      BSP_LCD_DisplayStringAt(14, 130, (uint8_t *)"Right aligned Text", RIGHT_MODE);
 8008bda:	2302      	movs	r3, #2
 8008bdc:	4a7e      	ldr	r2, [pc, #504]	@ (8008dd8 <LCD_Show_Feature+0x278>)
 8008bde:	2182      	movs	r1, #130	@ 0x82
 8008be0:	200e      	movs	r0, #14
 8008be2:	f7f9 faf1 	bl	80021c8 <BSP_LCD_DisplayStringAt>
      BSP_LCD_SetFont(&Font24);
 8008be6:	487d      	ldr	r0, [pc, #500]	@ (8008ddc <LCD_Show_Feature+0x27c>)
 8008be8:	f7f9 f9c6 	bl	8001f78 <BSP_LCD_SetFont>
      BSP_LCD_DisplayStringAt(14, 180, (uint8_t *)"Font24", LEFT_MODE);
 8008bec:	2303      	movs	r3, #3
 8008bee:	4a7c      	ldr	r2, [pc, #496]	@ (8008de0 <LCD_Show_Feature+0x280>)
 8008bf0:	21b4      	movs	r1, #180	@ 0xb4
 8008bf2:	200e      	movs	r0, #14
 8008bf4:	f7f9 fae8 	bl	80021c8 <BSP_LCD_DisplayStringAt>
      BSP_LCD_SetFont(&Font20);
 8008bf8:	487a      	ldr	r0, [pc, #488]	@ (8008de4 <LCD_Show_Feature+0x284>)
 8008bfa:	f7f9 f9bd 	bl	8001f78 <BSP_LCD_SetFont>
      BSP_LCD_DisplayStringAt(BSP_LCD_GetXSize() / 2 - 20, 180, (uint8_t *)"Font20", LEFT_MODE);
 8008bfe:	f7f9 f949 	bl	8001e94 <BSP_LCD_GetXSize>
 8008c02:	2303      	movs	r3, #3
 8008c04:	0840      	lsrs	r0, r0, #1
 8008c06:	4a78      	ldr	r2, [pc, #480]	@ (8008de8 <LCD_Show_Feature+0x288>)
 8008c08:	21b4      	movs	r1, #180	@ 0xb4
 8008c0a:	3814      	subs	r0, #20
 8008c0c:	b280      	uxth	r0, r0
 8008c0e:	f7f9 fadb 	bl	80021c8 <BSP_LCD_DisplayStringAt>
      BSP_LCD_SetFont(&Font16);
 8008c12:	4876      	ldr	r0, [pc, #472]	@ (8008dec <LCD_Show_Feature+0x28c>)
 8008c14:	f7f9 f9b0 	bl	8001f78 <BSP_LCD_SetFont>
      BSP_LCD_DisplayStringAt(BSP_LCD_GetXSize() - 80, 184, (uint8_t *)"Font16", LEFT_MODE);
 8008c18:	f7f9 f93c 	bl	8001e94 <BSP_LCD_GetXSize>
 8008c1c:	3850      	subs	r0, #80	@ 0x50
 8008c1e:	2303      	movs	r3, #3
 8008c20:	4a73      	ldr	r2, [pc, #460]	@ (8008df0 <LCD_Show_Feature+0x290>)
 8008c22:	21b8      	movs	r1, #184	@ 0xb8
 8008c24:	b280      	uxth	r0, r0
 8008c26:	f7f9 facf 	bl	80021c8 <BSP_LCD_DisplayStringAt>
      break;

    default :
      break;
  }
}
 8008c2a:	b006      	add	sp, #24
 8008c2c:	bd70      	pop	{r4, r5, r6, pc}
      BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8008c2e:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8008c32:	f7f9 f989 	bl	8001f48 <BSP_LCD_SetTextColor>
      BSP_LCD_DrawRect(20, 100, 60 , 40);
 8008c36:	2328      	movs	r3, #40	@ 0x28
 8008c38:	223c      	movs	r2, #60	@ 0x3c
 8008c3a:	2164      	movs	r1, #100	@ 0x64
 8008c3c:	2014      	movs	r0, #20
 8008c3e:	f7f9 fa2d 	bl	800209c <BSP_LCD_DrawRect>
      BSP_LCD_FillRect(100, 100, 60 , 40);
 8008c42:	2164      	movs	r1, #100	@ 0x64
 8008c44:	2328      	movs	r3, #40	@ 0x28
 8008c46:	223c      	movs	r2, #60	@ 0x3c
 8008c48:	4608      	mov	r0, r1
 8008c4a:	f7f9 fd57 	bl	80026fc <BSP_LCD_FillRect>
      BSP_LCD_SetTextColor(LCD_COLOR_GRAY);
 8008c4e:	4869      	ldr	r0, [pc, #420]	@ (8008df4 <LCD_Show_Feature+0x294>)
 8008c50:	f7f9 f97a 	bl	8001f48 <BSP_LCD_SetTextColor>
      BSP_LCD_DrawCircle(BSP_LCD_GetXSize() - 120, 120, 20);
 8008c54:	f7f9 f91e 	bl	8001e94 <BSP_LCD_GetXSize>
 8008c58:	3878      	subs	r0, #120	@ 0x78
 8008c5a:	2214      	movs	r2, #20
 8008c5c:	2178      	movs	r1, #120	@ 0x78
 8008c5e:	b280      	uxth	r0, r0
 8008c60:	f7f9 fc08 	bl	8002474 <BSP_LCD_DrawCircle>
      BSP_LCD_FillCircle(BSP_LCD_GetXSize() - 40, 120, 20);
 8008c64:	f7f9 f916 	bl	8001e94 <BSP_LCD_GetXSize>
 8008c68:	3828      	subs	r0, #40	@ 0x28
 8008c6a:	2214      	movs	r2, #20
 8008c6c:	2178      	movs	r1, #120	@ 0x78
 8008c6e:	b280      	uxth	r0, r0
 8008c70:	f7f9 fda8 	bl	80027c4 <BSP_LCD_FillCircle>
      BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8008c74:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 8008c78:	f7f9 f966 	bl	8001f48 <BSP_LCD_SetTextColor>
      BSP_LCD_DrawPolygon(Points, 3);
 8008c7c:	4668      	mov	r0, sp
 8008c7e:	2103      	movs	r1, #3
 8008c80:	f7f9 fb70 	bl	8002364 <BSP_LCD_DrawPolygon>
      BSP_LCD_FillPolygon(Points2, 3);
 8008c84:	2103      	movs	r1, #3
 8008c86:	a803      	add	r0, sp, #12
 8008c88:	f7f9 fe08 	bl	800289c <BSP_LCD_FillPolygon>
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8008c8c:	485a      	ldr	r0, [pc, #360]	@ (8008df8 <LCD_Show_Feature+0x298>)
 8008c8e:	f7f9 f95b 	bl	8001f48 <BSP_LCD_SetTextColor>
      BSP_LCD_DrawEllipse(BSP_LCD_GetXSize() - 120, 170, 30, 20);
 8008c92:	f7f9 f8ff 	bl	8001e94 <BSP_LCD_GetXSize>
 8008c96:	2314      	movs	r3, #20
 8008c98:	221e      	movs	r2, #30
 8008c9a:	21aa      	movs	r1, #170	@ 0xaa
 8008c9c:	3878      	subs	r0, #120	@ 0x78
 8008c9e:	f7f9 fc59 	bl	8002554 <BSP_LCD_DrawEllipse>
      BSP_LCD_FillEllipse(BSP_LCD_GetXSize() - 50, 170, 30, 20);
 8008ca2:	f7f9 f8f7 	bl	8001e94 <BSP_LCD_GetXSize>
 8008ca6:	2314      	movs	r3, #20
 8008ca8:	221e      	movs	r2, #30
 8008caa:	21aa      	movs	r1, #170	@ 0xaa
 8008cac:	3832      	subs	r0, #50	@ 0x32
 8008cae:	f7f9 fe68 	bl	8002982 <BSP_LCD_FillEllipse>
      BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8008cb2:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8008cb6:	f7f9 f947 	bl	8001f48 <BSP_LCD_SetTextColor>
      BSP_LCD_DrawHLine(20, BSP_LCD_GetYSize() - 30, BSP_LCD_GetXSize() / 5);
 8008cba:	f7f9 f8f7 	bl	8001eac <BSP_LCD_GetYSize>
 8008cbe:	4604      	mov	r4, r0
 8008cc0:	f7f9 f8e8 	bl	8001e94 <BSP_LCD_GetXSize>
 8008cc4:	2305      	movs	r3, #5
 8008cc6:	f1a4 011e 	sub.w	r1, r4, #30
 8008cca:	fbb0 f2f3 	udiv	r2, r0, r3
 8008cce:	b289      	uxth	r1, r1
 8008cd0:	2014      	movs	r0, #20
 8008cd2:	b292      	uxth	r2, r2
 8008cd4:	f7f9 f984 	bl	8001fe0 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawLine (BSP_LCD_GetXSize() - 150, BSP_LCD_GetYSize() - 20, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 50);
 8008cd8:	f7f9 f8dc 	bl	8001e94 <BSP_LCD_GetXSize>
 8008cdc:	4604      	mov	r4, r0
 8008cde:	f7f9 f8e5 	bl	8001eac <BSP_LCD_GetYSize>
 8008ce2:	4605      	mov	r5, r0
 8008ce4:	f7f9 f8d6 	bl	8001e94 <BSP_LCD_GetXSize>
 8008ce8:	4606      	mov	r6, r0
 8008cea:	3c96      	subs	r4, #150	@ 0x96
 8008cec:	f7f9 f8de 	bl	8001eac <BSP_LCD_GetYSize>
 8008cf0:	f1a6 0214 	sub.w	r2, r6, #20
 8008cf4:	f1a0 0332 	sub.w	r3, r0, #50	@ 0x32
 8008cf8:	f1a5 0114 	sub.w	r1, r5, #20
 8008cfc:	b2a0      	uxth	r0, r4
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	b292      	uxth	r2, r2
 8008d02:	b289      	uxth	r1, r1
 8008d04:	f7f9 fac4 	bl	8002290 <BSP_LCD_DrawLine>
      BSP_LCD_DrawLine (BSP_LCD_GetXSize() - 150, BSP_LCD_GetYSize() - 50, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 20);
 8008d08:	f7f9 f8c4 	bl	8001e94 <BSP_LCD_GetXSize>
 8008d0c:	4604      	mov	r4, r0
 8008d0e:	f7f9 f8cd 	bl	8001eac <BSP_LCD_GetYSize>
 8008d12:	4605      	mov	r5, r0
 8008d14:	f7f9 f8be 	bl	8001e94 <BSP_LCD_GetXSize>
 8008d18:	4606      	mov	r6, r0
 8008d1a:	3c96      	subs	r4, #150	@ 0x96
 8008d1c:	f7f9 f8c6 	bl	8001eac <BSP_LCD_GetYSize>
 8008d20:	f1a6 0214 	sub.w	r2, r6, #20
 8008d24:	f1a0 0314 	sub.w	r3, r0, #20
 8008d28:	f1a5 0132 	sub.w	r1, r5, #50	@ 0x32
 8008d2c:	b2a0      	uxth	r0, r4
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	b292      	uxth	r2, r2
 8008d32:	b289      	uxth	r1, r1
 8008d34:	f7f9 faac 	bl	8002290 <BSP_LCD_DrawLine>
      break;
 8008d38:	e777      	b.n	8008c2a <LCD_Show_Feature+0xca>
      BSP_LCD_DrawBitmap(20, 100, (uint8_t *)stlogo);
 8008d3a:	4a30      	ldr	r2, [pc, #192]	@ (8008dfc <LCD_Show_Feature+0x29c>)
 8008d3c:	2164      	movs	r1, #100	@ 0x64
 8008d3e:	2014      	movs	r0, #20
 8008d40:	f7f9 fc70 	bl	8002624 <BSP_LCD_DrawBitmap>
      HAL_Delay(100);
 8008d44:	2064      	movs	r0, #100	@ 0x64
 8008d46:	f7fa fe0f 	bl	8003968 <HAL_Delay>
      BSP_LCD_DrawBitmap(BSP_LCD_GetXSize() / 2 - 40, 100, (uint8_t *)stlogo);
 8008d4a:	f7f9 f8a3 	bl	8001e94 <BSP_LCD_GetXSize>
 8008d4e:	4a2b      	ldr	r2, [pc, #172]	@ (8008dfc <LCD_Show_Feature+0x29c>)
 8008d50:	0840      	lsrs	r0, r0, #1
 8008d52:	2164      	movs	r1, #100	@ 0x64
 8008d54:	3828      	subs	r0, #40	@ 0x28
 8008d56:	f7f9 fc65 	bl	8002624 <BSP_LCD_DrawBitmap>
      HAL_Delay(100);
 8008d5a:	2064      	movs	r0, #100	@ 0x64
 8008d5c:	f7fa fe04 	bl	8003968 <HAL_Delay>
      BSP_LCD_DrawBitmap(BSP_LCD_GetXSize() - 100, 100, (uint8_t *)stlogo);
 8008d60:	f7f9 f898 	bl	8001e94 <BSP_LCD_GetXSize>
 8008d64:	4a25      	ldr	r2, [pc, #148]	@ (8008dfc <LCD_Show_Feature+0x29c>)
 8008d66:	2164      	movs	r1, #100	@ 0x64
 8008d68:	3864      	subs	r0, #100	@ 0x64
 8008d6a:	f7f9 fc5b 	bl	8002624 <BSP_LCD_DrawBitmap>
      HAL_Delay(100);
 8008d6e:	2064      	movs	r0, #100	@ 0x64
 8008d70:	f7fa fdfa 	bl	8003968 <HAL_Delay>
      BSP_LCD_DrawBitmap(20, BSP_LCD_GetYSize() - 80, (uint8_t *)stlogo);
 8008d74:	f7f9 f89a 	bl	8001eac <BSP_LCD_GetYSize>
 8008d78:	4a20      	ldr	r2, [pc, #128]	@ (8008dfc <LCD_Show_Feature+0x29c>)
 8008d7a:	f1a0 0150 	sub.w	r1, r0, #80	@ 0x50
 8008d7e:	2014      	movs	r0, #20
 8008d80:	f7f9 fc50 	bl	8002624 <BSP_LCD_DrawBitmap>
      HAL_Delay(100);
 8008d84:	2064      	movs	r0, #100	@ 0x64
 8008d86:	f7fa fdef 	bl	8003968 <HAL_Delay>
      BSP_LCD_DrawBitmap(BSP_LCD_GetXSize() / 2 - 40, BSP_LCD_GetYSize() - 80, (uint8_t *)stlogo);
 8008d8a:	f7f9 f883 	bl	8001e94 <BSP_LCD_GetXSize>
 8008d8e:	4604      	mov	r4, r0
 8008d90:	f7f9 f88c 	bl	8001eac <BSP_LCD_GetYSize>
 8008d94:	4a19      	ldr	r2, [pc, #100]	@ (8008dfc <LCD_Show_Feature+0x29c>)
 8008d96:	0864      	lsrs	r4, r4, #1
 8008d98:	f1a0 0150 	sub.w	r1, r0, #80	@ 0x50
 8008d9c:	f1a4 0028 	sub.w	r0, r4, #40	@ 0x28
 8008da0:	f7f9 fc40 	bl	8002624 <BSP_LCD_DrawBitmap>
      HAL_Delay(100);
 8008da4:	2064      	movs	r0, #100	@ 0x64
 8008da6:	f7fa fddf 	bl	8003968 <HAL_Delay>
      BSP_LCD_DrawBitmap(BSP_LCD_GetXSize() - 100, BSP_LCD_GetYSize() - 80, (uint8_t *)stlogo);
 8008daa:	f7f9 f873 	bl	8001e94 <BSP_LCD_GetXSize>
 8008dae:	4604      	mov	r4, r0
 8008db0:	f7f9 f87c 	bl	8001eac <BSP_LCD_GetYSize>
 8008db4:	4a11      	ldr	r2, [pc, #68]	@ (8008dfc <LCD_Show_Feature+0x29c>)
 8008db6:	f1a0 0150 	sub.w	r1, r0, #80	@ 0x50
 8008dba:	f1a4 0064 	sub.w	r0, r4, #100	@ 0x64
 8008dbe:	f7f9 fc31 	bl	8002624 <BSP_LCD_DrawBitmap>
      HAL_Delay(100);
 8008dc2:	2064      	movs	r0, #100	@ 0x64
 8008dc4:	f7fa fdd0 	bl	8003968 <HAL_Delay>
}
 8008dc8:	e72f      	b.n	8008c2a <LCD_Show_Feature+0xca>
 8008dca:	bf00      	nop
 8008dcc:	0800f710 	.word	0x0800f710
 8008dd0:	08011f69 	.word	0x08011f69
 8008dd4:	08011f7b 	.word	0x08011f7b
 8008dd8:	08011f8f 	.word	0x08011f8f
 8008ddc:	20000074 	.word	0x20000074
 8008de0:	08011fa2 	.word	0x08011fa2
 8008de4:	20000094 	.word	0x20000094
 8008de8:	08011fa9 	.word	0x08011fa9
 8008dec:	2000008c 	.word	0x2000008c
 8008df0:	08011fb0 	.word	0x08011fb0
 8008df4:	ff808080 	.word	0xff808080
 8008df8:	ffff0000 	.word	0xffff0000
 8008dfc:	0800f728 	.word	0x0800f728

08008e00 <LCD_demo>:
{
 8008e00:	b510      	push	{r4, lr}
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8008e02:	f04f 30ff 	mov.w	r0, #4294967295
 8008e06:	f7f9 f8cf 	bl	8001fa8 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8008e0a:	4833      	ldr	r0, [pc, #204]	@ (8008ed8 <LCD_demo+0xd8>)
 8008e0c:	f7f9 f89c 	bl	8001f48 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 80);
 8008e10:	f7f9 f840 	bl	8001e94 <BSP_LCD_GetXSize>
 8008e14:	2100      	movs	r1, #0
 8008e16:	b282      	uxth	r2, r0
 8008e18:	2350      	movs	r3, #80	@ 0x50
 8008e1a:	4608      	mov	r0, r1
 8008e1c:	f7f9 fc6e 	bl	80026fc <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8008e20:	f04f 30ff 	mov.w	r0, #4294967295
 8008e24:	f7f9 f890 	bl	8001f48 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8008e28:	482b      	ldr	r0, [pc, #172]	@ (8008ed8 <LCD_demo+0xd8>)
 8008e2a:	f7f9 f899 	bl	8001f60 <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 8008e2e:	482b      	ldr	r0, [pc, #172]	@ (8008edc <LCD_demo+0xdc>)
 8008e30:	f7f9 f8a2 	bl	8001f78 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"LCD", CENTER_MODE);
 8008e34:	2100      	movs	r1, #0
 8008e36:	2301      	movs	r3, #1
 8008e38:	4a29      	ldr	r2, [pc, #164]	@ (8008ee0 <LCD_demo+0xe0>)
 8008e3a:	4608      	mov	r0, r1
 8008e3c:	f7f9 f9c4 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 8008e40:	4828      	ldr	r0, [pc, #160]	@ (8008ee4 <LCD_demo+0xe4>)
 8008e42:	f7f9 f899 	bl	8001f78 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t *)"This example shows the different", CENTER_MODE);
 8008e46:	2301      	movs	r3, #1
 8008e48:	4a27      	ldr	r2, [pc, #156]	@ (8008ee8 <LCD_demo+0xe8>)
 8008e4a:	211e      	movs	r1, #30
 8008e4c:	2000      	movs	r0, #0
 8008e4e:	f7f9 f9bb 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 45, (uint8_t *)"LCD Features, use BUTTON to display", CENTER_MODE);
 8008e52:	2301      	movs	r3, #1
 8008e54:	4a25      	ldr	r2, [pc, #148]	@ (8008eec <LCD_demo+0xec>)
 8008e56:	212d      	movs	r1, #45	@ 0x2d
 8008e58:	2000      	movs	r0, #0
 8008e5a:	f7f9 f9b5 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 60, (uint8_t *)"next page", CENTER_MODE);
 8008e5e:	2301      	movs	r3, #1
 8008e60:	4a23      	ldr	r2, [pc, #140]	@ (8008ef0 <LCD_demo+0xf0>)
 8008e62:	213c      	movs	r1, #60	@ 0x3c
 8008e64:	2000      	movs	r0, #0
 8008e66:	f7f9 f9af 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8008e6a:	481b      	ldr	r0, [pc, #108]	@ (8008ed8 <LCD_demo+0xd8>)
 8008e6c:	f7f9 f86c 	bl	8001f48 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 90, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 100);
 8008e70:	f7f9 f810 	bl	8001e94 <BSP_LCD_GetXSize>
 8008e74:	4604      	mov	r4, r0
 8008e76:	f7f9 f819 	bl	8001eac <BSP_LCD_GetYSize>
 8008e7a:	f1a0 0364 	sub.w	r3, r0, #100	@ 0x64
 8008e7e:	f1a4 0214 	sub.w	r2, r4, #20
 8008e82:	215a      	movs	r1, #90	@ 0x5a
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	200a      	movs	r0, #10
 8008e88:	b292      	uxth	r2, r2
 8008e8a:	f7f9 f907 	bl	800209c <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize() - 102);
 8008e8e:	f7f9 f801 	bl	8001e94 <BSP_LCD_GetXSize>
 8008e92:	4604      	mov	r4, r0
 8008e94:	f7f9 f80a 	bl	8001eac <BSP_LCD_GetYSize>
 8008e98:	f1a0 0366 	sub.w	r3, r0, #102	@ 0x66
 8008e9c:	f1a4 0216 	sub.w	r2, r4, #22
 8008ea0:	200b      	movs	r0, #11
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	215b      	movs	r1, #91	@ 0x5b
 8008ea6:	b292      	uxth	r2, r2
  LCD_Feature = 0;
 8008ea8:	4c12      	ldr	r4, [pc, #72]	@ (8008ef4 <LCD_demo+0xf4>)
  BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize() - 102);
 8008eaa:	f7f9 f8f7 	bl	800209c <BSP_LCD_DrawRect>
  LCD_Feature = 0;
 8008eae:	2000      	movs	r0, #0
 8008eb0:	7020      	strb	r0, [r4, #0]
  LCD_Show_Feature (LCD_Feature);
 8008eb2:	f7ff fe55 	bl	8008b60 <LCD_Show_Feature>
    if (CheckForUserInput() > 0)
 8008eb6:	f000 f9fb 	bl	80092b0 <CheckForUserInput>
 8008eba:	b138      	cbz	r0, 8008ecc <LCD_demo+0xcc>
      if (++LCD_Feature < LCD_FEATURES_NUM)
 8008ebc:	7820      	ldrb	r0, [r4, #0]
 8008ebe:	3001      	adds	r0, #1
 8008ec0:	b2c0      	uxtb	r0, r0
 8008ec2:	2802      	cmp	r0, #2
 8008ec4:	7020      	strb	r0, [r4, #0]
 8008ec6:	d805      	bhi.n	8008ed4 <LCD_demo+0xd4>
        LCD_Show_Feature (LCD_Feature);
 8008ec8:	f7ff fe4a 	bl	8008b60 <LCD_Show_Feature>
    HAL_Delay(100);
 8008ecc:	2064      	movs	r0, #100	@ 0x64
 8008ece:	f7fa fd4b 	bl	8003968 <HAL_Delay>
    if (CheckForUserInput() > 0)
 8008ed2:	e7f0      	b.n	8008eb6 <LCD_demo+0xb6>
}
 8008ed4:	bd10      	pop	{r4, pc}
 8008ed6:	bf00      	nop
 8008ed8:	ff0000ff 	.word	0xff0000ff
 8008edc:	20000074 	.word	0x20000074
 8008ee0:	08011fb7 	.word	0x08011fb7
 8008ee4:	20000084 	.word	0x20000084
 8008ee8:	08011f0e 	.word	0x08011f0e
 8008eec:	08011fbb 	.word	0x08011fbb
 8008ef0:	08011fdf 	.word	0x08011fdf
 8008ef4:	20021b37 	.word	0x20021b37

08008ef8 <Log_demo>:
  * @brief  LCD Log demo
  * @param  None
  * @retval None
  */
void Log_demo(void)
{
 8008ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* Initialize LCD Log module */
  LCD_LOG_Init();

  /* Show Header and Footer texts */
  LCD_LOG_SetHeader((uint8_t *)"Log Example");
 8008efa:	2400      	movs	r4, #0

  /* Output User logs */
  for (i = 0; i < 10; i++)
  {
    LCD_UsrLog ("This is Line %d \n", i);
 8008efc:	4d1e      	ldr	r5, [pc, #120]	@ (8008f78 <Log_demo+0x80>)
 8008efe:	4f1f      	ldr	r7, [pc, #124]	@ (8008f7c <Log_demo+0x84>)
  LCD_LOG_Init();
 8008f00:	f001 fab8 	bl	800a474 <LCD_LOG_Init>
    LCD_UsrLog ("This is Line %d \n", i);
 8008f04:	4e1e      	ldr	r6, [pc, #120]	@ (8008f80 <Log_demo+0x88>)
  LCD_LOG_SetHeader((uint8_t *)"Log Example");
 8008f06:	481f      	ldr	r0, [pc, #124]	@ (8008f84 <Log_demo+0x8c>)
 8008f08:	f001 fabe 	bl	800a488 <LCD_LOG_SetHeader>
    LCD_UsrLog ("This is Line %d \n", i);
 8008f0c:	4621      	mov	r1, r4
  for (i = 0; i < 10; i++)
 8008f0e:	3401      	adds	r4, #1
    LCD_UsrLog ("This is Line %d \n", i);
 8008f10:	4630      	mov	r0, r6
 8008f12:	602f      	str	r7, [r5, #0]
 8008f14:	f001 fce6 	bl	800a8e4 <iprintf>
  for (i = 0; i < 10; i++)
 8008f18:	2c0a      	cmp	r4, #10
 8008f1a:	d1f7      	bne.n	8008f0c <Log_demo+0x14>
  }

  HAL_Delay(500);

  /* Clear Old logs */
  LCD_LOG_ClearTextZone();
 8008f1c:	2400      	movs	r4, #0

  /* Output new user logs */
  for (i = 0; i < 30; i++)
  {
    LCD_UsrLog ("This is Line %d \n", i);
 8008f1e:	4f17      	ldr	r7, [pc, #92]	@ (8008f7c <Log_demo+0x84>)
 8008f20:	4e17      	ldr	r6, [pc, #92]	@ (8008f80 <Log_demo+0x88>)
  HAL_Delay(500);
 8008f22:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008f26:	f7fa fd1f 	bl	8003968 <HAL_Delay>
  LCD_LOG_ClearTextZone();
 8008f2a:	f001 fae3 	bl	800a4f4 <LCD_LOG_ClearTextZone>
    LCD_UsrLog ("This is Line %d \n", i);
 8008f2e:	4621      	mov	r1, r4
  for (i = 0; i < 30; i++)
 8008f30:	3401      	adds	r4, #1
    LCD_UsrLog ("This is Line %d \n", i);
 8008f32:	4630      	mov	r0, r6
 8008f34:	602f      	str	r7, [r5, #0]
 8008f36:	f001 fcd5 	bl	800a8e4 <iprintf>
  for (i = 0; i < 30; i++)
 8008f3a:	2c1e      	cmp	r4, #30
 8008f3c:	d1f7      	bne.n	8008f2e <Log_demo+0x36>
  uint8_t   scroll_index = 0;
 8008f3e:	2400      	movs	r4, #0
  uint8_t   scroll_direction = 0;
 8008f40:	4625      	mov	r5, r4
  }

  /* Check for joystick user input for scroll (back and forward) */
  while (1)
  {
    if (scroll_direction == 0)
 8008f42:	b975      	cbnz	r5, 8008f62 <Log_demo+0x6a>
    {
      LCD_LOG_ScrollBack();
      scroll_index++;
 8008f44:	3401      	adds	r4, #1
      LCD_LOG_ScrollBack();
 8008f46:	f001 fb95 	bl	800a674 <LCD_LOG_ScrollBack>
      scroll_index++;
 8008f4a:	b2e4      	uxtb	r4, r4
      if (scroll_index > 30)
 8008f4c:	2c1e      	cmp	r4, #30
 8008f4e:	bf94      	ite	ls
 8008f50:	2500      	movls	r5, #0
 8008f52:	2501      	movhi	r5, #1
      {
        scroll_direction = 0;
      }
    }

    if (CheckForUserInput() > 0)
 8008f54:	f000 f9ac 	bl	80092b0 <CheckForUserInput>
 8008f58:	b960      	cbnz	r0, 8008f74 <Log_demo+0x7c>
    {
      return;
    }
    HAL_Delay (10);
 8008f5a:	200a      	movs	r0, #10
 8008f5c:	f7fa fd04 	bl	8003968 <HAL_Delay>
    if (scroll_direction == 0)
 8008f60:	e7ef      	b.n	8008f42 <Log_demo+0x4a>
      scroll_index--;
 8008f62:	3c01      	subs	r4, #1
      LCD_LOG_ScrollForward();
 8008f64:	f001 fbc8 	bl	800a6f8 <LCD_LOG_ScrollForward>
      if (scroll_index == 0)
 8008f68:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 8008f6c:	bf14      	ite	ne
 8008f6e:	2501      	movne	r5, #1
 8008f70:	2500      	moveq	r5, #0
 8008f72:	e7ef      	b.n	8008f54 <Log_demo+0x5c>
  }
}
 8008f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f76:	bf00      	nop
 8008f78:	200243ac 	.word	0x200243ac
 8008f7c:	ff000080 	.word	0xff000080
 8008f80:	08011ff5 	.word	0x08011ff5
 8008f84:	08011fe9 	.word	0x08011fe9

08008f88 <Display_DemoDescription>:
  * @brief  Display main demo messages.
  * @param  None
  * @retval None
  */
static void Display_DemoDescription(void)
{
 8008f88:	b530      	push	{r4, r5, lr}
  uint8_t desc[50];

  /* Set LCD Foreground Layer  */
  BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
 8008f8a:	2001      	movs	r0, #1
{
 8008f8c:	b08f      	sub	sp, #60	@ 0x3c
  BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
 8008f8e:	f7f8 ffd5 	bl	8001f3c <BSP_LCD_SelectLayer>

  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8008f92:	4835      	ldr	r0, [pc, #212]	@ (8009068 <Display_DemoDescription+0xe0>)
 8008f94:	f7f8 fff0 	bl	8001f78 <BSP_LCD_SetFont>

  /* Clear the LCD */
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8008f98:	f04f 30ff 	mov.w	r0, #4294967295
 8008f9c:	f7f8 ffe0 	bl	8001f60 <BSP_LCD_SetBackColor>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8008fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8008fa4:	f7f9 f800 	bl	8001fa8 <BSP_LCD_Clear>

  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8008fa8:	4830      	ldr	r0, [pc, #192]	@ (800906c <Display_DemoDescription+0xe4>)
 8008faa:	f7f8 ffcd 	bl	8001f48 <BSP_LCD_SetTextColor>

  /* Display LCD messages */
  BSP_LCD_DisplayStringAt(0, 10, (uint8_t *)"STM32F746G BSP", CENTER_MODE);
 8008fae:	2301      	movs	r3, #1
 8008fb0:	4a2f      	ldr	r2, [pc, #188]	@ (8009070 <Display_DemoDescription+0xe8>)
 8008fb2:	210a      	movs	r1, #10
 8008fb4:	2000      	movs	r0, #0

  BSP_LCD_SetFont(&Font12);
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 20, (uint8_t *)"Copyright (c) STMicroelectronics 2015", CENTER_MODE);

  BSP_LCD_SetFont(&Font16);
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8008fb6:	4d2f      	ldr	r5, [pc, #188]	@ (8009074 <Display_DemoDescription+0xec>)
  BSP_LCD_DisplayStringAt(0, 10, (uint8_t *)"STM32F746G BSP", CENTER_MODE);
 8008fb8:	f7f9 f906 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 35, (uint8_t *)"Drivers examples", CENTER_MODE);
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	4a2e      	ldr	r2, [pc, #184]	@ (8009078 <Display_DemoDescription+0xf0>)
 8008fc0:	2123      	movs	r1, #35	@ 0x23
 8008fc2:	2000      	movs	r0, #0
 8008fc4:	f7f9 f900 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DrawBitmap((BSP_LCD_GetXSize() - 80) / 2, 65, (uint8_t *)stlogo);
 8008fc8:	f7f8 ff64 	bl	8001e94 <BSP_LCD_GetXSize>
 8008fcc:	3850      	subs	r0, #80	@ 0x50
 8008fce:	4a2b      	ldr	r2, [pc, #172]	@ (800907c <Display_DemoDescription+0xf4>)
 8008fd0:	2141      	movs	r1, #65	@ 0x41
 8008fd2:	0840      	lsrs	r0, r0, #1
 8008fd4:	f7f9 fb26 	bl	8002624 <BSP_LCD_DrawBitmap>
  BSP_LCD_SetFont(&Font12);
 8008fd8:	4829      	ldr	r0, [pc, #164]	@ (8009080 <Display_DemoDescription+0xf8>)
 8008fda:	f7f8 ffcd 	bl	8001f78 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 20, (uint8_t *)"Copyright (c) STMicroelectronics 2015", CENTER_MODE);
 8008fde:	f7f8 ff65 	bl	8001eac <BSP_LCD_GetYSize>
 8008fe2:	f1a0 0114 	sub.w	r1, r0, #20
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	4a26      	ldr	r2, [pc, #152]	@ (8009084 <Display_DemoDescription+0xfc>)
 8008fea:	b289      	uxth	r1, r1
 8008fec:	2000      	movs	r0, #0
 8008fee:	f7f9 f8eb 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font16);
 8008ff2:	4825      	ldr	r0, [pc, #148]	@ (8009088 <Display_DemoDescription+0x100>)
 8008ff4:	f7f8 ffc0 	bl	8001f78 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8008ff8:	4628      	mov	r0, r5
 8008ffa:	f7f8 ffa5 	bl	8001f48 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, BSP_LCD_GetYSize() / 2 + 15, BSP_LCD_GetXSize(), 60);
 8008ffe:	f7f8 ff55 	bl	8001eac <BSP_LCD_GetYSize>
 8009002:	4604      	mov	r4, r0
 8009004:	f7f8 ff46 	bl	8001e94 <BSP_LCD_GetXSize>
 8009008:	233c      	movs	r3, #60	@ 0x3c
 800900a:	0861      	lsrs	r1, r4, #1
 800900c:	b282      	uxth	r2, r0
 800900e:	2000      	movs	r0, #0
 8009010:	310f      	adds	r1, #15
 8009012:	b289      	uxth	r1, r1
 8009014:	f7f9 fb72 	bl	80026fc <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8009018:	f04f 30ff 	mov.w	r0, #4294967295
 800901c:	f7f8 ff94 	bl	8001f48 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8009020:	4628      	mov	r0, r5
 8009022:	f7f8 ff9d 	bl	8001f60 <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 30, (uint8_t *)"Press User Button to start :", CENTER_MODE);
 8009026:	f7f8 ff41 	bl	8001eac <BSP_LCD_GetYSize>
 800902a:	2301      	movs	r3, #1
 800902c:	0841      	lsrs	r1, r0, #1
 800902e:	4a17      	ldr	r2, [pc, #92]	@ (800908c <Display_DemoDescription+0x104>)
 8009030:	2000      	movs	r0, #0
 8009032:	311e      	adds	r1, #30
 8009034:	b289      	uxth	r1, r1
 8009036:	f7f9 f8c7 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  sprintf((char *)desc, "%s example", BSP_examples[DemoIndex].DemoName);
 800903a:	4b15      	ldr	r3, [pc, #84]	@ (8009090 <Display_DemoDescription+0x108>)
 800903c:	213c      	movs	r1, #60	@ 0x3c
 800903e:	4a15      	ldr	r2, [pc, #84]	@ (8009094 <Display_DemoDescription+0x10c>)
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	a801      	add	r0, sp, #4
 8009044:	fb01 2203 	mla	r2, r1, r3, r2
 8009048:	4913      	ldr	r1, [pc, #76]	@ (8009098 <Display_DemoDescription+0x110>)
 800904a:	3204      	adds	r2, #4
 800904c:	f001 fc90 	bl	800a970 <siprintf>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 45, (uint8_t *)desc, CENTER_MODE);
 8009050:	f7f8 ff2c 	bl	8001eac <BSP_LCD_GetYSize>
 8009054:	2301      	movs	r3, #1
 8009056:	0841      	lsrs	r1, r0, #1
 8009058:	aa01      	add	r2, sp, #4
 800905a:	2000      	movs	r0, #0
 800905c:	312d      	adds	r1, #45	@ 0x2d
 800905e:	b289      	uxth	r1, r1
 8009060:	f7f9 f8b2 	bl	80021c8 <BSP_LCD_DisplayStringAt>
}
 8009064:	b00f      	add	sp, #60	@ 0x3c
 8009066:	bd30      	pop	{r4, r5, pc}
 8009068:	20000074 	.word	0x20000074
 800906c:	ff000080 	.word	0xff000080
 8009070:	08012007 	.word	0x08012007
 8009074:	ff0000ff 	.word	0xff0000ff
 8009078:	08012016 	.word	0x08012016
 800907c:	0800f728 	.word	0x0800f728
 8009080:	20000084 	.word	0x20000084
 8009084:	08012027 	.word	0x08012027
 8009088:	2000008c 	.word	0x2000008c
 800908c:	0801204d 	.word	0x0801204d
 8009090:	20021b38 	.word	0x20021b38
 8009094:	200002e0 	.word	0x200002e0
 8009098:	0801206a 	.word	0x0801206a

0800909c <main>:
{
 800909c:	b570      	push	{r4, r5, r6, lr}
 800909e:	b094      	sub	sp, #80	@ 0x50
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x87;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80090a0:	f240 1501 	movw	r5, #257	@ 0x101
  HAL_MPU_Disable();
 80090a4:	f7fa fcea 	bl	8003a7c <HAL_MPU_Disable>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80090a8:	2301      	movs	r3, #1
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80090aa:	2400      	movs	r4, #0

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80090ac:	a808      	add	r0, sp, #32
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80090ae:	f8ad 3020 	strh.w	r3, [sp, #32]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80090b2:	f248 731f 	movw	r3, #34591	@ 0x871f
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80090b6:	950b      	str	r5, [sp, #44]	@ 0x2c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);

  /* Configure the MPU QSPI flash */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0x90000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 80090b8:	f04f 4610 	mov.w	r6, #2415919104	@ 0x90000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80090bc:	e9cd 4309 	strd	r4, r3, [sp, #36]	@ 0x24
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80090c0:	f7fa fcfa 	bl	8003ab8 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 80090c4:	4b71      	ldr	r3, [pc, #452]	@ (800928c <main+0x1f0>)
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80090c6:	f8ad 5020 	strh.w	r5, [sp, #32]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 80090ca:	f04f 4540 	mov.w	r5, #3221225472	@ 0xc0000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80090ce:	a808      	add	r0, sp, #32
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 80090d0:	e9cd 5309 	strd	r5, r3, [sp, #36]	@ 0x24
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80090d4:	f44f 3580 	mov.w	r5, #65536	@ 0x10000
 80090d8:	950b      	str	r5, [sp, #44]	@ 0x2c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80090da:	f7fa fced 	bl	8003ab8 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80090de:	f240 2301 	movw	r3, #513	@ 0x201
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x0;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80090e2:	a808      	add	r0, sp, #32
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80090e4:	950b      	str	r5, [sp, #44]	@ 0x2c
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80090e6:	f8ad 3020 	strh.w	r3, [sp, #32]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 80090ea:	4b69      	ldr	r3, [pc, #420]	@ (8009290 <main+0x1f4>)
 80090ec:	e9cd 6309 	strd	r6, r3, [sp, #36]	@ 0x24
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80090f0:	f7fa fce2 	bl	8003ab8 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes FMC control registers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80090f4:	f240 3301 	movw	r3, #769	@ 0x301
  MPU_InitStruct.BaseAddress = 0xA0000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
 80090f8:	f04f 4c20 	mov.w	ip, #2684354560	@ 0xa0000000
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x0;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80090fc:	a808      	add	r0, sp, #32
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80090fe:	f8ad 3020 	strh.w	r3, [sp, #32]
  MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
 8009102:	4b64      	ldr	r3, [pc, #400]	@ (8009294 <main+0x1f8>)
 8009104:	e9cd c309 	strd	ip, r3, [sp, #36]	@ 0x24
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8009108:	4b63      	ldr	r3, [pc, #396]	@ (8009298 <main+0x1fc>)
 800910a:	930b      	str	r3, [sp, #44]	@ 0x2c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800910c:	f7fa fcd4 	bl	8003ab8 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8009110:	2004      	movs	r0, #4
 8009112:	f7fa fcc1 	bl	8003a98 <HAL_MPU_Enable>
  __ASM volatile ("dsb 0xF":::"memory");
 8009116:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800911a:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800911e:	4a5f      	ldr	r2, [pc, #380]	@ (800929c <main+0x200>)
 8009120:	f8c2 4250 	str.w	r4, [r2, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8009124:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009128:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800912c:	6953      	ldr	r3, [r2, #20]
 800912e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009132:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8009134:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009138:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800913c:	f8c2 4084 	str.w	r4, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8009140:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8009144:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8009148:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800914c:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8009150:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8009154:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8009156:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800915a:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800915c:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8009160:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8009162:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 8009166:	d2f9      	bcs.n	800915c <main+0xc0>
    } while(sets-- != 0U);
 8009168:	3b20      	subs	r3, #32
 800916a:	f113 0f20 	cmn.w	r3, #32
 800916e:	d1f2      	bne.n	8009156 <main+0xba>
 8009170:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8009174:	6953      	ldr	r3, [r2, #20]
 8009176:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800917a:	6153      	str	r3, [r2, #20]
 800917c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009180:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8009184:	f7fa fbc8 	bl	8003918 <HAL_Init>
  __HAL_RCC_PWR_CLK_ENABLE();
 8009188:	4b45      	ldr	r3, [pc, #276]	@ (80092a0 <main+0x204>)
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800918a:	2001      	movs	r0, #1
  RCC_OscInitStruct.PLL.PLLN = 400;
 800918c:	2419      	movs	r4, #25
  __HAL_RCC_PWR_CLK_ENABLE();
 800918e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009190:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8009194:	641a      	str	r2, [r3, #64]	@ 0x40
 8009196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009198:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800919c:	9301      	str	r3, [sp, #4]
 800919e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80091a0:	4b40      	ldr	r3, [pc, #256]	@ (80092a4 <main+0x208>)
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80091a8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80091aa:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80091b4:	9302      	str	r3, [sp, #8]
 80091b6:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80091b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80091bc:	e9cd 0308 	strd	r0, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80091c0:	2302      	movs	r3, #2
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80091c2:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80091c4:	e9cd 320e 	strd	r3, r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80091c8:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLN = 400;
 80091ca:	f44f 72c8 	mov.w	r2, #400	@ 0x190
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80091ce:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLN = 400;
 80091d0:	e9cd 4210 	strd	r4, r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80091d4:	9313      	str	r3, [sp, #76]	@ 0x4c
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80091d6:	f7fc fa27 	bl	8005628 <HAL_RCC_OscConfig>
  ASSERT(ret != HAL_OK);
 80091da:	b118      	cbz	r0, 80091e4 <main+0x148>
 80091dc:	4a32      	ldr	r2, [pc, #200]	@ (80092a8 <main+0x20c>)
 80091de:	6853      	ldr	r3, [r2, #4]
 80091e0:	3301      	adds	r3, #1
 80091e2:	6053      	str	r3, [r2, #4]
  ret = HAL_PWREx_ActivateOverDrive();
 80091e4:	f7fb fefe 	bl	8004fe4 <HAL_PWREx_EnableOverDrive>
  ASSERT(ret != HAL_OK);
 80091e8:	b118      	cbz	r0, 80091f2 <main+0x156>
 80091ea:	4a2f      	ldr	r2, [pc, #188]	@ (80092a8 <main+0x20c>)
 80091ec:	6853      	ldr	r3, [r2, #4]
 80091ee:	3301      	adds	r3, #1
 80091f0:	6053      	str	r3, [r2, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80091f2:	2302      	movs	r3, #2
 80091f4:	220f      	movs	r2, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80091f6:	2100      	movs	r1, #0
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80091f8:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80091fa:	e9cd 2303 	strd	r2, r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80091fe:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8009202:	e9cd 1305 	strd	r1, r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009206:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 800920a:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800920c:	9307      	str	r3, [sp, #28]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 800920e:	f7fc fbf3 	bl	80059f8 <HAL_RCC_ClockConfig>
  ASSERT(ret != HAL_OK);
 8009212:	b118      	cbz	r0, 800921c <main+0x180>
 8009214:	4a24      	ldr	r2, [pc, #144]	@ (80092a8 <main+0x20c>)
 8009216:	6853      	ldr	r3, [r2, #4]
 8009218:	3301      	adds	r3, #1
 800921a:	6053      	str	r3, [r2, #4]
  BSP_LED_Init(LED1);
 800921c:	2000      	movs	r0, #0
 800921e:	f7f7 ffef 	bl	8001200 <BSP_LED_Init>
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_GPIO);
 8009222:	2100      	movs	r1, #0
 8009224:	2002      	movs	r0, #2
 8009226:	f7f8 f80f 	bl	8001248 <BSP_PB_Init>
  lcd_status = BSP_LCD_Init();
 800922a:	f7f9 fcb5 	bl	8002b98 <BSP_LCD_Init>
  ASSERT(lcd_status != LCD_OK);
 800922e:	b118      	cbz	r0, 8009238 <main+0x19c>
 8009230:	4a1d      	ldr	r2, [pc, #116]	@ (80092a8 <main+0x20c>)
 8009232:	6853      	ldr	r3, [r2, #4]
 8009234:	3301      	adds	r3, #1
 8009236:	6053      	str	r3, [r2, #4]
      BSP_examples[DemoIndex++].DemoFunc();
 8009238:	4c1b      	ldr	r4, [pc, #108]	@ (80092a8 <main+0x20c>)
  BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER, LCD_FRAME_BUFFER);
 800923a:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
      BSP_examples[DemoIndex++].DemoFunc();
 800923e:	4e1b      	ldr	r6, [pc, #108]	@ (80092ac <main+0x210>)
  BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER, LCD_FRAME_BUFFER);
 8009240:	2001      	movs	r0, #1
 8009242:	f7f8 fe3f 	bl	8001ec4 <BSP_LCD_LayerDefaultInit>
  Display_DemoDescription();
 8009246:	f7ff fe9f 	bl	8008f88 <Display_DemoDescription>
    if (BSP_PB_GetState(BUTTON_KEY) != RESET)
 800924a:	2002      	movs	r0, #2
 800924c:	f7f8 f84e 	bl	80012ec <BSP_PB_GetState>
 8009250:	2800      	cmp	r0, #0
 8009252:	d0fa      	beq.n	800924a <main+0x1ae>
      HAL_Delay(10);
 8009254:	200a      	movs	r0, #10
 8009256:	f7fa fb87 	bl	8003968 <HAL_Delay>
      while (BSP_PB_GetState(BUTTON_KEY) != RESET);
 800925a:	2002      	movs	r0, #2
 800925c:	f7f8 f846 	bl	80012ec <BSP_PB_GetState>
 8009260:	4605      	mov	r5, r0
 8009262:	2800      	cmp	r0, #0
 8009264:	d1f9      	bne.n	800925a <main+0x1be>
      BSP_examples[DemoIndex++].DemoFunc();
 8009266:	7823      	ldrb	r3, [r4, #0]
 8009268:	1c5a      	adds	r2, r3, #1
 800926a:	7022      	strb	r2, [r4, #0]
 800926c:	223c      	movs	r2, #60	@ 0x3c
 800926e:	4353      	muls	r3, r2
 8009270:	58f3      	ldr	r3, [r6, r3]
 8009272:	4798      	blx	r3
      if (DemoIndex >= COUNT_OF_EXAMPLE(BSP_examples))
 8009274:	7823      	ldrb	r3, [r4, #0]
 8009276:	2b0a      	cmp	r3, #10
        NbLoop++;
 8009278:	bf81      	itttt	hi
 800927a:	f896 3294 	ldrbhi.w	r3, [r6, #660]	@ 0x294
        DemoIndex = 0;
 800927e:	7025      	strbhi	r5, [r4, #0]
        NbLoop++;
 8009280:	3301      	addhi	r3, #1
 8009282:	f886 3294 	strbhi.w	r3, [r6, #660]	@ 0x294
      Display_DemoDescription();
 8009286:	f7ff fe7f 	bl	8008f88 <Display_DemoDescription>
 800928a:	e7de      	b.n	800924a <main+0x1ae>
 800928c:	03000018 	.word	0x03000018
 8009290:	03000019 	.word	0x03000019
 8009294:	0300000c 	.word	0x0300000c
 8009298:	01000101 	.word	0x01000101
 800929c:	e000ed00 	.word	0xe000ed00
 80092a0:	40023800 	.word	0x40023800
 80092a4:	40007000 	.word	0x40007000
 80092a8:	20021b38 	.word	0x20021b38
 80092ac:	200002e0 	.word	0x200002e0

080092b0 <CheckForUserInput>:
{
 80092b0:	b508      	push	{r3, lr}
  if (BSP_PB_GetState(BUTTON_KEY) != RESET)
 80092b2:	2002      	movs	r0, #2
 80092b4:	f7f8 f81a 	bl	80012ec <BSP_PB_GetState>
 80092b8:	b140      	cbz	r0, 80092cc <CheckForUserInput+0x1c>
    HAL_Delay(10);
 80092ba:	200a      	movs	r0, #10
 80092bc:	f7fa fb54 	bl	8003968 <HAL_Delay>
    while (BSP_PB_GetState(BUTTON_KEY) != RESET);
 80092c0:	2002      	movs	r0, #2
 80092c2:	f7f8 f813 	bl	80012ec <BSP_PB_GetState>
 80092c6:	2800      	cmp	r0, #0
 80092c8:	d1fa      	bne.n	80092c0 <CheckForUserInput+0x10>
    return 1 ;
 80092ca:	2001      	movs	r0, #1
}
 80092cc:	bd08      	pop	{r3, pc}
	...

080092d0 <HAL_GPIO_EXTI_Callback>:
  if (GPIO_Pin == KEY_BUTTON_PIN)
 80092d0:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
{
 80092d4:	b510      	push	{r4, lr}
  if (GPIO_Pin == KEY_BUTTON_PIN)
 80092d6:	d109      	bne.n	80092ec <HAL_GPIO_EXTI_Callback+0x1c>
    if ((HAL_GetTick() - debounce_time) > 50)
 80092d8:	4c05      	ldr	r4, [pc, #20]	@ (80092f0 <HAL_GPIO_EXTI_Callback+0x20>)
 80092da:	f7fa fb3f 	bl	800395c <HAL_GetTick>
 80092de:	68a3      	ldr	r3, [r4, #8]
 80092e0:	1ac0      	subs	r0, r0, r3
 80092e2:	2832      	cmp	r0, #50	@ 0x32
 80092e4:	d902      	bls.n	80092ec <HAL_GPIO_EXTI_Callback+0x1c>
      debounce_time = HAL_GetTick();
 80092e6:	f7fa fb39 	bl	800395c <HAL_GetTick>
 80092ea:	60a0      	str	r0, [r4, #8]
}
 80092ec:	bd10      	pop	{r4, pc}
 80092ee:	bf00      	nop
 80092f0:	20021b38 	.word	0x20021b38

080092f4 <QSPI_demo>:
* @brief  QSPI Demo
* @param  None
* @retval None
*/
void QSPI_demo (void)
{ 
 80092f4:	b538      	push	{r3, r4, r5, lr}
* @retval None
*/
static void QSPI_SetHint(void)
{
  /* Clear the LCD */ 
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 80092f6:	f04f 30ff 	mov.w	r0, #4294967295
 80092fa:	f7f8 fe55 	bl	8001fa8 <BSP_LCD_Clear>
  
  /* Set LCD Demo description */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80092fe:	4892      	ldr	r0, [pc, #584]	@ (8009548 <QSPI_demo+0x254>)
 8009300:	f7f8 fe22 	bl	8001f48 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 80);
 8009304:	f7f8 fdc6 	bl	8001e94 <BSP_LCD_GetXSize>
 8009308:	2100      	movs	r1, #0
 800930a:	b282      	uxth	r2, r0
 800930c:	2350      	movs	r3, #80	@ 0x50
 800930e:	4608      	mov	r0, r1
 8009310:	f7f9 f9f4 	bl	80026fc <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8009314:	f04f 30ff 	mov.w	r0, #4294967295
 8009318:	f7f8 fe16 	bl	8001f48 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE); 
 800931c:	488a      	ldr	r0, [pc, #552]	@ (8009548 <QSPI_demo+0x254>)
 800931e:	f7f8 fe1f 	bl	8001f60 <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 8009322:	488a      	ldr	r0, [pc, #552]	@ (800954c <QSPI_demo+0x258>)
 8009324:	f7f8 fe28 	bl	8001f78 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t*)"QSPI", CENTER_MODE);
 8009328:	2100      	movs	r1, #0
 800932a:	2301      	movs	r3, #1
 800932c:	4a88      	ldr	r2, [pc, #544]	@ (8009550 <QSPI_demo+0x25c>)
 800932e:	4608      	mov	r0, r1
 8009330:	f7f8 ff4a 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 8009334:	4887      	ldr	r0, [pc, #540]	@ (8009554 <QSPI_demo+0x260>)
 8009336:	f7f8 fe1f 	bl	8001f78 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t*)"This example shows how to write", CENTER_MODE);
 800933a:	2301      	movs	r3, #1
 800933c:	4a86      	ldr	r2, [pc, #536]	@ (8009558 <QSPI_demo+0x264>)
 800933e:	211e      	movs	r1, #30
 8009340:	2000      	movs	r0, #0
 8009342:	f7f8 ff41 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 45, (uint8_t*)"and read data on QSPI memory", CENTER_MODE); 
 8009346:	2301      	movs	r3, #1
 8009348:	4a84      	ldr	r2, [pc, #528]	@ (800955c <QSPI_demo+0x268>)
 800934a:	212d      	movs	r1, #45	@ 0x2d
 800934c:	2000      	movs	r0, #0
 800934e:	f7f8 ff3b 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 60, (uint8_t*)"(Hardware modifications needed)", CENTER_MODE); 
 8009352:	2301      	movs	r3, #1
 8009354:	4a82      	ldr	r2, [pc, #520]	@ (8009560 <QSPI_demo+0x26c>)
 8009356:	213c      	movs	r1, #60	@ 0x3c
 8009358:	2000      	movs	r0, #0
 800935a:	f7f8 ff35 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);  
 800935e:	487a      	ldr	r0, [pc, #488]	@ (8009548 <QSPI_demo+0x254>)
 8009360:	f7f8 fdf2 	bl	8001f48 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 90, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize()- 100);
 8009364:	f7f8 fd96 	bl	8001e94 <BSP_LCD_GetXSize>
 8009368:	4604      	mov	r4, r0
 800936a:	f7f8 fd9f 	bl	8001eac <BSP_LCD_GetYSize>
 800936e:	f1a0 0364 	sub.w	r3, r0, #100	@ 0x64
 8009372:	f1a4 0214 	sub.w	r2, r4, #20
 8009376:	215a      	movs	r1, #90	@ 0x5a
 8009378:	b29b      	uxth	r3, r3
 800937a:	200a      	movs	r0, #10
 800937c:	b292      	uxth	r2, r2
 800937e:	f7f8 fe8d 	bl	800209c <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize()- 102);
 8009382:	f7f8 fd87 	bl	8001e94 <BSP_LCD_GetXSize>
 8009386:	4604      	mov	r4, r0
 8009388:	f7f8 fd90 	bl	8001eac <BSP_LCD_GetYSize>
 800938c:	f1a0 0366 	sub.w	r3, r0, #102	@ 0x66
 8009390:	f1a4 0216 	sub.w	r2, r4, #22
 8009394:	215b      	movs	r1, #91	@ 0x5b
 8009396:	b29b      	uxth	r3, r3
 8009398:	200b      	movs	r0, #11
 800939a:	b292      	uxth	r2, r2
 800939c:	f7f8 fe7e 	bl	800209c <BSP_LCD_DrawRect>
  
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80093a0:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80093a4:	f7f8 fdd0 	bl	8001f48 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE); 
 80093a8:	f04f 30ff 	mov.w	r0, #4294967295
 80093ac:	f7f8 fdd8 	bl	8001f60 <BSP_LCD_SetBackColor>
  status = BSP_QSPI_Init();
 80093b0:	f7f9 fe06 	bl	8002fc0 <BSP_QSPI_Init>
  if (status == QSPI_NOT_SUPPORTED)
 80093b4:	2804      	cmp	r0, #4
    BSP_LCD_DisplayStringAt(20, 100, (uint8_t*)"QSPI Initialization : FAILED.", LEFT_MODE);
 80093b6:	f04f 0303 	mov.w	r3, #3
  if (status == QSPI_NOT_SUPPORTED)
 80093ba:	d120      	bne.n	80093fe <QSPI_demo+0x10a>
    BSP_LCD_DisplayStringAt(20, 100, (uint8_t*)"QSPI Initialization : FAILED.", LEFT_MODE);
 80093bc:	4a69      	ldr	r2, [pc, #420]	@ (8009564 <QSPI_demo+0x270>)
 80093be:	2164      	movs	r1, #100	@ 0x64
 80093c0:	2014      	movs	r0, #20
 80093c2:	f7f8 ff01 	bl	80021c8 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t*)"QSPI Test Aborted.", LEFT_MODE);
 80093c6:	2303      	movs	r3, #3
 80093c8:	4a67      	ldr	r2, [pc, #412]	@ (8009568 <QSPI_demo+0x274>)
 80093ca:	2173      	movs	r1, #115	@ 0x73
 80093cc:	2014      	movs	r0, #20
 80093ce:	f7f8 fefb 	bl	80021c8 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 145, (uint8_t*)"Check the hardware configuration :", LEFT_MODE);
 80093d2:	2303      	movs	r3, #3
 80093d4:	4a65      	ldr	r2, [pc, #404]	@ (800956c <QSPI_demo+0x278>)
 80093d6:	2191      	movs	r1, #145	@ 0x91
 80093d8:	2014      	movs	r0, #20
 80093da:	f7f8 fef5 	bl	80021c8 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 160, (uint8_t*)"  refer to the UM of the board", LEFT_MODE);
 80093de:	2303      	movs	r3, #3
 80093e0:	4a63      	ldr	r2, [pc, #396]	@ (8009570 <QSPI_demo+0x27c>)
 80093e2:	21a0      	movs	r1, #160	@ 0xa0
 80093e4:	2014      	movs	r0, #20
 80093e6:	f7f8 feef 	bl	80021c8 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 175, (uint8_t*)"  for the hardware modifications", LEFT_MODE);
 80093ea:	2303      	movs	r3, #3
 80093ec:	4a61      	ldr	r2, [pc, #388]	@ (8009574 <QSPI_demo+0x280>)
 80093ee:	21af      	movs	r1, #175	@ 0xaf
 80093f0:	2014      	movs	r0, #20
 80093f2:	f7f8 fee9 	bl	80021c8 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 190, (uint8_t*)"  to connect the QSPI memory", LEFT_MODE);
 80093f6:	2303      	movs	r3, #3
 80093f8:	4a5f      	ldr	r2, [pc, #380]	@ (8009578 <QSPI_demo+0x284>)
              BSP_LCD_DisplayStringAt(20, 190, (uint8_t*)"QSPI Test Aborted.", LEFT_MODE);
 80093fa:	21be      	movs	r1, #190	@ 0xbe
 80093fc:	e009      	b.n	8009412 <QSPI_demo+0x11e>
  else if (status == QSPI_ERROR)
 80093fe:	2801      	cmp	r0, #1
 8009400:	d10f      	bne.n	8009422 <QSPI_demo+0x12e>
    BSP_LCD_DisplayStringAt(20, 100, (uint8_t*)"QSPI Initialization : FAILED.", LEFT_MODE);
 8009402:	4a58      	ldr	r2, [pc, #352]	@ (8009564 <QSPI_demo+0x270>)
 8009404:	2164      	movs	r1, #100	@ 0x64
 8009406:	2014      	movs	r0, #20
 8009408:	f7f8 fede 	bl	80021c8 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t*)"QSPI Test Aborted.", LEFT_MODE);
 800940c:	2303      	movs	r3, #3
 800940e:	4a56      	ldr	r2, [pc, #344]	@ (8009568 <QSPI_demo+0x274>)
 8009410:	2173      	movs	r1, #115	@ 0x73
              BSP_LCD_DisplayStringAt(20, 175, (uint8_t*)"QSPI Test : OK.     ", LEFT_MODE);
 8009412:	2014      	movs	r0, #20
 8009414:	f7f8 fed8 	bl	80021c8 <BSP_LCD_DisplayStringAt>
    if(CheckForUserInput() > 0)
 8009418:	f7ff ff4a 	bl	80092b0 <CheckForUserInput>
 800941c:	2800      	cmp	r0, #0
 800941e:	d0fb      	beq.n	8009418 <QSPI_demo+0x124>
}
 8009420:	bd38      	pop	{r3, r4, r5, pc}
    pQSPI_Info.FlashSize        = (uint32_t)0x00;
 8009422:	4c56      	ldr	r4, [pc, #344]	@ (800957c <QSPI_demo+0x288>)
    BSP_LCD_DisplayStringAt(20, 100, (uint8_t*)"QSPI Initialization : OK.", LEFT_MODE);
 8009424:	2164      	movs	r1, #100	@ 0x64
 8009426:	4a56      	ldr	r2, [pc, #344]	@ (8009580 <QSPI_demo+0x28c>)
 8009428:	2014      	movs	r0, #20
 800942a:	f7f8 fecd 	bl	80021c8 <BSP_LCD_DisplayStringAt>
    pQSPI_Info.FlashSize        = (uint32_t)0x00;
 800942e:	2300      	movs	r3, #0
    BSP_QSPI_GetInfo(&pQSPI_Info);
 8009430:	4620      	mov	r0, r4
    pQSPI_Info.ProgPagesNumber    = (uint32_t)0x00;
 8009432:	6123      	str	r3, [r4, #16]
    pQSPI_Info.EraseSectorSize    = (uint32_t)0x00;
 8009434:	e9c4 3300 	strd	r3, r3, [r4]
    pQSPI_Info.ProgPageSize       = (uint32_t)0x00;
 8009438:	e9c4 3302 	strd	r3, r3, [r4, #8]
    BSP_QSPI_GetInfo(&pQSPI_Info);
 800943c:	f7f9 fd1e 	bl	8002e7c <BSP_QSPI_GetInfo>
    if((pQSPI_Info.FlashSize != 0x1000000) || (pQSPI_Info.EraseSectorSize != 0x1000)  ||
 8009440:	6823      	ldr	r3, [r4, #0]
 8009442:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009446:	d10f      	bne.n	8009468 <QSPI_demo+0x174>
 8009448:	6863      	ldr	r3, [r4, #4]
 800944a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800944e:	d10b      	bne.n	8009468 <QSPI_demo+0x174>
 8009450:	68e3      	ldr	r3, [r4, #12]
 8009452:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009456:	d107      	bne.n	8009468 <QSPI_demo+0x174>
       (pQSPI_Info.ProgPageSize != 0x100)  || (pQSPI_Info.EraseSectorsNumber != 4096) ||
 8009458:	68a3      	ldr	r3, [r4, #8]
 800945a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800945e:	d103      	bne.n	8009468 <QSPI_demo+0x174>
 8009460:	6923      	ldr	r3, [r4, #16]
 8009462:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009466:	d009      	beq.n	800947c <QSPI_demo+0x188>
      BSP_LCD_DisplayStringAt(20, 115, (uint8_t*)"QSPI GET INFO : FAILED.", LEFT_MODE);
 8009468:	2303      	movs	r3, #3
 800946a:	4a46      	ldr	r2, [pc, #280]	@ (8009584 <QSPI_demo+0x290>)
 800946c:	2173      	movs	r1, #115	@ 0x73
 800946e:	2014      	movs	r0, #20
 8009470:	f7f8 feaa 	bl	80021c8 <BSP_LCD_DisplayStringAt>
      BSP_LCD_DisplayStringAt(20, 130, (uint8_t*)"QSPI Test Aborted.", LEFT_MODE);
 8009474:	2303      	movs	r3, #3
 8009476:	4a3c      	ldr	r2, [pc, #240]	@ (8009568 <QSPI_demo+0x274>)
 8009478:	2182      	movs	r1, #130	@ 0x82
 800947a:	e7ca      	b.n	8009412 <QSPI_demo+0x11e>
      BSP_LCD_DisplayStringAt(20, 115, (uint8_t*)"QSPI GET INFO : OK.   ", LEFT_MODE);
 800947c:	2303      	movs	r3, #3
 800947e:	4a42      	ldr	r2, [pc, #264]	@ (8009588 <QSPI_demo+0x294>)
 8009480:	2173      	movs	r1, #115	@ 0x73
 8009482:	2014      	movs	r0, #20
 8009484:	f7f8 fea0 	bl	80021c8 <BSP_LCD_DisplayStringAt>
      if(BSP_QSPI_Erase_Block(WRITE_READ_ADDR) != QSPI_OK)
 8009488:	2050      	movs	r0, #80	@ 0x50
 800948a:	f7f9 fcc9 	bl	8002e20 <BSP_QSPI_Erase_Block>
        BSP_LCD_DisplayStringAt(20, 130, (uint8_t*)"QSPI ERASE : FAILED.", LEFT_MODE);
 800948e:	2303      	movs	r3, #3
      if(BSP_QSPI_Erase_Block(WRITE_READ_ADDR) != QSPI_OK)
 8009490:	4605      	mov	r5, r0
 8009492:	b140      	cbz	r0, 80094a6 <QSPI_demo+0x1b2>
        BSP_LCD_DisplayStringAt(20, 130, (uint8_t*)"QSPI ERASE : FAILED.", LEFT_MODE);
 8009494:	4a3d      	ldr	r2, [pc, #244]	@ (800958c <QSPI_demo+0x298>)
 8009496:	2182      	movs	r1, #130	@ 0x82
 8009498:	2014      	movs	r0, #20
 800949a:	f7f8 fe95 	bl	80021c8 <BSP_LCD_DisplayStringAt>
        BSP_LCD_DisplayStringAt(20, 145, (uint8_t*)"QSPI Test Aborted.", LEFT_MODE);
 800949e:	2303      	movs	r3, #3
 80094a0:	4a31      	ldr	r2, [pc, #196]	@ (8009568 <QSPI_demo+0x274>)
 80094a2:	2191      	movs	r1, #145	@ 0x91
 80094a4:	e7b5      	b.n	8009412 <QSPI_demo+0x11e>
        BSP_LCD_DisplayStringAt(20, 130, (uint8_t*)"QSPI ERASE : OK.   ", LEFT_MODE);
 80094a6:	3414      	adds	r4, #20
 80094a8:	4a39      	ldr	r2, [pc, #228]	@ (8009590 <QSPI_demo+0x29c>)
 80094aa:	2182      	movs	r1, #130	@ 0x82
 80094ac:	2014      	movs	r0, #20
 80094ae:	f7f8 fe8b 	bl	80021c8 <BSP_LCD_DisplayStringAt>
 80094b2:	4623      	mov	r3, r4
  uint32_t tmpIndex = 0;
  
  /* Put in global buffer different values */
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
  {
    pBuffer[tmpIndex] = tmpIndex + uwOffset;
 80094b4:	f105 020f 	add.w	r2, r5, #15
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 80094b8:	3501      	adds	r5, #1
 80094ba:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
    pBuffer[tmpIndex] = tmpIndex + uwOffset;
 80094be:	f803 2b01 	strb.w	r2, [r3], #1
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 80094c2:	d1f7      	bne.n	80094b4 <QSPI_demo+0x1c0>
        if(BSP_QSPI_Write(qspi_aTxBuffer, WRITE_READ_ADDR, BUFFER_SIZE) != QSPI_OK)
 80094c4:	462a      	mov	r2, r5
 80094c6:	2150      	movs	r1, #80	@ 0x50
 80094c8:	4832      	ldr	r0, [pc, #200]	@ (8009594 <QSPI_demo+0x2a0>)
 80094ca:	f7f9 fc5d 	bl	8002d88 <BSP_QSPI_Write>
          BSP_LCD_DisplayStringAt(20, 145, (uint8_t*)"QSPI WRITE : FAILED.", LEFT_MODE);
 80094ce:	2303      	movs	r3, #3
        if(BSP_QSPI_Write(qspi_aTxBuffer, WRITE_READ_ADDR, BUFFER_SIZE) != QSPI_OK)
 80094d0:	b140      	cbz	r0, 80094e4 <QSPI_demo+0x1f0>
          BSP_LCD_DisplayStringAt(20, 145, (uint8_t*)"QSPI WRITE : FAILED.", LEFT_MODE);
 80094d2:	4a31      	ldr	r2, [pc, #196]	@ (8009598 <QSPI_demo+0x2a4>)
 80094d4:	2191      	movs	r1, #145	@ 0x91
 80094d6:	2014      	movs	r0, #20
 80094d8:	f7f8 fe76 	bl	80021c8 <BSP_LCD_DisplayStringAt>
          BSP_LCD_DisplayStringAt(20, 160, (uint8_t*)"QSPI Test Aborted.", LEFT_MODE);
 80094dc:	2303      	movs	r3, #3
 80094de:	4a22      	ldr	r2, [pc, #136]	@ (8009568 <QSPI_demo+0x274>)
 80094e0:	21a0      	movs	r1, #160	@ 0xa0
 80094e2:	e796      	b.n	8009412 <QSPI_demo+0x11e>
          BSP_LCD_DisplayStringAt(20, 145, (uint8_t*)"QSPI WRITE : OK.     ", LEFT_MODE);
 80094e4:	4a2d      	ldr	r2, [pc, #180]	@ (800959c <QSPI_demo+0x2a8>)
 80094e6:	2191      	movs	r1, #145	@ 0x91
 80094e8:	2014      	movs	r0, #20
 80094ea:	f7f8 fe6d 	bl	80021c8 <BSP_LCD_DisplayStringAt>
          if(BSP_QSPI_Read(qspi_aRxBuffer, WRITE_READ_ADDR, BUFFER_SIZE) != QSPI_OK)
 80094ee:	462a      	mov	r2, r5
 80094f0:	2150      	movs	r1, #80	@ 0x50
 80094f2:	482b      	ldr	r0, [pc, #172]	@ (80095a0 <QSPI_demo+0x2ac>)
 80094f4:	f7f9 fc0a 	bl	8002d0c <BSP_QSPI_Read>
            BSP_LCD_DisplayStringAt(20, 160, (uint8_t*)"QSPI READ : FAILED.", LEFT_MODE);
 80094f8:	2303      	movs	r3, #3
          if(BSP_QSPI_Read(qspi_aRxBuffer, WRITE_READ_ADDR, BUFFER_SIZE) != QSPI_OK)
 80094fa:	b140      	cbz	r0, 800950e <QSPI_demo+0x21a>
            BSP_LCD_DisplayStringAt(20, 160, (uint8_t*)"QSPI READ : FAILED.", LEFT_MODE);
 80094fc:	4a29      	ldr	r2, [pc, #164]	@ (80095a4 <QSPI_demo+0x2b0>)
 80094fe:	21a0      	movs	r1, #160	@ 0xa0
 8009500:	2014      	movs	r0, #20
 8009502:	f7f8 fe61 	bl	80021c8 <BSP_LCD_DisplayStringAt>
            BSP_LCD_DisplayStringAt(20, 175, (uint8_t*)"QSPI Test Aborted.", LEFT_MODE);
 8009506:	2303      	movs	r3, #3
 8009508:	4a17      	ldr	r2, [pc, #92]	@ (8009568 <QSPI_demo+0x274>)
              BSP_LCD_DisplayStringAt(20, 175, (uint8_t*)"QSPI Test : OK.     ", LEFT_MODE);
 800950a:	21af      	movs	r1, #175	@ 0xaf
 800950c:	e781      	b.n	8009412 <QSPI_demo+0x11e>
            BSP_LCD_DisplayStringAt(20, 160, (uint8_t*)"QSPI READ :  OK.    ", LEFT_MODE);
 800950e:	4a26      	ldr	r2, [pc, #152]	@ (80095a8 <QSPI_demo+0x2b4>)
 8009510:	21a0      	movs	r1, #160	@ 0xa0
 8009512:	2014      	movs	r0, #20
 8009514:	f7f8 fe58 	bl	80021c8 <BSP_LCD_DisplayStringAt>
* @retval 1: pBuffer identical to pBuffer1
*         0: pBuffer differs from pBuffer1
*/
static uint8_t Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint32_t BufferLength)
{
  while (BufferLength--)
 8009518:	4a21      	ldr	r2, [pc, #132]	@ (80095a0 <QSPI_demo+0x2ac>)
 800951a:	f240 13ff 	movw	r3, #511	@ 0x1ff
  {
    if (*pBuffer1 != *pBuffer2)
 800951e:	f812 0b01 	ldrb.w	r0, [r2], #1
 8009522:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009526:	4288      	cmp	r0, r1
 8009528:	d104      	bne.n	8009534 <QSPI_demo+0x240>
  while (BufferLength--)
 800952a:	3b01      	subs	r3, #1
 800952c:	d2f7      	bcs.n	800951e <QSPI_demo+0x22a>
              BSP_LCD_DisplayStringAt(20, 175, (uint8_t*)"QSPI Test : OK.     ", LEFT_MODE);
 800952e:	2303      	movs	r3, #3
 8009530:	4a1e      	ldr	r2, [pc, #120]	@ (80095ac <QSPI_demo+0x2b8>)
 8009532:	e7ea      	b.n	800950a <QSPI_demo+0x216>
              BSP_LCD_DisplayStringAt(20, 175, (uint8_t*)"QSPI COMPARE : FAILED.", LEFT_MODE);
 8009534:	2303      	movs	r3, #3
 8009536:	4a1e      	ldr	r2, [pc, #120]	@ (80095b0 <QSPI_demo+0x2bc>)
 8009538:	21af      	movs	r1, #175	@ 0xaf
 800953a:	2014      	movs	r0, #20
 800953c:	f7f8 fe44 	bl	80021c8 <BSP_LCD_DisplayStringAt>
              BSP_LCD_DisplayStringAt(20, 190, (uint8_t*)"QSPI Test Aborted.", LEFT_MODE);
 8009540:	2303      	movs	r3, #3
 8009542:	4a09      	ldr	r2, [pc, #36]	@ (8009568 <QSPI_demo+0x274>)
 8009544:	e759      	b.n	80093fa <QSPI_demo+0x106>
 8009546:	bf00      	nop
 8009548:	ff0000ff 	.word	0xff0000ff
 800954c:	20000074 	.word	0x20000074
 8009550:	08012075 	.word	0x08012075
 8009554:	20000084 	.word	0x20000084
 8009558:	0801207a 	.word	0x0801207a
 800955c:	0801209a 	.word	0x0801209a
 8009560:	080120b7 	.word	0x080120b7
 8009564:	080120d7 	.word	0x080120d7
 8009568:	080120f5 	.word	0x080120f5
 800956c:	08012108 	.word	0x08012108
 8009570:	0801212b 	.word	0x0801212b
 8009574:	0801214a 	.word	0x0801214a
 8009578:	0801216b 	.word	0x0801216b
 800957c:	20021b44 	.word	0x20021b44
 8009580:	08012188 	.word	0x08012188
 8009584:	080121a2 	.word	0x080121a2
 8009588:	080121ba 	.word	0x080121ba
 800958c:	080121d1 	.word	0x080121d1
 8009590:	080121e6 	.word	0x080121e6
 8009594:	20021b58 	.word	0x20021b58
 8009598:	080121fa 	.word	0x080121fa
 800959c:	0801220f 	.word	0x0801220f
 80095a0:	20021d58 	.word	0x20021d58
 80095a4:	08012225 	.word	0x08012225
 80095a8:	08012239 	.word	0x08012239
 80095ac:	08012265 	.word	0x08012265
 80095b0:	0801224e 	.word	0x0801224e

080095b4 <SD_demo>:
  * @brief  SD Demo
  * @param  None
  * @retval None
  */
void SD_demo (void)
{
 80095b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  * @retval None
  */
static void SD_SetHint(void)
{
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 80095b6:	f04f 30ff 	mov.w	r0, #4294967295
 80095ba:	f7f8 fcf5 	bl	8001fa8 <BSP_LCD_Clear>

  /* Set LCD Demo description */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80095be:	4890      	ldr	r0, [pc, #576]	@ (8009800 <SD_demo+0x24c>)
 80095c0:	f7f8 fcc2 	bl	8001f48 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 80);
 80095c4:	f7f8 fc66 	bl	8001e94 <BSP_LCD_GetXSize>
 80095c8:	2100      	movs	r1, #0
 80095ca:	b282      	uxth	r2, r0
 80095cc:	2350      	movs	r3, #80	@ 0x50
 80095ce:	4608      	mov	r0, r1
 80095d0:	f7f9 f894 	bl	80026fc <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80095d4:	f04f 30ff 	mov.w	r0, #4294967295
 80095d8:	f7f8 fcb6 	bl	8001f48 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 80095dc:	4888      	ldr	r0, [pc, #544]	@ (8009800 <SD_demo+0x24c>)
 80095de:	f7f8 fcbf 	bl	8001f60 <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 80095e2:	4888      	ldr	r0, [pc, #544]	@ (8009804 <SD_demo+0x250>)
 80095e4:	f7f8 fcc8 	bl	8001f78 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"SD", CENTER_MODE);
 80095e8:	2100      	movs	r1, #0
 80095ea:	2301      	movs	r3, #1
 80095ec:	4a86      	ldr	r2, [pc, #536]	@ (8009808 <SD_demo+0x254>)
 80095ee:	4608      	mov	r0, r1
 80095f0:	f7f8 fdea 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 80095f4:	4885      	ldr	r0, [pc, #532]	@ (800980c <SD_demo+0x258>)
 80095f6:	f7f8 fcbf 	bl	8001f78 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t *)"This example shows how to write", CENTER_MODE);
 80095fa:	2301      	movs	r3, #1
 80095fc:	4a84      	ldr	r2, [pc, #528]	@ (8009810 <SD_demo+0x25c>)
 80095fe:	211e      	movs	r1, #30
 8009600:	2000      	movs	r0, #0
 8009602:	f7f8 fde1 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 45, (uint8_t *)"and read data on the microSD and also", CENTER_MODE);
 8009606:	2301      	movs	r3, #1
 8009608:	4a82      	ldr	r2, [pc, #520]	@ (8009814 <SD_demo+0x260>)
 800960a:	212d      	movs	r1, #45	@ 0x2d
 800960c:	2000      	movs	r0, #0
 800960e:	f7f8 fddb 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 60, (uint8_t *)"how to detect the presence of the card", CENTER_MODE);
 8009612:	2301      	movs	r3, #1
 8009614:	4a80      	ldr	r2, [pc, #512]	@ (8009818 <SD_demo+0x264>)
 8009616:	213c      	movs	r1, #60	@ 0x3c
 8009618:	2000      	movs	r0, #0
 800961a:	f7f8 fdd5 	bl	80021c8 <BSP_LCD_DisplayStringAt>

  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800961e:	4878      	ldr	r0, [pc, #480]	@ (8009800 <SD_demo+0x24c>)
 8009620:	f7f8 fc92 	bl	8001f48 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 90, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 100);
 8009624:	f7f8 fc36 	bl	8001e94 <BSP_LCD_GetXSize>
 8009628:	4604      	mov	r4, r0
 800962a:	f7f8 fc3f 	bl	8001eac <BSP_LCD_GetYSize>
 800962e:	f1a0 0364 	sub.w	r3, r0, #100	@ 0x64
 8009632:	f1a4 0214 	sub.w	r2, r4, #20
 8009636:	215a      	movs	r1, #90	@ 0x5a
 8009638:	b29b      	uxth	r3, r3
 800963a:	200a      	movs	r0, #10
 800963c:	b292      	uxth	r2, r2
 800963e:	f7f8 fd2d 	bl	800209c <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize() - 102);
 8009642:	f7f8 fc27 	bl	8001e94 <BSP_LCD_GetXSize>
 8009646:	4604      	mov	r4, r0
 8009648:	f7f8 fc30 	bl	8001eac <BSP_LCD_GetYSize>
 800964c:	f1a0 0366 	sub.w	r3, r0, #102	@ 0x66
 8009650:	f1a4 0216 	sub.w	r2, r4, #22
 8009654:	215b      	movs	r1, #91	@ 0x5b
 8009656:	b29b      	uxth	r3, r3
 8009658:	200b      	movs	r0, #11
 800965a:	b292      	uxth	r2, r2
 800965c:	f7f8 fd1e 	bl	800209c <BSP_LCD_DrawRect>

  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8009660:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8009664:	f7f8 fc70 	bl	8001f48 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8009668:	f04f 30ff 	mov.w	r0, #4294967295
 800966c:	f7f8 fc78 	bl	8001f60 <BSP_LCD_SetBackColor>
  SD_state = BSP_SD_Init();
 8009670:	f7f9 fe5e 	bl	8003330 <BSP_SD_Init>
      BSP_LCD_DisplayStringAt(20, 100, (uint8_t *)"SD shall be inserted before running test", LEFT_MODE);
 8009674:	2303      	movs	r3, #3
  if (SD_state != MSD_OK)
 8009676:	4604      	mov	r4, r0
 8009678:	b300      	cbz	r0, 80096bc <SD_demo+0x108>
    if(SD_state == MSD_ERROR_SD_NOT_PRESENT)
 800967a:	2802      	cmp	r0, #2
    BSP_LCD_DisplayStringAt(20, 100, (uint8_t *)"SD Initialization : FAIL.", LEFT_MODE);
 800967c:	f04f 0164 	mov.w	r1, #100	@ 0x64
 8009680:	f04f 0014 	mov.w	r0, #20
      BSP_LCD_DisplayStringAt(20, 100, (uint8_t *)"SD shall be inserted before running test", LEFT_MODE);
 8009684:	bf0c      	ite	eq
 8009686:	4a65      	ldreq	r2, [pc, #404]	@ (800981c <SD_demo+0x268>)
    BSP_LCD_DisplayStringAt(20, 100, (uint8_t *)"SD Initialization : FAIL.", LEFT_MODE);
 8009688:	4a65      	ldrne	r2, [pc, #404]	@ (8009820 <SD_demo+0x26c>)
 800968a:	f7f8 fd9d 	bl	80021c8 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SD Test Aborted.", LEFT_MODE);
 800968e:	2303      	movs	r3, #3
 8009690:	4a64      	ldr	r2, [pc, #400]	@ (8009824 <SD_demo+0x270>)
 8009692:	2173      	movs	r1, #115	@ 0x73
          BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SD READ : OK.", LEFT_MODE);
 8009694:	2402      	movs	r4, #2
      BSP_LCD_DisplayStringAt(20, BSP_LCD_GetYSize() - 30,   (uint8_t *)"SD Connected    ", LEFT_MODE);
 8009696:	4d64      	ldr	r5, [pc, #400]	@ (8009828 <SD_demo+0x274>)
        BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8009698:	4e64      	ldr	r6, [pc, #400]	@ (800982c <SD_demo+0x278>)
      BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SD Test Aborted.", LEFT_MODE);
 800969a:	2014      	movs	r0, #20
        BSP_LCD_DisplayStringAt(20, BSP_LCD_GetYSize() - 30, (uint8_t *)"SD Not Connected", LEFT_MODE);
 800969c:	4f64      	ldr	r7, [pc, #400]	@ (8009830 <SD_demo+0x27c>)
      BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SD Test Aborted.", LEFT_MODE);
 800969e:	f7f8 fd93 	bl	80021c8 <BSP_LCD_DisplayStringAt>
    if (BSP_SD_IsDetected() != SD_PRESENT)
 80096a2:	f7f9 fd25 	bl	80030f0 <BSP_SD_IsDetected>
 80096a6:	2801      	cmp	r0, #1
 80096a8:	f000 808e 	beq.w	80097c8 <SD_demo+0x214>
      if(prev_status != SD_NOT_PRESENT)
 80096ac:	2c00      	cmp	r4, #0
 80096ae:	d17b      	bne.n	80097a8 <SD_demo+0x1f4>
        prev_status = SD_NOT_PRESENT; 
 80096b0:	2400      	movs	r4, #0
    if (CheckForUserInput() > 0)
 80096b2:	f7ff fdfd 	bl	80092b0 <CheckForUserInput>
 80096b6:	2800      	cmp	r0, #0
 80096b8:	d0f3      	beq.n	80096a2 <SD_demo+0xee>
}
 80096ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    BSP_LCD_DisplayStringAt(20, 100, (uint8_t *)"SD Initialization : OK.", LEFT_MODE);
 80096bc:	4a5d      	ldr	r2, [pc, #372]	@ (8009834 <SD_demo+0x280>)
 80096be:	2164      	movs	r1, #100	@ 0x64
 80096c0:	2014      	movs	r0, #20
 80096c2:	f7f8 fd81 	bl	80021c8 <BSP_LCD_DisplayStringAt>
    SD_state = BSP_SD_Erase(BLOCK_START_ADDR, BLOCK_START_ADDR + NUM_OF_BLOCKS - 1);
 80096c6:	4620      	mov	r0, r4
 80096c8:	2104      	movs	r1, #4
 80096ca:	f7f9 fd47 	bl	800315c <BSP_SD_Erase>
 80096ce:	4604      	mov	r4, r0
    while(BSP_SD_GetCardState() != SD_TRANSFER_OK)
 80096d0:	f7f9 fe5a 	bl	8003388 <BSP_SD_GetCardState>
 80096d4:	2800      	cmp	r0, #0
 80096d6:	d1fb      	bne.n	80096d0 <SD_demo+0x11c>
      BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SD ERASE : FAILED.", LEFT_MODE);
 80096d8:	2303      	movs	r3, #3
    if (SD_state != MSD_OK)
 80096da:	b144      	cbz	r4, 80096ee <SD_demo+0x13a>
      BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SD ERASE : FAILED.", LEFT_MODE);
 80096dc:	4a56      	ldr	r2, [pc, #344]	@ (8009838 <SD_demo+0x284>)
 80096de:	2173      	movs	r1, #115	@ 0x73
 80096e0:	2014      	movs	r0, #20
 80096e2:	f7f8 fd71 	bl	80021c8 <BSP_LCD_DisplayStringAt>
      BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SD Test Aborted.", LEFT_MODE);
 80096e6:	2303      	movs	r3, #3
 80096e8:	4a4e      	ldr	r2, [pc, #312]	@ (8009824 <SD_demo+0x270>)
 80096ea:	2182      	movs	r1, #130	@ 0x82
 80096ec:	e7d2      	b.n	8009694 <SD_demo+0xe0>
      BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SD ERASE : OK.", LEFT_MODE);
 80096ee:	4d53      	ldr	r5, [pc, #332]	@ (800983c <SD_demo+0x288>)
 80096f0:	2173      	movs	r1, #115	@ 0x73
 80096f2:	4a53      	ldr	r2, [pc, #332]	@ (8009840 <SD_demo+0x28c>)
 80096f4:	2014      	movs	r0, #20
 80096f6:	f7f8 fd67 	bl	80021c8 <BSP_LCD_DisplayStringAt>
 80096fa:	462a      	mov	r2, r5
 80096fc:	f44f 530c 	mov.w	r3, #8960	@ 0x2300
  uint32_t tmpIndex = 0;

  /* Put in global buffer different values */
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
  {
    pBuffer[tmpIndex] = tmpIndex + uwOffset;
 8009700:	f842 3b04 	str.w	r3, [r2], #4
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 8009704:	3301      	adds	r3, #1
 8009706:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 800970a:	d1f9      	bne.n	8009700 <SD_demo+0x14c>
      SD_state = BSP_SD_WriteBlocks(aTxBuffer, BLOCK_START_ADDR, NUM_OF_BLOCKS, 10000);
 800970c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8009710:	2205      	movs	r2, #5
 8009712:	2100      	movs	r1, #0
 8009714:	4849      	ldr	r0, [pc, #292]	@ (800983c <SD_demo+0x288>)
 8009716:	f7f9 fd11 	bl	800313c <BSP_SD_WriteBlocks>
 800971a:	4604      	mov	r4, r0
      while(BSP_SD_GetCardState() != SD_TRANSFER_OK)
 800971c:	f7f9 fe34 	bl	8003388 <BSP_SD_GetCardState>
 8009720:	2800      	cmp	r0, #0
 8009722:	d1fb      	bne.n	800971c <SD_demo+0x168>
        BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SD WRITE : FAILED.", LEFT_MODE);
 8009724:	2303      	movs	r3, #3
      if (SD_state != MSD_OK)
 8009726:	b144      	cbz	r4, 800973a <SD_demo+0x186>
        BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SD WRITE : FAILED.", LEFT_MODE);
 8009728:	4a46      	ldr	r2, [pc, #280]	@ (8009844 <SD_demo+0x290>)
 800972a:	2182      	movs	r1, #130	@ 0x82
 800972c:	2014      	movs	r0, #20
 800972e:	f7f8 fd4b 	bl	80021c8 <BSP_LCD_DisplayStringAt>
        BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SD Test Aborted.", LEFT_MODE);
 8009732:	2303      	movs	r3, #3
 8009734:	4a3b      	ldr	r2, [pc, #236]	@ (8009824 <SD_demo+0x270>)
 8009736:	2191      	movs	r1, #145	@ 0x91
 8009738:	e7ac      	b.n	8009694 <SD_demo+0xe0>
        BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SD WRITE : OK.", LEFT_MODE);
 800973a:	4a43      	ldr	r2, [pc, #268]	@ (8009848 <SD_demo+0x294>)
 800973c:	2182      	movs	r1, #130	@ 0x82
 800973e:	2014      	movs	r0, #20
 8009740:	f7f8 fd42 	bl	80021c8 <BSP_LCD_DisplayStringAt>
        SD_state = BSP_SD_ReadBlocks(aRxBuffer, BLOCK_START_ADDR, NUM_OF_BLOCKS, 10000);
 8009744:	4621      	mov	r1, r4
 8009746:	f242 7310 	movw	r3, #10000	@ 0x2710
 800974a:	2205      	movs	r2, #5
 800974c:	483f      	ldr	r0, [pc, #252]	@ (800984c <SD_demo+0x298>)
 800974e:	f7f9 fce5 	bl	800311c <BSP_SD_ReadBlocks>
 8009752:	4604      	mov	r4, r0
        while(BSP_SD_GetCardState() != SD_TRANSFER_OK)
 8009754:	f7f9 fe18 	bl	8003388 <BSP_SD_GetCardState>
 8009758:	2800      	cmp	r0, #0
 800975a:	d1fb      	bne.n	8009754 <SD_demo+0x1a0>
          BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SD READ : FAILED.", LEFT_MODE);
 800975c:	2303      	movs	r3, #3
        if (SD_state != MSD_OK)
 800975e:	b144      	cbz	r4, 8009772 <SD_demo+0x1be>
          BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SD READ : FAILED.", LEFT_MODE);
 8009760:	4a3b      	ldr	r2, [pc, #236]	@ (8009850 <SD_demo+0x29c>)
 8009762:	2191      	movs	r1, #145	@ 0x91
 8009764:	2014      	movs	r0, #20
 8009766:	f7f8 fd2f 	bl	80021c8 <BSP_LCD_DisplayStringAt>
          BSP_LCD_DisplayStringAt(20, 160, (uint8_t *)"SD Test Aborted.", LEFT_MODE);
 800976a:	2303      	movs	r3, #3
 800976c:	4a2d      	ldr	r2, [pc, #180]	@ (8009824 <SD_demo+0x270>)
 800976e:	21a0      	movs	r1, #160	@ 0xa0
 8009770:	e790      	b.n	8009694 <SD_demo+0xe0>
          BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SD READ : OK.", LEFT_MODE);
 8009772:	4a38      	ldr	r2, [pc, #224]	@ (8009854 <SD_demo+0x2a0>)
 8009774:	2191      	movs	r1, #145	@ 0x91
 8009776:	2014      	movs	r0, #20
 8009778:	f7f8 fd26 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  * @retval 1: pBuffer identical to pBuffer1
  *         0: pBuffer differs from pBuffer1
  */
static uint8_t Buffercmp(uint32_t* pBuffer1, uint32_t* pBuffer2, uint16_t BufferLength)
{
  while (BufferLength--)
 800977c:	4a33      	ldr	r2, [pc, #204]	@ (800984c <SD_demo+0x298>)
          BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SD READ : OK.", LEFT_MODE);
 800977e:	f44f 7320 	mov.w	r3, #640	@ 0x280
  {
    if (*pBuffer1 != *pBuffer2)
 8009782:	f855 0b04 	ldr.w	r0, [r5], #4
 8009786:	f852 1b04 	ldr.w	r1, [r2], #4
 800978a:	4288      	cmp	r0, r1
 800978c:	d12e      	bne.n	80097ec <SD_demo+0x238>
  while (BufferLength--)
 800978e:	3b01      	subs	r3, #1
 8009790:	b29b      	uxth	r3, r3
 8009792:	2b00      	cmp	r3, #0
 8009794:	d1f5      	bne.n	8009782 <SD_demo+0x1ce>
            BSP_LCD_DisplayStringAt(20, 160, (uint8_t *)"SD Test : OK.", LEFT_MODE);
 8009796:	2303      	movs	r3, #3
 8009798:	4a2f      	ldr	r2, [pc, #188]	@ (8009858 <SD_demo+0x2a4>)
 800979a:	21a0      	movs	r1, #160	@ 0xa0
 800979c:	2014      	movs	r0, #20
 800979e:	f7f8 fd13 	bl	80021c8 <BSP_LCD_DisplayStringAt>
            BSP_LCD_DisplayStringAt(20, 175, (uint8_t *)"SD can be removed.", LEFT_MODE);
 80097a2:	2303      	movs	r3, #3
 80097a4:	4a2d      	ldr	r2, [pc, #180]	@ (800985c <SD_demo+0x2a8>)
 80097a6:	e029      	b.n	80097fc <SD_demo+0x248>
        BSP_SD_Init();
 80097a8:	f7f9 fdc2 	bl	8003330 <BSP_SD_Init>
        BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80097ac:	4630      	mov	r0, r6
 80097ae:	f7f8 fbcb 	bl	8001f48 <BSP_LCD_SetTextColor>
        BSP_LCD_DisplayStringAt(20, BSP_LCD_GetYSize() - 30, (uint8_t *)"SD Not Connected", LEFT_MODE);
 80097b2:	f7f8 fb7b 	bl	8001eac <BSP_LCD_GetYSize>
 80097b6:	f1a0 011e 	sub.w	r1, r0, #30
 80097ba:	2303      	movs	r3, #3
 80097bc:	463a      	mov	r2, r7
 80097be:	b289      	uxth	r1, r1
 80097c0:	2014      	movs	r0, #20
 80097c2:	f7f8 fd01 	bl	80021c8 <BSP_LCD_DisplayStringAt>
 80097c6:	e773      	b.n	80096b0 <SD_demo+0xfc>
    else if (prev_status != SD_PRESENT)
 80097c8:	2c01      	cmp	r4, #1
 80097ca:	d00d      	beq.n	80097e8 <SD_demo+0x234>
      BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 80097cc:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 80097d0:	f7f8 fbba 	bl	8001f48 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAt(20, BSP_LCD_GetYSize() - 30,   (uint8_t *)"SD Connected    ", LEFT_MODE);
 80097d4:	f7f8 fb6a 	bl	8001eac <BSP_LCD_GetYSize>
 80097d8:	f1a0 011e 	sub.w	r1, r0, #30
 80097dc:	2303      	movs	r3, #3
 80097de:	462a      	mov	r2, r5
 80097e0:	b289      	uxth	r1, r1
 80097e2:	2014      	movs	r0, #20
 80097e4:	f7f8 fcf0 	bl	80021c8 <BSP_LCD_DisplayStringAt>
        prev_status = SD_NOT_PRESENT; 
 80097e8:	2401      	movs	r4, #1
 80097ea:	e762      	b.n	80096b2 <SD_demo+0xfe>
            BSP_LCD_DisplayStringAt(20, 160, (uint8_t *)"SD COMPARE : FAILED.", LEFT_MODE);
 80097ec:	2303      	movs	r3, #3
 80097ee:	4a1c      	ldr	r2, [pc, #112]	@ (8009860 <SD_demo+0x2ac>)
 80097f0:	21a0      	movs	r1, #160	@ 0xa0
 80097f2:	2014      	movs	r0, #20
 80097f4:	f7f8 fce8 	bl	80021c8 <BSP_LCD_DisplayStringAt>
            BSP_LCD_DisplayStringAt(20, 175, (uint8_t *)"SD Test Aborted.", LEFT_MODE);
 80097f8:	2303      	movs	r3, #3
 80097fa:	4a0a      	ldr	r2, [pc, #40]	@ (8009824 <SD_demo+0x270>)
            BSP_LCD_DisplayStringAt(20, 175, (uint8_t *)"SD can be removed.", LEFT_MODE);
 80097fc:	21af      	movs	r1, #175	@ 0xaf
 80097fe:	e749      	b.n	8009694 <SD_demo+0xe0>
 8009800:	ff0000ff 	.word	0xff0000ff
 8009804:	20000074 	.word	0x20000074
 8009808:	0801227a 	.word	0x0801227a
 800980c:	20000084 	.word	0x20000084
 8009810:	0801207a 	.word	0x0801207a
 8009814:	0801227d 	.word	0x0801227d
 8009818:	080122a3 	.word	0x080122a3
 800981c:	080122ca 	.word	0x080122ca
 8009820:	080122f3 	.word	0x080122f3
 8009824:	0801230d 	.word	0x0801230d
 8009828:	080123ab 	.word	0x080123ab
 800982c:	ffff0000 	.word	0xffff0000
 8009830:	0801239a 	.word	0x0801239a
 8009834:	0801231e 	.word	0x0801231e
 8009838:	08012336 	.word	0x08012336
 800983c:	20021f58 	.word	0x20021f58
 8009840:	08012349 	.word	0x08012349
 8009844:	08012358 	.word	0x08012358
 8009848:	0801236b 	.word	0x0801236b
 800984c:	20022958 	.word	0x20022958
 8009850:	0801237a 	.word	0x0801237a
 8009854:	0801238c 	.word	0x0801238c
 8009858:	080123d1 	.word	0x080123d1
 800985c:	080123df 	.word	0x080123df
 8009860:	080123bc 	.word	0x080123bc

08009864 <SDRAM_demo>:
  * @brief  SDRAM Demo
  * @param  None
  * @retval None
  */
void SDRAM_demo (void)
{
 8009864:	b510      	push	{r4, lr}
  * @retval None
  */
static void SDRAM_SetHint(void)
{
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8009866:	f04f 30ff 	mov.w	r0, #4294967295
 800986a:	f7f8 fb9d 	bl	8001fa8 <BSP_LCD_Clear>

  /* Set LCD Demo description */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800986e:	485e      	ldr	r0, [pc, #376]	@ (80099e8 <SDRAM_demo+0x184>)
 8009870:	f7f8 fb6a 	bl	8001f48 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 80);
 8009874:	f7f8 fb0e 	bl	8001e94 <BSP_LCD_GetXSize>
 8009878:	2100      	movs	r1, #0
 800987a:	b282      	uxth	r2, r0
 800987c:	2350      	movs	r3, #80	@ 0x50
 800987e:	4608      	mov	r0, r1
 8009880:	f7f8 ff3c 	bl	80026fc <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8009884:	f04f 30ff 	mov.w	r0, #4294967295
 8009888:	f7f8 fb5e 	bl	8001f48 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 800988c:	4856      	ldr	r0, [pc, #344]	@ (80099e8 <SDRAM_demo+0x184>)
 800988e:	f7f8 fb67 	bl	8001f60 <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 8009892:	4856      	ldr	r0, [pc, #344]	@ (80099ec <SDRAM_demo+0x188>)
 8009894:	f7f8 fb70 	bl	8001f78 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"SDRAM", CENTER_MODE);
 8009898:	2100      	movs	r1, #0
 800989a:	2301      	movs	r3, #1
 800989c:	4a54      	ldr	r2, [pc, #336]	@ (80099f0 <SDRAM_demo+0x18c>)
 800989e:	4608      	mov	r0, r1
 80098a0:	f7f8 fc92 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 80098a4:	4853      	ldr	r0, [pc, #332]	@ (80099f4 <SDRAM_demo+0x190>)
 80098a6:	f7f8 fb67 	bl	8001f78 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t *)"This example shows how to write", CENTER_MODE);
 80098aa:	2301      	movs	r3, #1
 80098ac:	4a52      	ldr	r2, [pc, #328]	@ (80099f8 <SDRAM_demo+0x194>)
 80098ae:	211e      	movs	r1, #30
 80098b0:	2000      	movs	r0, #0
 80098b2:	f7f8 fc89 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 45, (uint8_t *)"and read data on SDRAM", CENTER_MODE);
 80098b6:	2301      	movs	r3, #1
 80098b8:	4a50      	ldr	r2, [pc, #320]	@ (80099fc <SDRAM_demo+0x198>)
 80098ba:	212d      	movs	r1, #45	@ 0x2d
 80098bc:	2000      	movs	r0, #0
 80098be:	f7f8 fc83 	bl	80021c8 <BSP_LCD_DisplayStringAt>

  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80098c2:	4849      	ldr	r0, [pc, #292]	@ (80099e8 <SDRAM_demo+0x184>)
 80098c4:	f7f8 fb40 	bl	8001f48 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 90, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 100);
 80098c8:	f7f8 fae4 	bl	8001e94 <BSP_LCD_GetXSize>
 80098cc:	4604      	mov	r4, r0
 80098ce:	f7f8 faed 	bl	8001eac <BSP_LCD_GetYSize>
 80098d2:	f1a0 0364 	sub.w	r3, r0, #100	@ 0x64
 80098d6:	f1a4 0214 	sub.w	r2, r4, #20
 80098da:	215a      	movs	r1, #90	@ 0x5a
 80098dc:	b29b      	uxth	r3, r3
 80098de:	200a      	movs	r0, #10
 80098e0:	b292      	uxth	r2, r2
 80098e2:	f7f8 fbdb 	bl	800209c <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize() - 102);
 80098e6:	f7f8 fad5 	bl	8001e94 <BSP_LCD_GetXSize>
 80098ea:	4604      	mov	r4, r0
 80098ec:	f7f8 fade 	bl	8001eac <BSP_LCD_GetYSize>
 80098f0:	f1a0 0366 	sub.w	r3, r0, #102	@ 0x66
 80098f4:	f1a4 0216 	sub.w	r2, r4, #22
 80098f8:	215b      	movs	r1, #91	@ 0x5b
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	200b      	movs	r0, #11
 80098fe:	b292      	uxth	r2, r2
 8009900:	f7f8 fbcc 	bl	800209c <BSP_LCD_DrawRect>

  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8009904:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8009908:	f7f8 fb1e 	bl	8001f48 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800990c:	f04f 30ff 	mov.w	r0, #4294967295
 8009910:	f7f8 fb26 	bl	8001f60 <BSP_LCD_SetBackColor>
  if (BSP_SDRAM_Init() != SDRAM_OK)
 8009914:	f7f9 fe80 	bl	8003618 <BSP_SDRAM_Init>
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM Initialization : FAILED.", LEFT_MODE);
 8009918:	2303      	movs	r3, #3
  if (BSP_SDRAM_Init() != SDRAM_OK)
 800991a:	2800      	cmp	r0, #0
 800991c:	d04a      	beq.n	80099b4 <SDRAM_demo+0x150>
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM Initialization : FAILED.", LEFT_MODE);
 800991e:	4a38      	ldr	r2, [pc, #224]	@ (8009a00 <SDRAM_demo+0x19c>)
 8009920:	2173      	movs	r1, #115	@ 0x73
 8009922:	2014      	movs	r0, #20
 8009924:	f7f8 fc50 	bl	80021c8 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SDRAM Test Aborted.", LEFT_MODE);
 8009928:	2303      	movs	r3, #3
 800992a:	4a36      	ldr	r2, [pc, #216]	@ (8009a04 <SDRAM_demo+0x1a0>)
 800992c:	2182      	movs	r1, #130	@ 0x82
 800992e:	4c36      	ldr	r4, [pc, #216]	@ (8009a08 <SDRAM_demo+0x1a4>)
    BSP_LCD_DisplayStringAt(20, 100, (uint8_t *)"SDRAM Initialization : OK.", LEFT_MODE);
 8009930:	2014      	movs	r0, #20
 8009932:	f7f8 fc49 	bl	80021c8 <BSP_LCD_DisplayStringAt>
{
 8009936:	4b35      	ldr	r3, [pc, #212]	@ (8009a0c <SDRAM_demo+0x1a8>)
 8009938:	4622      	mov	r2, r4
static void Fill_Buffer(uint32_t *pBuffer, uint32_t uwBufferLenght, uint32_t uwOffset)
{
  uint32_t tmpIndex = 0;

  /* Put in global buffer different values */
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 800993a:	4935      	ldr	r1, [pc, #212]	@ (8009a10 <SDRAM_demo+0x1ac>)
  {
    pBuffer[tmpIndex] = tmpIndex + uwOffset;
 800993c:	f842 3b04 	str.w	r3, [r2], #4
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 8009940:	3301      	adds	r3, #1
 8009942:	428b      	cmp	r3, r1
 8009944:	d1fa      	bne.n	800993c <SDRAM_demo+0xd8>
  if (BSP_SDRAM_WriteData((SDRAM_WRITE_READ_ADDR + SDRAM_WRITE_READ_ADDR_OFFSET), sdram_aTxBuffer, SDRAM_BUFFER_SIZE) != SDRAM_OK)
 8009946:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800994a:	492f      	ldr	r1, [pc, #188]	@ (8009a08 <SDRAM_demo+0x1a4>)
 800994c:	4831      	ldr	r0, [pc, #196]	@ (8009a14 <SDRAM_demo+0x1b0>)
 800994e:	f7f9 fd89 	bl	8003464 <BSP_SDRAM_WriteData>
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM WRITE : FAILED.", LEFT_MODE);
 8009952:	2303      	movs	r3, #3
  if (BSP_SDRAM_WriteData((SDRAM_WRITE_READ_ADDR + SDRAM_WRITE_READ_ADDR_OFFSET), sdram_aTxBuffer, SDRAM_BUFFER_SIZE) != SDRAM_OK)
 8009954:	b388      	cbz	r0, 80099ba <SDRAM_demo+0x156>
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM WRITE : FAILED.", LEFT_MODE);
 8009956:	4a30      	ldr	r2, [pc, #192]	@ (8009a18 <SDRAM_demo+0x1b4>)
 8009958:	2173      	movs	r1, #115	@ 0x73
 800995a:	2014      	movs	r0, #20
 800995c:	f7f8 fc34 	bl	80021c8 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SDRAM Test Aborted.", LEFT_MODE);
 8009960:	2303      	movs	r3, #3
 8009962:	4a28      	ldr	r2, [pc, #160]	@ (8009a04 <SDRAM_demo+0x1a0>)
 8009964:	2182      	movs	r1, #130	@ 0x82
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM WRITE : OK.", LEFT_MODE);
 8009966:	2014      	movs	r0, #20
 8009968:	f7f8 fc2e 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  if (BSP_SDRAM_ReadData(SDRAM_WRITE_READ_ADDR + SDRAM_WRITE_READ_ADDR_OFFSET, sdram_aRxBuffer, SDRAM_BUFFER_SIZE) != SDRAM_OK)
 800996c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009970:	492a      	ldr	r1, [pc, #168]	@ (8009a1c <SDRAM_demo+0x1b8>)
 8009972:	4828      	ldr	r0, [pc, #160]	@ (8009a14 <SDRAM_demo+0x1b0>)
 8009974:	f7f9 fd5a 	bl	800342c <BSP_SDRAM_ReadData>
    BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SDRAM READ : FAILED.", LEFT_MODE);
 8009978:	2303      	movs	r3, #3
  if (BSP_SDRAM_ReadData(SDRAM_WRITE_READ_ADDR + SDRAM_WRITE_READ_ADDR_OFFSET, sdram_aRxBuffer, SDRAM_BUFFER_SIZE) != SDRAM_OK)
 800997a:	b308      	cbz	r0, 80099c0 <SDRAM_demo+0x15c>
    BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SDRAM READ : FAILED.", LEFT_MODE);
 800997c:	4a28      	ldr	r2, [pc, #160]	@ (8009a20 <SDRAM_demo+0x1bc>)
 800997e:	2182      	movs	r1, #130	@ 0x82
 8009980:	2014      	movs	r0, #20
 8009982:	f7f8 fc21 	bl	80021c8 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SDRAM Test Aborted.", LEFT_MODE);
 8009986:	2303      	movs	r3, #3
 8009988:	4a1e      	ldr	r2, [pc, #120]	@ (8009a04 <SDRAM_demo+0x1a0>)
 800998a:	2191      	movs	r1, #145	@ 0x91
    BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SDRAM READ : OK.", LEFT_MODE);
 800998c:	2014      	movs	r0, #20
 800998e:	f7f8 fc1b 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  * @retval 1: pBuffer identical to pBuffer1
  *         0: pBuffer differs from pBuffer1
  */
static uint8_t Buffercmp(uint32_t* pBuffer1, uint32_t* pBuffer2, uint16_t BufferLength)
{
  while (BufferLength--)
 8009992:	4a22      	ldr	r2, [pc, #136]	@ (8009a1c <SDRAM_demo+0x1b8>)
{
 8009994:	f44f 7380 	mov.w	r3, #256	@ 0x100
  {
    if (*pBuffer1 != *pBuffer2)
 8009998:	f854 0b04 	ldr.w	r0, [r4], #4
 800999c:	f852 1b04 	ldr.w	r1, [r2], #4
 80099a0:	4288      	cmp	r0, r1
 80099a2:	d110      	bne.n	80099c6 <SDRAM_demo+0x162>
  while (BufferLength--)
 80099a4:	3b01      	subs	r3, #1
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d1f5      	bne.n	8009998 <SDRAM_demo+0x134>
    BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SDRAM Test : OK.", LEFT_MODE);
 80099ac:	2303      	movs	r3, #3
 80099ae:	4a1d      	ldr	r2, [pc, #116]	@ (8009a24 <SDRAM_demo+0x1c0>)
 80099b0:	2191      	movs	r1, #145	@ 0x91
 80099b2:	e011      	b.n	80099d8 <SDRAM_demo+0x174>
    BSP_LCD_DisplayStringAt(20, 100, (uint8_t *)"SDRAM Initialization : OK.", LEFT_MODE);
 80099b4:	4a1c      	ldr	r2, [pc, #112]	@ (8009a28 <SDRAM_demo+0x1c4>)
 80099b6:	2164      	movs	r1, #100	@ 0x64
 80099b8:	e7b9      	b.n	800992e <SDRAM_demo+0xca>
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM WRITE : OK.", LEFT_MODE);
 80099ba:	4a1c      	ldr	r2, [pc, #112]	@ (8009a2c <SDRAM_demo+0x1c8>)
 80099bc:	2173      	movs	r1, #115	@ 0x73
 80099be:	e7d2      	b.n	8009966 <SDRAM_demo+0x102>
    BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SDRAM READ : OK.", LEFT_MODE);
 80099c0:	4a1b      	ldr	r2, [pc, #108]	@ (8009a30 <SDRAM_demo+0x1cc>)
 80099c2:	2182      	movs	r1, #130	@ 0x82
 80099c4:	e7e2      	b.n	800998c <SDRAM_demo+0x128>
    BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SDRAM COMPARE : FAILED.", LEFT_MODE);
 80099c6:	2303      	movs	r3, #3
 80099c8:	4a1a      	ldr	r2, [pc, #104]	@ (8009a34 <SDRAM_demo+0x1d0>)
 80099ca:	2191      	movs	r1, #145	@ 0x91
 80099cc:	2014      	movs	r0, #20
 80099ce:	f7f8 fbfb 	bl	80021c8 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 160, (uint8_t *)"SDRAM Test Aborted.", LEFT_MODE);
 80099d2:	2303      	movs	r3, #3
 80099d4:	4a0b      	ldr	r2, [pc, #44]	@ (8009a04 <SDRAM_demo+0x1a0>)
 80099d6:	21a0      	movs	r1, #160	@ 0xa0
    BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SDRAM Test : OK.", LEFT_MODE);
 80099d8:	2014      	movs	r0, #20
 80099da:	f7f8 fbf5 	bl	80021c8 <BSP_LCD_DisplayStringAt>
    if (CheckForUserInput() > 0)
 80099de:	f7ff fc67 	bl	80092b0 <CheckForUserInput>
 80099e2:	2800      	cmp	r0, #0
 80099e4:	d0fb      	beq.n	80099de <SDRAM_demo+0x17a>
}
 80099e6:	bd10      	pop	{r4, pc}
 80099e8:	ff0000ff 	.word	0xff0000ff
 80099ec:	20000074 	.word	0x20000074
 80099f0:	08012403 	.word	0x08012403
 80099f4:	20000084 	.word	0x20000084
 80099f8:	0801207a 	.word	0x0801207a
 80099fc:	080123f2 	.word	0x080123f2
 8009a00:	08012409 	.word	0x08012409
 8009a04:	08012428 	.word	0x08012428
 8009a08:	20023358 	.word	0x20023358
 8009a0c:	a244250f 	.word	0xa244250f
 8009a10:	a244260f 	.word	0xa244260f
 8009a14:	c0116000 	.word	0xc0116000
 8009a18:	08012457 	.word	0x08012457
 8009a1c:	20023758 	.word	0x20023758
 8009a20:	0801247f 	.word	0x0801247f
 8009a24:	080124bd 	.word	0x080124bd
 8009a28:	0801243c 	.word	0x0801243c
 8009a2c:	0801246d 	.word	0x0801246d
 8009a30:	08012494 	.word	0x08012494
 8009a34:	080124a5 	.word	0x080124a5

08009a38 <SDRAM_DMA_demo>:
  * @brief  SDRAM Demo
  * @param  None
  * @retval None
  */
void SDRAM_DMA_demo (void)
{
 8009a38:	b570      	push	{r4, r5, r6, lr}
  * @retval None
  */
static void SDRAM_DMA_SetHint(void)
{
  /* Clear the LCD */
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8009a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a3e:	f7f8 fab3 	bl	8001fa8 <BSP_LCD_Clear>

  /* Set LCD Demo description */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8009a42:	487d      	ldr	r0, [pc, #500]	@ (8009c38 <SDRAM_DMA_demo+0x200>)
 8009a44:	f7f8 fa80 	bl	8001f48 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 80);
 8009a48:	f7f8 fa24 	bl	8001e94 <BSP_LCD_GetXSize>
 8009a4c:	2100      	movs	r1, #0
 8009a4e:	b282      	uxth	r2, r0
 8009a50:	2350      	movs	r3, #80	@ 0x50
 8009a52:	4608      	mov	r0, r1
 8009a54:	f7f8 fe52 	bl	80026fc <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8009a58:	f04f 30ff 	mov.w	r0, #4294967295
 8009a5c:	f7f8 fa74 	bl	8001f48 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8009a60:	4875      	ldr	r0, [pc, #468]	@ (8009c38 <SDRAM_DMA_demo+0x200>)
 8009a62:	f7f8 fa7d 	bl	8001f60 <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 8009a66:	4875      	ldr	r0, [pc, #468]	@ (8009c3c <SDRAM_DMA_demo+0x204>)
 8009a68:	f7f8 fa86 	bl	8001f78 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"SDRAM DMA", CENTER_MODE);
 8009a6c:	2100      	movs	r1, #0
 8009a6e:	2301      	movs	r3, #1
 8009a70:	4a73      	ldr	r2, [pc, #460]	@ (8009c40 <SDRAM_DMA_demo+0x208>)
 8009a72:	4608      	mov	r0, r1
 8009a74:	f7f8 fba8 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 8009a78:	4872      	ldr	r0, [pc, #456]	@ (8009c44 <SDRAM_DMA_demo+0x20c>)
 8009a7a:	f7f8 fa7d 	bl	8001f78 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t *)"This example shows how to write", CENTER_MODE);
 8009a7e:	2301      	movs	r3, #1
 8009a80:	4a71      	ldr	r2, [pc, #452]	@ (8009c48 <SDRAM_DMA_demo+0x210>)
 8009a82:	211e      	movs	r1, #30
 8009a84:	2000      	movs	r0, #0
 8009a86:	f7f8 fb9f 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 45, (uint8_t *)"and read data on SDRAM", CENTER_MODE);
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	4a6f      	ldr	r2, [pc, #444]	@ (8009c4c <SDRAM_DMA_demo+0x214>)
 8009a8e:	212d      	movs	r1, #45	@ 0x2d
 8009a90:	2000      	movs	r0, #0
 8009a92:	f7f8 fb99 	bl	80021c8 <BSP_LCD_DisplayStringAt>

  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8009a96:	4868      	ldr	r0, [pc, #416]	@ (8009c38 <SDRAM_DMA_demo+0x200>)
 8009a98:	f7f8 fa56 	bl	8001f48 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 90, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 100);
 8009a9c:	f7f8 f9fa 	bl	8001e94 <BSP_LCD_GetXSize>
 8009aa0:	4604      	mov	r4, r0
 8009aa2:	f7f8 fa03 	bl	8001eac <BSP_LCD_GetYSize>
 8009aa6:	f1a0 0364 	sub.w	r3, r0, #100	@ 0x64
 8009aaa:	f1a4 0214 	sub.w	r2, r4, #20
 8009aae:	215a      	movs	r1, #90	@ 0x5a
 8009ab0:	b29b      	uxth	r3, r3
 8009ab2:	200a      	movs	r0, #10
 8009ab4:	b292      	uxth	r2, r2
 8009ab6:	f7f8 faf1 	bl	800209c <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize() - 102);
 8009aba:	f7f8 f9eb 	bl	8001e94 <BSP_LCD_GetXSize>
 8009abe:	4604      	mov	r4, r0
 8009ac0:	f7f8 f9f4 	bl	8001eac <BSP_LCD_GetYSize>
 8009ac4:	f1a0 0366 	sub.w	r3, r0, #102	@ 0x66
 8009ac8:	f1a4 0216 	sub.w	r2, r4, #22
 8009acc:	215b      	movs	r1, #91	@ 0x5b
 8009ace:	b29b      	uxth	r3, r3
 8009ad0:	200b      	movs	r0, #11
 8009ad2:	b292      	uxth	r2, r2
 8009ad4:	f7f8 fae2 	bl	800209c <BSP_LCD_DrawRect>

  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8009ad8:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8009adc:	f7f8 fa34 	bl	8001f48 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8009ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ae4:	f7f8 fa3c 	bl	8001f60 <BSP_LCD_SetBackColor>
  if (BSP_SDRAM_Init() != SDRAM_OK)
 8009ae8:	f7f9 fd96 	bl	8003618 <BSP_SDRAM_Init>
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM Initialization : FAILED.", LEFT_MODE);
 8009aec:	2303      	movs	r3, #3
  if (BSP_SDRAM_Init() != SDRAM_OK)
 8009aee:	2800      	cmp	r0, #0
 8009af0:	f000 8087 	beq.w	8009c02 <SDRAM_DMA_demo+0x1ca>
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM Initialization : FAILED.", LEFT_MODE);
 8009af4:	4a56      	ldr	r2, [pc, #344]	@ (8009c50 <SDRAM_DMA_demo+0x218>)
 8009af6:	2173      	movs	r1, #115	@ 0x73
 8009af8:	2014      	movs	r0, #20
 8009afa:	f7f8 fb65 	bl	80021c8 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SDRAM Test Aborted.", LEFT_MODE);
 8009afe:	2303      	movs	r3, #3
 8009b00:	4a54      	ldr	r2, [pc, #336]	@ (8009c54 <SDRAM_DMA_demo+0x21c>)
 8009b02:	2182      	movs	r1, #130	@ 0x82
 8009b04:	4c54      	ldr	r4, [pc, #336]	@ (8009c58 <SDRAM_DMA_demo+0x220>)
    BSP_LCD_DisplayStringAt(20, 100, (uint8_t *)"SDRAM Initialization : OK.", LEFT_MODE);
 8009b06:	2014      	movs	r0, #20
 8009b08:	f7f8 fb5e 	bl	80021c8 <BSP_LCD_DisplayStringAt>
{
 8009b0c:	4b53      	ldr	r3, [pc, #332]	@ (8009c5c <SDRAM_DMA_demo+0x224>)
 8009b0e:	4622      	mov	r2, r4
 8009b10:	4625      	mov	r5, r4
static void Fill_Buffer(uint32_t *pBuffer, uint32_t uwBufferLength, uint32_t uwOffset)
{
  uint32_t tmpIndex = 0;

  /* Put in global buffer different values */
  for (tmpIndex = 0; tmpIndex < uwBufferLength; tmpIndex++ )
 8009b12:	4953      	ldr	r1, [pc, #332]	@ (8009c60 <SDRAM_DMA_demo+0x228>)
  {
    pBuffer[tmpIndex] = tmpIndex + uwOffset;
 8009b14:	f842 3b04 	str.w	r3, [r2], #4
  for (tmpIndex = 0; tmpIndex < uwBufferLength; tmpIndex++ )
 8009b18:	3301      	adds	r3, #1
 8009b1a:	428b      	cmp	r3, r1
 8009b1c:	d1fa      	bne.n	8009b14 <SDRAM_DMA_demo+0xdc>
  __ASM volatile ("dsb 0xF":::"memory");
 8009b1e:	f3bf 8f4f 	dsb	sy
 8009b22:	2300      	movs	r3, #0
      SCB->DCCMVAC = op_addr;
 8009b24:	4a4f      	ldr	r2, [pc, #316]	@ (8009c64 <SDRAM_DMA_demo+0x22c>)
 8009b26:	18e1      	adds	r1, r4, r3
    while (op_size > 0) {
 8009b28:	3320      	adds	r3, #32
 8009b2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
      SCB->DCCMVAC = op_addr;
 8009b2e:	f8c2 1268 	str.w	r1, [r2, #616]	@ 0x268
    while (op_size > 0) {
 8009b32:	d1f8      	bne.n	8009b26 <SDRAM_DMA_demo+0xee>
 8009b34:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009b38:	f3bf 8f6f 	isb	sy
  uwDMA_Transfer_Complete = 0;
 8009b3c:	2300      	movs	r3, #0
  if (BSP_SDRAM_WriteData_DMA((SDRAM_WRITE_READ_ADDR + SDRAM_WRITE_READ_ADDR_OFFSET), sdram_aTxBuffer, SDRAM_DMA_BUFFER_SIZE) != SDRAM_OK)
 8009b3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009b42:	4945      	ldr	r1, [pc, #276]	@ (8009c58 <SDRAM_DMA_demo+0x220>)
 8009b44:	4848      	ldr	r0, [pc, #288]	@ (8009c68 <SDRAM_DMA_demo+0x230>)
  uwDMA_Transfer_Complete = 0;
 8009b46:	f8c5 3400 	str.w	r3, [r5, #1024]	@ 0x400
  if (BSP_SDRAM_WriteData_DMA((SDRAM_WRITE_READ_ADDR + SDRAM_WRITE_READ_ADDR_OFFSET), sdram_aTxBuffer, SDRAM_DMA_BUFFER_SIZE) != SDRAM_OK)
 8009b4a:	f7f9 fc99 	bl	8003480 <BSP_SDRAM_WriteData_DMA>
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM WRITE dma : FAILED.", LEFT_MODE);
 8009b4e:	2303      	movs	r3, #3
  if (BSP_SDRAM_WriteData_DMA((SDRAM_WRITE_READ_ADDR + SDRAM_WRITE_READ_ADDR_OFFSET), sdram_aTxBuffer, SDRAM_DMA_BUFFER_SIZE) != SDRAM_OK)
 8009b50:	2800      	cmp	r0, #0
 8009b52:	d059      	beq.n	8009c08 <SDRAM_DMA_demo+0x1d0>
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM WRITE dma : FAILED.", LEFT_MODE);
 8009b54:	4a45      	ldr	r2, [pc, #276]	@ (8009c6c <SDRAM_DMA_demo+0x234>)
 8009b56:	2173      	movs	r1, #115	@ 0x73
 8009b58:	2014      	movs	r0, #20
 8009b5a:	f7f8 fb35 	bl	80021c8 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SDRAM Test Aborted.", LEFT_MODE);
 8009b5e:	2303      	movs	r3, #3
 8009b60:	4a3c      	ldr	r2, [pc, #240]	@ (8009c54 <SDRAM_DMA_demo+0x21c>)
 8009b62:	2182      	movs	r1, #130	@ 0x82
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM WRITE DMA : REQUESTED", LEFT_MODE);
 8009b64:	2014      	movs	r0, #20
 8009b66:	f7f8 fb2f 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  while (!uwDMA_Transfer_Complete)
 8009b6a:	f8d5 3400 	ldr.w	r3, [r5, #1024]	@ 0x400
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d0fb      	beq.n	8009b6a <SDRAM_DMA_demo+0x132>
  BSP_LCD_DisplayStringAt(20, 130, (uint8_t *)"SDRAM WRITE DMA : COMPLETED", LEFT_MODE);
 8009b72:	2303      	movs	r3, #3
 8009b74:	4a3e      	ldr	r2, [pc, #248]	@ (8009c70 <SDRAM_DMA_demo+0x238>)
 8009b76:	2182      	movs	r1, #130	@ 0x82
 8009b78:	2014      	movs	r0, #20
 8009b7a:	f7f8 fb25 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  uwDMA_Transfer_Complete = 0;
 8009b7e:	2300      	movs	r3, #0
  if (BSP_SDRAM_ReadData_DMA((SDRAM_WRITE_READ_ADDR + SDRAM_WRITE_READ_ADDR_OFFSET), sdram_aRxBuffer, SDRAM_DMA_BUFFER_SIZE) != SDRAM_OK)
 8009b80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009b84:	493b      	ldr	r1, [pc, #236]	@ (8009c74 <SDRAM_DMA_demo+0x23c>)
 8009b86:	4838      	ldr	r0, [pc, #224]	@ (8009c68 <SDRAM_DMA_demo+0x230>)
  uwDMA_Transfer_Complete = 0;
 8009b88:	f8c5 3400 	str.w	r3, [r5, #1024]	@ 0x400
  if (BSP_SDRAM_ReadData_DMA((SDRAM_WRITE_READ_ADDR + SDRAM_WRITE_READ_ADDR_OFFSET), sdram_aRxBuffer, SDRAM_DMA_BUFFER_SIZE) != SDRAM_OK)
 8009b8c:	f7f9 fc5c 	bl	8003448 <BSP_SDRAM_ReadData_DMA>
 8009b90:	4e38      	ldr	r6, [pc, #224]	@ (8009c74 <SDRAM_DMA_demo+0x23c>)
    BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SDRAM  READ DMA : FAILED", LEFT_MODE);
 8009b92:	2303      	movs	r3, #3
  if (BSP_SDRAM_ReadData_DMA((SDRAM_WRITE_READ_ADDR + SDRAM_WRITE_READ_ADDR_OFFSET), sdram_aRxBuffer, SDRAM_DMA_BUFFER_SIZE) != SDRAM_OK)
 8009b94:	2800      	cmp	r0, #0
 8009b96:	d03a      	beq.n	8009c0e <SDRAM_DMA_demo+0x1d6>
    BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SDRAM  READ DMA : FAILED", LEFT_MODE);
 8009b98:	4a37      	ldr	r2, [pc, #220]	@ (8009c78 <SDRAM_DMA_demo+0x240>)
 8009b9a:	2191      	movs	r1, #145	@ 0x91
 8009b9c:	2014      	movs	r0, #20
 8009b9e:	f7f8 fb13 	bl	80021c8 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 160, (uint8_t *)"SDRAM  Test Aborted", LEFT_MODE);
 8009ba2:	2303      	movs	r3, #3
 8009ba4:	4a35      	ldr	r2, [pc, #212]	@ (8009c7c <SDRAM_DMA_demo+0x244>)
 8009ba6:	21a0      	movs	r1, #160	@ 0xa0
    BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SDRAM READ  DMA : REQUESTED", LEFT_MODE);
 8009ba8:	2014      	movs	r0, #20
 8009baa:	f7f8 fb0d 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  while (!uwDMA_Transfer_Complete)
 8009bae:	f8d5 3400 	ldr.w	r3, [r5, #1024]	@ 0x400
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d0fb      	beq.n	8009bae <SDRAM_DMA_demo+0x176>
  BSP_LCD_DisplayStringAt(20, 160, (uint8_t *)"SDRAM READ  DMA : COMPLETED", LEFT_MODE);
 8009bb6:	2303      	movs	r3, #3
 8009bb8:	4a31      	ldr	r2, [pc, #196]	@ (8009c80 <SDRAM_DMA_demo+0x248>)
 8009bba:	21a0      	movs	r1, #160	@ 0xa0
 8009bbc:	2014      	movs	r0, #20
 8009bbe:	f7f8 fb03 	bl	80021c8 <BSP_LCD_DisplayStringAt>
    uint32_t op_addr = (uint32_t)addr;
 8009bc2:	4a2c      	ldr	r2, [pc, #176]	@ (8009c74 <SDRAM_DMA_demo+0x23c>)
  __ASM volatile ("dsb 0xF":::"memory");
 8009bc4:	f3bf 8f4f 	dsb	sy
 8009bc8:	2300      	movs	r3, #0
      SCB->DCIMVAC = op_addr;
 8009bca:	4926      	ldr	r1, [pc, #152]	@ (8009c64 <SDRAM_DMA_demo+0x22c>)
 8009bcc:	1998      	adds	r0, r3, r6
    while (op_size > 0) {
 8009bce:	3320      	adds	r3, #32
 8009bd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
      SCB->DCIMVAC = op_addr;
 8009bd4:	f8c1 025c 	str.w	r0, [r1, #604]	@ 0x25c
    while (op_size > 0) {
 8009bd8:	d1f8      	bne.n	8009bcc <SDRAM_DMA_demo+0x194>
 8009bda:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8009bde:	f3bf 8f6f 	isb	sy
 8009be2:	f44f 7380 	mov.w	r3, #256	@ 0x100
  /* Invalidate Data Cache to get the updated content of the SRAM */
  SCB_InvalidateDCache_by_Addr((uint32_t *)pBuffer2, BufferLength*4);

  while (BufferLength--)
  {
    if (*pBuffer1 != *pBuffer2)
 8009be6:	f854 0b04 	ldr.w	r0, [r4], #4
 8009bea:	f852 1b04 	ldr.w	r1, [r2], #4
 8009bee:	4288      	cmp	r0, r1
 8009bf0:	d110      	bne.n	8009c14 <SDRAM_DMA_demo+0x1dc>
  while (BufferLength--)
 8009bf2:	3b01      	subs	r3, #1
 8009bf4:	b29b      	uxth	r3, r3
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d1f5      	bne.n	8009be6 <SDRAM_DMA_demo+0x1ae>
    BSP_LCD_DisplayStringAt(20, 175, (uint8_t *)"SDRAM TEST      : SUCCESSFUL", LEFT_MODE);
 8009bfa:	2303      	movs	r3, #3
 8009bfc:	4a21      	ldr	r2, [pc, #132]	@ (8009c84 <SDRAM_DMA_demo+0x24c>)
 8009bfe:	21af      	movs	r1, #175	@ 0xaf
 8009c00:	e011      	b.n	8009c26 <SDRAM_DMA_demo+0x1ee>
    BSP_LCD_DisplayStringAt(20, 100, (uint8_t *)"SDRAM Initialization : OK.", LEFT_MODE);
 8009c02:	4a21      	ldr	r2, [pc, #132]	@ (8009c88 <SDRAM_DMA_demo+0x250>)
 8009c04:	2164      	movs	r1, #100	@ 0x64
 8009c06:	e77d      	b.n	8009b04 <SDRAM_DMA_demo+0xcc>
    BSP_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM WRITE DMA : REQUESTED", LEFT_MODE);
 8009c08:	4a20      	ldr	r2, [pc, #128]	@ (8009c8c <SDRAM_DMA_demo+0x254>)
 8009c0a:	2173      	movs	r1, #115	@ 0x73
 8009c0c:	e7aa      	b.n	8009b64 <SDRAM_DMA_demo+0x12c>
    BSP_LCD_DisplayStringAt(20, 145, (uint8_t *)"SDRAM READ  DMA : REQUESTED", LEFT_MODE);
 8009c0e:	4a20      	ldr	r2, [pc, #128]	@ (8009c90 <SDRAM_DMA_demo+0x258>)
 8009c10:	2191      	movs	r1, #145	@ 0x91
 8009c12:	e7c9      	b.n	8009ba8 <SDRAM_DMA_demo+0x170>
    BSP_LCD_DisplayStringAt(20, 175, (uint8_t *)"SDRAM COMPARE : FAILED.", LEFT_MODE);
 8009c14:	2303      	movs	r3, #3
 8009c16:	4a1f      	ldr	r2, [pc, #124]	@ (8009c94 <SDRAM_DMA_demo+0x25c>)
 8009c18:	21af      	movs	r1, #175	@ 0xaf
 8009c1a:	2014      	movs	r0, #20
 8009c1c:	f7f8 fad4 	bl	80021c8 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(20, 190, (uint8_t *)"SDRAM Test Aborted.", LEFT_MODE);
 8009c20:	2303      	movs	r3, #3
 8009c22:	4a0c      	ldr	r2, [pc, #48]	@ (8009c54 <SDRAM_DMA_demo+0x21c>)
 8009c24:	21be      	movs	r1, #190	@ 0xbe
    BSP_LCD_DisplayStringAt(20, 175, (uint8_t *)"SDRAM TEST      : SUCCESSFUL", LEFT_MODE);
 8009c26:	2014      	movs	r0, #20
 8009c28:	f7f8 face 	bl	80021c8 <BSP_LCD_DisplayStringAt>
    if (CheckForUserInput() > 0)
 8009c2c:	f7ff fb40 	bl	80092b0 <CheckForUserInput>
 8009c30:	2800      	cmp	r0, #0
 8009c32:	d0fb      	beq.n	8009c2c <SDRAM_DMA_demo+0x1f4>
}
 8009c34:	bd70      	pop	{r4, r5, r6, pc}
 8009c36:	bf00      	nop
 8009c38:	ff0000ff 	.word	0xff0000ff
 8009c3c:	20000074 	.word	0x20000074
 8009c40:	080124ce 	.word	0x080124ce
 8009c44:	20000084 	.word	0x20000084
 8009c48:	0801207a 	.word	0x0801207a
 8009c4c:	080123f2 	.word	0x080123f2
 8009c50:	08012409 	.word	0x08012409
 8009c54:	08012428 	.word	0x08012428
 8009c58:	20023b60 	.word	0x20023b60
 8009c5c:	a244250f 	.word	0xa244250f
 8009c60:	a244260f 	.word	0xa244260f
 8009c64:	e000ed00 	.word	0xe000ed00
 8009c68:	c0116000 	.word	0xc0116000
 8009c6c:	080124d8 	.word	0x080124d8
 8009c70:	0801250e 	.word	0x0801250e
 8009c74:	20023f80 	.word	0x20023f80
 8009c78:	0801252a 	.word	0x0801252a
 8009c7c:	08012543 	.word	0x08012543
 8009c80:	08012573 	.word	0x08012573
 8009c84:	0801258f 	.word	0x0801258f
 8009c88:	0801243c 	.word	0x0801243c
 8009c8c:	080124f2 	.word	0x080124f2
 8009c90:	08012557 	.word	0x08012557
 8009c94:	080124a5 	.word	0x080124a5

08009c98 <HAL_SDRAM_DMA_XferCpltCallback>:
  uwDMA_Transfer_Complete = 1;
 8009c98:	4b02      	ldr	r3, [pc, #8]	@ (8009ca4 <HAL_SDRAM_DMA_XferCpltCallback+0xc>)
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
}
 8009ca0:	4770      	bx	lr
 8009ca2:	bf00      	nop
 8009ca4:	20023b60 	.word	0x20023b60

08009ca8 <HAL_SDRAM_DMA_XferErrorCallback>:
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8009ca8:	4805      	ldr	r0, [pc, #20]	@ (8009cc0 <HAL_SDRAM_DMA_XferErrorCallback+0x18>)
{
 8009caa:	b510      	push	{r4, lr}
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8009cac:	f7f8 f94c 	bl	8001f48 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAt(20, 215, (uint8_t *)"DMA ERROR", LEFT_MODE);
 8009cb0:	2303      	movs	r3, #3
 8009cb2:	4a04      	ldr	r2, [pc, #16]	@ (8009cc4 <HAL_SDRAM_DMA_XferErrorCallback+0x1c>)
 8009cb4:	21d7      	movs	r1, #215	@ 0xd7
 8009cb6:	2014      	movs	r0, #20
}
 8009cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  BSP_LCD_DisplayStringAt(20, 215, (uint8_t *)"DMA ERROR", LEFT_MODE);
 8009cbc:	f7f8 ba84 	b.w	80021c8 <BSP_LCD_DisplayStringAt>
 8009cc0:	ffff0000 	.word	0xffff0000
 8009cc4:	080125ac 	.word	0x080125ac

08009cc8 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8009cc8:	4770      	bx	lr

08009cca <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8009cca:	e7fe      	b.n	8009cca <HardFault_Handler>

08009ccc <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8009ccc:	e7fe      	b.n	8009ccc <MemManage_Handler>

08009cce <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8009cce:	e7fe      	b.n	8009cce <BusFault_Handler>

08009cd0 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8009cd0:	e7fe      	b.n	8009cd0 <UsageFault_Handler>

08009cd2 <SVC_Handler>:
/**
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
 8009cd2:	4770      	bx	lr

08009cd4 <DebugMon_Handler>:
/**
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
 8009cd4:	4770      	bx	lr

08009cd6 <PendSV_Handler>:
/**
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
 8009cd6:	4770      	bx	lr

08009cd8 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8009cd8:	f7f9 be34 	b.w	8003944 <HAL_IncTick>

08009cdc <EXTI0_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(WAKEUP_BUTTON_PIN);
 8009cdc:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8009ce0:	f7fa bc70 	b.w	80045c4 <HAL_GPIO_EXTI_IRQHandler>

08009ce4 <EXTI2_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI2_IRQHandler(void)
{
   HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8009ce4:	2004      	movs	r0, #4
 8009ce6:	f7fa bc6d 	b.w	80045c4 <HAL_GPIO_EXTI_IRQHandler>
	...

08009cec <EXTI15_10_IRQHandler>:
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
  /* Interrupt handler shared between SD_DETECT pin, USER_KEY button and touch screen interrupt */
  if (__HAL_GPIO_EXTI_GET_IT(SD_DETECT_PIN) != RESET)
 8009cec:	4b04      	ldr	r3, [pc, #16]	@ (8009d00 <EXTI15_10_IRQHandler+0x14>)
 8009cee:	695b      	ldr	r3, [r3, #20]
 8009cf0:	049b      	lsls	r3, r3, #18
  {
    HAL_GPIO_EXTI_IRQHandler(SD_DETECT_PIN | TS_INT_PIN | AUDIO_IN_INT_GPIO_PIN);   /* SD detect event or touch screen interrupt */
 8009cf2:	bf4c      	ite	mi
 8009cf4:	f44f 4020 	movmi.w	r0, #40960	@ 0xa000
  }
  else
  {     /* User button event or Touch screen interrupt */
    HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 8009cf8:	f44f 6000 	movpl.w	r0, #2048	@ 0x800
 8009cfc:	f7fa bc62 	b.w	80045c4 <HAL_GPIO_EXTI_IRQHandler>
 8009d00:	40013c00 	.word	0x40013c00

08009d04 <DMA2_Stream7_IRQHandler>:
  * @param None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8009d04:	4b01      	ldr	r3, [pc, #4]	@ (8009d0c <DMA2_Stream7_IRQHandler+0x8>)
 8009d06:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8009d08:	f7fa b83c 	b.w	8003d84 <HAL_DMA_IRQHandler>
 8009d0c:	20000738 	.word	0x20000738

08009d10 <DMA2_Stream0_IRQHandler>:
  * @brief  Handles SDRAM DMA transfer interrupt request.
  * @retval None
  */
void BSP_SDRAM_DMA_IRQHandler(void)
{
  HAL_DMA_IRQHandler(sdramHandle.hdma); 
 8009d10:	4b01      	ldr	r3, [pc, #4]	@ (8009d18 <DMA2_Stream0_IRQHandler+0x8>)
 8009d12:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009d14:	f7fa b836 	b.w	8003d84 <HAL_DMA_IRQHandler>
 8009d18:	20000d1c 	.word	0x20000d1c

08009d1c <DMA2_Stream1_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2_Stream1_IRQHandler(void)
{
  BSP_CAMERA_DMA_IRQHandler();
 8009d1c:	e7fe      	b.n	8009d1c <DMA2_Stream1_IRQHandler>
	...

08009d20 <DMA2_Stream4_IRQHandler>:
  * @param  None
  * @retval None
  */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void)
{
  HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 8009d20:	4b01      	ldr	r3, [pc, #4]	@ (8009d28 <DMA2_Stream4_IRQHandler+0x8>)
 8009d22:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8009d24:	f7fa b82e 	b.w	8003d84 <HAL_DMA_IRQHandler>
 8009d28:	200006b4 	.word	0x200006b4

08009d2c <DCMI_IRQHandler>:
  * @param  None
  * @retval None
  */
void DCMI_IRQHandler(void)
{
  BSP_CAMERA_IRQHandler();
 8009d2c:	e7fe      	b.n	8009d2c <DCMI_IRQHandler>

08009d2e <DMA2D_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2D_IRQHandler(void)
{
  BSP_LCD_DMA2D_IRQHandler();
 8009d2e:	f7fe bcdd 	b.w	80086ec <BSP_LCD_DMA2D_IRQHandler>
	...

08009d34 <Touchscreen_DrawBackground>:
  * @brief  Draw Touchscreen Background
  * @param  state : touch zone state
  * @retval None
  */
static void Touchscreen_DrawBackground (uint8_t state)
{
 8009d34:	b538      	push	{r3, r4, r5, lr}

  switch (state)
 8009d36:	2808      	cmp	r0, #8
 8009d38:	f200 811c 	bhi.w	8009f74 <Touchscreen_DrawBackground+0x240>
 8009d3c:	e8df f010 	tbh	[pc, r0, lsl #1]
 8009d40:	00960009 	.word	0x00960009
 8009d44:	011a00b6 	.word	0x011a00b6
 8009d48:	011a00d6 	.word	0x011a00d6
 8009d4c:	011a011a 	.word	0x011a011a
 8009d50:	00f9      	.short	0x00f9
  {

    case 0:
      BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8009d52:	4889      	ldr	r0, [pc, #548]	@ (8009f78 <Touchscreen_DrawBackground+0x244>)
      BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS);
 8009d54:	2405      	movs	r4, #5
      BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8009d56:	f7f8 f8f7 	bl	8001f48 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS);
 8009d5a:	f7f8 f89b 	bl	8001e94 <BSP_LCD_GetXSize>
 8009d5e:	4605      	mov	r5, r0
 8009d60:	f7f8 f8a4 	bl	8001eac <BSP_LCD_GetYSize>
 8009d64:	f1a0 015a 	sub.w	r1, r0, #90	@ 0x5a
 8009d68:	221e      	movs	r2, #30
 8009d6a:	b289      	uxth	r1, r1
 8009d6c:	fbb5 f0f4 	udiv	r0, r5, r4
 8009d70:	b280      	uxth	r0, r0
 8009d72:	f7f8 fd27 	bl	80027c4 <BSP_LCD_FillCircle>


      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8009d76:	4881      	ldr	r0, [pc, #516]	@ (8009f7c <Touchscreen_DrawBackground+0x248>)
 8009d78:	f7f8 f8e6 	bl	8001f48 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS);
 8009d7c:	f7f8 f88a 	bl	8001e94 <BSP_LCD_GetXSize>
 8009d80:	4605      	mov	r5, r0
 8009d82:	f7f8 f893 	bl	8001eac <BSP_LCD_GetYSize>
 8009d86:	f1a0 015a 	sub.w	r1, r0, #90	@ 0x5a
 8009d8a:	006d      	lsls	r5, r5, #1
 8009d8c:	221e      	movs	r2, #30
 8009d8e:	b289      	uxth	r1, r1
 8009d90:	fbb5 f0f4 	udiv	r0, r5, r4
 8009d94:	b280      	uxth	r0, r0
 8009d96:	f7f8 fd15 	bl	80027c4 <BSP_LCD_FillCircle>


      BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8009d9a:	f06f 00ff 	mvn.w	r0, #255	@ 0xff
 8009d9e:	f7f8 f8d3 	bl	8001f48 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS);
 8009da2:	f7f8 f877 	bl	8001e94 <BSP_LCD_GetXSize>
 8009da6:	4605      	mov	r5, r0
 8009da8:	f7f8 f880 	bl	8001eac <BSP_LCD_GetYSize>
 8009dac:	f1a0 015a 	sub.w	r1, r0, #90	@ 0x5a
 8009db0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009db4:	221e      	movs	r2, #30
 8009db6:	b289      	uxth	r1, r1
 8009db8:	fbb5 f0f4 	udiv	r0, r5, r4
 8009dbc:	b280      	uxth	r0, r0
 8009dbe:	f7f8 fd01 	bl	80027c4 <BSP_LCD_FillCircle>


      BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8009dc2:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 8009dc6:	f7f8 f8bf 	bl	8001f48 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(3), CIRCLE_RADIUS);
 8009dca:	f7f8 f863 	bl	8001e94 <BSP_LCD_GetXSize>
 8009dce:	4605      	mov	r5, r0
 8009dd0:	f7f8 f86c 	bl	8001eac <BSP_LCD_GetYSize>
 8009dd4:	f1a0 015a 	sub.w	r1, r0, #90	@ 0x5a
 8009dd8:	00ad      	lsls	r5, r5, #2
 8009dda:	221e      	movs	r2, #30
 8009ddc:	b289      	uxth	r1, r1
 8009dde:	fbb5 f0f4 	udiv	r0, r5, r4
 8009de2:	b280      	uxth	r0, r0
 8009de4:	f7f8 fcee 	bl	80027c4 <BSP_LCD_FillCircle>

      BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8009de8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dec:	f7f8 f8ac 	bl	8001f48 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS - 2);
 8009df0:	f7f8 f850 	bl	8001e94 <BSP_LCD_GetXSize>
 8009df4:	4605      	mov	r5, r0
 8009df6:	f7f8 f859 	bl	8001eac <BSP_LCD_GetYSize>
 8009dfa:	f1a0 015a 	sub.w	r1, r0, #90	@ 0x5a
 8009dfe:	221c      	movs	r2, #28
 8009e00:	b289      	uxth	r1, r1
 8009e02:	fbb5 f0f4 	udiv	r0, r5, r4
 8009e06:	b280      	uxth	r0, r0
 8009e08:	f7f8 fcdc 	bl	80027c4 <BSP_LCD_FillCircle>
      BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS - 2);
 8009e0c:	f7f8 f842 	bl	8001e94 <BSP_LCD_GetXSize>
 8009e10:	4605      	mov	r5, r0
 8009e12:	f7f8 f84b 	bl	8001eac <BSP_LCD_GetYSize>
 8009e16:	f1a0 015a 	sub.w	r1, r0, #90	@ 0x5a
 8009e1a:	006d      	lsls	r5, r5, #1
 8009e1c:	221c      	movs	r2, #28
 8009e1e:	b289      	uxth	r1, r1
 8009e20:	fbb5 f0f4 	udiv	r0, r5, r4
 8009e24:	b280      	uxth	r0, r0
 8009e26:	f7f8 fccd 	bl	80027c4 <BSP_LCD_FillCircle>
      BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS - 2);
 8009e2a:	f7f8 f833 	bl	8001e94 <BSP_LCD_GetXSize>
 8009e2e:	4605      	mov	r5, r0
 8009e30:	f7f8 f83c 	bl	8001eac <BSP_LCD_GetYSize>
 8009e34:	f1a0 015a 	sub.w	r1, r0, #90	@ 0x5a
 8009e38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e3c:	221c      	movs	r2, #28
 8009e3e:	b289      	uxth	r1, r1
 8009e40:	fbb5 f0f4 	udiv	r0, r5, r4
 8009e44:	b280      	uxth	r0, r0
 8009e46:	f7f8 fcbd 	bl	80027c4 <BSP_LCD_FillCircle>
      BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(3), CIRCLE_RADIUS - 2);
 8009e4a:	f7f8 f823 	bl	8001e94 <BSP_LCD_GetXSize>
 8009e4e:	4605      	mov	r5, r0
 8009e50:	f7f8 f82c 	bl	8001eac <BSP_LCD_GetYSize>
 8009e54:	f1a0 015a 	sub.w	r1, r0, #90	@ 0x5a
 8009e58:	00ad      	lsls	r5, r5, #2
 8009e5a:	fbb5 f0f4 	udiv	r0, r5, r4

    case 8:
      BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
      BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(4), CIRCLE_RADIUS);
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
      BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(4), CIRCLE_RADIUS - 2);
 8009e5e:	221c      	movs	r2, #28
 8009e60:	b289      	uxth	r1, r1
 8009e62:	b280      	uxth	r0, r0
      break;

  }
}
 8009e64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(4), CIRCLE_RADIUS - 2);
 8009e68:	f7f8 bcac 	b.w	80027c4 <BSP_LCD_FillCircle>
      BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8009e6c:	4842      	ldr	r0, [pc, #264]	@ (8009f78 <Touchscreen_DrawBackground+0x244>)
      BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS);
 8009e6e:	2505      	movs	r5, #5
      BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8009e70:	f7f8 f86a 	bl	8001f48 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS);
 8009e74:	f7f8 f80e 	bl	8001e94 <BSP_LCD_GetXSize>
 8009e78:	4604      	mov	r4, r0
 8009e7a:	f7f8 f817 	bl	8001eac <BSP_LCD_GetYSize>
 8009e7e:	f1a0 015a 	sub.w	r1, r0, #90	@ 0x5a
 8009e82:	221e      	movs	r2, #30
 8009e84:	b289      	uxth	r1, r1
 8009e86:	fbb4 f0f5 	udiv	r0, r4, r5
 8009e8a:	b280      	uxth	r0, r0
 8009e8c:	f7f8 fc9a 	bl	80027c4 <BSP_LCD_FillCircle>
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8009e90:	f04f 30ff 	mov.w	r0, #4294967295
 8009e94:	f7f8 f858 	bl	8001f48 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS - 2);
 8009e98:	f7f7 fffc 	bl	8001e94 <BSP_LCD_GetXSize>
 8009e9c:	4604      	mov	r4, r0
 8009e9e:	f7f8 f805 	bl	8001eac <BSP_LCD_GetYSize>
 8009ea2:	f1a0 015a 	sub.w	r1, r0, #90	@ 0x5a
      BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(4), CIRCLE_RADIUS - 2);
 8009ea6:	fbb4 f0f5 	udiv	r0, r4, r5
 8009eaa:	e7d8      	b.n	8009e5e <Touchscreen_DrawBackground+0x12a>
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8009eac:	4833      	ldr	r0, [pc, #204]	@ (8009f7c <Touchscreen_DrawBackground+0x248>)
      BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS);
 8009eae:	2505      	movs	r5, #5
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8009eb0:	f7f8 f84a 	bl	8001f48 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS);
 8009eb4:	f7f7 ffee 	bl	8001e94 <BSP_LCD_GetXSize>
 8009eb8:	4604      	mov	r4, r0
 8009eba:	f7f7 fff7 	bl	8001eac <BSP_LCD_GetYSize>
 8009ebe:	f1a0 015a 	sub.w	r1, r0, #90	@ 0x5a
 8009ec2:	0064      	lsls	r4, r4, #1
 8009ec4:	221e      	movs	r2, #30
 8009ec6:	b289      	uxth	r1, r1
 8009ec8:	fbb4 f0f5 	udiv	r0, r4, r5
 8009ecc:	b280      	uxth	r0, r0
 8009ece:	f7f8 fc79 	bl	80027c4 <BSP_LCD_FillCircle>
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8009ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ed6:	f7f8 f837 	bl	8001f48 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS - 2);
 8009eda:	f7f7 ffdb 	bl	8001e94 <BSP_LCD_GetXSize>
 8009ede:	4604      	mov	r4, r0
 8009ee0:	f7f7 ffe4 	bl	8001eac <BSP_LCD_GetYSize>
 8009ee4:	f1a0 015a 	sub.w	r1, r0, #90	@ 0x5a
 8009ee8:	0064      	lsls	r4, r4, #1
 8009eea:	e7dc      	b.n	8009ea6 <Touchscreen_DrawBackground+0x172>
      BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8009eec:	f06f 00ff 	mvn.w	r0, #255	@ 0xff
      BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS);
 8009ef0:	2505      	movs	r5, #5
      BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8009ef2:	f7f8 f829 	bl	8001f48 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS);
 8009ef6:	f7f7 ffcd 	bl	8001e94 <BSP_LCD_GetXSize>
 8009efa:	4604      	mov	r4, r0
 8009efc:	f7f7 ffd6 	bl	8001eac <BSP_LCD_GetYSize>
 8009f00:	f1a0 015a 	sub.w	r1, r0, #90	@ 0x5a
 8009f04:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8009f08:	221e      	movs	r2, #30
 8009f0a:	b289      	uxth	r1, r1
 8009f0c:	fbb4 f0f5 	udiv	r0, r4, r5
 8009f10:	b280      	uxth	r0, r0
 8009f12:	f7f8 fc57 	bl	80027c4 <BSP_LCD_FillCircle>
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8009f16:	f04f 30ff 	mov.w	r0, #4294967295
 8009f1a:	f7f8 f815 	bl	8001f48 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS - 2);
 8009f1e:	f7f7 ffb9 	bl	8001e94 <BSP_LCD_GetXSize>
 8009f22:	4604      	mov	r4, r0
 8009f24:	f7f7 ffc2 	bl	8001eac <BSP_LCD_GetYSize>
 8009f28:	f1a0 015a 	sub.w	r1, r0, #90	@ 0x5a
 8009f2c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8009f30:	e7b9      	b.n	8009ea6 <Touchscreen_DrawBackground+0x172>
      BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8009f32:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
      BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(4), CIRCLE_RADIUS);
 8009f36:	2505      	movs	r5, #5
      BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8009f38:	f7f8 f806 	bl	8001f48 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(4), CIRCLE_RADIUS);
 8009f3c:	f7f7 ffaa 	bl	8001e94 <BSP_LCD_GetXSize>
 8009f40:	4604      	mov	r4, r0
 8009f42:	f7f7 ffb3 	bl	8001eac <BSP_LCD_GetYSize>
 8009f46:	f1a0 015a 	sub.w	r1, r0, #90	@ 0x5a
 8009f4a:	00a4      	lsls	r4, r4, #2
 8009f4c:	221e      	movs	r2, #30
 8009f4e:	b289      	uxth	r1, r1
 8009f50:	fbb4 f0f5 	udiv	r0, r4, r5
 8009f54:	b280      	uxth	r0, r0
 8009f56:	f7f8 fc35 	bl	80027c4 <BSP_LCD_FillCircle>
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8009f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f5e:	f7f7 fff3 	bl	8001f48 <BSP_LCD_SetTextColor>
      BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(4), CIRCLE_RADIUS - 2);
 8009f62:	f7f7 ff97 	bl	8001e94 <BSP_LCD_GetXSize>
 8009f66:	4604      	mov	r4, r0
 8009f68:	f7f7 ffa0 	bl	8001eac <BSP_LCD_GetYSize>
 8009f6c:	f1a0 015a 	sub.w	r1, r0, #90	@ 0x5a
 8009f70:	00a4      	lsls	r4, r4, #2
 8009f72:	e798      	b.n	8009ea6 <Touchscreen_DrawBackground+0x172>
}
 8009f74:	bd38      	pop	{r3, r4, r5, pc}
 8009f76:	bf00      	nop
 8009f78:	ff0000ff 	.word	0xff0000ff
 8009f7c:	ffff0000 	.word	0xffff0000

08009f80 <Touchscreen_demo>:
{
 8009f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8009f84:	f04f 30ff 	mov.w	r0, #4294967295
{
 8009f88:	b088      	sub	sp, #32
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8009f8a:	f7f8 f80d 	bl	8001fa8 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8009f8e:	48d0      	ldr	r0, [pc, #832]	@ (800a2d0 <Touchscreen_demo+0x350>)
 8009f90:	f7f7 ffda 	bl	8001f48 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), 80);
 8009f94:	f7f7 ff7e 	bl	8001e94 <BSP_LCD_GetXSize>
 8009f98:	2100      	movs	r1, #0
 8009f9a:	b282      	uxth	r2, r0
 8009f9c:	2350      	movs	r3, #80	@ 0x50
 8009f9e:	4608      	mov	r0, r1
 8009fa0:	f7f8 fbac 	bl	80026fc <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8009fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fa8:	f7f7 ffce 	bl	8001f48 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8009fac:	48c8      	ldr	r0, [pc, #800]	@ (800a2d0 <Touchscreen_demo+0x350>)
 8009fae:	f7f7 ffd7 	bl	8001f60 <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font24);
 8009fb2:	48c8      	ldr	r0, [pc, #800]	@ (800a2d4 <Touchscreen_demo+0x354>)
 8009fb4:	f7f7 ffe0 	bl	8001f78 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"Touchscreen", CENTER_MODE);
 8009fb8:	2100      	movs	r1, #0
 8009fba:	2301      	movs	r3, #1
 8009fbc:	4ac6      	ldr	r2, [pc, #792]	@ (800a2d8 <Touchscreen_demo+0x358>)
 8009fbe:	4608      	mov	r0, r1
 8009fc0:	f7f8 f902 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font12);
 8009fc4:	48c5      	ldr	r0, [pc, #788]	@ (800a2dc <Touchscreen_demo+0x35c>)
 8009fc6:	f7f7 ffd7 	bl	8001f78 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 30, (uint8_t *)"Please use the Touchscreen to", CENTER_MODE);
 8009fca:	2301      	movs	r3, #1
 8009fcc:	4ac4      	ldr	r2, [pc, #784]	@ (800a2e0 <Touchscreen_demo+0x360>)
 8009fce:	211e      	movs	r1, #30
 8009fd0:	2000      	movs	r0, #0
 8009fd2:	f7f8 f8f9 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 45, (uint8_t *)"fill the colored circles according to pressure applied", CENTER_MODE);
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	4ac2      	ldr	r2, [pc, #776]	@ (800a2e4 <Touchscreen_demo+0x364>)
 8009fda:	212d      	movs	r1, #45	@ 0x2d
 8009fdc:	2000      	movs	r0, #0
 8009fde:	f7f8 f8f3 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, 60, (uint8_t *)"Up to 5 finger touch coordinates are displayed", CENTER_MODE);
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	4ac0      	ldr	r2, [pc, #768]	@ (800a2e8 <Touchscreen_demo+0x368>)
 8009fe6:	213c      	movs	r1, #60	@ 0x3c
 8009fe8:	2000      	movs	r0, #0
 8009fea:	f7f8 f8ed 	bl	80021c8 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8009fee:	48b8      	ldr	r0, [pc, #736]	@ (800a2d0 <Touchscreen_demo+0x350>)
 8009ff0:	f7f7 ffaa 	bl	8001f48 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(10, 90, BSP_LCD_GetXSize() - 20, BSP_LCD_GetYSize() - 100);
 8009ff4:	f7f7 ff4e 	bl	8001e94 <BSP_LCD_GetXSize>
 8009ff8:	4604      	mov	r4, r0
 8009ffa:	f7f7 ff57 	bl	8001eac <BSP_LCD_GetYSize>
 8009ffe:	f1a0 0364 	sub.w	r3, r0, #100	@ 0x64
 800a002:	f1a4 0214 	sub.w	r2, r4, #20
 800a006:	215a      	movs	r1, #90	@ 0x5a
 800a008:	b29b      	uxth	r3, r3
 800a00a:	200a      	movs	r0, #10
 800a00c:	b292      	uxth	r2, r2
 800a00e:	f7f8 f845 	bl	800209c <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(11, 91, BSP_LCD_GetXSize() - 22, BSP_LCD_GetYSize() - 102);
 800a012:	f7f7 ff3f 	bl	8001e94 <BSP_LCD_GetXSize>
 800a016:	4604      	mov	r4, r0
 800a018:	f7f7 ff48 	bl	8001eac <BSP_LCD_GetYSize>
 800a01c:	f1a0 0366 	sub.w	r3, r0, #102	@ 0x66
 800a020:	f1a4 0216 	sub.w	r2, r4, #22
 800a024:	215b      	movs	r1, #91	@ 0x5b
 800a026:	b29b      	uxth	r3, r3
 800a028:	200b      	movs	r0, #11
 800a02a:	b292      	uxth	r2, r2
 800a02c:	f7f8 f836 	bl	800209c <BSP_LCD_DrawRect>
  status = BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 800a030:	f7f7 ff30 	bl	8001e94 <BSP_LCD_GetXSize>
 800a034:	4604      	mov	r4, r0
 800a036:	f7f7 ff39 	bl	8001eac <BSP_LCD_GetYSize>
 800a03a:	b281      	uxth	r1, r0
 800a03c:	b2a0      	uxth	r0, r4
 800a03e:	f7f9 fb29 	bl	8003694 <BSP_TS_Init>
  if (status != TS_OK)
 800a042:	4681      	mov	r9, r0
 800a044:	2800      	cmp	r0, #0
 800a046:	f000 816e 	beq.w	800a326 <Touchscreen_demo+0x3a6>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800a04a:	f04f 30ff 	mov.w	r0, #4294967295
 800a04e:	f7f7 ff87 	bl	8001f60 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800a052:	48a6      	ldr	r0, [pc, #664]	@ (800a2ec <Touchscreen_demo+0x36c>)
 800a054:	f7f7 ff78 	bl	8001f48 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95, (uint8_t *)"ERROR", CENTER_MODE);
 800a058:	f7f7 ff28 	bl	8001eac <BSP_LCD_GetYSize>
 800a05c:	f1a0 015f 	sub.w	r1, r0, #95	@ 0x5f
 800a060:	2301      	movs	r3, #1
 800a062:	4aa3      	ldr	r2, [pc, #652]	@ (800a2f0 <Touchscreen_demo+0x370>)
 800a064:	b289      	uxth	r1, r1
 800a066:	2000      	movs	r0, #0
 800a068:	f7f8 f8ae 	bl	80021c8 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80, (uint8_t *)"Touchscreen cannot be initialized", CENTER_MODE);
 800a06c:	f7f7 ff1e 	bl	8001eac <BSP_LCD_GetYSize>
 800a070:	f1a0 0150 	sub.w	r1, r0, #80	@ 0x50
 800a074:	2301      	movs	r3, #1
 800a076:	4a9f      	ldr	r2, [pc, #636]	@ (800a2f4 <Touchscreen_demo+0x374>)
 800a078:	b289      	uxth	r1, r1
 800a07a:	2000      	movs	r0, #0
 800a07c:	f7f8 f8a4 	bl	80021c8 <BSP_LCD_DisplayStringAt>
{
 800a080:	2700      	movs	r7, #0
      BSP_TS_GetState(&TS_State);
 800a082:	4d9d      	ldr	r5, [pc, #628]	@ (800a2f8 <Touchscreen_demo+0x378>)
{
 800a084:	463e      	mov	r6, r7
    if (status == TS_OK)
 800a086:	f1b9 0f00 	cmp.w	r9, #0
 800a08a:	f040 8143 	bne.w	800a314 <Touchscreen_demo+0x394>
      BSP_TS_GetState(&TS_State);
 800a08e:	489a      	ldr	r0, [pc, #616]	@ (800a2f8 <Touchscreen_demo+0x378>)
 800a090:	f7f9 fb48 	bl	8003724 <BSP_TS_GetState>
      if(TS_State.touchDetected)
 800a094:	782b      	ldrb	r3, [r5, #0]
 800a096:	2b00      	cmp	r3, #0
 800a098:	f000 813c 	beq.w	800a314 <Touchscreen_demo+0x394>
        BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800a09c:	f04f 30ff 	mov.w	r0, #4294967295
        x = TS_State.touchX[0];
 800a0a0:	f8b5 8002 	ldrh.w	r8, [r5, #2]
        y = TS_State.touchY[0];
 800a0a4:	f8b5 a00c 	ldrh.w	sl, [r5, #12]
        BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800a0a8:	f7f7 ff5a 	bl	8001f60 <BSP_LCD_SetBackColor>
        BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800a0ac:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800a0b0:	f7f7 ff4a 	bl	8001f48 <BSP_LCD_SetTextColor>
        sprintf((char*)text, "Nb touch detected = %d", TS_State.touchDetected);
 800a0b4:	782a      	ldrb	r2, [r5, #0]
 800a0b6:	4991      	ldr	r1, [pc, #580]	@ (800a2fc <Touchscreen_demo+0x37c>)
 800a0b8:	4668      	mov	r0, sp
 800a0ba:	f000 fc59 	bl	800a970 <siprintf>
        BSP_LCD_DisplayStringAt(15, BSP_LCD_GetYSize() - 40, (uint8_t *)&text, LEFT_MODE);
 800a0be:	f7f7 fef5 	bl	8001eac <BSP_LCD_GetYSize>
 800a0c2:	f1a0 0128 	sub.w	r1, r0, #40	@ 0x28
 800a0c6:	2303      	movs	r3, #3
 800a0c8:	466a      	mov	r2, sp
 800a0ca:	b289      	uxth	r1, r1
 800a0cc:	200f      	movs	r0, #15
 800a0ce:	f7f8 f87b 	bl	80021c8 <BSP_LCD_DisplayStringAt>
        sprintf((char*)text, "1[%d,%d]    ", x, y);
 800a0d2:	4653      	mov	r3, sl
 800a0d4:	4642      	mov	r2, r8
 800a0d6:	498a      	ldr	r1, [pc, #552]	@ (800a300 <Touchscreen_demo+0x380>)
 800a0d8:	4668      	mov	r0, sp
 800a0da:	f000 fc49 	bl	800a970 <siprintf>
                                BSP_LCD_GetYSize() - 25,
 800a0de:	f7f7 fee5 	bl	8001eac <BSP_LCD_GetYSize>
        BSP_LCD_DisplayStringAt(15,
 800a0e2:	f1a0 0119 	sub.w	r1, r0, #25
 800a0e6:	2303      	movs	r3, #3
 800a0e8:	466a      	mov	r2, sp
 800a0ea:	b289      	uxth	r1, r1
 800a0ec:	200f      	movs	r0, #15
 800a0ee:	f7f8 f86b 	bl	80021c8 <BSP_LCD_DisplayStringAt>
        if (TS_State.touchDetected >= 2)  /* Display 2nd touch detected coordinates if applicable */
 800a0f2:	782b      	ldrb	r3, [r5, #0]
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	f240 8119 	bls.w	800a32c <Touchscreen_demo+0x3ac>
          sprintf((char*)text, "2[%d,%d]    ", TS_State.touchX[1], TS_State.touchY[1]);
 800a0fa:	89eb      	ldrh	r3, [r5, #14]
 800a0fc:	4668      	mov	r0, sp
 800a0fe:	88aa      	ldrh	r2, [r5, #4]
 800a100:	4980      	ldr	r1, [pc, #512]	@ (800a304 <Touchscreen_demo+0x384>)
 800a102:	f000 fc35 	bl	800a970 <siprintf>
        BSP_LCD_DisplayStringAt((((BSP_LCD_GetXSize() - 30) * 1) / 5) + 15,
 800a106:	f7f7 fec5 	bl	8001e94 <BSP_LCD_GetXSize>
 800a10a:	4604      	mov	r4, r0
                                BSP_LCD_GetYSize() - 25,
 800a10c:	f7f7 fece 	bl	8001eac <BSP_LCD_GetYSize>
        BSP_LCD_DisplayStringAt((((BSP_LCD_GetXSize() - 30) * 1) / 5) + 15,
 800a110:	2305      	movs	r3, #5
 800a112:	f1a0 0119 	sub.w	r1, r0, #25
 800a116:	f1a4 001e 	sub.w	r0, r4, #30
 800a11a:	466a      	mov	r2, sp
 800a11c:	b289      	uxth	r1, r1
 800a11e:	fbb0 f0f3 	udiv	r0, r0, r3
 800a122:	300f      	adds	r0, #15
 800a124:	2303      	movs	r3, #3
 800a126:	b280      	uxth	r0, r0
 800a128:	f7f8 f84e 	bl	80021c8 <BSP_LCD_DisplayStringAt>
        if (TS_State.touchDetected >= 3)  /* Display 3rd touch detected coordinates if applicable */
 800a12c:	782b      	ldrb	r3, [r5, #0]
 800a12e:	2b02      	cmp	r3, #2
 800a130:	f240 8101 	bls.w	800a336 <Touchscreen_demo+0x3b6>
          sprintf((char*)text, "3[%d,%d]    ", TS_State.touchX[2], TS_State.touchY[2]);
 800a134:	8a2b      	ldrh	r3, [r5, #16]
 800a136:	4668      	mov	r0, sp
 800a138:	88ea      	ldrh	r2, [r5, #6]
 800a13a:	4973      	ldr	r1, [pc, #460]	@ (800a308 <Touchscreen_demo+0x388>)
 800a13c:	f000 fc18 	bl	800a970 <siprintf>
        BSP_LCD_DisplayStringAt((((BSP_LCD_GetXSize() - 30) * 2) / 5) + 15,
 800a140:	f7f7 fea8 	bl	8001e94 <BSP_LCD_GetXSize>
 800a144:	4604      	mov	r4, r0
                                BSP_LCD_GetYSize() - 25,
 800a146:	f7f7 feb1 	bl	8001eac <BSP_LCD_GetYSize>
        BSP_LCD_DisplayStringAt((((BSP_LCD_GetXSize() - 30) * 2) / 5) + 15,
 800a14a:	f1a0 0119 	sub.w	r1, r0, #25
 800a14e:	f1a4 001e 	sub.w	r0, r4, #30
 800a152:	2305      	movs	r3, #5
 800a154:	466a      	mov	r2, sp
 800a156:	b289      	uxth	r1, r1
 800a158:	0040      	lsls	r0, r0, #1
 800a15a:	fbb0 f0f3 	udiv	r0, r0, r3
 800a15e:	300f      	adds	r0, #15
 800a160:	2303      	movs	r3, #3
 800a162:	b280      	uxth	r0, r0
 800a164:	f7f8 f830 	bl	80021c8 <BSP_LCD_DisplayStringAt>
        if (TS_State.touchDetected >= 4)  /* Display 4th touch detected coordinates if applicable */
 800a168:	782b      	ldrb	r3, [r5, #0]
 800a16a:	2b03      	cmp	r3, #3
 800a16c:	f240 80e8 	bls.w	800a340 <Touchscreen_demo+0x3c0>
          sprintf((char*)text, "4[%d,%d]    ", TS_State.touchX[3], TS_State.touchY[3]);
 800a170:	8a6b      	ldrh	r3, [r5, #18]
 800a172:	4668      	mov	r0, sp
 800a174:	892a      	ldrh	r2, [r5, #8]
 800a176:	4965      	ldr	r1, [pc, #404]	@ (800a30c <Touchscreen_demo+0x38c>)
 800a178:	f000 fbfa 	bl	800a970 <siprintf>
        BSP_LCD_DisplayStringAt((((BSP_LCD_GetXSize() - 30) * 3) / 5) + 15,
 800a17c:	f7f7 fe8a 	bl	8001e94 <BSP_LCD_GetXSize>
 800a180:	4604      	mov	r4, r0
                                BSP_LCD_GetYSize() - 25,
 800a182:	f7f7 fe93 	bl	8001eac <BSP_LCD_GetYSize>
        BSP_LCD_DisplayStringAt((((BSP_LCD_GetXSize() - 30) * 3) / 5) + 15,
 800a186:	f1a0 0119 	sub.w	r1, r0, #25
 800a18a:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 800a18e:	2305      	movs	r3, #5
 800a190:	466a      	mov	r2, sp
 800a192:	b289      	uxth	r1, r1
 800a194:	385a      	subs	r0, #90	@ 0x5a
 800a196:	fbb0 f0f3 	udiv	r0, r0, r3
 800a19a:	300f      	adds	r0, #15
 800a19c:	2303      	movs	r3, #3
 800a19e:	b280      	uxth	r0, r0
 800a1a0:	f7f8 f812 	bl	80021c8 <BSP_LCD_DisplayStringAt>
        if (TS_State.touchDetected >= 5)  /* Display 5th touch detected coordinates if applicable */
 800a1a4:	782b      	ldrb	r3, [r5, #0]
 800a1a6:	2b04      	cmp	r3, #4
 800a1a8:	f240 80cf 	bls.w	800a34a <Touchscreen_demo+0x3ca>
          sprintf((char*)text, "5[%d,%d]    ", TS_State.touchX[4], TS_State.touchY[4]);
 800a1ac:	8aab      	ldrh	r3, [r5, #20]
 800a1ae:	4668      	mov	r0, sp
 800a1b0:	896a      	ldrh	r2, [r5, #10]
 800a1b2:	4957      	ldr	r1, [pc, #348]	@ (800a310 <Touchscreen_demo+0x390>)
 800a1b4:	f000 fbdc 	bl	800a970 <siprintf>
        BSP_LCD_DisplayStringAt((((BSP_LCD_GetXSize() - 30) * 4) / 5) + 15,
 800a1b8:	f7f7 fe6c 	bl	8001e94 <BSP_LCD_GetXSize>
 800a1bc:	4604      	mov	r4, r0
                                BSP_LCD_GetYSize() - 25,
 800a1be:	f7f7 fe75 	bl	8001eac <BSP_LCD_GetYSize>
        BSP_LCD_DisplayStringAt((((BSP_LCD_GetXSize() - 30) * 4) / 5) + 15,
 800a1c2:	f1a0 0119 	sub.w	r1, r0, #25
 800a1c6:	f1a4 001e 	sub.w	r0, r4, #30
 800a1ca:	2305      	movs	r3, #5
 800a1cc:	466a      	mov	r2, sp
 800a1ce:	b289      	uxth	r1, r1
 800a1d0:	0080      	lsls	r0, r0, #2
 800a1d2:	fbb0 f0f3 	udiv	r0, r0, r3
 800a1d6:	300f      	adds	r0, #15
 800a1d8:	2303      	movs	r3, #3
 800a1da:	b280      	uxth	r0, r0
 800a1dc:	f7f7 fff4 	bl	80021c8 <BSP_LCD_DisplayStringAt>
        radius = TS_State.touchWeight[0]/3;
 800a1e0:	7dac      	ldrb	r4, [r5, #22]
        if (radius > CIRCLE_RADIUS)
 800a1e2:	2c5c      	cmp	r4, #92	@ 0x5c
 800a1e4:	f200 80b6 	bhi.w	800a354 <Touchscreen_demo+0x3d4>
        else if (radius < 1)
 800a1e8:	2c02      	cmp	r4, #2
 800a1ea:	f240 80b5 	bls.w	800a358 <Touchscreen_demo+0x3d8>
        radius = TS_State.touchWeight[0]/3;
 800a1ee:	2303      	movs	r3, #3
 800a1f0:	fbb4 f4f3 	udiv	r4, r4, r3
        if ((y > (CIRCLE_YPOS(1) - CIRCLE_RADIUS)) &&
 800a1f4:	f7f7 fe5a 	bl	8001eac <BSP_LCD_GetYSize>
 800a1f8:	3878      	subs	r0, #120	@ 0x78
 800a1fa:	4582      	cmp	sl, r0
 800a1fc:	f240 808a 	bls.w	800a314 <Touchscreen_demo+0x394>
            (y < (CIRCLE_YPOS(1) + CIRCLE_RADIUS)))
 800a200:	f7f7 fe54 	bl	8001eac <BSP_LCD_GetYSize>
 800a204:	383c      	subs	r0, #60	@ 0x3c
        if ((y > (CIRCLE_YPOS(1) - CIRCLE_RADIUS)) &&
 800a206:	4582      	cmp	sl, r0
 800a208:	f080 8084 	bcs.w	800a314 <Touchscreen_demo+0x394>
          if ((x > (CIRCLE_XPOS(1) - CIRCLE_RADIUS)) &&
 800a20c:	f04f 0a05 	mov.w	sl, #5
 800a210:	f7f7 fe40 	bl	8001e94 <BSP_LCD_GetXSize>
 800a214:	fbb0 f0fa 	udiv	r0, r0, sl
 800a218:	381e      	subs	r0, #30
 800a21a:	4580      	cmp	r8, r0
 800a21c:	d90c      	bls.n	800a238 <Touchscreen_demo+0x2b8>
              (x < (CIRCLE_XPOS(1) + CIRCLE_RADIUS)))
 800a21e:	f7f7 fe39 	bl	8001e94 <BSP_LCD_GetXSize>
 800a222:	fbb0 f0fa 	udiv	r0, r0, sl
 800a226:	301e      	adds	r0, #30
          if ((x > (CIRCLE_XPOS(1) - CIRCLE_RADIUS)) &&
 800a228:	4580      	cmp	r8, r0
 800a22a:	d205      	bcs.n	800a238 <Touchscreen_demo+0x2b8>
            if ((radius != radius_previous) || (state != 1))
 800a22c:	42bc      	cmp	r4, r7
 800a22e:	f040 8095 	bne.w	800a35c <Touchscreen_demo+0x3dc>
 800a232:	2e01      	cmp	r6, #1
 800a234:	f040 8094 	bne.w	800a360 <Touchscreen_demo+0x3e0>
          if ((x > (CIRCLE_XPOS(2) - CIRCLE_RADIUS)) &&
 800a238:	f7f7 fe2c 	bl	8001e94 <BSP_LCD_GetXSize>
 800a23c:	f04f 0a05 	mov.w	sl, #5
 800a240:	0040      	lsls	r0, r0, #1
 800a242:	fbb0 f0fa 	udiv	r0, r0, sl
 800a246:	381e      	subs	r0, #30
 800a248:	4580      	cmp	r8, r0
 800a24a:	d90d      	bls.n	800a268 <Touchscreen_demo+0x2e8>
              (x < (CIRCLE_XPOS(2) + CIRCLE_RADIUS)))
 800a24c:	f7f7 fe22 	bl	8001e94 <BSP_LCD_GetXSize>
 800a250:	0040      	lsls	r0, r0, #1
 800a252:	fbb0 f0fa 	udiv	r0, r0, sl
 800a256:	301e      	adds	r0, #30
          if ((x > (CIRCLE_XPOS(2) - CIRCLE_RADIUS)) &&
 800a258:	4580      	cmp	r8, r0
 800a25a:	d205      	bcs.n	800a268 <Touchscreen_demo+0x2e8>
            if ((radius != radius_previous) || (state != 2))
 800a25c:	42bc      	cmp	r4, r7
 800a25e:	f040 8097 	bne.w	800a390 <Touchscreen_demo+0x410>
 800a262:	2e02      	cmp	r6, #2
 800a264:	f040 8096 	bne.w	800a394 <Touchscreen_demo+0x414>
          if ((x > (CIRCLE_XPOS(3) - CIRCLE_RADIUS)) &&
 800a268:	f7f7 fe14 	bl	8001e94 <BSP_LCD_GetXSize>
 800a26c:	f04f 0a05 	mov.w	sl, #5
 800a270:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800a274:	fbb0 f0fa 	udiv	r0, r0, sl
 800a278:	381e      	subs	r0, #30
 800a27a:	4580      	cmp	r8, r0
 800a27c:	d90e      	bls.n	800a29c <Touchscreen_demo+0x31c>
              (x < (CIRCLE_XPOS(3) + CIRCLE_RADIUS)))
 800a27e:	f7f7 fe09 	bl	8001e94 <BSP_LCD_GetXSize>
 800a282:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800a286:	fbb0 f0fa 	udiv	r0, r0, sl
 800a28a:	301e      	adds	r0, #30
          if ((x > (CIRCLE_XPOS(3) - CIRCLE_RADIUS)) &&
 800a28c:	4580      	cmp	r8, r0
 800a28e:	d205      	bcs.n	800a29c <Touchscreen_demo+0x31c>
            if ((radius != radius_previous) || (state != 4))
 800a290:	42bc      	cmp	r4, r7
 800a292:	f040 8098 	bne.w	800a3c6 <Touchscreen_demo+0x446>
 800a296:	2e04      	cmp	r6, #4
 800a298:	f040 8097 	bne.w	800a3ca <Touchscreen_demo+0x44a>
          if ((x > (CIRCLE_XPOS(4) - CIRCLE_RADIUS)) &&
 800a29c:	f7f7 fdfa 	bl	8001e94 <BSP_LCD_GetXSize>
 800a2a0:	f04f 0a05 	mov.w	sl, #5
 800a2a4:	0080      	lsls	r0, r0, #2
 800a2a6:	fbb0 f0fa 	udiv	r0, r0, sl
 800a2aa:	381e      	subs	r0, #30
 800a2ac:	4580      	cmp	r8, r0
 800a2ae:	d931      	bls.n	800a314 <Touchscreen_demo+0x394>
              (x < (CIRCLE_XPOS(4) + CIRCLE_RADIUS)))
 800a2b0:	f7f7 fdf0 	bl	8001e94 <BSP_LCD_GetXSize>
 800a2b4:	0080      	lsls	r0, r0, #2
 800a2b6:	fbb0 f0fa 	udiv	r0, r0, sl
 800a2ba:	301e      	adds	r0, #30
          if ((x > (CIRCLE_XPOS(4) - CIRCLE_RADIUS)) &&
 800a2bc:	4580      	cmp	r8, r0
 800a2be:	d229      	bcs.n	800a314 <Touchscreen_demo+0x394>
            if ((radius != radius_previous) || (state != 8))
 800a2c0:	42bc      	cmp	r4, r7
 800a2c2:	f040 809d 	bne.w	800a400 <Touchscreen_demo+0x480>
 800a2c6:	2e08      	cmp	r6, #8
 800a2c8:	f040 809c 	bne.w	800a404 <Touchscreen_demo+0x484>
 800a2cc:	e022      	b.n	800a314 <Touchscreen_demo+0x394>
 800a2ce:	bf00      	nop
 800a2d0:	ff0000ff 	.word	0xff0000ff
 800a2d4:	20000074 	.word	0x20000074
 800a2d8:	080125b6 	.word	0x080125b6
 800a2dc:	20000084 	.word	0x20000084
 800a2e0:	080125c2 	.word	0x080125c2
 800a2e4:	080125e0 	.word	0x080125e0
 800a2e8:	08012617 	.word	0x08012617
 800a2ec:	ffff0000 	.word	0xffff0000
 800a2f0:	080125b0 	.word	0x080125b0
 800a2f4:	08011c61 	.word	0x08011c61
 800a2f8:	20024380 	.word	0x20024380
 800a2fc:	08012646 	.word	0x08012646
 800a300:	0801265d 	.word	0x0801265d
 800a304:	0801266a 	.word	0x0801266a
 800a308:	08012686 	.word	0x08012686
 800a30c:	08012693 	.word	0x08012693
 800a310:	080126a0 	.word	0x080126a0
    if (CheckForUserInput() > 0)
 800a314:	f7fe ffcc 	bl	80092b0 <CheckForUserInput>
 800a318:	2800      	cmp	r0, #0
 800a31a:	f040 808d 	bne.w	800a438 <Touchscreen_demo+0x4b8>
    HAL_Delay(10);
 800a31e:	200a      	movs	r0, #10
 800a320:	f7f9 fb22 	bl	8003968 <HAL_Delay>
    if (status == TS_OK)
 800a324:	e6af      	b.n	800a086 <Touchscreen_demo+0x106>
    Touchscreen_DrawBackground(state);
 800a326:	f7ff fd05 	bl	8009d34 <Touchscreen_DrawBackground>
 800a32a:	e6a9      	b.n	800a080 <Touchscreen_demo+0x100>
          sprintf((char*)text, "              ");
 800a32c:	4944      	ldr	r1, [pc, #272]	@ (800a440 <Touchscreen_demo+0x4c0>)
 800a32e:	4668      	mov	r0, sp
 800a330:	f000 fbfd 	bl	800ab2e <strcpy>
 800a334:	e6e7      	b.n	800a106 <Touchscreen_demo+0x186>
          sprintf((char*)text, "              ");
 800a336:	4942      	ldr	r1, [pc, #264]	@ (800a440 <Touchscreen_demo+0x4c0>)
 800a338:	4668      	mov	r0, sp
 800a33a:	f000 fbf8 	bl	800ab2e <strcpy>
 800a33e:	e6ff      	b.n	800a140 <Touchscreen_demo+0x1c0>
          sprintf((char*)text, "              ");
 800a340:	493f      	ldr	r1, [pc, #252]	@ (800a440 <Touchscreen_demo+0x4c0>)
 800a342:	4668      	mov	r0, sp
 800a344:	f000 fbf3 	bl	800ab2e <strcpy>
 800a348:	e718      	b.n	800a17c <Touchscreen_demo+0x1fc>
          sprintf((char*)text, "              ");
 800a34a:	493d      	ldr	r1, [pc, #244]	@ (800a440 <Touchscreen_demo+0x4c0>)
 800a34c:	4668      	mov	r0, sp
 800a34e:	f000 fbee 	bl	800ab2e <strcpy>
 800a352:	e731      	b.n	800a1b8 <Touchscreen_demo+0x238>
          radius = CIRCLE_RADIUS;
 800a354:	241e      	movs	r4, #30
 800a356:	e74d      	b.n	800a1f4 <Touchscreen_demo+0x274>
          radius = 1;
 800a358:	2401      	movs	r4, #1
 800a35a:	e74b      	b.n	800a1f4 <Touchscreen_demo+0x274>
              if (state != 1) /* Erase previous filled circle */
 800a35c:	2e01      	cmp	r6, #1
 800a35e:	d002      	beq.n	800a366 <Touchscreen_demo+0x3e6>
                Touchscreen_DrawBackground(state);
 800a360:	4630      	mov	r0, r6
 800a362:	f7ff fce7 	bl	8009d34 <Touchscreen_DrawBackground>
              BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800a366:	4837      	ldr	r0, [pc, #220]	@ (800a444 <Touchscreen_demo+0x4c4>)
              BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), radius);
 800a368:	4627      	mov	r7, r4
              BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800a36a:	f7f7 fded 	bl	8001f48 <BSP_LCD_SetTextColor>
              BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), radius);
 800a36e:	f7f7 fd91 	bl	8001e94 <BSP_LCD_GetXSize>
 800a372:	4606      	mov	r6, r0
 800a374:	f7f7 fd9a 	bl	8001eac <BSP_LCD_GetYSize>
 800a378:	2305      	movs	r3, #5
 800a37a:	f1a0 015a 	sub.w	r1, r0, #90	@ 0x5a
 800a37e:	4622      	mov	r2, r4
 800a380:	fbb6 f0f3 	udiv	r0, r6, r3
 800a384:	b289      	uxth	r1, r1
              state = 1;
 800a386:	2601      	movs	r6, #1
              BSP_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), radius);
 800a388:	b280      	uxth	r0, r0
 800a38a:	f7f8 fa1b 	bl	80027c4 <BSP_LCD_FillCircle>
              state = 1;
 800a38e:	e753      	b.n	800a238 <Touchscreen_demo+0x2b8>
              if (state != 2) /* Erase previous filled circle */
 800a390:	2e02      	cmp	r6, #2
 800a392:	d002      	beq.n	800a39a <Touchscreen_demo+0x41a>
                Touchscreen_DrawBackground(state);
 800a394:	4630      	mov	r0, r6
 800a396:	f7ff fccd 	bl	8009d34 <Touchscreen_DrawBackground>
              BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800a39a:	482b      	ldr	r0, [pc, #172]	@ (800a448 <Touchscreen_demo+0x4c8>)
              BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), radius);
 800a39c:	4627      	mov	r7, r4
              BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800a39e:	f7f7 fdd3 	bl	8001f48 <BSP_LCD_SetTextColor>
              BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), radius);
 800a3a2:	f7f7 fd77 	bl	8001e94 <BSP_LCD_GetXSize>
 800a3a6:	4606      	mov	r6, r0
 800a3a8:	f7f7 fd80 	bl	8001eac <BSP_LCD_GetYSize>
 800a3ac:	2305      	movs	r3, #5
 800a3ae:	0076      	lsls	r6, r6, #1
 800a3b0:	f1a0 015a 	sub.w	r1, r0, #90	@ 0x5a
 800a3b4:	4622      	mov	r2, r4
 800a3b6:	b289      	uxth	r1, r1
 800a3b8:	fbb6 f0f3 	udiv	r0, r6, r3
 800a3bc:	b280      	uxth	r0, r0
              state = 2;
 800a3be:	2602      	movs	r6, #2
              BSP_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), radius);
 800a3c0:	f7f8 fa00 	bl	80027c4 <BSP_LCD_FillCircle>
              state = 2;
 800a3c4:	e750      	b.n	800a268 <Touchscreen_demo+0x2e8>
              if (state != 4) /* Erase previous filled circle */
 800a3c6:	2e04      	cmp	r6, #4
 800a3c8:	d002      	beq.n	800a3d0 <Touchscreen_demo+0x450>
                Touchscreen_DrawBackground(state);
 800a3ca:	4630      	mov	r0, r6
 800a3cc:	f7ff fcb2 	bl	8009d34 <Touchscreen_DrawBackground>
              BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 800a3d0:	f06f 00ff 	mvn.w	r0, #255	@ 0xff
              BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), radius);
 800a3d4:	4627      	mov	r7, r4
              BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 800a3d6:	f7f7 fdb7 	bl	8001f48 <BSP_LCD_SetTextColor>
              BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), radius);
 800a3da:	f7f7 fd5b 	bl	8001e94 <BSP_LCD_GetXSize>
 800a3de:	4606      	mov	r6, r0
 800a3e0:	f7f7 fd64 	bl	8001eac <BSP_LCD_GetYSize>
 800a3e4:	2305      	movs	r3, #5
 800a3e6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800a3ea:	f1a0 015a 	sub.w	r1, r0, #90	@ 0x5a
 800a3ee:	4622      	mov	r2, r4
 800a3f0:	b289      	uxth	r1, r1
 800a3f2:	fbb6 f0f3 	udiv	r0, r6, r3
 800a3f6:	b280      	uxth	r0, r0
              state = 4;
 800a3f8:	2604      	movs	r6, #4
              BSP_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), radius);
 800a3fa:	f7f8 f9e3 	bl	80027c4 <BSP_LCD_FillCircle>
              state = 4;
 800a3fe:	e74d      	b.n	800a29c <Touchscreen_demo+0x31c>
              if (state != 8) /* Erase previous filled circle */
 800a400:	2e08      	cmp	r6, #8
 800a402:	d002      	beq.n	800a40a <Touchscreen_demo+0x48a>
                Touchscreen_DrawBackground(state);
 800a404:	4630      	mov	r0, r6
 800a406:	f7ff fc95 	bl	8009d34 <Touchscreen_DrawBackground>
              BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 800a40a:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
              BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(3), radius);
 800a40e:	4627      	mov	r7, r4
              BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 800a410:	f7f7 fd9a 	bl	8001f48 <BSP_LCD_SetTextColor>
              BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(3), radius);
 800a414:	f7f7 fd3e 	bl	8001e94 <BSP_LCD_GetXSize>
 800a418:	4606      	mov	r6, r0
 800a41a:	f7f7 fd47 	bl	8001eac <BSP_LCD_GetYSize>
 800a41e:	2305      	movs	r3, #5
 800a420:	00b6      	lsls	r6, r6, #2
 800a422:	f1a0 015a 	sub.w	r1, r0, #90	@ 0x5a
 800a426:	4622      	mov	r2, r4
 800a428:	b289      	uxth	r1, r1
 800a42a:	fbb6 f0f3 	udiv	r0, r6, r3
 800a42e:	b280      	uxth	r0, r0
              state = 8;
 800a430:	2608      	movs	r6, #8
              BSP_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(3), radius);
 800a432:	f7f8 f9c7 	bl	80027c4 <BSP_LCD_FillCircle>
              state = 8;
 800a436:	e76d      	b.n	800a314 <Touchscreen_demo+0x394>
}
 800a438:	b008      	add	sp, #32
 800a43a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a43e:	bf00      	nop
 800a440:	08012677 	.word	0x08012677
 800a444:	ff0000ff 	.word	0xff0000ff
 800a448:	ffff0000 	.word	0xffff0000

0800a44c <LCD_LOG_DeInit>:
  * @param  None
  * @retval None
  */
void LCD_LOG_DeInit(void)
{
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
 800a44c:	4b07      	ldr	r3, [pc, #28]	@ (800a46c <LCD_LOG_DeInit+0x20>)
  LCD_CacheBuffer_yptr_bottom = 0;
  
  LCD_CacheBuffer_yptr_top_bak = 0;
  LCD_CacheBuffer_yptr_bottom_bak = 0;
  
  LCD_CacheBuffer_yptr_invert= ENABLE;
 800a44e:	2101      	movs	r1, #1
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
 800a450:	4a07      	ldr	r2, [pc, #28]	@ (800a470 <LCD_LOG_DeInit+0x24>)
  LCD_CacheBuffer_yptr_invert= ENABLE;
 800a452:	7399      	strb	r1, [r3, #14]
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
 800a454:	601a      	str	r2, [r3, #0]
  LCD_CacheBuffer_xptr = 0;
 800a456:	2200      	movs	r2, #0
 800a458:	809a      	strh	r2, [r3, #4]
  LCD_CacheBuffer_yptr_top = 0;
 800a45a:	80da      	strh	r2, [r3, #6]
  LCD_CacheBuffer_yptr_bottom = 0;
 800a45c:	811a      	strh	r2, [r3, #8]
  LCD_CacheBuffer_yptr_top_bak = 0;
 800a45e:	815a      	strh	r2, [r3, #10]
  LCD_CacheBuffer_yptr_bottom_bak = 0;
 800a460:	819a      	strh	r2, [r3, #12]
  LCD_ScrollActive = DISABLE;
 800a462:	73da      	strb	r2, [r3, #15]
  LCD_Lock = DISABLE;
 800a464:	741a      	strb	r2, [r3, #16]
  LCD_Scrolled = DISABLE;
 800a466:	745a      	strb	r2, [r3, #17]
  LCD_ScrollBackStep = 0;
 800a468:	825a      	strh	r2, [r3, #18]
}
 800a46a:	4770      	bx	lr
 800a46c:	200243ac 	.word	0x200243ac
 800a470:	ff000080 	.word	0xff000080

0800a474 <LCD_LOG_Init>:
{
 800a474:	b508      	push	{r3, lr}
  LCD_LOG_DeInit();
 800a476:	f7ff ffe9 	bl	800a44c <LCD_LOG_DeInit>
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
 800a47a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800a47e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
 800a482:	f7f7 bd91 	b.w	8001fa8 <BSP_LCD_Clear>
	...

0800a488 <LCD_LOG_SetHeader>:
  * @brief  Display the application header on the LCD screen 
  * @param  header: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetHeader (uint8_t *header)
{
 800a488:	b570      	push	{r4, r5, r6, lr}
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_HEADER_FONT);
 800a48a:	4c16      	ldr	r4, [pc, #88]	@ (800a4e4 <LCD_LOG_SetHeader+0x5c>)
{
 800a48c:	4605      	mov	r5, r0

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 800a48e:	4e16      	ldr	r6, [pc, #88]	@ (800a4e8 <LCD_LOG_SetHeader+0x60>)
  BSP_LCD_SetFont (&LCD_LOG_HEADER_FONT);
 800a490:	4620      	mov	r0, r4
 800a492:	f7f7 fd71 	bl	8001f78 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 800a496:	4630      	mov	r0, r6
 800a498:	f7f7 fd56 	bl	8001f48 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), LCD_LOG_HEADER_FONT.Height * 3);
 800a49c:	f7f7 fcfa 	bl	8001e94 <BSP_LCD_GetXSize>
 800a4a0:	88e3      	ldrh	r3, [r4, #6]
 800a4a2:	2100      	movs	r1, #0
 800a4a4:	b282      	uxth	r2, r0
 800a4a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800a4aa:	4608      	mov	r0, r1
 800a4ac:	b29b      	uxth	r3, r3
 800a4ae:	f7f8 f925 	bl	80026fc <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
 800a4b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a4b6:	f7f7 fd47 	bl	8001f48 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 800a4ba:	4630      	mov	r0, r6
 800a4bc:	f7f7 fd50 	bl	8001f60 <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, LCD_LOG_HEADER_FONT.Height, header, CENTER_MODE);
 800a4c0:	462a      	mov	r2, r5
 800a4c2:	88e1      	ldrh	r1, [r4, #6]
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	2000      	movs	r0, #0
 800a4c8:	f7f7 fe7e 	bl	80021c8 <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
 800a4cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a4d0:	f7f7 fd46 	bl	8001f60 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
 800a4d4:	4805      	ldr	r0, [pc, #20]	@ (800a4ec <LCD_LOG_SetHeader+0x64>)
 800a4d6:	f7f7 fd37 	bl	8001f48 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 800a4da:	4805      	ldr	r0, [pc, #20]	@ (800a4f0 <LCD_LOG_SetHeader+0x68>)
}
 800a4dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 800a4e0:	f7f7 bd4a 	b.w	8001f78 <BSP_LCD_SetFont>
 800a4e4:	2000008c 	.word	0x2000008c
 800a4e8:	ff0000ff 	.word	0xff0000ff
 800a4ec:	ff000080 	.word	0xff000080
 800a4f0:	20000084 	.word	0x20000084

0800a4f4 <LCD_LOG_ClearTextZone>:
  * @brief  Clear the Text Zone 
  * @param  None 
  * @retval None
  */
void LCD_LOG_ClearTextZone(void)
{
 800a4f4:	b510      	push	{r4, lr}
 800a4f6:	2404      	movs	r4, #4
  uint8_t i=0;
  
  for (i= 0 ; i < YWINDOW_SIZE; i++)
  {
    BSP_LCD_ClearStringLine(i + YWINDOW_MIN);
 800a4f8:	4620      	mov	r0, r4
  for (i= 0 ; i < YWINDOW_SIZE; i++)
 800a4fa:	3401      	adds	r4, #1
    BSP_LCD_ClearStringLine(i + YWINDOW_MIN);
 800a4fc:	f7f8 f93a 	bl	8002774 <BSP_LCD_ClearStringLine>
  for (i= 0 ; i < YWINDOW_SIZE; i++)
 800a500:	2c15      	cmp	r4, #21
 800a502:	d1f9      	bne.n	800a4f8 <LCD_LOG_ClearTextZone+0x4>
  }
  
  LCD_LOG_DeInit();
}
 800a504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LCD_LOG_DeInit();
 800a508:	f7ff bfa0 	b.w	800a44c <LCD_LOG_DeInit>

0800a50c <LCD_LOG_UpdateDisplay>:
  * @brief  Update the text area display
  * @param  None
  * @retval None
  */
void LCD_LOG_UpdateDisplay (void)
{
 800a50c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint8_t cnt = 0 ;
  uint16_t length = 0 ;
  uint16_t ptr = 0, index = 0;
  
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 800a510:	4c1b      	ldr	r4, [pc, #108]	@ (800a580 <LCD_LOG_UpdateDisplay+0x74>)
 800a512:	4f1c      	ldr	r7, [pc, #112]	@ (800a584 <LCD_LOG_UpdateDisplay+0x78>)
 800a514:	8923      	ldrh	r3, [r4, #8]
     (LCD_CacheBuffer_yptr_bottom  >= LCD_CacheBuffer_yptr_top))
 800a516:	88e2      	ldrh	r2, [r4, #6]
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 800a518:	2b0f      	cmp	r3, #15
 800a51a:	d811      	bhi.n	800a540 <LCD_LOG_UpdateDisplay+0x34>
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d311      	bcc.n	800a544 <LCD_LOG_UpdateDisplay+0x38>
  {
    BSP_LCD_SetTextColor(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].color);
 800a520:	2584      	movs	r5, #132	@ 0x84
 800a522:	fb05 7303 	mla	r3, r5, r3, r7
 800a526:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a52a:	f7f7 fd0d 	bl	8001f48 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 800a52e:	8921      	ldrh	r1, [r4, #8]
 800a530:	1d08      	adds	r0, r1, #4
 800a532:	fb05 7101 	mla	r1, r5, r1, r7
 800a536:	b280      	uxth	r0, r0
                             (uint8_t *)(LCD_CacheBuffer[index].line));
      
    }
  }
  
}
 800a538:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 800a53c:	f7f7 be98 	b.w	8002270 <BSP_LCD_DisplayStringAtLine>
    if(LCD_CacheBuffer_yptr_bottom < LCD_CacheBuffer_yptr_top)
 800a540:	4293      	cmp	r3, r2
 800a542:	d201      	bcs.n	800a548 <LCD_LOG_UpdateDisplay+0x3c>
      length = LCD_CACHE_DEPTH + LCD_CacheBuffer_yptr_bottom ;
 800a544:	3375      	adds	r3, #117	@ 0x75
 800a546:	b29b      	uxth	r3, r3
    ptr = length - YWINDOW_SIZE + 1;
 800a548:	3b10      	subs	r3, #16
 800a54a:	2600      	movs	r6, #0
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 800a54c:	f04f 0875 	mov.w	r8, #117	@ 0x75
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 800a550:	f04f 0984 	mov.w	r9, #132	@ 0x84
    ptr = length - YWINDOW_SIZE + 1;
 800a554:	b29c      	uxth	r4, r3
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 800a556:	19a5      	adds	r5, r4, r6
 800a558:	fbb5 f3f8 	udiv	r3, r5, r8
 800a55c:	fb08 5513 	mls	r5, r8, r3, r5
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 800a560:	fb09 7505 	mla	r5, r9, r5, r7
 800a564:	f8d5 0080 	ldr.w	r0, [r5, #128]	@ 0x80
 800a568:	f7f7 fcee 	bl	8001f48 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 800a56c:	1d30      	adds	r0, r6, #4
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 800a56e:	3601      	adds	r6, #1
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 800a570:	4629      	mov	r1, r5
 800a572:	b280      	uxth	r0, r0
 800a574:	f7f7 fe7c 	bl	8002270 <BSP_LCD_DisplayStringAtLine>
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 800a578:	2e11      	cmp	r6, #17
 800a57a:	d1ec      	bne.n	800a556 <LCD_LOG_UpdateDisplay+0x4a>
}
 800a57c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a580:	200243ac 	.word	0x200243ac
 800a584:	200243c0 	.word	0x200243c0

0800a588 <__io_putchar>:
{
 800a588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(LCD_Lock == DISABLE)
 800a58c:	4c37      	ldr	r4, [pc, #220]	@ (800a66c <__io_putchar+0xe4>)
{
 800a58e:	4605      	mov	r5, r0
  sFONT *cFont = BSP_LCD_GetFont();
 800a590:	f7f7 fcfe 	bl	8001f90 <BSP_LCD_GetFont>
 800a594:	4607      	mov	r7, r0
  if(LCD_Lock == DISABLE)
 800a596:	7c23      	ldrb	r3, [r4, #16]
 800a598:	b9e3      	cbnz	r3, 800a5d4 <__io_putchar+0x4c>
    if(LCD_ScrollActive == ENABLE)
 800a59a:	7be2      	ldrb	r2, [r4, #15]
 800a59c:	2a01      	cmp	r2, #1
 800a59e:	d106      	bne.n	800a5ae <__io_putchar+0x26>
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 800a5a0:	89a2      	ldrh	r2, [r4, #12]
      LCD_ScrollActive = DISABLE;
 800a5a2:	73e3      	strb	r3, [r4, #15]
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 800a5a4:	8122      	strh	r2, [r4, #8]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 800a5a6:	8962      	ldrh	r2, [r4, #10]
      LCD_Scrolled = DISABLE;
 800a5a8:	7463      	strb	r3, [r4, #17]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 800a5aa:	80e2      	strh	r2, [r4, #6]
      LCD_ScrollBackStep = 0;
 800a5ac:	8263      	strh	r3, [r4, #18]
    if(( LCD_CacheBuffer_xptr < (BSP_LCD_GetXSize()) /cFont->Width ) &&  ( ch != '\n'))
 800a5ae:	88a6      	ldrh	r6, [r4, #4]
 800a5b0:	f7f7 fc70 	bl	8001e94 <BSP_LCD_GetXSize>
 800a5b4:	88bb      	ldrh	r3, [r7, #4]
 800a5b6:	fbb0 f0f3 	udiv	r0, r0, r3
 800a5ba:	4286      	cmp	r6, r0
 800a5bc:	4e2c      	ldr	r6, [pc, #176]	@ (800a670 <__io_putchar+0xe8>)
 800a5be:	d20c      	bcs.n	800a5da <__io_putchar+0x52>
 800a5c0:	2d0a      	cmp	r5, #10
 800a5c2:	d00a      	beq.n	800a5da <__io_putchar+0x52>
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 800a5c4:	88a2      	ldrh	r2, [r4, #4]
 800a5c6:	8923      	ldrh	r3, [r4, #8]
 800a5c8:	1c51      	adds	r1, r2, #1
 800a5ca:	80a1      	strh	r1, [r4, #4]
 800a5cc:	2184      	movs	r1, #132	@ 0x84
 800a5ce:	fb01 6303 	mla	r3, r1, r3, r6
 800a5d2:	549d      	strb	r5, [r3, r2]
}
 800a5d4:	4628      	mov	r0, r5
 800a5d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(LCD_CacheBuffer_yptr_top >= LCD_CacheBuffer_yptr_bottom)
 800a5da:	88e3      	ldrh	r3, [r4, #6]
 800a5dc:	8922      	ldrh	r2, [r4, #8]
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d808      	bhi.n	800a5f4 <__io_putchar+0x6c>
        if(LCD_CacheBuffer_yptr_invert == DISABLE)
 800a5e2:	7ba2      	ldrb	r2, [r4, #14]
 800a5e4:	2a00      	cmp	r2, #0
 800a5e6:	d133      	bne.n	800a650 <__io_putchar+0xc8>
          LCD_CacheBuffer_yptr_top++;
 800a5e8:	3301      	adds	r3, #1
 800a5ea:	b29b      	uxth	r3, r3
          if(LCD_CacheBuffer_yptr_top == LCD_CACHE_DEPTH)
 800a5ec:	2b75      	cmp	r3, #117	@ 0x75
          LCD_CacheBuffer_yptr_top++;
 800a5ee:	bf14      	ite	ne
 800a5f0:	80e3      	strhne	r3, [r4, #6]
            LCD_CacheBuffer_yptr_top = 0;  
 800a5f2:	80e2      	strheq	r2, [r4, #6]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 800a5f4:	f8b4 8004 	ldrh.w	r8, [r4, #4]
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 800a5f8:	f04f 0984 	mov.w	r9, #132	@ 0x84
 800a5fc:	f04f 0a20 	mov.w	sl, #32
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 800a600:	f7f7 fc48 	bl	8001e94 <BSP_LCD_GetXSize>
 800a604:	88bb      	ldrh	r3, [r7, #4]
 800a606:	fbb0 f0f3 	udiv	r0, r0, r3
 800a60a:	4540      	cmp	r0, r8
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 800a60c:	8923      	ldrh	r3, [r4, #8]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 800a60e:	d822      	bhi.n	800a656 <__io_putchar+0xce>
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 800a610:	2284      	movs	r2, #132	@ 0x84
      LCD_CacheBuffer_xptr = 0;
 800a612:	2700      	movs	r7, #0
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 800a614:	fb02 6303 	mla	r3, r2, r3, r6
 800a618:	6822      	ldr	r2, [r4, #0]
      LCD_CacheBuffer_xptr = 0;
 800a61a:	80a7      	strh	r7, [r4, #4]
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 800a61c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      LCD_LOG_UpdateDisplay (); 
 800a620:	f7ff ff74 	bl	800a50c <LCD_LOG_UpdateDisplay>
      LCD_CacheBuffer_yptr_bottom ++; 
 800a624:	8923      	ldrh	r3, [r4, #8]
 800a626:	3301      	adds	r3, #1
 800a628:	b29b      	uxth	r3, r3
      if (LCD_CacheBuffer_yptr_bottom == LCD_CACHE_DEPTH) 
 800a62a:	2b75      	cmp	r3, #117	@ 0x75
        LCD_CacheBuffer_yptr_top = 1;    
 800a62c:	bf09      	itett	eq
 800a62e:	2301      	moveq	r3, #1
      LCD_CacheBuffer_yptr_bottom ++; 
 800a630:	8123      	strhne	r3, [r4, #8]
        LCD_CacheBuffer_yptr_bottom = 0;
 800a632:	8127      	strheq	r7, [r4, #8]
        LCD_CacheBuffer_yptr_top = 1;    
 800a634:	80e3      	strheq	r3, [r4, #6]
        LCD_CacheBuffer_yptr_invert = ENABLE;
 800a636:	bf08      	it	eq
 800a638:	73a3      	strbeq	r3, [r4, #14]
      if( ch != '\n')
 800a63a:	2d0a      	cmp	r5, #10
 800a63c:	d0ca      	beq.n	800a5d4 <__io_putchar+0x4c>
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 800a63e:	88a3      	ldrh	r3, [r4, #4]
 800a640:	8922      	ldrh	r2, [r4, #8]
 800a642:	1c59      	adds	r1, r3, #1
 800a644:	80a1      	strh	r1, [r4, #4]
 800a646:	2184      	movs	r1, #132	@ 0x84
 800a648:	fb01 6602 	mla	r6, r1, r2, r6
 800a64c:	54f5      	strb	r5, [r6, r3]
 800a64e:	e7c1      	b.n	800a5d4 <__io_putchar+0x4c>
          LCD_CacheBuffer_yptr_invert= DISABLE;
 800a650:	2300      	movs	r3, #0
 800a652:	73a3      	strb	r3, [r4, #14]
 800a654:	e7ce      	b.n	800a5f4 <__io_putchar+0x6c>
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 800a656:	88a2      	ldrh	r2, [r4, #4]
 800a658:	fb09 6303 	mla	r3, r9, r3, r6
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 800a65c:	f108 0801 	add.w	r8, r8, #1
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 800a660:	1c51      	adds	r1, r2, #1
 800a662:	f803 a002 	strb.w	sl, [r3, r2]
 800a666:	80a1      	strh	r1, [r4, #4]
 800a668:	e7ca      	b.n	800a600 <__io_putchar+0x78>
 800a66a:	bf00      	nop
 800a66c:	200243ac 	.word	0x200243ac
 800a670:	200243c0 	.word	0x200243c0

0800a674 <LCD_LOG_ScrollBack>:
  * @brief  Display previous text frame
  * @param  None
  * @retval Status
  */
ErrorStatus LCD_LOG_ScrollBack(void)
{
 800a674:	b510      	push	{r4, lr}
    
  if(LCD_ScrollActive == DISABLE)
 800a676:	4c1f      	ldr	r4, [pc, #124]	@ (800a6f4 <LCD_LOG_ScrollBack+0x80>)
 800a678:	7be3      	ldrb	r3, [r4, #15]
 800a67a:	bb4b      	cbnz	r3, 800a6d0 <LCD_LOG_ScrollBack+0x5c>
  {
    
    LCD_CacheBuffer_yptr_bottom_bak = LCD_CacheBuffer_yptr_bottom;
 800a67c:	8923      	ldrh	r3, [r4, #8]
 800a67e:	2101      	movs	r1, #1
    LCD_CacheBuffer_yptr_top_bak    = LCD_CacheBuffer_yptr_top;
 800a680:	88e2      	ldrh	r2, [r4, #6]
    LCD_CacheBuffer_yptr_bottom_bak = LCD_CacheBuffer_yptr_bottom;
 800a682:	81a3      	strh	r3, [r4, #12]
    
    
    if(LCD_CacheBuffer_yptr_bottom > LCD_CacheBuffer_yptr_top) 
 800a684:	4293      	cmp	r3, r2
    LCD_CacheBuffer_yptr_top_bak    = LCD_CacheBuffer_yptr_top;
 800a686:	8162      	strh	r2, [r4, #10]
    if(LCD_CacheBuffer_yptr_bottom > LCD_CacheBuffer_yptr_top) 
 800a688:	d906      	bls.n	800a698 <LCD_LOG_ScrollBack+0x24>
    {
      
      if ((LCD_CacheBuffer_yptr_bottom - LCD_CacheBuffer_yptr_top) <=  YWINDOW_SIZE)
 800a68a:	1a9a      	subs	r2, r3, r2
 800a68c:	2a11      	cmp	r2, #17
 800a68e:	dc17      	bgt.n	800a6c0 <LCD_LOG_ScrollBack+0x4c>
      {
        LCD_Lock = DISABLE;
 800a690:	2300      	movs	r3, #0
        return ERROR;
 800a692:	2001      	movs	r0, #1
        LCD_Lock = DISABLE;
 800a694:	7423      	strb	r3, [r4, #16]
    LCD_ScrollBackStep++;
    LCD_LOG_UpdateDisplay();
    LCD_Lock = DISABLE;
  }
  return SUCCESS;
}
 800a696:	bd10      	pop	{r4, pc}
    LCD_ScrollActive = ENABLE;
 800a698:	73e1      	strb	r1, [r4, #15]
    LCD_Lock = ENABLE;
 800a69a:	2301      	movs	r3, #1
    if(LCD_CacheBuffer_yptr_bottom > LCD_CacheBuffer_yptr_top) 
 800a69c:	88e2      	ldrh	r2, [r4, #6]
    LCD_Lock = ENABLE;
 800a69e:	7423      	strb	r3, [r4, #16]
    if(LCD_CacheBuffer_yptr_bottom > LCD_CacheBuffer_yptr_top) 
 800a6a0:	8923      	ldrh	r3, [r4, #8]
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d818      	bhi.n	800a6d8 <LCD_LOG_ScrollBack+0x64>
      if((LCD_CACHE_DEPTH  - LCD_CacheBuffer_yptr_top + LCD_CacheBuffer_yptr_bottom) < YWINDOW_SIZE)
 800a6a6:	f1c2 0275 	rsb	r2, r2, #117	@ 0x75
 800a6aa:	441a      	add	r2, r3
 800a6ac:	2a10      	cmp	r2, #16
 800a6ae:	ddef      	ble.n	800a690 <LCD_LOG_ScrollBack+0x1c>
      LCD_CacheBuffer_yptr_bottom --;
 800a6b0:	3b01      	subs	r3, #1
 800a6b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a6b6:	b29b      	uxth	r3, r3
      if(LCD_CacheBuffer_yptr_bottom == 0xFFFF)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	bf08      	it	eq
 800a6bc:	2373      	moveq	r3, #115	@ 0x73
 800a6be:	e010      	b.n	800a6e2 <LCD_LOG_ScrollBack+0x6e>
    if((LCD_CacheBuffer_yptr_bottom  > LCD_CacheBuffer_yptr_top)&&
 800a6c0:	7c62      	ldrb	r2, [r4, #17]
    LCD_ScrollActive = ENABLE;
 800a6c2:	73e1      	strb	r1, [r4, #15]
    if((LCD_CacheBuffer_yptr_bottom  > LCD_CacheBuffer_yptr_top)&&
 800a6c4:	2a00      	cmp	r2, #0
 800a6c6:	d1e8      	bne.n	800a69a <LCD_LOG_ScrollBack+0x26>
      LCD_CacheBuffer_yptr_bottom--;
 800a6c8:	3b01      	subs	r3, #1
      LCD_Scrolled = ENABLE;
 800a6ca:	7461      	strb	r1, [r4, #17]
      LCD_CacheBuffer_yptr_bottom--;
 800a6cc:	8123      	strh	r3, [r4, #8]
      LCD_Scrolled = ENABLE;
 800a6ce:	e7e4      	b.n	800a69a <LCD_LOG_ScrollBack+0x26>
  if(LCD_ScrollActive == ENABLE)
 800a6d0:	2b01      	cmp	r3, #1
 800a6d2:	d0e2      	beq.n	800a69a <LCD_LOG_ScrollBack+0x26>
  return SUCCESS;
 800a6d4:	2000      	movs	r0, #0
 800a6d6:	e7de      	b.n	800a696 <LCD_LOG_ScrollBack+0x22>
      if((LCD_CacheBuffer_yptr_bottom  - LCD_CacheBuffer_yptr_top) <  YWINDOW_SIZE )
 800a6d8:	1a9a      	subs	r2, r3, r2
 800a6da:	2a10      	cmp	r2, #16
 800a6dc:	ddd8      	ble.n	800a690 <LCD_LOG_ScrollBack+0x1c>
      LCD_CacheBuffer_yptr_bottom --;
 800a6de:	3b01      	subs	r3, #1
 800a6e0:	b29b      	uxth	r3, r3
 800a6e2:	8123      	strh	r3, [r4, #8]
    LCD_ScrollBackStep++;
 800a6e4:	8a63      	ldrh	r3, [r4, #18]
 800a6e6:	3301      	adds	r3, #1
 800a6e8:	8263      	strh	r3, [r4, #18]
    LCD_LOG_UpdateDisplay();
 800a6ea:	f7ff ff0f 	bl	800a50c <LCD_LOG_UpdateDisplay>
    LCD_Lock = DISABLE;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	7423      	strb	r3, [r4, #16]
 800a6f2:	e7ef      	b.n	800a6d4 <LCD_LOG_ScrollBack+0x60>
 800a6f4:	200243ac 	.word	0x200243ac

0800a6f8 <LCD_LOG_ScrollForward>:
  * @brief  Display next text frame
  * @param  None
  * @retval Status
  */
ErrorStatus LCD_LOG_ScrollForward(void)
{
 800a6f8:	b510      	push	{r4, lr}
  
  if(LCD_ScrollBackStep != 0)
 800a6fa:	4c18      	ldr	r4, [pc, #96]	@ (800a75c <LCD_LOG_ScrollForward+0x64>)
 800a6fc:	8a61      	ldrh	r1, [r4, #18]
 800a6fe:	b159      	cbz	r1, 800a718 <LCD_LOG_ScrollForward+0x20>
  {
    if(LCD_ScrollActive == DISABLE)
 800a700:	7be3      	ldrb	r3, [r4, #15]
 800a702:	bb33      	cbnz	r3, 800a752 <LCD_LOG_ScrollForward+0x5a>
    {
      
      LCD_CacheBuffer_yptr_bottom_bak = LCD_CacheBuffer_yptr_bottom;
 800a704:	8923      	ldrh	r3, [r4, #8]
 800a706:	2001      	movs	r0, #1
      LCD_CacheBuffer_yptr_top_bak    = LCD_CacheBuffer_yptr_top;
 800a708:	88e2      	ldrh	r2, [r4, #6]
      LCD_CacheBuffer_yptr_bottom_bak = LCD_CacheBuffer_yptr_bottom;
 800a70a:	81a3      	strh	r3, [r4, #12]
      
      if(LCD_CacheBuffer_yptr_bottom > LCD_CacheBuffer_yptr_top) 
 800a70c:	4293      	cmp	r3, r2
      LCD_CacheBuffer_yptr_top_bak    = LCD_CacheBuffer_yptr_top;
 800a70e:	8162      	strh	r2, [r4, #10]
      if(LCD_CacheBuffer_yptr_bottom > LCD_CacheBuffer_yptr_top) 
 800a710:	d906      	bls.n	800a720 <LCD_LOG_ScrollForward+0x28>
      {
        
        if ((LCD_CacheBuffer_yptr_bottom - LCD_CacheBuffer_yptr_top) <=  YWINDOW_SIZE)
 800a712:	1a9a      	subs	r2, r3, r2
 800a714:	2a11      	cmp	r2, #17
 800a716:	dc14      	bgt.n	800a742 <LCD_LOG_ScrollForward+0x4a>
        {
          LCD_Lock = DISABLE;
 800a718:	2300      	movs	r3, #0
          return ERROR;
 800a71a:	2001      	movs	r0, #1
          LCD_Lock = DISABLE;
 800a71c:	7423      	strb	r3, [r4, #16]
  else // LCD_ScrollBackStep == 0 
  {
    LCD_Lock = DISABLE;
    return ERROR;
  }  
}
 800a71e:	bd10      	pop	{r4, pc}
      LCD_ScrollActive = ENABLE;
 800a720:	73e0      	strb	r0, [r4, #15]
      LCD_Lock = ENABLE;
 800a722:	2301      	movs	r3, #1
      LCD_ScrollBackStep--;
 800a724:	3901      	subs	r1, #1
      LCD_Lock = ENABLE;
 800a726:	7423      	strb	r3, [r4, #16]
      if(++LCD_CacheBuffer_yptr_bottom == LCD_CACHE_DEPTH)
 800a728:	8923      	ldrh	r3, [r4, #8]
      LCD_ScrollBackStep--;
 800a72a:	8261      	strh	r1, [r4, #18]
      if(++LCD_CacheBuffer_yptr_bottom == LCD_CACHE_DEPTH)
 800a72c:	3301      	adds	r3, #1
 800a72e:	b29b      	uxth	r3, r3
 800a730:	2b75      	cmp	r3, #117	@ 0x75
 800a732:	bf08      	it	eq
 800a734:	2300      	moveq	r3, #0
 800a736:	8123      	strh	r3, [r4, #8]
      LCD_LOG_UpdateDisplay();
 800a738:	f7ff fee8 	bl	800a50c <LCD_LOG_UpdateDisplay>
      LCD_Lock = DISABLE;
 800a73c:	2300      	movs	r3, #0
 800a73e:	7423      	strb	r3, [r4, #16]
 800a740:	e009      	b.n	800a756 <LCD_LOG_ScrollForward+0x5e>
      if((LCD_CacheBuffer_yptr_bottom  > LCD_CacheBuffer_yptr_top)&&
 800a742:	7c62      	ldrb	r2, [r4, #17]
      LCD_ScrollActive = ENABLE;
 800a744:	73e0      	strb	r0, [r4, #15]
      if((LCD_CacheBuffer_yptr_bottom  > LCD_CacheBuffer_yptr_top)&&
 800a746:	2a00      	cmp	r2, #0
 800a748:	d1eb      	bne.n	800a722 <LCD_LOG_ScrollForward+0x2a>
        LCD_CacheBuffer_yptr_bottom--;
 800a74a:	3b01      	subs	r3, #1
        LCD_Scrolled = ENABLE;
 800a74c:	7460      	strb	r0, [r4, #17]
        LCD_CacheBuffer_yptr_bottom--;
 800a74e:	8123      	strh	r3, [r4, #8]
        LCD_Scrolled = ENABLE;
 800a750:	e7e7      	b.n	800a722 <LCD_LOG_ScrollForward+0x2a>
    if(LCD_ScrollActive == ENABLE)
 800a752:	2b01      	cmp	r3, #1
 800a754:	d0e5      	beq.n	800a722 <LCD_LOG_ScrollForward+0x2a>
    return SUCCESS;
 800a756:	2000      	movs	r0, #0
 800a758:	e7e1      	b.n	800a71e <LCD_LOG_ScrollForward+0x26>
 800a75a:	bf00      	nop
 800a75c:	200243ac 	.word	0x200243ac

0800a760 <std>:
 800a760:	2300      	movs	r3, #0
 800a762:	b510      	push	{r4, lr}
 800a764:	4604      	mov	r4, r0
 800a766:	e9c0 3300 	strd	r3, r3, [r0]
 800a76a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a76e:	6083      	str	r3, [r0, #8]
 800a770:	8181      	strh	r1, [r0, #12]
 800a772:	6643      	str	r3, [r0, #100]	@ 0x64
 800a774:	81c2      	strh	r2, [r0, #14]
 800a776:	6183      	str	r3, [r0, #24]
 800a778:	4619      	mov	r1, r3
 800a77a:	2208      	movs	r2, #8
 800a77c:	305c      	adds	r0, #92	@ 0x5c
 800a77e:	f000 f95a 	bl	800aa36 <memset>
 800a782:	4b0d      	ldr	r3, [pc, #52]	@ (800a7b8 <std+0x58>)
 800a784:	6263      	str	r3, [r4, #36]	@ 0x24
 800a786:	4b0d      	ldr	r3, [pc, #52]	@ (800a7bc <std+0x5c>)
 800a788:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a78a:	4b0d      	ldr	r3, [pc, #52]	@ (800a7c0 <std+0x60>)
 800a78c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a78e:	4b0d      	ldr	r3, [pc, #52]	@ (800a7c4 <std+0x64>)
 800a790:	6323      	str	r3, [r4, #48]	@ 0x30
 800a792:	4b0d      	ldr	r3, [pc, #52]	@ (800a7c8 <std+0x68>)
 800a794:	6224      	str	r4, [r4, #32]
 800a796:	429c      	cmp	r4, r3
 800a798:	d006      	beq.n	800a7a8 <std+0x48>
 800a79a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a79e:	4294      	cmp	r4, r2
 800a7a0:	d002      	beq.n	800a7a8 <std+0x48>
 800a7a2:	33d0      	adds	r3, #208	@ 0xd0
 800a7a4:	429c      	cmp	r4, r3
 800a7a6:	d105      	bne.n	800a7b4 <std+0x54>
 800a7a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a7ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7b0:	f000 b9ba 	b.w	800ab28 <__retarget_lock_init_recursive>
 800a7b4:	bd10      	pop	{r4, pc}
 800a7b6:	bf00      	nop
 800a7b8:	0800a9b1 	.word	0x0800a9b1
 800a7bc:	0800a9d3 	.word	0x0800a9d3
 800a7c0:	0800aa0b 	.word	0x0800aa0b
 800a7c4:	0800aa2f 	.word	0x0800aa2f
 800a7c8:	20028014 	.word	0x20028014

0800a7cc <stdio_exit_handler>:
 800a7cc:	4a02      	ldr	r2, [pc, #8]	@ (800a7d8 <stdio_exit_handler+0xc>)
 800a7ce:	4903      	ldr	r1, [pc, #12]	@ (800a7dc <stdio_exit_handler+0x10>)
 800a7d0:	4803      	ldr	r0, [pc, #12]	@ (800a7e0 <stdio_exit_handler+0x14>)
 800a7d2:	f000 b869 	b.w	800a8a8 <_fwalk_sglue>
 800a7d6:	bf00      	nop
 800a7d8:	20000578 	.word	0x20000578
 800a7dc:	0800b6a5 	.word	0x0800b6a5
 800a7e0:	20000588 	.word	0x20000588

0800a7e4 <cleanup_stdio>:
 800a7e4:	6841      	ldr	r1, [r0, #4]
 800a7e6:	4b0c      	ldr	r3, [pc, #48]	@ (800a818 <cleanup_stdio+0x34>)
 800a7e8:	4299      	cmp	r1, r3
 800a7ea:	b510      	push	{r4, lr}
 800a7ec:	4604      	mov	r4, r0
 800a7ee:	d001      	beq.n	800a7f4 <cleanup_stdio+0x10>
 800a7f0:	f000 ff58 	bl	800b6a4 <_fflush_r>
 800a7f4:	68a1      	ldr	r1, [r4, #8]
 800a7f6:	4b09      	ldr	r3, [pc, #36]	@ (800a81c <cleanup_stdio+0x38>)
 800a7f8:	4299      	cmp	r1, r3
 800a7fa:	d002      	beq.n	800a802 <cleanup_stdio+0x1e>
 800a7fc:	4620      	mov	r0, r4
 800a7fe:	f000 ff51 	bl	800b6a4 <_fflush_r>
 800a802:	68e1      	ldr	r1, [r4, #12]
 800a804:	4b06      	ldr	r3, [pc, #24]	@ (800a820 <cleanup_stdio+0x3c>)
 800a806:	4299      	cmp	r1, r3
 800a808:	d004      	beq.n	800a814 <cleanup_stdio+0x30>
 800a80a:	4620      	mov	r0, r4
 800a80c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a810:	f000 bf48 	b.w	800b6a4 <_fflush_r>
 800a814:	bd10      	pop	{r4, pc}
 800a816:	bf00      	nop
 800a818:	20028014 	.word	0x20028014
 800a81c:	2002807c 	.word	0x2002807c
 800a820:	200280e4 	.word	0x200280e4

0800a824 <global_stdio_init.part.0>:
 800a824:	b510      	push	{r4, lr}
 800a826:	4b0b      	ldr	r3, [pc, #44]	@ (800a854 <global_stdio_init.part.0+0x30>)
 800a828:	4c0b      	ldr	r4, [pc, #44]	@ (800a858 <global_stdio_init.part.0+0x34>)
 800a82a:	4a0c      	ldr	r2, [pc, #48]	@ (800a85c <global_stdio_init.part.0+0x38>)
 800a82c:	601a      	str	r2, [r3, #0]
 800a82e:	4620      	mov	r0, r4
 800a830:	2200      	movs	r2, #0
 800a832:	2104      	movs	r1, #4
 800a834:	f7ff ff94 	bl	800a760 <std>
 800a838:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a83c:	2201      	movs	r2, #1
 800a83e:	2109      	movs	r1, #9
 800a840:	f7ff ff8e 	bl	800a760 <std>
 800a844:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a848:	2202      	movs	r2, #2
 800a84a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a84e:	2112      	movs	r1, #18
 800a850:	f7ff bf86 	b.w	800a760 <std>
 800a854:	2002814c 	.word	0x2002814c
 800a858:	20028014 	.word	0x20028014
 800a85c:	0800a7cd 	.word	0x0800a7cd

0800a860 <__sfp_lock_acquire>:
 800a860:	4801      	ldr	r0, [pc, #4]	@ (800a868 <__sfp_lock_acquire+0x8>)
 800a862:	f000 b962 	b.w	800ab2a <__retarget_lock_acquire_recursive>
 800a866:	bf00      	nop
 800a868:	20028155 	.word	0x20028155

0800a86c <__sfp_lock_release>:
 800a86c:	4801      	ldr	r0, [pc, #4]	@ (800a874 <__sfp_lock_release+0x8>)
 800a86e:	f000 b95d 	b.w	800ab2c <__retarget_lock_release_recursive>
 800a872:	bf00      	nop
 800a874:	20028155 	.word	0x20028155

0800a878 <__sinit>:
 800a878:	b510      	push	{r4, lr}
 800a87a:	4604      	mov	r4, r0
 800a87c:	f7ff fff0 	bl	800a860 <__sfp_lock_acquire>
 800a880:	6a23      	ldr	r3, [r4, #32]
 800a882:	b11b      	cbz	r3, 800a88c <__sinit+0x14>
 800a884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a888:	f7ff bff0 	b.w	800a86c <__sfp_lock_release>
 800a88c:	4b04      	ldr	r3, [pc, #16]	@ (800a8a0 <__sinit+0x28>)
 800a88e:	6223      	str	r3, [r4, #32]
 800a890:	4b04      	ldr	r3, [pc, #16]	@ (800a8a4 <__sinit+0x2c>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d1f5      	bne.n	800a884 <__sinit+0xc>
 800a898:	f7ff ffc4 	bl	800a824 <global_stdio_init.part.0>
 800a89c:	e7f2      	b.n	800a884 <__sinit+0xc>
 800a89e:	bf00      	nop
 800a8a0:	0800a7e5 	.word	0x0800a7e5
 800a8a4:	2002814c 	.word	0x2002814c

0800a8a8 <_fwalk_sglue>:
 800a8a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8ac:	4607      	mov	r7, r0
 800a8ae:	4688      	mov	r8, r1
 800a8b0:	4614      	mov	r4, r2
 800a8b2:	2600      	movs	r6, #0
 800a8b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a8b8:	f1b9 0901 	subs.w	r9, r9, #1
 800a8bc:	d505      	bpl.n	800a8ca <_fwalk_sglue+0x22>
 800a8be:	6824      	ldr	r4, [r4, #0]
 800a8c0:	2c00      	cmp	r4, #0
 800a8c2:	d1f7      	bne.n	800a8b4 <_fwalk_sglue+0xc>
 800a8c4:	4630      	mov	r0, r6
 800a8c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8ca:	89ab      	ldrh	r3, [r5, #12]
 800a8cc:	2b01      	cmp	r3, #1
 800a8ce:	d907      	bls.n	800a8e0 <_fwalk_sglue+0x38>
 800a8d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a8d4:	3301      	adds	r3, #1
 800a8d6:	d003      	beq.n	800a8e0 <_fwalk_sglue+0x38>
 800a8d8:	4629      	mov	r1, r5
 800a8da:	4638      	mov	r0, r7
 800a8dc:	47c0      	blx	r8
 800a8de:	4306      	orrs	r6, r0
 800a8e0:	3568      	adds	r5, #104	@ 0x68
 800a8e2:	e7e9      	b.n	800a8b8 <_fwalk_sglue+0x10>

0800a8e4 <iprintf>:
 800a8e4:	b40f      	push	{r0, r1, r2, r3}
 800a8e6:	b507      	push	{r0, r1, r2, lr}
 800a8e8:	4906      	ldr	r1, [pc, #24]	@ (800a904 <iprintf+0x20>)
 800a8ea:	ab04      	add	r3, sp, #16
 800a8ec:	6808      	ldr	r0, [r1, #0]
 800a8ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8f2:	6881      	ldr	r1, [r0, #8]
 800a8f4:	9301      	str	r3, [sp, #4]
 800a8f6:	f000 fbab 	bl	800b050 <_vfiprintf_r>
 800a8fa:	b003      	add	sp, #12
 800a8fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a900:	b004      	add	sp, #16
 800a902:	4770      	bx	lr
 800a904:	20000584 	.word	0x20000584

0800a908 <sniprintf>:
 800a908:	b40c      	push	{r2, r3}
 800a90a:	b530      	push	{r4, r5, lr}
 800a90c:	4b17      	ldr	r3, [pc, #92]	@ (800a96c <sniprintf+0x64>)
 800a90e:	1e0c      	subs	r4, r1, #0
 800a910:	681d      	ldr	r5, [r3, #0]
 800a912:	b09d      	sub	sp, #116	@ 0x74
 800a914:	da08      	bge.n	800a928 <sniprintf+0x20>
 800a916:	238b      	movs	r3, #139	@ 0x8b
 800a918:	602b      	str	r3, [r5, #0]
 800a91a:	f04f 30ff 	mov.w	r0, #4294967295
 800a91e:	b01d      	add	sp, #116	@ 0x74
 800a920:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a924:	b002      	add	sp, #8
 800a926:	4770      	bx	lr
 800a928:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a92c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a930:	bf14      	ite	ne
 800a932:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a936:	4623      	moveq	r3, r4
 800a938:	9304      	str	r3, [sp, #16]
 800a93a:	9307      	str	r3, [sp, #28]
 800a93c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a940:	9002      	str	r0, [sp, #8]
 800a942:	9006      	str	r0, [sp, #24]
 800a944:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a948:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a94a:	ab21      	add	r3, sp, #132	@ 0x84
 800a94c:	a902      	add	r1, sp, #8
 800a94e:	4628      	mov	r0, r5
 800a950:	9301      	str	r3, [sp, #4]
 800a952:	f000 fa57 	bl	800ae04 <_svfiprintf_r>
 800a956:	1c43      	adds	r3, r0, #1
 800a958:	bfbc      	itt	lt
 800a95a:	238b      	movlt	r3, #139	@ 0x8b
 800a95c:	602b      	strlt	r3, [r5, #0]
 800a95e:	2c00      	cmp	r4, #0
 800a960:	d0dd      	beq.n	800a91e <sniprintf+0x16>
 800a962:	9b02      	ldr	r3, [sp, #8]
 800a964:	2200      	movs	r2, #0
 800a966:	701a      	strb	r2, [r3, #0]
 800a968:	e7d9      	b.n	800a91e <sniprintf+0x16>
 800a96a:	bf00      	nop
 800a96c:	20000584 	.word	0x20000584

0800a970 <siprintf>:
 800a970:	b40e      	push	{r1, r2, r3}
 800a972:	b500      	push	{lr}
 800a974:	b09c      	sub	sp, #112	@ 0x70
 800a976:	ab1d      	add	r3, sp, #116	@ 0x74
 800a978:	9002      	str	r0, [sp, #8]
 800a97a:	9006      	str	r0, [sp, #24]
 800a97c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a980:	4809      	ldr	r0, [pc, #36]	@ (800a9a8 <siprintf+0x38>)
 800a982:	9107      	str	r1, [sp, #28]
 800a984:	9104      	str	r1, [sp, #16]
 800a986:	4909      	ldr	r1, [pc, #36]	@ (800a9ac <siprintf+0x3c>)
 800a988:	f853 2b04 	ldr.w	r2, [r3], #4
 800a98c:	9105      	str	r1, [sp, #20]
 800a98e:	6800      	ldr	r0, [r0, #0]
 800a990:	9301      	str	r3, [sp, #4]
 800a992:	a902      	add	r1, sp, #8
 800a994:	f000 fa36 	bl	800ae04 <_svfiprintf_r>
 800a998:	9b02      	ldr	r3, [sp, #8]
 800a99a:	2200      	movs	r2, #0
 800a99c:	701a      	strb	r2, [r3, #0]
 800a99e:	b01c      	add	sp, #112	@ 0x70
 800a9a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9a4:	b003      	add	sp, #12
 800a9a6:	4770      	bx	lr
 800a9a8:	20000584 	.word	0x20000584
 800a9ac:	ffff0208 	.word	0xffff0208

0800a9b0 <__sread>:
 800a9b0:	b510      	push	{r4, lr}
 800a9b2:	460c      	mov	r4, r1
 800a9b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9b8:	f000 f868 	bl	800aa8c <_read_r>
 800a9bc:	2800      	cmp	r0, #0
 800a9be:	bfab      	itete	ge
 800a9c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a9c2:	89a3      	ldrhlt	r3, [r4, #12]
 800a9c4:	181b      	addge	r3, r3, r0
 800a9c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a9ca:	bfac      	ite	ge
 800a9cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a9ce:	81a3      	strhlt	r3, [r4, #12]
 800a9d0:	bd10      	pop	{r4, pc}

0800a9d2 <__swrite>:
 800a9d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9d6:	461f      	mov	r7, r3
 800a9d8:	898b      	ldrh	r3, [r1, #12]
 800a9da:	05db      	lsls	r3, r3, #23
 800a9dc:	4605      	mov	r5, r0
 800a9de:	460c      	mov	r4, r1
 800a9e0:	4616      	mov	r6, r2
 800a9e2:	d505      	bpl.n	800a9f0 <__swrite+0x1e>
 800a9e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9e8:	2302      	movs	r3, #2
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	f000 f83c 	bl	800aa68 <_lseek_r>
 800a9f0:	89a3      	ldrh	r3, [r4, #12]
 800a9f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a9fa:	81a3      	strh	r3, [r4, #12]
 800a9fc:	4632      	mov	r2, r6
 800a9fe:	463b      	mov	r3, r7
 800aa00:	4628      	mov	r0, r5
 800aa02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa06:	f000 b853 	b.w	800aab0 <_write_r>

0800aa0a <__sseek>:
 800aa0a:	b510      	push	{r4, lr}
 800aa0c:	460c      	mov	r4, r1
 800aa0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa12:	f000 f829 	bl	800aa68 <_lseek_r>
 800aa16:	1c43      	adds	r3, r0, #1
 800aa18:	89a3      	ldrh	r3, [r4, #12]
 800aa1a:	bf15      	itete	ne
 800aa1c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800aa1e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800aa22:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800aa26:	81a3      	strheq	r3, [r4, #12]
 800aa28:	bf18      	it	ne
 800aa2a:	81a3      	strhne	r3, [r4, #12]
 800aa2c:	bd10      	pop	{r4, pc}

0800aa2e <__sclose>:
 800aa2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa32:	f000 b809 	b.w	800aa48 <_close_r>

0800aa36 <memset>:
 800aa36:	4402      	add	r2, r0
 800aa38:	4603      	mov	r3, r0
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d100      	bne.n	800aa40 <memset+0xa>
 800aa3e:	4770      	bx	lr
 800aa40:	f803 1b01 	strb.w	r1, [r3], #1
 800aa44:	e7f9      	b.n	800aa3a <memset+0x4>
	...

0800aa48 <_close_r>:
 800aa48:	b538      	push	{r3, r4, r5, lr}
 800aa4a:	4d06      	ldr	r5, [pc, #24]	@ (800aa64 <_close_r+0x1c>)
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	4604      	mov	r4, r0
 800aa50:	4608      	mov	r0, r1
 800aa52:	602b      	str	r3, [r5, #0]
 800aa54:	f7fd f962 	bl	8007d1c <_close>
 800aa58:	1c43      	adds	r3, r0, #1
 800aa5a:	d102      	bne.n	800aa62 <_close_r+0x1a>
 800aa5c:	682b      	ldr	r3, [r5, #0]
 800aa5e:	b103      	cbz	r3, 800aa62 <_close_r+0x1a>
 800aa60:	6023      	str	r3, [r4, #0]
 800aa62:	bd38      	pop	{r3, r4, r5, pc}
 800aa64:	20028150 	.word	0x20028150

0800aa68 <_lseek_r>:
 800aa68:	b538      	push	{r3, r4, r5, lr}
 800aa6a:	4d07      	ldr	r5, [pc, #28]	@ (800aa88 <_lseek_r+0x20>)
 800aa6c:	4604      	mov	r4, r0
 800aa6e:	4608      	mov	r0, r1
 800aa70:	4611      	mov	r1, r2
 800aa72:	2200      	movs	r2, #0
 800aa74:	602a      	str	r2, [r5, #0]
 800aa76:	461a      	mov	r2, r3
 800aa78:	f7fd f95a 	bl	8007d30 <_lseek>
 800aa7c:	1c43      	adds	r3, r0, #1
 800aa7e:	d102      	bne.n	800aa86 <_lseek_r+0x1e>
 800aa80:	682b      	ldr	r3, [r5, #0]
 800aa82:	b103      	cbz	r3, 800aa86 <_lseek_r+0x1e>
 800aa84:	6023      	str	r3, [r4, #0]
 800aa86:	bd38      	pop	{r3, r4, r5, pc}
 800aa88:	20028150 	.word	0x20028150

0800aa8c <_read_r>:
 800aa8c:	b538      	push	{r3, r4, r5, lr}
 800aa8e:	4d07      	ldr	r5, [pc, #28]	@ (800aaac <_read_r+0x20>)
 800aa90:	4604      	mov	r4, r0
 800aa92:	4608      	mov	r0, r1
 800aa94:	4611      	mov	r1, r2
 800aa96:	2200      	movs	r2, #0
 800aa98:	602a      	str	r2, [r5, #0]
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	f7fd f907 	bl	8007cae <_read>
 800aaa0:	1c43      	adds	r3, r0, #1
 800aaa2:	d102      	bne.n	800aaaa <_read_r+0x1e>
 800aaa4:	682b      	ldr	r3, [r5, #0]
 800aaa6:	b103      	cbz	r3, 800aaaa <_read_r+0x1e>
 800aaa8:	6023      	str	r3, [r4, #0]
 800aaaa:	bd38      	pop	{r3, r4, r5, pc}
 800aaac:	20028150 	.word	0x20028150

0800aab0 <_write_r>:
 800aab0:	b538      	push	{r3, r4, r5, lr}
 800aab2:	4d07      	ldr	r5, [pc, #28]	@ (800aad0 <_write_r+0x20>)
 800aab4:	4604      	mov	r4, r0
 800aab6:	4608      	mov	r0, r1
 800aab8:	4611      	mov	r1, r2
 800aaba:	2200      	movs	r2, #0
 800aabc:	602a      	str	r2, [r5, #0]
 800aabe:	461a      	mov	r2, r3
 800aac0:	f7fd f903 	bl	8007cca <_write>
 800aac4:	1c43      	adds	r3, r0, #1
 800aac6:	d102      	bne.n	800aace <_write_r+0x1e>
 800aac8:	682b      	ldr	r3, [r5, #0]
 800aaca:	b103      	cbz	r3, 800aace <_write_r+0x1e>
 800aacc:	6023      	str	r3, [r4, #0]
 800aace:	bd38      	pop	{r3, r4, r5, pc}
 800aad0:	20028150 	.word	0x20028150

0800aad4 <__errno>:
 800aad4:	4b01      	ldr	r3, [pc, #4]	@ (800aadc <__errno+0x8>)
 800aad6:	6818      	ldr	r0, [r3, #0]
 800aad8:	4770      	bx	lr
 800aada:	bf00      	nop
 800aadc:	20000584 	.word	0x20000584

0800aae0 <__libc_init_array>:
 800aae0:	b570      	push	{r4, r5, r6, lr}
 800aae2:	4d0d      	ldr	r5, [pc, #52]	@ (800ab18 <__libc_init_array+0x38>)
 800aae4:	4c0d      	ldr	r4, [pc, #52]	@ (800ab1c <__libc_init_array+0x3c>)
 800aae6:	1b64      	subs	r4, r4, r5
 800aae8:	10a4      	asrs	r4, r4, #2
 800aaea:	2600      	movs	r6, #0
 800aaec:	42a6      	cmp	r6, r4
 800aaee:	d109      	bne.n	800ab04 <__libc_init_array+0x24>
 800aaf0:	4d0b      	ldr	r5, [pc, #44]	@ (800ab20 <__libc_init_array+0x40>)
 800aaf2:	4c0c      	ldr	r4, [pc, #48]	@ (800ab24 <__libc_init_array+0x44>)
 800aaf4:	f000 ff76 	bl	800b9e4 <_init>
 800aaf8:	1b64      	subs	r4, r4, r5
 800aafa:	10a4      	asrs	r4, r4, #2
 800aafc:	2600      	movs	r6, #0
 800aafe:	42a6      	cmp	r6, r4
 800ab00:	d105      	bne.n	800ab0e <__libc_init_array+0x2e>
 800ab02:	bd70      	pop	{r4, r5, r6, pc}
 800ab04:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab08:	4798      	blx	r3
 800ab0a:	3601      	adds	r6, #1
 800ab0c:	e7ee      	b.n	800aaec <__libc_init_array+0xc>
 800ab0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab12:	4798      	blx	r3
 800ab14:	3601      	adds	r6, #1
 800ab16:	e7f2      	b.n	800aafe <__libc_init_array+0x1e>
 800ab18:	080126e8 	.word	0x080126e8
 800ab1c:	080126e8 	.word	0x080126e8
 800ab20:	080126e8 	.word	0x080126e8
 800ab24:	080126ec 	.word	0x080126ec

0800ab28 <__retarget_lock_init_recursive>:
 800ab28:	4770      	bx	lr

0800ab2a <__retarget_lock_acquire_recursive>:
 800ab2a:	4770      	bx	lr

0800ab2c <__retarget_lock_release_recursive>:
 800ab2c:	4770      	bx	lr

0800ab2e <strcpy>:
 800ab2e:	4603      	mov	r3, r0
 800ab30:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab34:	f803 2b01 	strb.w	r2, [r3], #1
 800ab38:	2a00      	cmp	r2, #0
 800ab3a:	d1f9      	bne.n	800ab30 <strcpy+0x2>
 800ab3c:	4770      	bx	lr

0800ab3e <memcpy>:
 800ab3e:	440a      	add	r2, r1
 800ab40:	4291      	cmp	r1, r2
 800ab42:	f100 33ff 	add.w	r3, r0, #4294967295
 800ab46:	d100      	bne.n	800ab4a <memcpy+0xc>
 800ab48:	4770      	bx	lr
 800ab4a:	b510      	push	{r4, lr}
 800ab4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab50:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab54:	4291      	cmp	r1, r2
 800ab56:	d1f9      	bne.n	800ab4c <memcpy+0xe>
 800ab58:	bd10      	pop	{r4, pc}
	...

0800ab5c <_free_r>:
 800ab5c:	b538      	push	{r3, r4, r5, lr}
 800ab5e:	4605      	mov	r5, r0
 800ab60:	2900      	cmp	r1, #0
 800ab62:	d041      	beq.n	800abe8 <_free_r+0x8c>
 800ab64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab68:	1f0c      	subs	r4, r1, #4
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	bfb8      	it	lt
 800ab6e:	18e4      	addlt	r4, r4, r3
 800ab70:	f000 f8e0 	bl	800ad34 <__malloc_lock>
 800ab74:	4a1d      	ldr	r2, [pc, #116]	@ (800abec <_free_r+0x90>)
 800ab76:	6813      	ldr	r3, [r2, #0]
 800ab78:	b933      	cbnz	r3, 800ab88 <_free_r+0x2c>
 800ab7a:	6063      	str	r3, [r4, #4]
 800ab7c:	6014      	str	r4, [r2, #0]
 800ab7e:	4628      	mov	r0, r5
 800ab80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab84:	f000 b8dc 	b.w	800ad40 <__malloc_unlock>
 800ab88:	42a3      	cmp	r3, r4
 800ab8a:	d908      	bls.n	800ab9e <_free_r+0x42>
 800ab8c:	6820      	ldr	r0, [r4, #0]
 800ab8e:	1821      	adds	r1, r4, r0
 800ab90:	428b      	cmp	r3, r1
 800ab92:	bf01      	itttt	eq
 800ab94:	6819      	ldreq	r1, [r3, #0]
 800ab96:	685b      	ldreq	r3, [r3, #4]
 800ab98:	1809      	addeq	r1, r1, r0
 800ab9a:	6021      	streq	r1, [r4, #0]
 800ab9c:	e7ed      	b.n	800ab7a <_free_r+0x1e>
 800ab9e:	461a      	mov	r2, r3
 800aba0:	685b      	ldr	r3, [r3, #4]
 800aba2:	b10b      	cbz	r3, 800aba8 <_free_r+0x4c>
 800aba4:	42a3      	cmp	r3, r4
 800aba6:	d9fa      	bls.n	800ab9e <_free_r+0x42>
 800aba8:	6811      	ldr	r1, [r2, #0]
 800abaa:	1850      	adds	r0, r2, r1
 800abac:	42a0      	cmp	r0, r4
 800abae:	d10b      	bne.n	800abc8 <_free_r+0x6c>
 800abb0:	6820      	ldr	r0, [r4, #0]
 800abb2:	4401      	add	r1, r0
 800abb4:	1850      	adds	r0, r2, r1
 800abb6:	4283      	cmp	r3, r0
 800abb8:	6011      	str	r1, [r2, #0]
 800abba:	d1e0      	bne.n	800ab7e <_free_r+0x22>
 800abbc:	6818      	ldr	r0, [r3, #0]
 800abbe:	685b      	ldr	r3, [r3, #4]
 800abc0:	6053      	str	r3, [r2, #4]
 800abc2:	4408      	add	r0, r1
 800abc4:	6010      	str	r0, [r2, #0]
 800abc6:	e7da      	b.n	800ab7e <_free_r+0x22>
 800abc8:	d902      	bls.n	800abd0 <_free_r+0x74>
 800abca:	230c      	movs	r3, #12
 800abcc:	602b      	str	r3, [r5, #0]
 800abce:	e7d6      	b.n	800ab7e <_free_r+0x22>
 800abd0:	6820      	ldr	r0, [r4, #0]
 800abd2:	1821      	adds	r1, r4, r0
 800abd4:	428b      	cmp	r3, r1
 800abd6:	bf04      	itt	eq
 800abd8:	6819      	ldreq	r1, [r3, #0]
 800abda:	685b      	ldreq	r3, [r3, #4]
 800abdc:	6063      	str	r3, [r4, #4]
 800abde:	bf04      	itt	eq
 800abe0:	1809      	addeq	r1, r1, r0
 800abe2:	6021      	streq	r1, [r4, #0]
 800abe4:	6054      	str	r4, [r2, #4]
 800abe6:	e7ca      	b.n	800ab7e <_free_r+0x22>
 800abe8:	bd38      	pop	{r3, r4, r5, pc}
 800abea:	bf00      	nop
 800abec:	2002815c 	.word	0x2002815c

0800abf0 <sbrk_aligned>:
 800abf0:	b570      	push	{r4, r5, r6, lr}
 800abf2:	4e0f      	ldr	r6, [pc, #60]	@ (800ac30 <sbrk_aligned+0x40>)
 800abf4:	460c      	mov	r4, r1
 800abf6:	6831      	ldr	r1, [r6, #0]
 800abf8:	4605      	mov	r5, r0
 800abfa:	b911      	cbnz	r1, 800ac02 <sbrk_aligned+0x12>
 800abfc:	f000 fe28 	bl	800b850 <_sbrk_r>
 800ac00:	6030      	str	r0, [r6, #0]
 800ac02:	4621      	mov	r1, r4
 800ac04:	4628      	mov	r0, r5
 800ac06:	f000 fe23 	bl	800b850 <_sbrk_r>
 800ac0a:	1c43      	adds	r3, r0, #1
 800ac0c:	d103      	bne.n	800ac16 <sbrk_aligned+0x26>
 800ac0e:	f04f 34ff 	mov.w	r4, #4294967295
 800ac12:	4620      	mov	r0, r4
 800ac14:	bd70      	pop	{r4, r5, r6, pc}
 800ac16:	1cc4      	adds	r4, r0, #3
 800ac18:	f024 0403 	bic.w	r4, r4, #3
 800ac1c:	42a0      	cmp	r0, r4
 800ac1e:	d0f8      	beq.n	800ac12 <sbrk_aligned+0x22>
 800ac20:	1a21      	subs	r1, r4, r0
 800ac22:	4628      	mov	r0, r5
 800ac24:	f000 fe14 	bl	800b850 <_sbrk_r>
 800ac28:	3001      	adds	r0, #1
 800ac2a:	d1f2      	bne.n	800ac12 <sbrk_aligned+0x22>
 800ac2c:	e7ef      	b.n	800ac0e <sbrk_aligned+0x1e>
 800ac2e:	bf00      	nop
 800ac30:	20028158 	.word	0x20028158

0800ac34 <_malloc_r>:
 800ac34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac38:	1ccd      	adds	r5, r1, #3
 800ac3a:	f025 0503 	bic.w	r5, r5, #3
 800ac3e:	3508      	adds	r5, #8
 800ac40:	2d0c      	cmp	r5, #12
 800ac42:	bf38      	it	cc
 800ac44:	250c      	movcc	r5, #12
 800ac46:	2d00      	cmp	r5, #0
 800ac48:	4606      	mov	r6, r0
 800ac4a:	db01      	blt.n	800ac50 <_malloc_r+0x1c>
 800ac4c:	42a9      	cmp	r1, r5
 800ac4e:	d904      	bls.n	800ac5a <_malloc_r+0x26>
 800ac50:	230c      	movs	r3, #12
 800ac52:	6033      	str	r3, [r6, #0]
 800ac54:	2000      	movs	r0, #0
 800ac56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ad30 <_malloc_r+0xfc>
 800ac5e:	f000 f869 	bl	800ad34 <__malloc_lock>
 800ac62:	f8d8 3000 	ldr.w	r3, [r8]
 800ac66:	461c      	mov	r4, r3
 800ac68:	bb44      	cbnz	r4, 800acbc <_malloc_r+0x88>
 800ac6a:	4629      	mov	r1, r5
 800ac6c:	4630      	mov	r0, r6
 800ac6e:	f7ff ffbf 	bl	800abf0 <sbrk_aligned>
 800ac72:	1c43      	adds	r3, r0, #1
 800ac74:	4604      	mov	r4, r0
 800ac76:	d158      	bne.n	800ad2a <_malloc_r+0xf6>
 800ac78:	f8d8 4000 	ldr.w	r4, [r8]
 800ac7c:	4627      	mov	r7, r4
 800ac7e:	2f00      	cmp	r7, #0
 800ac80:	d143      	bne.n	800ad0a <_malloc_r+0xd6>
 800ac82:	2c00      	cmp	r4, #0
 800ac84:	d04b      	beq.n	800ad1e <_malloc_r+0xea>
 800ac86:	6823      	ldr	r3, [r4, #0]
 800ac88:	4639      	mov	r1, r7
 800ac8a:	4630      	mov	r0, r6
 800ac8c:	eb04 0903 	add.w	r9, r4, r3
 800ac90:	f000 fdde 	bl	800b850 <_sbrk_r>
 800ac94:	4581      	cmp	r9, r0
 800ac96:	d142      	bne.n	800ad1e <_malloc_r+0xea>
 800ac98:	6821      	ldr	r1, [r4, #0]
 800ac9a:	1a6d      	subs	r5, r5, r1
 800ac9c:	4629      	mov	r1, r5
 800ac9e:	4630      	mov	r0, r6
 800aca0:	f7ff ffa6 	bl	800abf0 <sbrk_aligned>
 800aca4:	3001      	adds	r0, #1
 800aca6:	d03a      	beq.n	800ad1e <_malloc_r+0xea>
 800aca8:	6823      	ldr	r3, [r4, #0]
 800acaa:	442b      	add	r3, r5
 800acac:	6023      	str	r3, [r4, #0]
 800acae:	f8d8 3000 	ldr.w	r3, [r8]
 800acb2:	685a      	ldr	r2, [r3, #4]
 800acb4:	bb62      	cbnz	r2, 800ad10 <_malloc_r+0xdc>
 800acb6:	f8c8 7000 	str.w	r7, [r8]
 800acba:	e00f      	b.n	800acdc <_malloc_r+0xa8>
 800acbc:	6822      	ldr	r2, [r4, #0]
 800acbe:	1b52      	subs	r2, r2, r5
 800acc0:	d420      	bmi.n	800ad04 <_malloc_r+0xd0>
 800acc2:	2a0b      	cmp	r2, #11
 800acc4:	d917      	bls.n	800acf6 <_malloc_r+0xc2>
 800acc6:	1961      	adds	r1, r4, r5
 800acc8:	42a3      	cmp	r3, r4
 800acca:	6025      	str	r5, [r4, #0]
 800accc:	bf18      	it	ne
 800acce:	6059      	strne	r1, [r3, #4]
 800acd0:	6863      	ldr	r3, [r4, #4]
 800acd2:	bf08      	it	eq
 800acd4:	f8c8 1000 	streq.w	r1, [r8]
 800acd8:	5162      	str	r2, [r4, r5]
 800acda:	604b      	str	r3, [r1, #4]
 800acdc:	4630      	mov	r0, r6
 800acde:	f000 f82f 	bl	800ad40 <__malloc_unlock>
 800ace2:	f104 000b 	add.w	r0, r4, #11
 800ace6:	1d23      	adds	r3, r4, #4
 800ace8:	f020 0007 	bic.w	r0, r0, #7
 800acec:	1ac2      	subs	r2, r0, r3
 800acee:	bf1c      	itt	ne
 800acf0:	1a1b      	subne	r3, r3, r0
 800acf2:	50a3      	strne	r3, [r4, r2]
 800acf4:	e7af      	b.n	800ac56 <_malloc_r+0x22>
 800acf6:	6862      	ldr	r2, [r4, #4]
 800acf8:	42a3      	cmp	r3, r4
 800acfa:	bf0c      	ite	eq
 800acfc:	f8c8 2000 	streq.w	r2, [r8]
 800ad00:	605a      	strne	r2, [r3, #4]
 800ad02:	e7eb      	b.n	800acdc <_malloc_r+0xa8>
 800ad04:	4623      	mov	r3, r4
 800ad06:	6864      	ldr	r4, [r4, #4]
 800ad08:	e7ae      	b.n	800ac68 <_malloc_r+0x34>
 800ad0a:	463c      	mov	r4, r7
 800ad0c:	687f      	ldr	r7, [r7, #4]
 800ad0e:	e7b6      	b.n	800ac7e <_malloc_r+0x4a>
 800ad10:	461a      	mov	r2, r3
 800ad12:	685b      	ldr	r3, [r3, #4]
 800ad14:	42a3      	cmp	r3, r4
 800ad16:	d1fb      	bne.n	800ad10 <_malloc_r+0xdc>
 800ad18:	2300      	movs	r3, #0
 800ad1a:	6053      	str	r3, [r2, #4]
 800ad1c:	e7de      	b.n	800acdc <_malloc_r+0xa8>
 800ad1e:	230c      	movs	r3, #12
 800ad20:	6033      	str	r3, [r6, #0]
 800ad22:	4630      	mov	r0, r6
 800ad24:	f000 f80c 	bl	800ad40 <__malloc_unlock>
 800ad28:	e794      	b.n	800ac54 <_malloc_r+0x20>
 800ad2a:	6005      	str	r5, [r0, #0]
 800ad2c:	e7d6      	b.n	800acdc <_malloc_r+0xa8>
 800ad2e:	bf00      	nop
 800ad30:	2002815c 	.word	0x2002815c

0800ad34 <__malloc_lock>:
 800ad34:	4801      	ldr	r0, [pc, #4]	@ (800ad3c <__malloc_lock+0x8>)
 800ad36:	f7ff bef8 	b.w	800ab2a <__retarget_lock_acquire_recursive>
 800ad3a:	bf00      	nop
 800ad3c:	20028154 	.word	0x20028154

0800ad40 <__malloc_unlock>:
 800ad40:	4801      	ldr	r0, [pc, #4]	@ (800ad48 <__malloc_unlock+0x8>)
 800ad42:	f7ff bef3 	b.w	800ab2c <__retarget_lock_release_recursive>
 800ad46:	bf00      	nop
 800ad48:	20028154 	.word	0x20028154

0800ad4c <__ssputs_r>:
 800ad4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad50:	688e      	ldr	r6, [r1, #8]
 800ad52:	461f      	mov	r7, r3
 800ad54:	42be      	cmp	r6, r7
 800ad56:	680b      	ldr	r3, [r1, #0]
 800ad58:	4682      	mov	sl, r0
 800ad5a:	460c      	mov	r4, r1
 800ad5c:	4690      	mov	r8, r2
 800ad5e:	d82d      	bhi.n	800adbc <__ssputs_r+0x70>
 800ad60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ad64:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ad68:	d026      	beq.n	800adb8 <__ssputs_r+0x6c>
 800ad6a:	6965      	ldr	r5, [r4, #20]
 800ad6c:	6909      	ldr	r1, [r1, #16]
 800ad6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad72:	eba3 0901 	sub.w	r9, r3, r1
 800ad76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad7a:	1c7b      	adds	r3, r7, #1
 800ad7c:	444b      	add	r3, r9
 800ad7e:	106d      	asrs	r5, r5, #1
 800ad80:	429d      	cmp	r5, r3
 800ad82:	bf38      	it	cc
 800ad84:	461d      	movcc	r5, r3
 800ad86:	0553      	lsls	r3, r2, #21
 800ad88:	d527      	bpl.n	800adda <__ssputs_r+0x8e>
 800ad8a:	4629      	mov	r1, r5
 800ad8c:	f7ff ff52 	bl	800ac34 <_malloc_r>
 800ad90:	4606      	mov	r6, r0
 800ad92:	b360      	cbz	r0, 800adee <__ssputs_r+0xa2>
 800ad94:	6921      	ldr	r1, [r4, #16]
 800ad96:	464a      	mov	r2, r9
 800ad98:	f7ff fed1 	bl	800ab3e <memcpy>
 800ad9c:	89a3      	ldrh	r3, [r4, #12]
 800ad9e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ada2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ada6:	81a3      	strh	r3, [r4, #12]
 800ada8:	6126      	str	r6, [r4, #16]
 800adaa:	6165      	str	r5, [r4, #20]
 800adac:	444e      	add	r6, r9
 800adae:	eba5 0509 	sub.w	r5, r5, r9
 800adb2:	6026      	str	r6, [r4, #0]
 800adb4:	60a5      	str	r5, [r4, #8]
 800adb6:	463e      	mov	r6, r7
 800adb8:	42be      	cmp	r6, r7
 800adba:	d900      	bls.n	800adbe <__ssputs_r+0x72>
 800adbc:	463e      	mov	r6, r7
 800adbe:	6820      	ldr	r0, [r4, #0]
 800adc0:	4632      	mov	r2, r6
 800adc2:	4641      	mov	r1, r8
 800adc4:	f000 fd2a 	bl	800b81c <memmove>
 800adc8:	68a3      	ldr	r3, [r4, #8]
 800adca:	1b9b      	subs	r3, r3, r6
 800adcc:	60a3      	str	r3, [r4, #8]
 800adce:	6823      	ldr	r3, [r4, #0]
 800add0:	4433      	add	r3, r6
 800add2:	6023      	str	r3, [r4, #0]
 800add4:	2000      	movs	r0, #0
 800add6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adda:	462a      	mov	r2, r5
 800addc:	f000 fd48 	bl	800b870 <_realloc_r>
 800ade0:	4606      	mov	r6, r0
 800ade2:	2800      	cmp	r0, #0
 800ade4:	d1e0      	bne.n	800ada8 <__ssputs_r+0x5c>
 800ade6:	6921      	ldr	r1, [r4, #16]
 800ade8:	4650      	mov	r0, sl
 800adea:	f7ff feb7 	bl	800ab5c <_free_r>
 800adee:	230c      	movs	r3, #12
 800adf0:	f8ca 3000 	str.w	r3, [sl]
 800adf4:	89a3      	ldrh	r3, [r4, #12]
 800adf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800adfa:	81a3      	strh	r3, [r4, #12]
 800adfc:	f04f 30ff 	mov.w	r0, #4294967295
 800ae00:	e7e9      	b.n	800add6 <__ssputs_r+0x8a>
	...

0800ae04 <_svfiprintf_r>:
 800ae04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae08:	4698      	mov	r8, r3
 800ae0a:	898b      	ldrh	r3, [r1, #12]
 800ae0c:	061b      	lsls	r3, r3, #24
 800ae0e:	b09d      	sub	sp, #116	@ 0x74
 800ae10:	4607      	mov	r7, r0
 800ae12:	460d      	mov	r5, r1
 800ae14:	4614      	mov	r4, r2
 800ae16:	d510      	bpl.n	800ae3a <_svfiprintf_r+0x36>
 800ae18:	690b      	ldr	r3, [r1, #16]
 800ae1a:	b973      	cbnz	r3, 800ae3a <_svfiprintf_r+0x36>
 800ae1c:	2140      	movs	r1, #64	@ 0x40
 800ae1e:	f7ff ff09 	bl	800ac34 <_malloc_r>
 800ae22:	6028      	str	r0, [r5, #0]
 800ae24:	6128      	str	r0, [r5, #16]
 800ae26:	b930      	cbnz	r0, 800ae36 <_svfiprintf_r+0x32>
 800ae28:	230c      	movs	r3, #12
 800ae2a:	603b      	str	r3, [r7, #0]
 800ae2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae30:	b01d      	add	sp, #116	@ 0x74
 800ae32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae36:	2340      	movs	r3, #64	@ 0x40
 800ae38:	616b      	str	r3, [r5, #20]
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae3e:	2320      	movs	r3, #32
 800ae40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ae44:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae48:	2330      	movs	r3, #48	@ 0x30
 800ae4a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800afe8 <_svfiprintf_r+0x1e4>
 800ae4e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ae52:	f04f 0901 	mov.w	r9, #1
 800ae56:	4623      	mov	r3, r4
 800ae58:	469a      	mov	sl, r3
 800ae5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae5e:	b10a      	cbz	r2, 800ae64 <_svfiprintf_r+0x60>
 800ae60:	2a25      	cmp	r2, #37	@ 0x25
 800ae62:	d1f9      	bne.n	800ae58 <_svfiprintf_r+0x54>
 800ae64:	ebba 0b04 	subs.w	fp, sl, r4
 800ae68:	d00b      	beq.n	800ae82 <_svfiprintf_r+0x7e>
 800ae6a:	465b      	mov	r3, fp
 800ae6c:	4622      	mov	r2, r4
 800ae6e:	4629      	mov	r1, r5
 800ae70:	4638      	mov	r0, r7
 800ae72:	f7ff ff6b 	bl	800ad4c <__ssputs_r>
 800ae76:	3001      	adds	r0, #1
 800ae78:	f000 80a7 	beq.w	800afca <_svfiprintf_r+0x1c6>
 800ae7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae7e:	445a      	add	r2, fp
 800ae80:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae82:	f89a 3000 	ldrb.w	r3, [sl]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	f000 809f 	beq.w	800afca <_svfiprintf_r+0x1c6>
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	f04f 32ff 	mov.w	r2, #4294967295
 800ae92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae96:	f10a 0a01 	add.w	sl, sl, #1
 800ae9a:	9304      	str	r3, [sp, #16]
 800ae9c:	9307      	str	r3, [sp, #28]
 800ae9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aea2:	931a      	str	r3, [sp, #104]	@ 0x68
 800aea4:	4654      	mov	r4, sl
 800aea6:	2205      	movs	r2, #5
 800aea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aeac:	484e      	ldr	r0, [pc, #312]	@ (800afe8 <_svfiprintf_r+0x1e4>)
 800aeae:	f7f5 f9b7 	bl	8000220 <memchr>
 800aeb2:	9a04      	ldr	r2, [sp, #16]
 800aeb4:	b9d8      	cbnz	r0, 800aeee <_svfiprintf_r+0xea>
 800aeb6:	06d0      	lsls	r0, r2, #27
 800aeb8:	bf44      	itt	mi
 800aeba:	2320      	movmi	r3, #32
 800aebc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aec0:	0711      	lsls	r1, r2, #28
 800aec2:	bf44      	itt	mi
 800aec4:	232b      	movmi	r3, #43	@ 0x2b
 800aec6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aeca:	f89a 3000 	ldrb.w	r3, [sl]
 800aece:	2b2a      	cmp	r3, #42	@ 0x2a
 800aed0:	d015      	beq.n	800aefe <_svfiprintf_r+0xfa>
 800aed2:	9a07      	ldr	r2, [sp, #28]
 800aed4:	4654      	mov	r4, sl
 800aed6:	2000      	movs	r0, #0
 800aed8:	f04f 0c0a 	mov.w	ip, #10
 800aedc:	4621      	mov	r1, r4
 800aede:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aee2:	3b30      	subs	r3, #48	@ 0x30
 800aee4:	2b09      	cmp	r3, #9
 800aee6:	d94b      	bls.n	800af80 <_svfiprintf_r+0x17c>
 800aee8:	b1b0      	cbz	r0, 800af18 <_svfiprintf_r+0x114>
 800aeea:	9207      	str	r2, [sp, #28]
 800aeec:	e014      	b.n	800af18 <_svfiprintf_r+0x114>
 800aeee:	eba0 0308 	sub.w	r3, r0, r8
 800aef2:	fa09 f303 	lsl.w	r3, r9, r3
 800aef6:	4313      	orrs	r3, r2
 800aef8:	9304      	str	r3, [sp, #16]
 800aefa:	46a2      	mov	sl, r4
 800aefc:	e7d2      	b.n	800aea4 <_svfiprintf_r+0xa0>
 800aefe:	9b03      	ldr	r3, [sp, #12]
 800af00:	1d19      	adds	r1, r3, #4
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	9103      	str	r1, [sp, #12]
 800af06:	2b00      	cmp	r3, #0
 800af08:	bfbb      	ittet	lt
 800af0a:	425b      	neglt	r3, r3
 800af0c:	f042 0202 	orrlt.w	r2, r2, #2
 800af10:	9307      	strge	r3, [sp, #28]
 800af12:	9307      	strlt	r3, [sp, #28]
 800af14:	bfb8      	it	lt
 800af16:	9204      	strlt	r2, [sp, #16]
 800af18:	7823      	ldrb	r3, [r4, #0]
 800af1a:	2b2e      	cmp	r3, #46	@ 0x2e
 800af1c:	d10a      	bne.n	800af34 <_svfiprintf_r+0x130>
 800af1e:	7863      	ldrb	r3, [r4, #1]
 800af20:	2b2a      	cmp	r3, #42	@ 0x2a
 800af22:	d132      	bne.n	800af8a <_svfiprintf_r+0x186>
 800af24:	9b03      	ldr	r3, [sp, #12]
 800af26:	1d1a      	adds	r2, r3, #4
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	9203      	str	r2, [sp, #12]
 800af2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800af30:	3402      	adds	r4, #2
 800af32:	9305      	str	r3, [sp, #20]
 800af34:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800aff8 <_svfiprintf_r+0x1f4>
 800af38:	7821      	ldrb	r1, [r4, #0]
 800af3a:	2203      	movs	r2, #3
 800af3c:	4650      	mov	r0, sl
 800af3e:	f7f5 f96f 	bl	8000220 <memchr>
 800af42:	b138      	cbz	r0, 800af54 <_svfiprintf_r+0x150>
 800af44:	9b04      	ldr	r3, [sp, #16]
 800af46:	eba0 000a 	sub.w	r0, r0, sl
 800af4a:	2240      	movs	r2, #64	@ 0x40
 800af4c:	4082      	lsls	r2, r0
 800af4e:	4313      	orrs	r3, r2
 800af50:	3401      	adds	r4, #1
 800af52:	9304      	str	r3, [sp, #16]
 800af54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af58:	4824      	ldr	r0, [pc, #144]	@ (800afec <_svfiprintf_r+0x1e8>)
 800af5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800af5e:	2206      	movs	r2, #6
 800af60:	f7f5 f95e 	bl	8000220 <memchr>
 800af64:	2800      	cmp	r0, #0
 800af66:	d036      	beq.n	800afd6 <_svfiprintf_r+0x1d2>
 800af68:	4b21      	ldr	r3, [pc, #132]	@ (800aff0 <_svfiprintf_r+0x1ec>)
 800af6a:	bb1b      	cbnz	r3, 800afb4 <_svfiprintf_r+0x1b0>
 800af6c:	9b03      	ldr	r3, [sp, #12]
 800af6e:	3307      	adds	r3, #7
 800af70:	f023 0307 	bic.w	r3, r3, #7
 800af74:	3308      	adds	r3, #8
 800af76:	9303      	str	r3, [sp, #12]
 800af78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af7a:	4433      	add	r3, r6
 800af7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800af7e:	e76a      	b.n	800ae56 <_svfiprintf_r+0x52>
 800af80:	fb0c 3202 	mla	r2, ip, r2, r3
 800af84:	460c      	mov	r4, r1
 800af86:	2001      	movs	r0, #1
 800af88:	e7a8      	b.n	800aedc <_svfiprintf_r+0xd8>
 800af8a:	2300      	movs	r3, #0
 800af8c:	3401      	adds	r4, #1
 800af8e:	9305      	str	r3, [sp, #20]
 800af90:	4619      	mov	r1, r3
 800af92:	f04f 0c0a 	mov.w	ip, #10
 800af96:	4620      	mov	r0, r4
 800af98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af9c:	3a30      	subs	r2, #48	@ 0x30
 800af9e:	2a09      	cmp	r2, #9
 800afa0:	d903      	bls.n	800afaa <_svfiprintf_r+0x1a6>
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d0c6      	beq.n	800af34 <_svfiprintf_r+0x130>
 800afa6:	9105      	str	r1, [sp, #20]
 800afa8:	e7c4      	b.n	800af34 <_svfiprintf_r+0x130>
 800afaa:	fb0c 2101 	mla	r1, ip, r1, r2
 800afae:	4604      	mov	r4, r0
 800afb0:	2301      	movs	r3, #1
 800afb2:	e7f0      	b.n	800af96 <_svfiprintf_r+0x192>
 800afb4:	ab03      	add	r3, sp, #12
 800afb6:	9300      	str	r3, [sp, #0]
 800afb8:	462a      	mov	r2, r5
 800afba:	4b0e      	ldr	r3, [pc, #56]	@ (800aff4 <_svfiprintf_r+0x1f0>)
 800afbc:	a904      	add	r1, sp, #16
 800afbe:	4638      	mov	r0, r7
 800afc0:	f3af 8000 	nop.w
 800afc4:	1c42      	adds	r2, r0, #1
 800afc6:	4606      	mov	r6, r0
 800afc8:	d1d6      	bne.n	800af78 <_svfiprintf_r+0x174>
 800afca:	89ab      	ldrh	r3, [r5, #12]
 800afcc:	065b      	lsls	r3, r3, #25
 800afce:	f53f af2d 	bmi.w	800ae2c <_svfiprintf_r+0x28>
 800afd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800afd4:	e72c      	b.n	800ae30 <_svfiprintf_r+0x2c>
 800afd6:	ab03      	add	r3, sp, #12
 800afd8:	9300      	str	r3, [sp, #0]
 800afda:	462a      	mov	r2, r5
 800afdc:	4b05      	ldr	r3, [pc, #20]	@ (800aff4 <_svfiprintf_r+0x1f0>)
 800afde:	a904      	add	r1, sp, #16
 800afe0:	4638      	mov	r0, r7
 800afe2:	f000 f9bb 	bl	800b35c <_printf_i>
 800afe6:	e7ed      	b.n	800afc4 <_svfiprintf_r+0x1c0>
 800afe8:	080126ad 	.word	0x080126ad
 800afec:	080126b7 	.word	0x080126b7
 800aff0:	00000000 	.word	0x00000000
 800aff4:	0800ad4d 	.word	0x0800ad4d
 800aff8:	080126b3 	.word	0x080126b3

0800affc <__sfputc_r>:
 800affc:	6893      	ldr	r3, [r2, #8]
 800affe:	3b01      	subs	r3, #1
 800b000:	2b00      	cmp	r3, #0
 800b002:	b410      	push	{r4}
 800b004:	6093      	str	r3, [r2, #8]
 800b006:	da08      	bge.n	800b01a <__sfputc_r+0x1e>
 800b008:	6994      	ldr	r4, [r2, #24]
 800b00a:	42a3      	cmp	r3, r4
 800b00c:	db01      	blt.n	800b012 <__sfputc_r+0x16>
 800b00e:	290a      	cmp	r1, #10
 800b010:	d103      	bne.n	800b01a <__sfputc_r+0x1e>
 800b012:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b016:	f000 bb6d 	b.w	800b6f4 <__swbuf_r>
 800b01a:	6813      	ldr	r3, [r2, #0]
 800b01c:	1c58      	adds	r0, r3, #1
 800b01e:	6010      	str	r0, [r2, #0]
 800b020:	7019      	strb	r1, [r3, #0]
 800b022:	4608      	mov	r0, r1
 800b024:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b028:	4770      	bx	lr

0800b02a <__sfputs_r>:
 800b02a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b02c:	4606      	mov	r6, r0
 800b02e:	460f      	mov	r7, r1
 800b030:	4614      	mov	r4, r2
 800b032:	18d5      	adds	r5, r2, r3
 800b034:	42ac      	cmp	r4, r5
 800b036:	d101      	bne.n	800b03c <__sfputs_r+0x12>
 800b038:	2000      	movs	r0, #0
 800b03a:	e007      	b.n	800b04c <__sfputs_r+0x22>
 800b03c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b040:	463a      	mov	r2, r7
 800b042:	4630      	mov	r0, r6
 800b044:	f7ff ffda 	bl	800affc <__sfputc_r>
 800b048:	1c43      	adds	r3, r0, #1
 800b04a:	d1f3      	bne.n	800b034 <__sfputs_r+0xa>
 800b04c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b050 <_vfiprintf_r>:
 800b050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b054:	460d      	mov	r5, r1
 800b056:	b09d      	sub	sp, #116	@ 0x74
 800b058:	4614      	mov	r4, r2
 800b05a:	4698      	mov	r8, r3
 800b05c:	4606      	mov	r6, r0
 800b05e:	b118      	cbz	r0, 800b068 <_vfiprintf_r+0x18>
 800b060:	6a03      	ldr	r3, [r0, #32]
 800b062:	b90b      	cbnz	r3, 800b068 <_vfiprintf_r+0x18>
 800b064:	f7ff fc08 	bl	800a878 <__sinit>
 800b068:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b06a:	07d9      	lsls	r1, r3, #31
 800b06c:	d405      	bmi.n	800b07a <_vfiprintf_r+0x2a>
 800b06e:	89ab      	ldrh	r3, [r5, #12]
 800b070:	059a      	lsls	r2, r3, #22
 800b072:	d402      	bmi.n	800b07a <_vfiprintf_r+0x2a>
 800b074:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b076:	f7ff fd58 	bl	800ab2a <__retarget_lock_acquire_recursive>
 800b07a:	89ab      	ldrh	r3, [r5, #12]
 800b07c:	071b      	lsls	r3, r3, #28
 800b07e:	d501      	bpl.n	800b084 <_vfiprintf_r+0x34>
 800b080:	692b      	ldr	r3, [r5, #16]
 800b082:	b99b      	cbnz	r3, 800b0ac <_vfiprintf_r+0x5c>
 800b084:	4629      	mov	r1, r5
 800b086:	4630      	mov	r0, r6
 800b088:	f000 fb72 	bl	800b770 <__swsetup_r>
 800b08c:	b170      	cbz	r0, 800b0ac <_vfiprintf_r+0x5c>
 800b08e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b090:	07dc      	lsls	r4, r3, #31
 800b092:	d504      	bpl.n	800b09e <_vfiprintf_r+0x4e>
 800b094:	f04f 30ff 	mov.w	r0, #4294967295
 800b098:	b01d      	add	sp, #116	@ 0x74
 800b09a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b09e:	89ab      	ldrh	r3, [r5, #12]
 800b0a0:	0598      	lsls	r0, r3, #22
 800b0a2:	d4f7      	bmi.n	800b094 <_vfiprintf_r+0x44>
 800b0a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b0a6:	f7ff fd41 	bl	800ab2c <__retarget_lock_release_recursive>
 800b0aa:	e7f3      	b.n	800b094 <_vfiprintf_r+0x44>
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0b0:	2320      	movs	r3, #32
 800b0b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b0b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0ba:	2330      	movs	r3, #48	@ 0x30
 800b0bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b26c <_vfiprintf_r+0x21c>
 800b0c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b0c4:	f04f 0901 	mov.w	r9, #1
 800b0c8:	4623      	mov	r3, r4
 800b0ca:	469a      	mov	sl, r3
 800b0cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0d0:	b10a      	cbz	r2, 800b0d6 <_vfiprintf_r+0x86>
 800b0d2:	2a25      	cmp	r2, #37	@ 0x25
 800b0d4:	d1f9      	bne.n	800b0ca <_vfiprintf_r+0x7a>
 800b0d6:	ebba 0b04 	subs.w	fp, sl, r4
 800b0da:	d00b      	beq.n	800b0f4 <_vfiprintf_r+0xa4>
 800b0dc:	465b      	mov	r3, fp
 800b0de:	4622      	mov	r2, r4
 800b0e0:	4629      	mov	r1, r5
 800b0e2:	4630      	mov	r0, r6
 800b0e4:	f7ff ffa1 	bl	800b02a <__sfputs_r>
 800b0e8:	3001      	adds	r0, #1
 800b0ea:	f000 80a7 	beq.w	800b23c <_vfiprintf_r+0x1ec>
 800b0ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b0f0:	445a      	add	r2, fp
 800b0f2:	9209      	str	r2, [sp, #36]	@ 0x24
 800b0f4:	f89a 3000 	ldrb.w	r3, [sl]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	f000 809f 	beq.w	800b23c <_vfiprintf_r+0x1ec>
 800b0fe:	2300      	movs	r3, #0
 800b100:	f04f 32ff 	mov.w	r2, #4294967295
 800b104:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b108:	f10a 0a01 	add.w	sl, sl, #1
 800b10c:	9304      	str	r3, [sp, #16]
 800b10e:	9307      	str	r3, [sp, #28]
 800b110:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b114:	931a      	str	r3, [sp, #104]	@ 0x68
 800b116:	4654      	mov	r4, sl
 800b118:	2205      	movs	r2, #5
 800b11a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b11e:	4853      	ldr	r0, [pc, #332]	@ (800b26c <_vfiprintf_r+0x21c>)
 800b120:	f7f5 f87e 	bl	8000220 <memchr>
 800b124:	9a04      	ldr	r2, [sp, #16]
 800b126:	b9d8      	cbnz	r0, 800b160 <_vfiprintf_r+0x110>
 800b128:	06d1      	lsls	r1, r2, #27
 800b12a:	bf44      	itt	mi
 800b12c:	2320      	movmi	r3, #32
 800b12e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b132:	0713      	lsls	r3, r2, #28
 800b134:	bf44      	itt	mi
 800b136:	232b      	movmi	r3, #43	@ 0x2b
 800b138:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b13c:	f89a 3000 	ldrb.w	r3, [sl]
 800b140:	2b2a      	cmp	r3, #42	@ 0x2a
 800b142:	d015      	beq.n	800b170 <_vfiprintf_r+0x120>
 800b144:	9a07      	ldr	r2, [sp, #28]
 800b146:	4654      	mov	r4, sl
 800b148:	2000      	movs	r0, #0
 800b14a:	f04f 0c0a 	mov.w	ip, #10
 800b14e:	4621      	mov	r1, r4
 800b150:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b154:	3b30      	subs	r3, #48	@ 0x30
 800b156:	2b09      	cmp	r3, #9
 800b158:	d94b      	bls.n	800b1f2 <_vfiprintf_r+0x1a2>
 800b15a:	b1b0      	cbz	r0, 800b18a <_vfiprintf_r+0x13a>
 800b15c:	9207      	str	r2, [sp, #28]
 800b15e:	e014      	b.n	800b18a <_vfiprintf_r+0x13a>
 800b160:	eba0 0308 	sub.w	r3, r0, r8
 800b164:	fa09 f303 	lsl.w	r3, r9, r3
 800b168:	4313      	orrs	r3, r2
 800b16a:	9304      	str	r3, [sp, #16]
 800b16c:	46a2      	mov	sl, r4
 800b16e:	e7d2      	b.n	800b116 <_vfiprintf_r+0xc6>
 800b170:	9b03      	ldr	r3, [sp, #12]
 800b172:	1d19      	adds	r1, r3, #4
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	9103      	str	r1, [sp, #12]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	bfbb      	ittet	lt
 800b17c:	425b      	neglt	r3, r3
 800b17e:	f042 0202 	orrlt.w	r2, r2, #2
 800b182:	9307      	strge	r3, [sp, #28]
 800b184:	9307      	strlt	r3, [sp, #28]
 800b186:	bfb8      	it	lt
 800b188:	9204      	strlt	r2, [sp, #16]
 800b18a:	7823      	ldrb	r3, [r4, #0]
 800b18c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b18e:	d10a      	bne.n	800b1a6 <_vfiprintf_r+0x156>
 800b190:	7863      	ldrb	r3, [r4, #1]
 800b192:	2b2a      	cmp	r3, #42	@ 0x2a
 800b194:	d132      	bne.n	800b1fc <_vfiprintf_r+0x1ac>
 800b196:	9b03      	ldr	r3, [sp, #12]
 800b198:	1d1a      	adds	r2, r3, #4
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	9203      	str	r2, [sp, #12]
 800b19e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b1a2:	3402      	adds	r4, #2
 800b1a4:	9305      	str	r3, [sp, #20]
 800b1a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b27c <_vfiprintf_r+0x22c>
 800b1aa:	7821      	ldrb	r1, [r4, #0]
 800b1ac:	2203      	movs	r2, #3
 800b1ae:	4650      	mov	r0, sl
 800b1b0:	f7f5 f836 	bl	8000220 <memchr>
 800b1b4:	b138      	cbz	r0, 800b1c6 <_vfiprintf_r+0x176>
 800b1b6:	9b04      	ldr	r3, [sp, #16]
 800b1b8:	eba0 000a 	sub.w	r0, r0, sl
 800b1bc:	2240      	movs	r2, #64	@ 0x40
 800b1be:	4082      	lsls	r2, r0
 800b1c0:	4313      	orrs	r3, r2
 800b1c2:	3401      	adds	r4, #1
 800b1c4:	9304      	str	r3, [sp, #16]
 800b1c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1ca:	4829      	ldr	r0, [pc, #164]	@ (800b270 <_vfiprintf_r+0x220>)
 800b1cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b1d0:	2206      	movs	r2, #6
 800b1d2:	f7f5 f825 	bl	8000220 <memchr>
 800b1d6:	2800      	cmp	r0, #0
 800b1d8:	d03f      	beq.n	800b25a <_vfiprintf_r+0x20a>
 800b1da:	4b26      	ldr	r3, [pc, #152]	@ (800b274 <_vfiprintf_r+0x224>)
 800b1dc:	bb1b      	cbnz	r3, 800b226 <_vfiprintf_r+0x1d6>
 800b1de:	9b03      	ldr	r3, [sp, #12]
 800b1e0:	3307      	adds	r3, #7
 800b1e2:	f023 0307 	bic.w	r3, r3, #7
 800b1e6:	3308      	adds	r3, #8
 800b1e8:	9303      	str	r3, [sp, #12]
 800b1ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1ec:	443b      	add	r3, r7
 800b1ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1f0:	e76a      	b.n	800b0c8 <_vfiprintf_r+0x78>
 800b1f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b1f6:	460c      	mov	r4, r1
 800b1f8:	2001      	movs	r0, #1
 800b1fa:	e7a8      	b.n	800b14e <_vfiprintf_r+0xfe>
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	3401      	adds	r4, #1
 800b200:	9305      	str	r3, [sp, #20]
 800b202:	4619      	mov	r1, r3
 800b204:	f04f 0c0a 	mov.w	ip, #10
 800b208:	4620      	mov	r0, r4
 800b20a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b20e:	3a30      	subs	r2, #48	@ 0x30
 800b210:	2a09      	cmp	r2, #9
 800b212:	d903      	bls.n	800b21c <_vfiprintf_r+0x1cc>
 800b214:	2b00      	cmp	r3, #0
 800b216:	d0c6      	beq.n	800b1a6 <_vfiprintf_r+0x156>
 800b218:	9105      	str	r1, [sp, #20]
 800b21a:	e7c4      	b.n	800b1a6 <_vfiprintf_r+0x156>
 800b21c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b220:	4604      	mov	r4, r0
 800b222:	2301      	movs	r3, #1
 800b224:	e7f0      	b.n	800b208 <_vfiprintf_r+0x1b8>
 800b226:	ab03      	add	r3, sp, #12
 800b228:	9300      	str	r3, [sp, #0]
 800b22a:	462a      	mov	r2, r5
 800b22c:	4b12      	ldr	r3, [pc, #72]	@ (800b278 <_vfiprintf_r+0x228>)
 800b22e:	a904      	add	r1, sp, #16
 800b230:	4630      	mov	r0, r6
 800b232:	f3af 8000 	nop.w
 800b236:	4607      	mov	r7, r0
 800b238:	1c78      	adds	r0, r7, #1
 800b23a:	d1d6      	bne.n	800b1ea <_vfiprintf_r+0x19a>
 800b23c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b23e:	07d9      	lsls	r1, r3, #31
 800b240:	d405      	bmi.n	800b24e <_vfiprintf_r+0x1fe>
 800b242:	89ab      	ldrh	r3, [r5, #12]
 800b244:	059a      	lsls	r2, r3, #22
 800b246:	d402      	bmi.n	800b24e <_vfiprintf_r+0x1fe>
 800b248:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b24a:	f7ff fc6f 	bl	800ab2c <__retarget_lock_release_recursive>
 800b24e:	89ab      	ldrh	r3, [r5, #12]
 800b250:	065b      	lsls	r3, r3, #25
 800b252:	f53f af1f 	bmi.w	800b094 <_vfiprintf_r+0x44>
 800b256:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b258:	e71e      	b.n	800b098 <_vfiprintf_r+0x48>
 800b25a:	ab03      	add	r3, sp, #12
 800b25c:	9300      	str	r3, [sp, #0]
 800b25e:	462a      	mov	r2, r5
 800b260:	4b05      	ldr	r3, [pc, #20]	@ (800b278 <_vfiprintf_r+0x228>)
 800b262:	a904      	add	r1, sp, #16
 800b264:	4630      	mov	r0, r6
 800b266:	f000 f879 	bl	800b35c <_printf_i>
 800b26a:	e7e4      	b.n	800b236 <_vfiprintf_r+0x1e6>
 800b26c:	080126ad 	.word	0x080126ad
 800b270:	080126b7 	.word	0x080126b7
 800b274:	00000000 	.word	0x00000000
 800b278:	0800b02b 	.word	0x0800b02b
 800b27c:	080126b3 	.word	0x080126b3

0800b280 <_printf_common>:
 800b280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b284:	4616      	mov	r6, r2
 800b286:	4698      	mov	r8, r3
 800b288:	688a      	ldr	r2, [r1, #8]
 800b28a:	690b      	ldr	r3, [r1, #16]
 800b28c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b290:	4293      	cmp	r3, r2
 800b292:	bfb8      	it	lt
 800b294:	4613      	movlt	r3, r2
 800b296:	6033      	str	r3, [r6, #0]
 800b298:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b29c:	4607      	mov	r7, r0
 800b29e:	460c      	mov	r4, r1
 800b2a0:	b10a      	cbz	r2, 800b2a6 <_printf_common+0x26>
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	6033      	str	r3, [r6, #0]
 800b2a6:	6823      	ldr	r3, [r4, #0]
 800b2a8:	0699      	lsls	r1, r3, #26
 800b2aa:	bf42      	ittt	mi
 800b2ac:	6833      	ldrmi	r3, [r6, #0]
 800b2ae:	3302      	addmi	r3, #2
 800b2b0:	6033      	strmi	r3, [r6, #0]
 800b2b2:	6825      	ldr	r5, [r4, #0]
 800b2b4:	f015 0506 	ands.w	r5, r5, #6
 800b2b8:	d106      	bne.n	800b2c8 <_printf_common+0x48>
 800b2ba:	f104 0a19 	add.w	sl, r4, #25
 800b2be:	68e3      	ldr	r3, [r4, #12]
 800b2c0:	6832      	ldr	r2, [r6, #0]
 800b2c2:	1a9b      	subs	r3, r3, r2
 800b2c4:	42ab      	cmp	r3, r5
 800b2c6:	dc26      	bgt.n	800b316 <_printf_common+0x96>
 800b2c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b2cc:	6822      	ldr	r2, [r4, #0]
 800b2ce:	3b00      	subs	r3, #0
 800b2d0:	bf18      	it	ne
 800b2d2:	2301      	movne	r3, #1
 800b2d4:	0692      	lsls	r2, r2, #26
 800b2d6:	d42b      	bmi.n	800b330 <_printf_common+0xb0>
 800b2d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b2dc:	4641      	mov	r1, r8
 800b2de:	4638      	mov	r0, r7
 800b2e0:	47c8      	blx	r9
 800b2e2:	3001      	adds	r0, #1
 800b2e4:	d01e      	beq.n	800b324 <_printf_common+0xa4>
 800b2e6:	6823      	ldr	r3, [r4, #0]
 800b2e8:	6922      	ldr	r2, [r4, #16]
 800b2ea:	f003 0306 	and.w	r3, r3, #6
 800b2ee:	2b04      	cmp	r3, #4
 800b2f0:	bf02      	ittt	eq
 800b2f2:	68e5      	ldreq	r5, [r4, #12]
 800b2f4:	6833      	ldreq	r3, [r6, #0]
 800b2f6:	1aed      	subeq	r5, r5, r3
 800b2f8:	68a3      	ldr	r3, [r4, #8]
 800b2fa:	bf0c      	ite	eq
 800b2fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b300:	2500      	movne	r5, #0
 800b302:	4293      	cmp	r3, r2
 800b304:	bfc4      	itt	gt
 800b306:	1a9b      	subgt	r3, r3, r2
 800b308:	18ed      	addgt	r5, r5, r3
 800b30a:	2600      	movs	r6, #0
 800b30c:	341a      	adds	r4, #26
 800b30e:	42b5      	cmp	r5, r6
 800b310:	d11a      	bne.n	800b348 <_printf_common+0xc8>
 800b312:	2000      	movs	r0, #0
 800b314:	e008      	b.n	800b328 <_printf_common+0xa8>
 800b316:	2301      	movs	r3, #1
 800b318:	4652      	mov	r2, sl
 800b31a:	4641      	mov	r1, r8
 800b31c:	4638      	mov	r0, r7
 800b31e:	47c8      	blx	r9
 800b320:	3001      	adds	r0, #1
 800b322:	d103      	bne.n	800b32c <_printf_common+0xac>
 800b324:	f04f 30ff 	mov.w	r0, #4294967295
 800b328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b32c:	3501      	adds	r5, #1
 800b32e:	e7c6      	b.n	800b2be <_printf_common+0x3e>
 800b330:	18e1      	adds	r1, r4, r3
 800b332:	1c5a      	adds	r2, r3, #1
 800b334:	2030      	movs	r0, #48	@ 0x30
 800b336:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b33a:	4422      	add	r2, r4
 800b33c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b340:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b344:	3302      	adds	r3, #2
 800b346:	e7c7      	b.n	800b2d8 <_printf_common+0x58>
 800b348:	2301      	movs	r3, #1
 800b34a:	4622      	mov	r2, r4
 800b34c:	4641      	mov	r1, r8
 800b34e:	4638      	mov	r0, r7
 800b350:	47c8      	blx	r9
 800b352:	3001      	adds	r0, #1
 800b354:	d0e6      	beq.n	800b324 <_printf_common+0xa4>
 800b356:	3601      	adds	r6, #1
 800b358:	e7d9      	b.n	800b30e <_printf_common+0x8e>
	...

0800b35c <_printf_i>:
 800b35c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b360:	7e0f      	ldrb	r7, [r1, #24]
 800b362:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b364:	2f78      	cmp	r7, #120	@ 0x78
 800b366:	4691      	mov	r9, r2
 800b368:	4680      	mov	r8, r0
 800b36a:	460c      	mov	r4, r1
 800b36c:	469a      	mov	sl, r3
 800b36e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b372:	d807      	bhi.n	800b384 <_printf_i+0x28>
 800b374:	2f62      	cmp	r7, #98	@ 0x62
 800b376:	d80a      	bhi.n	800b38e <_printf_i+0x32>
 800b378:	2f00      	cmp	r7, #0
 800b37a:	f000 80d2 	beq.w	800b522 <_printf_i+0x1c6>
 800b37e:	2f58      	cmp	r7, #88	@ 0x58
 800b380:	f000 80b9 	beq.w	800b4f6 <_printf_i+0x19a>
 800b384:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b388:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b38c:	e03a      	b.n	800b404 <_printf_i+0xa8>
 800b38e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b392:	2b15      	cmp	r3, #21
 800b394:	d8f6      	bhi.n	800b384 <_printf_i+0x28>
 800b396:	a101      	add	r1, pc, #4	@ (adr r1, 800b39c <_printf_i+0x40>)
 800b398:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b39c:	0800b3f5 	.word	0x0800b3f5
 800b3a0:	0800b409 	.word	0x0800b409
 800b3a4:	0800b385 	.word	0x0800b385
 800b3a8:	0800b385 	.word	0x0800b385
 800b3ac:	0800b385 	.word	0x0800b385
 800b3b0:	0800b385 	.word	0x0800b385
 800b3b4:	0800b409 	.word	0x0800b409
 800b3b8:	0800b385 	.word	0x0800b385
 800b3bc:	0800b385 	.word	0x0800b385
 800b3c0:	0800b385 	.word	0x0800b385
 800b3c4:	0800b385 	.word	0x0800b385
 800b3c8:	0800b509 	.word	0x0800b509
 800b3cc:	0800b433 	.word	0x0800b433
 800b3d0:	0800b4c3 	.word	0x0800b4c3
 800b3d4:	0800b385 	.word	0x0800b385
 800b3d8:	0800b385 	.word	0x0800b385
 800b3dc:	0800b52b 	.word	0x0800b52b
 800b3e0:	0800b385 	.word	0x0800b385
 800b3e4:	0800b433 	.word	0x0800b433
 800b3e8:	0800b385 	.word	0x0800b385
 800b3ec:	0800b385 	.word	0x0800b385
 800b3f0:	0800b4cb 	.word	0x0800b4cb
 800b3f4:	6833      	ldr	r3, [r6, #0]
 800b3f6:	1d1a      	adds	r2, r3, #4
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	6032      	str	r2, [r6, #0]
 800b3fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b400:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b404:	2301      	movs	r3, #1
 800b406:	e09d      	b.n	800b544 <_printf_i+0x1e8>
 800b408:	6833      	ldr	r3, [r6, #0]
 800b40a:	6820      	ldr	r0, [r4, #0]
 800b40c:	1d19      	adds	r1, r3, #4
 800b40e:	6031      	str	r1, [r6, #0]
 800b410:	0606      	lsls	r6, r0, #24
 800b412:	d501      	bpl.n	800b418 <_printf_i+0xbc>
 800b414:	681d      	ldr	r5, [r3, #0]
 800b416:	e003      	b.n	800b420 <_printf_i+0xc4>
 800b418:	0645      	lsls	r5, r0, #25
 800b41a:	d5fb      	bpl.n	800b414 <_printf_i+0xb8>
 800b41c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b420:	2d00      	cmp	r5, #0
 800b422:	da03      	bge.n	800b42c <_printf_i+0xd0>
 800b424:	232d      	movs	r3, #45	@ 0x2d
 800b426:	426d      	negs	r5, r5
 800b428:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b42c:	4859      	ldr	r0, [pc, #356]	@ (800b594 <_printf_i+0x238>)
 800b42e:	230a      	movs	r3, #10
 800b430:	e011      	b.n	800b456 <_printf_i+0xfa>
 800b432:	6821      	ldr	r1, [r4, #0]
 800b434:	6833      	ldr	r3, [r6, #0]
 800b436:	0608      	lsls	r0, r1, #24
 800b438:	f853 5b04 	ldr.w	r5, [r3], #4
 800b43c:	d402      	bmi.n	800b444 <_printf_i+0xe8>
 800b43e:	0649      	lsls	r1, r1, #25
 800b440:	bf48      	it	mi
 800b442:	b2ad      	uxthmi	r5, r5
 800b444:	2f6f      	cmp	r7, #111	@ 0x6f
 800b446:	4853      	ldr	r0, [pc, #332]	@ (800b594 <_printf_i+0x238>)
 800b448:	6033      	str	r3, [r6, #0]
 800b44a:	bf14      	ite	ne
 800b44c:	230a      	movne	r3, #10
 800b44e:	2308      	moveq	r3, #8
 800b450:	2100      	movs	r1, #0
 800b452:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b456:	6866      	ldr	r6, [r4, #4]
 800b458:	60a6      	str	r6, [r4, #8]
 800b45a:	2e00      	cmp	r6, #0
 800b45c:	bfa2      	ittt	ge
 800b45e:	6821      	ldrge	r1, [r4, #0]
 800b460:	f021 0104 	bicge.w	r1, r1, #4
 800b464:	6021      	strge	r1, [r4, #0]
 800b466:	b90d      	cbnz	r5, 800b46c <_printf_i+0x110>
 800b468:	2e00      	cmp	r6, #0
 800b46a:	d04b      	beq.n	800b504 <_printf_i+0x1a8>
 800b46c:	4616      	mov	r6, r2
 800b46e:	fbb5 f1f3 	udiv	r1, r5, r3
 800b472:	fb03 5711 	mls	r7, r3, r1, r5
 800b476:	5dc7      	ldrb	r7, [r0, r7]
 800b478:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b47c:	462f      	mov	r7, r5
 800b47e:	42bb      	cmp	r3, r7
 800b480:	460d      	mov	r5, r1
 800b482:	d9f4      	bls.n	800b46e <_printf_i+0x112>
 800b484:	2b08      	cmp	r3, #8
 800b486:	d10b      	bne.n	800b4a0 <_printf_i+0x144>
 800b488:	6823      	ldr	r3, [r4, #0]
 800b48a:	07df      	lsls	r7, r3, #31
 800b48c:	d508      	bpl.n	800b4a0 <_printf_i+0x144>
 800b48e:	6923      	ldr	r3, [r4, #16]
 800b490:	6861      	ldr	r1, [r4, #4]
 800b492:	4299      	cmp	r1, r3
 800b494:	bfde      	ittt	le
 800b496:	2330      	movle	r3, #48	@ 0x30
 800b498:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b49c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b4a0:	1b92      	subs	r2, r2, r6
 800b4a2:	6122      	str	r2, [r4, #16]
 800b4a4:	f8cd a000 	str.w	sl, [sp]
 800b4a8:	464b      	mov	r3, r9
 800b4aa:	aa03      	add	r2, sp, #12
 800b4ac:	4621      	mov	r1, r4
 800b4ae:	4640      	mov	r0, r8
 800b4b0:	f7ff fee6 	bl	800b280 <_printf_common>
 800b4b4:	3001      	adds	r0, #1
 800b4b6:	d14a      	bne.n	800b54e <_printf_i+0x1f2>
 800b4b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4bc:	b004      	add	sp, #16
 800b4be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4c2:	6823      	ldr	r3, [r4, #0]
 800b4c4:	f043 0320 	orr.w	r3, r3, #32
 800b4c8:	6023      	str	r3, [r4, #0]
 800b4ca:	4833      	ldr	r0, [pc, #204]	@ (800b598 <_printf_i+0x23c>)
 800b4cc:	2778      	movs	r7, #120	@ 0x78
 800b4ce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b4d2:	6823      	ldr	r3, [r4, #0]
 800b4d4:	6831      	ldr	r1, [r6, #0]
 800b4d6:	061f      	lsls	r7, r3, #24
 800b4d8:	f851 5b04 	ldr.w	r5, [r1], #4
 800b4dc:	d402      	bmi.n	800b4e4 <_printf_i+0x188>
 800b4de:	065f      	lsls	r7, r3, #25
 800b4e0:	bf48      	it	mi
 800b4e2:	b2ad      	uxthmi	r5, r5
 800b4e4:	6031      	str	r1, [r6, #0]
 800b4e6:	07d9      	lsls	r1, r3, #31
 800b4e8:	bf44      	itt	mi
 800b4ea:	f043 0320 	orrmi.w	r3, r3, #32
 800b4ee:	6023      	strmi	r3, [r4, #0]
 800b4f0:	b11d      	cbz	r5, 800b4fa <_printf_i+0x19e>
 800b4f2:	2310      	movs	r3, #16
 800b4f4:	e7ac      	b.n	800b450 <_printf_i+0xf4>
 800b4f6:	4827      	ldr	r0, [pc, #156]	@ (800b594 <_printf_i+0x238>)
 800b4f8:	e7e9      	b.n	800b4ce <_printf_i+0x172>
 800b4fa:	6823      	ldr	r3, [r4, #0]
 800b4fc:	f023 0320 	bic.w	r3, r3, #32
 800b500:	6023      	str	r3, [r4, #0]
 800b502:	e7f6      	b.n	800b4f2 <_printf_i+0x196>
 800b504:	4616      	mov	r6, r2
 800b506:	e7bd      	b.n	800b484 <_printf_i+0x128>
 800b508:	6833      	ldr	r3, [r6, #0]
 800b50a:	6825      	ldr	r5, [r4, #0]
 800b50c:	6961      	ldr	r1, [r4, #20]
 800b50e:	1d18      	adds	r0, r3, #4
 800b510:	6030      	str	r0, [r6, #0]
 800b512:	062e      	lsls	r6, r5, #24
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	d501      	bpl.n	800b51c <_printf_i+0x1c0>
 800b518:	6019      	str	r1, [r3, #0]
 800b51a:	e002      	b.n	800b522 <_printf_i+0x1c6>
 800b51c:	0668      	lsls	r0, r5, #25
 800b51e:	d5fb      	bpl.n	800b518 <_printf_i+0x1bc>
 800b520:	8019      	strh	r1, [r3, #0]
 800b522:	2300      	movs	r3, #0
 800b524:	6123      	str	r3, [r4, #16]
 800b526:	4616      	mov	r6, r2
 800b528:	e7bc      	b.n	800b4a4 <_printf_i+0x148>
 800b52a:	6833      	ldr	r3, [r6, #0]
 800b52c:	1d1a      	adds	r2, r3, #4
 800b52e:	6032      	str	r2, [r6, #0]
 800b530:	681e      	ldr	r6, [r3, #0]
 800b532:	6862      	ldr	r2, [r4, #4]
 800b534:	2100      	movs	r1, #0
 800b536:	4630      	mov	r0, r6
 800b538:	f7f4 fe72 	bl	8000220 <memchr>
 800b53c:	b108      	cbz	r0, 800b542 <_printf_i+0x1e6>
 800b53e:	1b80      	subs	r0, r0, r6
 800b540:	6060      	str	r0, [r4, #4]
 800b542:	6863      	ldr	r3, [r4, #4]
 800b544:	6123      	str	r3, [r4, #16]
 800b546:	2300      	movs	r3, #0
 800b548:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b54c:	e7aa      	b.n	800b4a4 <_printf_i+0x148>
 800b54e:	6923      	ldr	r3, [r4, #16]
 800b550:	4632      	mov	r2, r6
 800b552:	4649      	mov	r1, r9
 800b554:	4640      	mov	r0, r8
 800b556:	47d0      	blx	sl
 800b558:	3001      	adds	r0, #1
 800b55a:	d0ad      	beq.n	800b4b8 <_printf_i+0x15c>
 800b55c:	6823      	ldr	r3, [r4, #0]
 800b55e:	079b      	lsls	r3, r3, #30
 800b560:	d413      	bmi.n	800b58a <_printf_i+0x22e>
 800b562:	68e0      	ldr	r0, [r4, #12]
 800b564:	9b03      	ldr	r3, [sp, #12]
 800b566:	4298      	cmp	r0, r3
 800b568:	bfb8      	it	lt
 800b56a:	4618      	movlt	r0, r3
 800b56c:	e7a6      	b.n	800b4bc <_printf_i+0x160>
 800b56e:	2301      	movs	r3, #1
 800b570:	4632      	mov	r2, r6
 800b572:	4649      	mov	r1, r9
 800b574:	4640      	mov	r0, r8
 800b576:	47d0      	blx	sl
 800b578:	3001      	adds	r0, #1
 800b57a:	d09d      	beq.n	800b4b8 <_printf_i+0x15c>
 800b57c:	3501      	adds	r5, #1
 800b57e:	68e3      	ldr	r3, [r4, #12]
 800b580:	9903      	ldr	r1, [sp, #12]
 800b582:	1a5b      	subs	r3, r3, r1
 800b584:	42ab      	cmp	r3, r5
 800b586:	dcf2      	bgt.n	800b56e <_printf_i+0x212>
 800b588:	e7eb      	b.n	800b562 <_printf_i+0x206>
 800b58a:	2500      	movs	r5, #0
 800b58c:	f104 0619 	add.w	r6, r4, #25
 800b590:	e7f5      	b.n	800b57e <_printf_i+0x222>
 800b592:	bf00      	nop
 800b594:	080126be 	.word	0x080126be
 800b598:	080126cf 	.word	0x080126cf

0800b59c <__sflush_r>:
 800b59c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b5a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5a4:	0716      	lsls	r6, r2, #28
 800b5a6:	4605      	mov	r5, r0
 800b5a8:	460c      	mov	r4, r1
 800b5aa:	d454      	bmi.n	800b656 <__sflush_r+0xba>
 800b5ac:	684b      	ldr	r3, [r1, #4]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	dc02      	bgt.n	800b5b8 <__sflush_r+0x1c>
 800b5b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	dd48      	ble.n	800b64a <__sflush_r+0xae>
 800b5b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b5ba:	2e00      	cmp	r6, #0
 800b5bc:	d045      	beq.n	800b64a <__sflush_r+0xae>
 800b5be:	2300      	movs	r3, #0
 800b5c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b5c4:	682f      	ldr	r7, [r5, #0]
 800b5c6:	6a21      	ldr	r1, [r4, #32]
 800b5c8:	602b      	str	r3, [r5, #0]
 800b5ca:	d030      	beq.n	800b62e <__sflush_r+0x92>
 800b5cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b5ce:	89a3      	ldrh	r3, [r4, #12]
 800b5d0:	0759      	lsls	r1, r3, #29
 800b5d2:	d505      	bpl.n	800b5e0 <__sflush_r+0x44>
 800b5d4:	6863      	ldr	r3, [r4, #4]
 800b5d6:	1ad2      	subs	r2, r2, r3
 800b5d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b5da:	b10b      	cbz	r3, 800b5e0 <__sflush_r+0x44>
 800b5dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b5de:	1ad2      	subs	r2, r2, r3
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b5e4:	6a21      	ldr	r1, [r4, #32]
 800b5e6:	4628      	mov	r0, r5
 800b5e8:	47b0      	blx	r6
 800b5ea:	1c43      	adds	r3, r0, #1
 800b5ec:	89a3      	ldrh	r3, [r4, #12]
 800b5ee:	d106      	bne.n	800b5fe <__sflush_r+0x62>
 800b5f0:	6829      	ldr	r1, [r5, #0]
 800b5f2:	291d      	cmp	r1, #29
 800b5f4:	d82b      	bhi.n	800b64e <__sflush_r+0xb2>
 800b5f6:	4a2a      	ldr	r2, [pc, #168]	@ (800b6a0 <__sflush_r+0x104>)
 800b5f8:	410a      	asrs	r2, r1
 800b5fa:	07d6      	lsls	r6, r2, #31
 800b5fc:	d427      	bmi.n	800b64e <__sflush_r+0xb2>
 800b5fe:	2200      	movs	r2, #0
 800b600:	6062      	str	r2, [r4, #4]
 800b602:	04d9      	lsls	r1, r3, #19
 800b604:	6922      	ldr	r2, [r4, #16]
 800b606:	6022      	str	r2, [r4, #0]
 800b608:	d504      	bpl.n	800b614 <__sflush_r+0x78>
 800b60a:	1c42      	adds	r2, r0, #1
 800b60c:	d101      	bne.n	800b612 <__sflush_r+0x76>
 800b60e:	682b      	ldr	r3, [r5, #0]
 800b610:	b903      	cbnz	r3, 800b614 <__sflush_r+0x78>
 800b612:	6560      	str	r0, [r4, #84]	@ 0x54
 800b614:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b616:	602f      	str	r7, [r5, #0]
 800b618:	b1b9      	cbz	r1, 800b64a <__sflush_r+0xae>
 800b61a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b61e:	4299      	cmp	r1, r3
 800b620:	d002      	beq.n	800b628 <__sflush_r+0x8c>
 800b622:	4628      	mov	r0, r5
 800b624:	f7ff fa9a 	bl	800ab5c <_free_r>
 800b628:	2300      	movs	r3, #0
 800b62a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b62c:	e00d      	b.n	800b64a <__sflush_r+0xae>
 800b62e:	2301      	movs	r3, #1
 800b630:	4628      	mov	r0, r5
 800b632:	47b0      	blx	r6
 800b634:	4602      	mov	r2, r0
 800b636:	1c50      	adds	r0, r2, #1
 800b638:	d1c9      	bne.n	800b5ce <__sflush_r+0x32>
 800b63a:	682b      	ldr	r3, [r5, #0]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d0c6      	beq.n	800b5ce <__sflush_r+0x32>
 800b640:	2b1d      	cmp	r3, #29
 800b642:	d001      	beq.n	800b648 <__sflush_r+0xac>
 800b644:	2b16      	cmp	r3, #22
 800b646:	d11e      	bne.n	800b686 <__sflush_r+0xea>
 800b648:	602f      	str	r7, [r5, #0]
 800b64a:	2000      	movs	r0, #0
 800b64c:	e022      	b.n	800b694 <__sflush_r+0xf8>
 800b64e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b652:	b21b      	sxth	r3, r3
 800b654:	e01b      	b.n	800b68e <__sflush_r+0xf2>
 800b656:	690f      	ldr	r7, [r1, #16]
 800b658:	2f00      	cmp	r7, #0
 800b65a:	d0f6      	beq.n	800b64a <__sflush_r+0xae>
 800b65c:	0793      	lsls	r3, r2, #30
 800b65e:	680e      	ldr	r6, [r1, #0]
 800b660:	bf08      	it	eq
 800b662:	694b      	ldreq	r3, [r1, #20]
 800b664:	600f      	str	r7, [r1, #0]
 800b666:	bf18      	it	ne
 800b668:	2300      	movne	r3, #0
 800b66a:	eba6 0807 	sub.w	r8, r6, r7
 800b66e:	608b      	str	r3, [r1, #8]
 800b670:	f1b8 0f00 	cmp.w	r8, #0
 800b674:	dde9      	ble.n	800b64a <__sflush_r+0xae>
 800b676:	6a21      	ldr	r1, [r4, #32]
 800b678:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b67a:	4643      	mov	r3, r8
 800b67c:	463a      	mov	r2, r7
 800b67e:	4628      	mov	r0, r5
 800b680:	47b0      	blx	r6
 800b682:	2800      	cmp	r0, #0
 800b684:	dc08      	bgt.n	800b698 <__sflush_r+0xfc>
 800b686:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b68a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b68e:	81a3      	strh	r3, [r4, #12]
 800b690:	f04f 30ff 	mov.w	r0, #4294967295
 800b694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b698:	4407      	add	r7, r0
 800b69a:	eba8 0800 	sub.w	r8, r8, r0
 800b69e:	e7e7      	b.n	800b670 <__sflush_r+0xd4>
 800b6a0:	dfbffffe 	.word	0xdfbffffe

0800b6a4 <_fflush_r>:
 800b6a4:	b538      	push	{r3, r4, r5, lr}
 800b6a6:	690b      	ldr	r3, [r1, #16]
 800b6a8:	4605      	mov	r5, r0
 800b6aa:	460c      	mov	r4, r1
 800b6ac:	b913      	cbnz	r3, 800b6b4 <_fflush_r+0x10>
 800b6ae:	2500      	movs	r5, #0
 800b6b0:	4628      	mov	r0, r5
 800b6b2:	bd38      	pop	{r3, r4, r5, pc}
 800b6b4:	b118      	cbz	r0, 800b6be <_fflush_r+0x1a>
 800b6b6:	6a03      	ldr	r3, [r0, #32]
 800b6b8:	b90b      	cbnz	r3, 800b6be <_fflush_r+0x1a>
 800b6ba:	f7ff f8dd 	bl	800a878 <__sinit>
 800b6be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d0f3      	beq.n	800b6ae <_fflush_r+0xa>
 800b6c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b6c8:	07d0      	lsls	r0, r2, #31
 800b6ca:	d404      	bmi.n	800b6d6 <_fflush_r+0x32>
 800b6cc:	0599      	lsls	r1, r3, #22
 800b6ce:	d402      	bmi.n	800b6d6 <_fflush_r+0x32>
 800b6d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b6d2:	f7ff fa2a 	bl	800ab2a <__retarget_lock_acquire_recursive>
 800b6d6:	4628      	mov	r0, r5
 800b6d8:	4621      	mov	r1, r4
 800b6da:	f7ff ff5f 	bl	800b59c <__sflush_r>
 800b6de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b6e0:	07da      	lsls	r2, r3, #31
 800b6e2:	4605      	mov	r5, r0
 800b6e4:	d4e4      	bmi.n	800b6b0 <_fflush_r+0xc>
 800b6e6:	89a3      	ldrh	r3, [r4, #12]
 800b6e8:	059b      	lsls	r3, r3, #22
 800b6ea:	d4e1      	bmi.n	800b6b0 <_fflush_r+0xc>
 800b6ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b6ee:	f7ff fa1d 	bl	800ab2c <__retarget_lock_release_recursive>
 800b6f2:	e7dd      	b.n	800b6b0 <_fflush_r+0xc>

0800b6f4 <__swbuf_r>:
 800b6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6f6:	460e      	mov	r6, r1
 800b6f8:	4614      	mov	r4, r2
 800b6fa:	4605      	mov	r5, r0
 800b6fc:	b118      	cbz	r0, 800b706 <__swbuf_r+0x12>
 800b6fe:	6a03      	ldr	r3, [r0, #32]
 800b700:	b90b      	cbnz	r3, 800b706 <__swbuf_r+0x12>
 800b702:	f7ff f8b9 	bl	800a878 <__sinit>
 800b706:	69a3      	ldr	r3, [r4, #24]
 800b708:	60a3      	str	r3, [r4, #8]
 800b70a:	89a3      	ldrh	r3, [r4, #12]
 800b70c:	071a      	lsls	r2, r3, #28
 800b70e:	d501      	bpl.n	800b714 <__swbuf_r+0x20>
 800b710:	6923      	ldr	r3, [r4, #16]
 800b712:	b943      	cbnz	r3, 800b726 <__swbuf_r+0x32>
 800b714:	4621      	mov	r1, r4
 800b716:	4628      	mov	r0, r5
 800b718:	f000 f82a 	bl	800b770 <__swsetup_r>
 800b71c:	b118      	cbz	r0, 800b726 <__swbuf_r+0x32>
 800b71e:	f04f 37ff 	mov.w	r7, #4294967295
 800b722:	4638      	mov	r0, r7
 800b724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b726:	6823      	ldr	r3, [r4, #0]
 800b728:	6922      	ldr	r2, [r4, #16]
 800b72a:	1a98      	subs	r0, r3, r2
 800b72c:	6963      	ldr	r3, [r4, #20]
 800b72e:	b2f6      	uxtb	r6, r6
 800b730:	4283      	cmp	r3, r0
 800b732:	4637      	mov	r7, r6
 800b734:	dc05      	bgt.n	800b742 <__swbuf_r+0x4e>
 800b736:	4621      	mov	r1, r4
 800b738:	4628      	mov	r0, r5
 800b73a:	f7ff ffb3 	bl	800b6a4 <_fflush_r>
 800b73e:	2800      	cmp	r0, #0
 800b740:	d1ed      	bne.n	800b71e <__swbuf_r+0x2a>
 800b742:	68a3      	ldr	r3, [r4, #8]
 800b744:	3b01      	subs	r3, #1
 800b746:	60a3      	str	r3, [r4, #8]
 800b748:	6823      	ldr	r3, [r4, #0]
 800b74a:	1c5a      	adds	r2, r3, #1
 800b74c:	6022      	str	r2, [r4, #0]
 800b74e:	701e      	strb	r6, [r3, #0]
 800b750:	6962      	ldr	r2, [r4, #20]
 800b752:	1c43      	adds	r3, r0, #1
 800b754:	429a      	cmp	r2, r3
 800b756:	d004      	beq.n	800b762 <__swbuf_r+0x6e>
 800b758:	89a3      	ldrh	r3, [r4, #12]
 800b75a:	07db      	lsls	r3, r3, #31
 800b75c:	d5e1      	bpl.n	800b722 <__swbuf_r+0x2e>
 800b75e:	2e0a      	cmp	r6, #10
 800b760:	d1df      	bne.n	800b722 <__swbuf_r+0x2e>
 800b762:	4621      	mov	r1, r4
 800b764:	4628      	mov	r0, r5
 800b766:	f7ff ff9d 	bl	800b6a4 <_fflush_r>
 800b76a:	2800      	cmp	r0, #0
 800b76c:	d0d9      	beq.n	800b722 <__swbuf_r+0x2e>
 800b76e:	e7d6      	b.n	800b71e <__swbuf_r+0x2a>

0800b770 <__swsetup_r>:
 800b770:	b538      	push	{r3, r4, r5, lr}
 800b772:	4b29      	ldr	r3, [pc, #164]	@ (800b818 <__swsetup_r+0xa8>)
 800b774:	4605      	mov	r5, r0
 800b776:	6818      	ldr	r0, [r3, #0]
 800b778:	460c      	mov	r4, r1
 800b77a:	b118      	cbz	r0, 800b784 <__swsetup_r+0x14>
 800b77c:	6a03      	ldr	r3, [r0, #32]
 800b77e:	b90b      	cbnz	r3, 800b784 <__swsetup_r+0x14>
 800b780:	f7ff f87a 	bl	800a878 <__sinit>
 800b784:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b788:	0719      	lsls	r1, r3, #28
 800b78a:	d422      	bmi.n	800b7d2 <__swsetup_r+0x62>
 800b78c:	06da      	lsls	r2, r3, #27
 800b78e:	d407      	bmi.n	800b7a0 <__swsetup_r+0x30>
 800b790:	2209      	movs	r2, #9
 800b792:	602a      	str	r2, [r5, #0]
 800b794:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b798:	81a3      	strh	r3, [r4, #12]
 800b79a:	f04f 30ff 	mov.w	r0, #4294967295
 800b79e:	e033      	b.n	800b808 <__swsetup_r+0x98>
 800b7a0:	0758      	lsls	r0, r3, #29
 800b7a2:	d512      	bpl.n	800b7ca <__swsetup_r+0x5a>
 800b7a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b7a6:	b141      	cbz	r1, 800b7ba <__swsetup_r+0x4a>
 800b7a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b7ac:	4299      	cmp	r1, r3
 800b7ae:	d002      	beq.n	800b7b6 <__swsetup_r+0x46>
 800b7b0:	4628      	mov	r0, r5
 800b7b2:	f7ff f9d3 	bl	800ab5c <_free_r>
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	6363      	str	r3, [r4, #52]	@ 0x34
 800b7ba:	89a3      	ldrh	r3, [r4, #12]
 800b7bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b7c0:	81a3      	strh	r3, [r4, #12]
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	6063      	str	r3, [r4, #4]
 800b7c6:	6923      	ldr	r3, [r4, #16]
 800b7c8:	6023      	str	r3, [r4, #0]
 800b7ca:	89a3      	ldrh	r3, [r4, #12]
 800b7cc:	f043 0308 	orr.w	r3, r3, #8
 800b7d0:	81a3      	strh	r3, [r4, #12]
 800b7d2:	6923      	ldr	r3, [r4, #16]
 800b7d4:	b94b      	cbnz	r3, 800b7ea <__swsetup_r+0x7a>
 800b7d6:	89a3      	ldrh	r3, [r4, #12]
 800b7d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b7dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b7e0:	d003      	beq.n	800b7ea <__swsetup_r+0x7a>
 800b7e2:	4621      	mov	r1, r4
 800b7e4:	4628      	mov	r0, r5
 800b7e6:	f000 f897 	bl	800b918 <__smakebuf_r>
 800b7ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7ee:	f013 0201 	ands.w	r2, r3, #1
 800b7f2:	d00a      	beq.n	800b80a <__swsetup_r+0x9a>
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	60a2      	str	r2, [r4, #8]
 800b7f8:	6962      	ldr	r2, [r4, #20]
 800b7fa:	4252      	negs	r2, r2
 800b7fc:	61a2      	str	r2, [r4, #24]
 800b7fe:	6922      	ldr	r2, [r4, #16]
 800b800:	b942      	cbnz	r2, 800b814 <__swsetup_r+0xa4>
 800b802:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b806:	d1c5      	bne.n	800b794 <__swsetup_r+0x24>
 800b808:	bd38      	pop	{r3, r4, r5, pc}
 800b80a:	0799      	lsls	r1, r3, #30
 800b80c:	bf58      	it	pl
 800b80e:	6962      	ldrpl	r2, [r4, #20]
 800b810:	60a2      	str	r2, [r4, #8]
 800b812:	e7f4      	b.n	800b7fe <__swsetup_r+0x8e>
 800b814:	2000      	movs	r0, #0
 800b816:	e7f7      	b.n	800b808 <__swsetup_r+0x98>
 800b818:	20000584 	.word	0x20000584

0800b81c <memmove>:
 800b81c:	4288      	cmp	r0, r1
 800b81e:	b510      	push	{r4, lr}
 800b820:	eb01 0402 	add.w	r4, r1, r2
 800b824:	d902      	bls.n	800b82c <memmove+0x10>
 800b826:	4284      	cmp	r4, r0
 800b828:	4623      	mov	r3, r4
 800b82a:	d807      	bhi.n	800b83c <memmove+0x20>
 800b82c:	1e43      	subs	r3, r0, #1
 800b82e:	42a1      	cmp	r1, r4
 800b830:	d008      	beq.n	800b844 <memmove+0x28>
 800b832:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b836:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b83a:	e7f8      	b.n	800b82e <memmove+0x12>
 800b83c:	4402      	add	r2, r0
 800b83e:	4601      	mov	r1, r0
 800b840:	428a      	cmp	r2, r1
 800b842:	d100      	bne.n	800b846 <memmove+0x2a>
 800b844:	bd10      	pop	{r4, pc}
 800b846:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b84a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b84e:	e7f7      	b.n	800b840 <memmove+0x24>

0800b850 <_sbrk_r>:
 800b850:	b538      	push	{r3, r4, r5, lr}
 800b852:	4d06      	ldr	r5, [pc, #24]	@ (800b86c <_sbrk_r+0x1c>)
 800b854:	2300      	movs	r3, #0
 800b856:	4604      	mov	r4, r0
 800b858:	4608      	mov	r0, r1
 800b85a:	602b      	str	r3, [r5, #0]
 800b85c:	f7fc fa44 	bl	8007ce8 <_sbrk>
 800b860:	1c43      	adds	r3, r0, #1
 800b862:	d102      	bne.n	800b86a <_sbrk_r+0x1a>
 800b864:	682b      	ldr	r3, [r5, #0]
 800b866:	b103      	cbz	r3, 800b86a <_sbrk_r+0x1a>
 800b868:	6023      	str	r3, [r4, #0]
 800b86a:	bd38      	pop	{r3, r4, r5, pc}
 800b86c:	20028150 	.word	0x20028150

0800b870 <_realloc_r>:
 800b870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b874:	4680      	mov	r8, r0
 800b876:	4615      	mov	r5, r2
 800b878:	460c      	mov	r4, r1
 800b87a:	b921      	cbnz	r1, 800b886 <_realloc_r+0x16>
 800b87c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b880:	4611      	mov	r1, r2
 800b882:	f7ff b9d7 	b.w	800ac34 <_malloc_r>
 800b886:	b92a      	cbnz	r2, 800b894 <_realloc_r+0x24>
 800b888:	f7ff f968 	bl	800ab5c <_free_r>
 800b88c:	2400      	movs	r4, #0
 800b88e:	4620      	mov	r0, r4
 800b890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b894:	f000 f89e 	bl	800b9d4 <_malloc_usable_size_r>
 800b898:	4285      	cmp	r5, r0
 800b89a:	4606      	mov	r6, r0
 800b89c:	d802      	bhi.n	800b8a4 <_realloc_r+0x34>
 800b89e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b8a2:	d8f4      	bhi.n	800b88e <_realloc_r+0x1e>
 800b8a4:	4629      	mov	r1, r5
 800b8a6:	4640      	mov	r0, r8
 800b8a8:	f7ff f9c4 	bl	800ac34 <_malloc_r>
 800b8ac:	4607      	mov	r7, r0
 800b8ae:	2800      	cmp	r0, #0
 800b8b0:	d0ec      	beq.n	800b88c <_realloc_r+0x1c>
 800b8b2:	42b5      	cmp	r5, r6
 800b8b4:	462a      	mov	r2, r5
 800b8b6:	4621      	mov	r1, r4
 800b8b8:	bf28      	it	cs
 800b8ba:	4632      	movcs	r2, r6
 800b8bc:	f7ff f93f 	bl	800ab3e <memcpy>
 800b8c0:	4621      	mov	r1, r4
 800b8c2:	4640      	mov	r0, r8
 800b8c4:	f7ff f94a 	bl	800ab5c <_free_r>
 800b8c8:	463c      	mov	r4, r7
 800b8ca:	e7e0      	b.n	800b88e <_realloc_r+0x1e>

0800b8cc <__swhatbuf_r>:
 800b8cc:	b570      	push	{r4, r5, r6, lr}
 800b8ce:	460c      	mov	r4, r1
 800b8d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8d4:	2900      	cmp	r1, #0
 800b8d6:	b096      	sub	sp, #88	@ 0x58
 800b8d8:	4615      	mov	r5, r2
 800b8da:	461e      	mov	r6, r3
 800b8dc:	da0d      	bge.n	800b8fa <__swhatbuf_r+0x2e>
 800b8de:	89a3      	ldrh	r3, [r4, #12]
 800b8e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b8e4:	f04f 0100 	mov.w	r1, #0
 800b8e8:	bf14      	ite	ne
 800b8ea:	2340      	movne	r3, #64	@ 0x40
 800b8ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b8f0:	2000      	movs	r0, #0
 800b8f2:	6031      	str	r1, [r6, #0]
 800b8f4:	602b      	str	r3, [r5, #0]
 800b8f6:	b016      	add	sp, #88	@ 0x58
 800b8f8:	bd70      	pop	{r4, r5, r6, pc}
 800b8fa:	466a      	mov	r2, sp
 800b8fc:	f000 f848 	bl	800b990 <_fstat_r>
 800b900:	2800      	cmp	r0, #0
 800b902:	dbec      	blt.n	800b8de <__swhatbuf_r+0x12>
 800b904:	9901      	ldr	r1, [sp, #4]
 800b906:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b90a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b90e:	4259      	negs	r1, r3
 800b910:	4159      	adcs	r1, r3
 800b912:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b916:	e7eb      	b.n	800b8f0 <__swhatbuf_r+0x24>

0800b918 <__smakebuf_r>:
 800b918:	898b      	ldrh	r3, [r1, #12]
 800b91a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b91c:	079d      	lsls	r5, r3, #30
 800b91e:	4606      	mov	r6, r0
 800b920:	460c      	mov	r4, r1
 800b922:	d507      	bpl.n	800b934 <__smakebuf_r+0x1c>
 800b924:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b928:	6023      	str	r3, [r4, #0]
 800b92a:	6123      	str	r3, [r4, #16]
 800b92c:	2301      	movs	r3, #1
 800b92e:	6163      	str	r3, [r4, #20]
 800b930:	b003      	add	sp, #12
 800b932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b934:	ab01      	add	r3, sp, #4
 800b936:	466a      	mov	r2, sp
 800b938:	f7ff ffc8 	bl	800b8cc <__swhatbuf_r>
 800b93c:	9f00      	ldr	r7, [sp, #0]
 800b93e:	4605      	mov	r5, r0
 800b940:	4639      	mov	r1, r7
 800b942:	4630      	mov	r0, r6
 800b944:	f7ff f976 	bl	800ac34 <_malloc_r>
 800b948:	b948      	cbnz	r0, 800b95e <__smakebuf_r+0x46>
 800b94a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b94e:	059a      	lsls	r2, r3, #22
 800b950:	d4ee      	bmi.n	800b930 <__smakebuf_r+0x18>
 800b952:	f023 0303 	bic.w	r3, r3, #3
 800b956:	f043 0302 	orr.w	r3, r3, #2
 800b95a:	81a3      	strh	r3, [r4, #12]
 800b95c:	e7e2      	b.n	800b924 <__smakebuf_r+0xc>
 800b95e:	89a3      	ldrh	r3, [r4, #12]
 800b960:	6020      	str	r0, [r4, #0]
 800b962:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b966:	81a3      	strh	r3, [r4, #12]
 800b968:	9b01      	ldr	r3, [sp, #4]
 800b96a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b96e:	b15b      	cbz	r3, 800b988 <__smakebuf_r+0x70>
 800b970:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b974:	4630      	mov	r0, r6
 800b976:	f000 f81d 	bl	800b9b4 <_isatty_r>
 800b97a:	b128      	cbz	r0, 800b988 <__smakebuf_r+0x70>
 800b97c:	89a3      	ldrh	r3, [r4, #12]
 800b97e:	f023 0303 	bic.w	r3, r3, #3
 800b982:	f043 0301 	orr.w	r3, r3, #1
 800b986:	81a3      	strh	r3, [r4, #12]
 800b988:	89a3      	ldrh	r3, [r4, #12]
 800b98a:	431d      	orrs	r5, r3
 800b98c:	81a5      	strh	r5, [r4, #12]
 800b98e:	e7cf      	b.n	800b930 <__smakebuf_r+0x18>

0800b990 <_fstat_r>:
 800b990:	b538      	push	{r3, r4, r5, lr}
 800b992:	4d07      	ldr	r5, [pc, #28]	@ (800b9b0 <_fstat_r+0x20>)
 800b994:	2300      	movs	r3, #0
 800b996:	4604      	mov	r4, r0
 800b998:	4608      	mov	r0, r1
 800b99a:	4611      	mov	r1, r2
 800b99c:	602b      	str	r3, [r5, #0]
 800b99e:	f7fc f9c0 	bl	8007d22 <_fstat>
 800b9a2:	1c43      	adds	r3, r0, #1
 800b9a4:	d102      	bne.n	800b9ac <_fstat_r+0x1c>
 800b9a6:	682b      	ldr	r3, [r5, #0]
 800b9a8:	b103      	cbz	r3, 800b9ac <_fstat_r+0x1c>
 800b9aa:	6023      	str	r3, [r4, #0]
 800b9ac:	bd38      	pop	{r3, r4, r5, pc}
 800b9ae:	bf00      	nop
 800b9b0:	20028150 	.word	0x20028150

0800b9b4 <_isatty_r>:
 800b9b4:	b538      	push	{r3, r4, r5, lr}
 800b9b6:	4d06      	ldr	r5, [pc, #24]	@ (800b9d0 <_isatty_r+0x1c>)
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	4604      	mov	r4, r0
 800b9bc:	4608      	mov	r0, r1
 800b9be:	602b      	str	r3, [r5, #0]
 800b9c0:	f7fc f9b4 	bl	8007d2c <_isatty>
 800b9c4:	1c43      	adds	r3, r0, #1
 800b9c6:	d102      	bne.n	800b9ce <_isatty_r+0x1a>
 800b9c8:	682b      	ldr	r3, [r5, #0]
 800b9ca:	b103      	cbz	r3, 800b9ce <_isatty_r+0x1a>
 800b9cc:	6023      	str	r3, [r4, #0]
 800b9ce:	bd38      	pop	{r3, r4, r5, pc}
 800b9d0:	20028150 	.word	0x20028150

0800b9d4 <_malloc_usable_size_r>:
 800b9d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9d8:	1f18      	subs	r0, r3, #4
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	bfbc      	itt	lt
 800b9de:	580b      	ldrlt	r3, [r1, r0]
 800b9e0:	18c0      	addlt	r0, r0, r3
 800b9e2:	4770      	bx	lr

0800b9e4 <_init>:
 800b9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9e6:	bf00      	nop
 800b9e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9ea:	bc08      	pop	{r3}
 800b9ec:	469e      	mov	lr, r3
 800b9ee:	4770      	bx	lr

0800b9f0 <_fini>:
 800b9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9f2:	bf00      	nop
 800b9f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9f6:	bc08      	pop	{r3}
 800b9f8:	469e      	mov	lr, r3
 800b9fa:	4770      	bx	lr
