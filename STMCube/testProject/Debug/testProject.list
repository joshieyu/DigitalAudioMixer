
testProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001492c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08014afc  08014afc  00015afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014bac  08014bac  000161c4  2**0
                  CONTENTS
  4 .ARM          00000008  08014bac  08014bac  00015bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014bb4  08014bb4  000161c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014bb4  08014bb4  00015bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014bb8  08014bb8  00015bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08014bbc  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000084  08014c40  00016084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000124  08014ce0  00016124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000995c  200001c4  08014d80  000161c4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20009b20  08014d80  00016b20  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000161c4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00040f20  00000000  00000000  000161f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008809  00000000  00000000  00057114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003400  00000000  00000000  0005f920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002840  00000000  00000000  00062d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00036c08  00000000  00000000  00065560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00046e7d  00000000  00000000  0009c168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0012b0e7  00000000  00000000  000e2fe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0020e0cc  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000e0f8  00000000  00000000  0020e110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000070  00000000  00000000  0021c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001c4 	.word	0x200001c4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08014ae4 	.word	0x08014ae4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001c8 	.word	0x200001c8
 800020c:	08014ae4 	.word	0x08014ae4

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr

0800050e <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800050e:	b480      	push	{r7}
 8000510:	b083      	sub	sp, #12
 8000512:	af00      	add	r7, sp, #0
 8000514:	6078      	str	r0, [r7, #4]
 8000516:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000518:	bf00      	nop
 800051a:	370c      	adds	r7, #12
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr

08000524 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
	...

08000534 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	60f8      	str	r0, [r7, #12]
 800053c:	60b9      	str	r1, [r7, #8]
 800053e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	4a07      	ldr	r2, [pc, #28]	@ (8000560 <vApplicationGetIdleTaskMemory+0x2c>)
 8000544:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000546:	68bb      	ldr	r3, [r7, #8]
 8000548:	4a06      	ldr	r2, [pc, #24]	@ (8000564 <vApplicationGetIdleTaskMemory+0x30>)
 800054a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	2280      	movs	r2, #128	@ 0x80
 8000550:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000552:	bf00      	nop
 8000554:	3714      	adds	r7, #20
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	200001e0 	.word	0x200001e0
 8000564:	20000284 	.word	0x20000284

08000568 <HAL_SAI_RxHalfCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	inBufPtr = &adcData[0];
 8000570:	4b07      	ldr	r3, [pc, #28]	@ (8000590 <HAL_SAI_RxHalfCpltCallback+0x28>)
 8000572:	4a08      	ldr	r2, [pc, #32]	@ (8000594 <HAL_SAI_RxHalfCpltCallback+0x2c>)
 8000574:	601a      	str	r2, [r3, #0]
	outBufPtr = &dacData[0];
 8000576:	4b08      	ldr	r3, [pc, #32]	@ (8000598 <HAL_SAI_RxHalfCpltCallback+0x30>)
 8000578:	4a08      	ldr	r2, [pc, #32]	@ (800059c <HAL_SAI_RxHalfCpltCallback+0x34>)
 800057a:	601a      	str	r2, [r3, #0]

	dataReadyFlag = 1;
 800057c:	4b08      	ldr	r3, [pc, #32]	@ (80005a0 <HAL_SAI_RxHalfCpltCallback+0x38>)
 800057e:	2201      	movs	r2, #1
 8000580:	701a      	strb	r2, [r3, #0]
}
 8000582:	bf00      	nop
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	20001030 	.word	0x20001030
 8000594:	20000e30 	.word	0x20000e30
 8000598:	20000000 	.word	0x20000000
 800059c:	20000f30 	.word	0x20000f30
 80005a0:	20001034 	.word	0x20001034

080005a4 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai) {
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	inBufPtr = &adcData[BUFFER_SIZE/2];
 80005ac:	4b07      	ldr	r3, [pc, #28]	@ (80005cc <HAL_SAI_RxCpltCallback+0x28>)
 80005ae:	4a08      	ldr	r2, [pc, #32]	@ (80005d0 <HAL_SAI_RxCpltCallback+0x2c>)
 80005b0:	601a      	str	r2, [r3, #0]
	outBufPtr = &dacData[BUFFER_SIZE/2];
 80005b2:	4b08      	ldr	r3, [pc, #32]	@ (80005d4 <HAL_SAI_RxCpltCallback+0x30>)
 80005b4:	4a08      	ldr	r2, [pc, #32]	@ (80005d8 <HAL_SAI_RxCpltCallback+0x34>)
 80005b6:	601a      	str	r2, [r3, #0]

	dataReadyFlag = 1;
 80005b8:	4b08      	ldr	r3, [pc, #32]	@ (80005dc <HAL_SAI_RxCpltCallback+0x38>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	701a      	strb	r2, [r3, #0]
}
 80005be:	bf00      	nop
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	20001030 	.word	0x20001030
 80005d0:	20000eb0 	.word	0x20000eb0
 80005d4:	20000000 	.word	0x20000000
 80005d8:	20000fb0 	.word	0x20000fb0
 80005dc:	20001034 	.word	0x20001034

080005e0 <processData>:

void processData() {
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0

	static float leftIn, leftOut;
	static float rightIn, rightOut;

	for (uint8_t n = 0; n < (BUFFER_SIZE/2) - 1; n += 2) {
 80005e6:	2300      	movs	r3, #0
 80005e8:	71fb      	strb	r3, [r7, #7]
 80005ea:	e07c      	b.n	80006e6 <processData+0x106>

		// Left Channel

		// Get ADC input, convert to float
		leftIn = INT16_TO_FLOAT * inBufPtr[n];
 80005ec:	4b44      	ldr	r3, [pc, #272]	@ (8000700 <processData+0x120>)
 80005ee:	681a      	ldr	r2, [r3, #0]
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	005b      	lsls	r3, r3, #1
 80005f4:	4413      	add	r3, r2
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	b21b      	sxth	r3, r3
 80005fa:	ee07 3a90 	vmov	s15, r3
 80005fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000602:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8000704 <processData+0x124>
 8000606:	ee67 7a87 	vmul.f32	s15, s15, s14
 800060a:	4b3f      	ldr	r3, [pc, #252]	@ (8000708 <processData+0x128>)
 800060c:	edc3 7a00 	vstr	s15, [r3]
		if (leftIn > 1.0f) {
 8000610:	4b3d      	ldr	r3, [pc, #244]	@ (8000708 <processData+0x128>)
 8000612:	edd3 7a00 	vldr	s15, [r3]
 8000616:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800061a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800061e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000622:	dd09      	ble.n	8000638 <processData+0x58>
			leftIn -= 2.0f;
 8000624:	4b38      	ldr	r3, [pc, #224]	@ (8000708 <processData+0x128>)
 8000626:	edd3 7a00 	vldr	s15, [r3]
 800062a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800062e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000632:	4b35      	ldr	r3, [pc, #212]	@ (8000708 <processData+0x128>)
 8000634:	edc3 7a00 	vstr	s15, [r3]
		}

		leftOut = leftIn;
 8000638:	4b33      	ldr	r3, [pc, #204]	@ (8000708 <processData+0x128>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a33      	ldr	r2, [pc, #204]	@ (800070c <processData+0x12c>)
 800063e:	6013      	str	r3, [r2, #0]

		// Convert back to signed int and set DAC output
		outBufPtr[n] = (int16_t) (FLOAT_TO_INT16 * leftOut);
 8000640:	4b32      	ldr	r3, [pc, #200]	@ (800070c <processData+0x12c>)
 8000642:	edd3 7a00 	vldr	s15, [r3]
 8000646:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8000710 <processData+0x130>
 800064a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800064e:	4b31      	ldr	r3, [pc, #196]	@ (8000714 <processData+0x134>)
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	4413      	add	r3, r2
 8000658:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800065c:	ee17 2a90 	vmov	r2, s15
 8000660:	b212      	sxth	r2, r2
 8000662:	801a      	strh	r2, [r3, #0]

		// Right Channel

		// Get ADC input, convert to float
		rightIn = INT16_TO_FLOAT * inBufPtr[n + 1];
 8000664:	4b26      	ldr	r3, [pc, #152]	@ (8000700 <processData+0x120>)
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	3301      	adds	r3, #1
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	4413      	add	r3, r2
 8000670:	881b      	ldrh	r3, [r3, #0]
 8000672:	b21b      	sxth	r3, r3
 8000674:	ee07 3a90 	vmov	s15, r3
 8000678:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800067c:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8000704 <processData+0x124>
 8000680:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000684:	4b24      	ldr	r3, [pc, #144]	@ (8000718 <processData+0x138>)
 8000686:	edc3 7a00 	vstr	s15, [r3]
		if (rightIn > 1.0f) {
 800068a:	4b23      	ldr	r3, [pc, #140]	@ (8000718 <processData+0x138>)
 800068c:	edd3 7a00 	vldr	s15, [r3]
 8000690:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000694:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800069c:	dd09      	ble.n	80006b2 <processData+0xd2>
			rightIn -= 2.0f;
 800069e:	4b1e      	ldr	r3, [pc, #120]	@ (8000718 <processData+0x138>)
 80006a0:	edd3 7a00 	vldr	s15, [r3]
 80006a4:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80006a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80006ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000718 <processData+0x138>)
 80006ae:	edc3 7a00 	vstr	s15, [r3]
		}

		rightOut = rightIn;
 80006b2:	4b19      	ldr	r3, [pc, #100]	@ (8000718 <processData+0x138>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a19      	ldr	r2, [pc, #100]	@ (800071c <processData+0x13c>)
 80006b8:	6013      	str	r3, [r2, #0]

		// convert back to signed int and set DAC output
		outBufPtr[n + 1] = (int16_t) (FLOAT_TO_INT16 * rightOut);
 80006ba:	4b18      	ldr	r3, [pc, #96]	@ (800071c <processData+0x13c>)
 80006bc:	edd3 7a00 	vldr	s15, [r3]
 80006c0:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8000710 <processData+0x130>
 80006c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006c8:	4b12      	ldr	r3, [pc, #72]	@ (8000714 <processData+0x134>)
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	3301      	adds	r3, #1
 80006d0:	005b      	lsls	r3, r3, #1
 80006d2:	4413      	add	r3, r2
 80006d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006d8:	ee17 2a90 	vmov	r2, s15
 80006dc:	b212      	sxth	r2, r2
 80006de:	801a      	strh	r2, [r3, #0]
	for (uint8_t n = 0; n < (BUFFER_SIZE/2) - 1; n += 2) {
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	3302      	adds	r3, #2
 80006e4:	71fb      	strb	r3, [r7, #7]
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80006ea:	f67f af7f 	bls.w	80005ec <processData+0xc>
	}

	dataReadyFlag = 0;
 80006ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <processData+0x140>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	701a      	strb	r2, [r3, #0]
}
 80006f4:	bf00      	nop
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	20001030 	.word	0x20001030
 8000704:	38000000 	.word	0x38000000
 8000708:	20001038 	.word	0x20001038
 800070c:	2000103c 	.word	0x2000103c
 8000710:	47000000 	.word	0x47000000
 8000714:	20000000 	.word	0x20000000
 8000718:	20001040 	.word	0x20001040
 800071c:	20001044 	.word	0x20001044
 8000720:	20001034 	.word	0x20001034

08000724 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000724:	b5b0      	push	{r4, r5, r7, lr}
 8000726:	b088      	sub	sp, #32
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072a:	f002 fcfa 	bl	8003122 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800072e:	f000 f86d 	bl	800080c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000732:	f000 f8dd 	bl	80008f0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000736:	f001 f8bd 	bl	80018b4 <MX_GPIO_Init>
  MX_DMA_Init();
 800073a:	f001 f845 	bl	80017c8 <MX_DMA_Init>
  MX_CRC_Init();
 800073e:	f000 f95b 	bl	80009f8 <MX_CRC_Init>
  MX_DCMI_Init();
 8000742:	f000 f97b 	bl	8000a3c <MX_DCMI_Init>
  MX_DMA2D_Init();
 8000746:	f000 f9ad 	bl	8000aa4 <MX_DMA2D_Init>
  MX_ETH_Init();
 800074a:	f000 f9dd 	bl	8000b08 <MX_ETH_Init>
  MX_FMC_Init();
 800074e:	f001 f861 	bl	8001814 <MX_FMC_Init>
  MX_I2C1_Init();
 8000752:	f000 fa27 	bl	8000ba4 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000756:	f000 fa65 	bl	8000c24 <MX_I2C3_Init>
  MX_LTDC_Init();
 800075a:	f000 faa3 	bl	8000ca4 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 800075e:	f000 fb23 	bl	8000da8 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8000762:	f000 fb4d 	bl	8000e00 <MX_RTC_Init>
  MX_SAI2_Init();
 8000766:	f000 fbef 	bl	8000f48 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 800076a:	f000 fc91 	bl	8001090 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 800076e:	f000 fcb1 	bl	80010d4 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8000772:	f000 fcdf 	bl	8001134 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000776:	f000 fd1b 	bl	80011b0 <MX_TIM1_Init>
  MX_TIM2_Init();
 800077a:	f000 fdc5 	bl	8001308 <MX_TIM2_Init>
  MX_TIM3_Init();
 800077e:	f000 fe39 	bl	80013f4 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000782:	f000 feaf 	bl	80014e4 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000786:	f000 ff25 	bl	80015d4 <MX_TIM8_Init>
  MX_TIM12_Init();
 800078a:	f000 ff77 	bl	800167c <MX_TIM12_Init>
  MX_USART1_UART_Init();
 800078e:	f000 ffbb 	bl	8001708 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000792:	f000 ffe9 	bl	8001768 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000796:	f00e fc03 	bl	800efa0 <MX_FATFS_Init>
  MX_ADC3_Init();
 800079a:	f000 f8db 	bl	8000954 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  HAL_StatusTypeDef transmitStatus = HAL_SAI_Transmit_DMA(&hsai_BlockB2, (uint8_t *)dacData, BUFFER_SIZE_IN_BYTES);
 800079e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007a2:	4914      	ldr	r1, [pc, #80]	@ (80007f4 <main+0xd0>)
 80007a4:	4814      	ldr	r0, [pc, #80]	@ (80007f8 <main+0xd4>)
 80007a6:	f009 faa3 	bl	8009cf0 <HAL_SAI_Transmit_DMA>
 80007aa:	4603      	mov	r3, r0
 80007ac:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef receiveStatus = HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t *)adcData, BUFFER_SIZE_IN_BYTES);
 80007ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007b2:	4912      	ldr	r1, [pc, #72]	@ (80007fc <main+0xd8>)
 80007b4:	4810      	ldr	r0, [pc, #64]	@ (80007f8 <main+0xd4>)
 80007b6:	f009 fb4b 	bl	8009e50 <HAL_SAI_Receive_DMA>
 80007ba:	4603      	mov	r3, r0
 80007bc:	77bb      	strb	r3, [r7, #30]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 80007be:	4b10      	ldr	r3, [pc, #64]	@ (8000800 <main+0xdc>)
 80007c0:	463c      	mov	r4, r7
 80007c2:	461d      	mov	r5, r3
 80007c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80007d0:	463b      	mov	r3, r7
 80007d2:	2100      	movs	r1, #0
 80007d4:	4618      	mov	r0, r3
 80007d6:	f011 f9b9 	bl	8011b4c <osThreadCreate>
 80007da:	4603      	mov	r3, r0
 80007dc:	4a09      	ldr	r2, [pc, #36]	@ (8000804 <main+0xe0>)
 80007de:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80007e0:	f011 f991 	bl	8011b06 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (dataReadyFlag) {
 80007e4:	4b08      	ldr	r3, [pc, #32]	@ (8000808 <main+0xe4>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d0fb      	beq.n	80007e4 <main+0xc0>
		  processData();
 80007ec:	f7ff fef8 	bl	80005e0 <processData>
	  if (dataReadyFlag) {
 80007f0:	e7f8      	b.n	80007e4 <main+0xc0>
 80007f2:	bf00      	nop
 80007f4:	20000f30 	.word	0x20000f30
 80007f8:	200008a8 	.word	0x200008a8
 80007fc:	20000e30 	.word	0x20000e30
 8000800:	08014b08 	.word	0x08014b08
 8000804:	20000e2c 	.word	0x20000e2c
 8000808:	20001034 	.word	0x20001034

0800080c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b094      	sub	sp, #80	@ 0x50
 8000810:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000812:	f107 0320 	add.w	r3, r7, #32
 8000816:	2230      	movs	r2, #48	@ 0x30
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f014 f870 	bl	8014900 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000830:	f007 f9fe 	bl	8007c30 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000834:	4b2c      	ldr	r3, [pc, #176]	@ (80008e8 <SystemClock_Config+0xdc>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000838:	4a2b      	ldr	r2, [pc, #172]	@ (80008e8 <SystemClock_Config+0xdc>)
 800083a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800083e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000840:	4b29      	ldr	r3, [pc, #164]	@ (80008e8 <SystemClock_Config+0xdc>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000844:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800084c:	4b27      	ldr	r3, [pc, #156]	@ (80008ec <SystemClock_Config+0xe0>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a26      	ldr	r2, [pc, #152]	@ (80008ec <SystemClock_Config+0xe0>)
 8000852:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000856:	6013      	str	r3, [r2, #0]
 8000858:	4b24      	ldr	r3, [pc, #144]	@ (80008ec <SystemClock_Config+0xe0>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000864:	2309      	movs	r3, #9
 8000866:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000868:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800086c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800086e:	2301      	movs	r3, #1
 8000870:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000872:	2302      	movs	r3, #2
 8000874:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000876:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800087a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800087c:	2319      	movs	r3, #25
 800087e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000880:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000884:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000886:	2302      	movs	r3, #2
 8000888:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800088a:	2309      	movs	r3, #9
 800088c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088e:	f107 0320 	add.w	r3, r7, #32
 8000892:	4618      	mov	r0, r3
 8000894:	f007 faee 	bl	8007e74 <HAL_RCC_OscConfig>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800089e:	f001 f9e3 	bl	8001c68 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008a2:	f007 f9d5 	bl	8007c50 <HAL_PWREx_EnableOverDrive>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80008ac:	f001 f9dc 	bl	8001c68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b0:	230f      	movs	r3, #15
 80008b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b4:	2302      	movs	r3, #2
 80008b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008bc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80008c8:	f107 030c 	add.w	r3, r7, #12
 80008cc:	2106      	movs	r1, #6
 80008ce:	4618      	mov	r0, r3
 80008d0:	f007 fd74 	bl	80083bc <HAL_RCC_ClockConfig>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80008da:	f001 f9c5 	bl	8001c68 <Error_Handler>
  }
}
 80008de:	bf00      	nop
 80008e0:	3750      	adds	r7, #80	@ 0x50
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40007000 	.word	0x40007000

080008f0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b0a2      	sub	sp, #136	@ 0x88
 80008f4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	2284      	movs	r2, #132	@ 0x84
 80008fa:	2100      	movs	r1, #0
 80008fc:	4618      	mov	r0, r3
 80008fe:	f013 ffff 	bl	8014900 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 8000902:	4b13      	ldr	r3, [pc, #76]	@ (8000950 <PeriphCommonClock_Config+0x60>)
 8000904:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000906:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800090a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800090c:	2305      	movs	r3, #5
 800090e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000910:	2302      	movs	r3, #2
 8000912:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000914:	2303      	movs	r3, #3
 8000916:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000918:	2301      	movs	r3, #1
 800091a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800091c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000920:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000922:	2300      	movs	r3, #0
 8000924:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000926:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800092a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800092e:	2300      	movs	r3, #0
 8000930:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	4618      	mov	r0, r3
 8000938:	f007 ff58 	bl	80087ec <HAL_RCCEx_PeriphCLKConfig>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000942:	f001 f991 	bl	8001c68 <Error_Handler>
  }
}
 8000946:	bf00      	nop
 8000948:	3788      	adds	r7, #136	@ 0x88
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	00b00008 	.word	0x00b00008

08000954 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800095a:	463b      	mov	r3, r7
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000966:	4b21      	ldr	r3, [pc, #132]	@ (80009ec <MX_ADC3_Init+0x98>)
 8000968:	4a21      	ldr	r2, [pc, #132]	@ (80009f0 <MX_ADC3_Init+0x9c>)
 800096a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800096c:	4b1f      	ldr	r3, [pc, #124]	@ (80009ec <MX_ADC3_Init+0x98>)
 800096e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000972:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000974:	4b1d      	ldr	r3, [pc, #116]	@ (80009ec <MX_ADC3_Init+0x98>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800097a:	4b1c      	ldr	r3, [pc, #112]	@ (80009ec <MX_ADC3_Init+0x98>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000980:	4b1a      	ldr	r3, [pc, #104]	@ (80009ec <MX_ADC3_Init+0x98>)
 8000982:	2200      	movs	r2, #0
 8000984:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000986:	4b19      	ldr	r3, [pc, #100]	@ (80009ec <MX_ADC3_Init+0x98>)
 8000988:	2200      	movs	r2, #0
 800098a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800098e:	4b17      	ldr	r3, [pc, #92]	@ (80009ec <MX_ADC3_Init+0x98>)
 8000990:	2200      	movs	r2, #0
 8000992:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000994:	4b15      	ldr	r3, [pc, #84]	@ (80009ec <MX_ADC3_Init+0x98>)
 8000996:	4a17      	ldr	r2, [pc, #92]	@ (80009f4 <MX_ADC3_Init+0xa0>)
 8000998:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800099a:	4b14      	ldr	r3, [pc, #80]	@ (80009ec <MX_ADC3_Init+0x98>)
 800099c:	2200      	movs	r2, #0
 800099e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80009a0:	4b12      	ldr	r3, [pc, #72]	@ (80009ec <MX_ADC3_Init+0x98>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80009a6:	4b11      	ldr	r3, [pc, #68]	@ (80009ec <MX_ADC3_Init+0x98>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009ae:	4b0f      	ldr	r3, [pc, #60]	@ (80009ec <MX_ADC3_Init+0x98>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80009b4:	480d      	ldr	r0, [pc, #52]	@ (80009ec <MX_ADC3_Init+0x98>)
 80009b6:	f002 fc05 	bl	80031c4 <HAL_ADC_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80009c0:	f001 f952 	bl	8001c68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80009c4:	2304      	movs	r3, #4
 80009c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009c8:	2301      	movs	r3, #1
 80009ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009cc:	2300      	movs	r3, #0
 80009ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009d0:	463b      	mov	r3, r7
 80009d2:	4619      	mov	r1, r3
 80009d4:	4805      	ldr	r0, [pc, #20]	@ (80009ec <MX_ADC3_Init+0x98>)
 80009d6:	f002 fc39 	bl	800324c <HAL_ADC_ConfigChannel>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80009e0:	f001 f942 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80009e4:	bf00      	nop
 80009e6:	3710      	adds	r7, #16
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	200004bc 	.word	0x200004bc
 80009f0:	40012200 	.word	0x40012200
 80009f4:	0f000001 	.word	0x0f000001

080009f8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80009fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000a34 <MX_CRC_Init+0x3c>)
 80009fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000a38 <MX_CRC_Init+0x40>)
 8000a00:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000a02:	4b0c      	ldr	r3, [pc, #48]	@ (8000a34 <MX_CRC_Init+0x3c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000a08:	4b0a      	ldr	r3, [pc, #40]	@ (8000a34 <MX_CRC_Init+0x3c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000a0e:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <MX_CRC_Init+0x3c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000a14:	4b07      	ldr	r3, [pc, #28]	@ (8000a34 <MX_CRC_Init+0x3c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000a1a:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <MX_CRC_Init+0x3c>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a20:	4804      	ldr	r0, [pc, #16]	@ (8000a34 <MX_CRC_Init+0x3c>)
 8000a22:	f002 ff45 	bl	80038b0 <HAL_CRC_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000a2c:	f001 f91c 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20000504 	.word	0x20000504
 8000a38:	40023000 	.word	0x40023000

08000a3c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000a40:	4b16      	ldr	r3, [pc, #88]	@ (8000a9c <MX_DCMI_Init+0x60>)
 8000a42:	4a17      	ldr	r2, [pc, #92]	@ (8000aa0 <MX_DCMI_Init+0x64>)
 8000a44:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000a46:	4b15      	ldr	r3, [pc, #84]	@ (8000a9c <MX_DCMI_Init+0x60>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000a4c:	4b13      	ldr	r3, [pc, #76]	@ (8000a9c <MX_DCMI_Init+0x60>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000a52:	4b12      	ldr	r3, [pc, #72]	@ (8000a9c <MX_DCMI_Init+0x60>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000a58:	4b10      	ldr	r3, [pc, #64]	@ (8000a9c <MX_DCMI_Init+0x60>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a9c <MX_DCMI_Init+0x60>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000a64:	4b0d      	ldr	r3, [pc, #52]	@ (8000a9c <MX_DCMI_Init+0x60>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a9c <MX_DCMI_Init+0x60>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000a70:	4b0a      	ldr	r3, [pc, #40]	@ (8000a9c <MX_DCMI_Init+0x60>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000a76:	4b09      	ldr	r3, [pc, #36]	@ (8000a9c <MX_DCMI_Init+0x60>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000a7c:	4b07      	ldr	r3, [pc, #28]	@ (8000a9c <MX_DCMI_Init+0x60>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000a82:	4b06      	ldr	r3, [pc, #24]	@ (8000a9c <MX_DCMI_Init+0x60>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000a88:	4804      	ldr	r0, [pc, #16]	@ (8000a9c <MX_DCMI_Init+0x60>)
 8000a8a:	f003 f803 	bl	8003a94 <HAL_DCMI_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000a94:	f001 f8e8 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000528 	.word	0x20000528
 8000aa0:	50050000 	.word	0x50050000

08000aa4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000aa8:	4b15      	ldr	r3, [pc, #84]	@ (8000b00 <MX_DMA2D_Init+0x5c>)
 8000aaa:	4a16      	ldr	r2, [pc, #88]	@ (8000b04 <MX_DMA2D_Init+0x60>)
 8000aac:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000aae:	4b14      	ldr	r3, [pc, #80]	@ (8000b00 <MX_DMA2D_Init+0x5c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000ab4:	4b12      	ldr	r3, [pc, #72]	@ (8000b00 <MX_DMA2D_Init+0x5c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000aba:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <MX_DMA2D_Init+0x5c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <MX_DMA2D_Init+0x5c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b00 <MX_DMA2D_Init+0x5c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <MX_DMA2D_Init+0x5c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b00 <MX_DMA2D_Init+0x5c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000ad8:	4809      	ldr	r0, [pc, #36]	@ (8000b00 <MX_DMA2D_Init+0x5c>)
 8000ada:	f003 fbd9 	bl	8004290 <HAL_DMA2D_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000ae4:	f001 f8c0 	bl	8001c68 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000ae8:	2101      	movs	r1, #1
 8000aea:	4805      	ldr	r0, [pc, #20]	@ (8000b00 <MX_DMA2D_Init+0x5c>)
 8000aec:	f003 fd2a 	bl	8004544 <HAL_DMA2D_ConfigLayer>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000af6:	f001 f8b7 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000578 	.word	0x20000578
 8000b04:	4002b000 	.word	0x4002b000

08000b08 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000b0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000b8c <MX_ETH_Init+0x84>)
 8000b0e:	4a20      	ldr	r2, [pc, #128]	@ (8000b90 <MX_ETH_Init+0x88>)
 8000b10:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000b12:	4b20      	ldr	r3, [pc, #128]	@ (8000b94 <MX_ETH_Init+0x8c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000b18:	4b1e      	ldr	r3, [pc, #120]	@ (8000b94 <MX_ETH_Init+0x8c>)
 8000b1a:	2280      	movs	r2, #128	@ 0x80
 8000b1c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000b1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000b94 <MX_ETH_Init+0x8c>)
 8000b20:	22e1      	movs	r2, #225	@ 0xe1
 8000b22:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000b24:	4b1b      	ldr	r3, [pc, #108]	@ (8000b94 <MX_ETH_Init+0x8c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000b2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000b94 <MX_ETH_Init+0x8c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000b30:	4b18      	ldr	r3, [pc, #96]	@ (8000b94 <MX_ETH_Init+0x8c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000b36:	4b15      	ldr	r3, [pc, #84]	@ (8000b8c <MX_ETH_Init+0x84>)
 8000b38:	4a16      	ldr	r2, [pc, #88]	@ (8000b94 <MX_ETH_Init+0x8c>)
 8000b3a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000b3c:	4b13      	ldr	r3, [pc, #76]	@ (8000b8c <MX_ETH_Init+0x84>)
 8000b3e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000b42:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000b44:	4b11      	ldr	r3, [pc, #68]	@ (8000b8c <MX_ETH_Init+0x84>)
 8000b46:	4a14      	ldr	r2, [pc, #80]	@ (8000b98 <MX_ETH_Init+0x90>)
 8000b48:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000b4a:	4b10      	ldr	r3, [pc, #64]	@ (8000b8c <MX_ETH_Init+0x84>)
 8000b4c:	4a13      	ldr	r2, [pc, #76]	@ (8000b9c <MX_ETH_Init+0x94>)
 8000b4e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000b50:	4b0e      	ldr	r3, [pc, #56]	@ (8000b8c <MX_ETH_Init+0x84>)
 8000b52:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000b56:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000b58:	480c      	ldr	r0, [pc, #48]	@ (8000b8c <MX_ETH_Init+0x84>)
 8000b5a:	f003 fd85 	bl	8004668 <HAL_ETH_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000b64:	f001 f880 	bl	8001c68 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000b68:	2238      	movs	r2, #56	@ 0x38
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	480c      	ldr	r0, [pc, #48]	@ (8000ba0 <MX_ETH_Init+0x98>)
 8000b6e:	f013 fec7 	bl	8014900 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba0 <MX_ETH_Init+0x98>)
 8000b74:	2221      	movs	r2, #33	@ 0x21
 8000b76:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b78:	4b09      	ldr	r3, [pc, #36]	@ (8000ba0 <MX_ETH_Init+0x98>)
 8000b7a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000b7e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000b80:	4b07      	ldr	r3, [pc, #28]	@ (8000ba0 <MX_ETH_Init+0x98>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200005b8 	.word	0x200005b8
 8000b90:	40028000 	.word	0x40028000
 8000b94:	20001048 	.word	0x20001048
 8000b98:	20000124 	.word	0x20000124
 8000b9c:	20000084 	.word	0x20000084
 8000ba0:	20000484 	.word	0x20000484

08000ba4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c18 <MX_I2C1_Init+0x74>)
 8000baa:	4a1c      	ldr	r2, [pc, #112]	@ (8000c1c <MX_I2C1_Init+0x78>)
 8000bac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000bae:	4b1a      	ldr	r3, [pc, #104]	@ (8000c18 <MX_I2C1_Init+0x74>)
 8000bb0:	4a1b      	ldr	r2, [pc, #108]	@ (8000c20 <MX_I2C1_Init+0x7c>)
 8000bb2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000bb4:	4b18      	ldr	r3, [pc, #96]	@ (8000c18 <MX_I2C1_Init+0x74>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bba:	4b17      	ldr	r3, [pc, #92]	@ (8000c18 <MX_I2C1_Init+0x74>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bc0:	4b15      	ldr	r3, [pc, #84]	@ (8000c18 <MX_I2C1_Init+0x74>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000bc6:	4b14      	ldr	r3, [pc, #80]	@ (8000c18 <MX_I2C1_Init+0x74>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bcc:	4b12      	ldr	r3, [pc, #72]	@ (8000c18 <MX_I2C1_Init+0x74>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bd2:	4b11      	ldr	r3, [pc, #68]	@ (8000c18 <MX_I2C1_Init+0x74>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c18 <MX_I2C1_Init+0x74>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bde:	480e      	ldr	r0, [pc, #56]	@ (8000c18 <MX_I2C1_Init+0x74>)
 8000be0:	f006 fb88 	bl	80072f4 <HAL_I2C_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000bea:	f001 f83d 	bl	8001c68 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4809      	ldr	r0, [pc, #36]	@ (8000c18 <MX_I2C1_Init+0x74>)
 8000bf2:	f006 fc1b 	bl	800742c <HAL_I2CEx_ConfigAnalogFilter>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000bfc:	f001 f834 	bl	8001c68 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c00:	2100      	movs	r1, #0
 8000c02:	4805      	ldr	r0, [pc, #20]	@ (8000c18 <MX_I2C1_Init+0x74>)
 8000c04:	f006 fc5d 	bl	80074c2 <HAL_I2CEx_ConfigDigitalFilter>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c0e:	f001 f82b 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000668 	.word	0x20000668
 8000c1c:	40005400 	.word	0x40005400
 8000c20:	00c0eaff 	.word	0x00c0eaff

08000c24 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000c28:	4b1b      	ldr	r3, [pc, #108]	@ (8000c98 <MX_I2C3_Init+0x74>)
 8000c2a:	4a1c      	ldr	r2, [pc, #112]	@ (8000c9c <MX_I2C3_Init+0x78>)
 8000c2c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000c2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c98 <MX_I2C3_Init+0x74>)
 8000c30:	4a1b      	ldr	r2, [pc, #108]	@ (8000ca0 <MX_I2C3_Init+0x7c>)
 8000c32:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000c34:	4b18      	ldr	r3, [pc, #96]	@ (8000c98 <MX_I2C3_Init+0x74>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c3a:	4b17      	ldr	r3, [pc, #92]	@ (8000c98 <MX_I2C3_Init+0x74>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c40:	4b15      	ldr	r3, [pc, #84]	@ (8000c98 <MX_I2C3_Init+0x74>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000c46:	4b14      	ldr	r3, [pc, #80]	@ (8000c98 <MX_I2C3_Init+0x74>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c4c:	4b12      	ldr	r3, [pc, #72]	@ (8000c98 <MX_I2C3_Init+0x74>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c52:	4b11      	ldr	r3, [pc, #68]	@ (8000c98 <MX_I2C3_Init+0x74>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c58:	4b0f      	ldr	r3, [pc, #60]	@ (8000c98 <MX_I2C3_Init+0x74>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000c5e:	480e      	ldr	r0, [pc, #56]	@ (8000c98 <MX_I2C3_Init+0x74>)
 8000c60:	f006 fb48 	bl	80072f4 <HAL_I2C_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000c6a:	f000 fffd 	bl	8001c68 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4809      	ldr	r0, [pc, #36]	@ (8000c98 <MX_I2C3_Init+0x74>)
 8000c72:	f006 fbdb 	bl	800742c <HAL_I2CEx_ConfigAnalogFilter>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000c7c:	f000 fff4 	bl	8001c68 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000c80:	2100      	movs	r1, #0
 8000c82:	4805      	ldr	r0, [pc, #20]	@ (8000c98 <MX_I2C3_Init+0x74>)
 8000c84:	f006 fc1d 	bl	80074c2 <HAL_I2CEx_ConfigDigitalFilter>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000c8e:	f000 ffeb 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	200006bc 	.word	0x200006bc
 8000c9c:	40005c00 	.word	0x40005c00
 8000ca0:	00c0eaff 	.word	0x00c0eaff

08000ca4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08e      	sub	sp, #56	@ 0x38
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	2234      	movs	r2, #52	@ 0x34
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f013 fe25 	bl	8014900 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000cb6:	4b3a      	ldr	r3, [pc, #232]	@ (8000da0 <MX_LTDC_Init+0xfc>)
 8000cb8:	4a3a      	ldr	r2, [pc, #232]	@ (8000da4 <MX_LTDC_Init+0x100>)
 8000cba:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000cbc:	4b38      	ldr	r3, [pc, #224]	@ (8000da0 <MX_LTDC_Init+0xfc>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000cc2:	4b37      	ldr	r3, [pc, #220]	@ (8000da0 <MX_LTDC_Init+0xfc>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000cc8:	4b35      	ldr	r3, [pc, #212]	@ (8000da0 <MX_LTDC_Init+0xfc>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000cce:	4b34      	ldr	r3, [pc, #208]	@ (8000da0 <MX_LTDC_Init+0xfc>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000cd4:	4b32      	ldr	r3, [pc, #200]	@ (8000da0 <MX_LTDC_Init+0xfc>)
 8000cd6:	2228      	movs	r2, #40	@ 0x28
 8000cd8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000cda:	4b31      	ldr	r3, [pc, #196]	@ (8000da0 <MX_LTDC_Init+0xfc>)
 8000cdc:	2209      	movs	r2, #9
 8000cde:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000ce0:	4b2f      	ldr	r3, [pc, #188]	@ (8000da0 <MX_LTDC_Init+0xfc>)
 8000ce2:	2235      	movs	r2, #53	@ 0x35
 8000ce4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000ce6:	4b2e      	ldr	r3, [pc, #184]	@ (8000da0 <MX_LTDC_Init+0xfc>)
 8000ce8:	220b      	movs	r2, #11
 8000cea:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000cec:	4b2c      	ldr	r3, [pc, #176]	@ (8000da0 <MX_LTDC_Init+0xfc>)
 8000cee:	f240 2215 	movw	r2, #533	@ 0x215
 8000cf2:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000cf4:	4b2a      	ldr	r3, [pc, #168]	@ (8000da0 <MX_LTDC_Init+0xfc>)
 8000cf6:	f240 121b 	movw	r2, #283	@ 0x11b
 8000cfa:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 8000cfc:	4b28      	ldr	r3, [pc, #160]	@ (8000da0 <MX_LTDC_Init+0xfc>)
 8000cfe:	f240 2235 	movw	r2, #565	@ 0x235
 8000d02:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000d04:	4b26      	ldr	r3, [pc, #152]	@ (8000da0 <MX_LTDC_Init+0xfc>)
 8000d06:	f240 121d 	movw	r2, #285	@ 0x11d
 8000d0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000d0c:	4b24      	ldr	r3, [pc, #144]	@ (8000da0 <MX_LTDC_Init+0xfc>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000d14:	4b22      	ldr	r3, [pc, #136]	@ (8000da0 <MX_LTDC_Init+0xfc>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000d1c:	4b20      	ldr	r3, [pc, #128]	@ (8000da0 <MX_LTDC_Init+0xfc>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000d24:	481e      	ldr	r0, [pc, #120]	@ (8000da0 <MX_LTDC_Init+0xfc>)
 8000d26:	f006 fc19 	bl	800755c <HAL_LTDC_Init>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000d30:	f000 ff9a 	bl	8001c68 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000d38:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000d3c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000d42:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8000d46:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000d4c:	23ff      	movs	r3, #255	@ 0xff
 8000d4e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000d54:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d58:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000d5a:	2307      	movs	r3, #7
 8000d5c:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000d5e:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8000d62:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8000d64:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8000d6a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8000d6e:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	2200      	movs	r2, #0
 8000d86:	4619      	mov	r1, r3
 8000d88:	4805      	ldr	r0, [pc, #20]	@ (8000da0 <MX_LTDC_Init+0xfc>)
 8000d8a:	f006 fd79 	bl	8007880 <HAL_LTDC_ConfigLayer>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000d94:	f000 ff68 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000d98:	bf00      	nop
 8000d9a:	3738      	adds	r7, #56	@ 0x38
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000710 	.word	0x20000710
 8000da4:	40016800 	.word	0x40016800

08000da8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000dac:	4b12      	ldr	r3, [pc, #72]	@ (8000df8 <MX_QUADSPI_Init+0x50>)
 8000dae:	4a13      	ldr	r2, [pc, #76]	@ (8000dfc <MX_QUADSPI_Init+0x54>)
 8000db0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000db2:	4b11      	ldr	r3, [pc, #68]	@ (8000df8 <MX_QUADSPI_Init+0x50>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000db8:	4b0f      	ldr	r3, [pc, #60]	@ (8000df8 <MX_QUADSPI_Init+0x50>)
 8000dba:	2204      	movs	r2, #4
 8000dbc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000df8 <MX_QUADSPI_Init+0x50>)
 8000dc0:	2210      	movs	r2, #16
 8000dc2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000df8 <MX_QUADSPI_Init+0x50>)
 8000dc6:	2218      	movs	r2, #24
 8000dc8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000dca:	4b0b      	ldr	r3, [pc, #44]	@ (8000df8 <MX_QUADSPI_Init+0x50>)
 8000dcc:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000dd0:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000dd2:	4b09      	ldr	r3, [pc, #36]	@ (8000df8 <MX_QUADSPI_Init+0x50>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000dd8:	4b07      	ldr	r3, [pc, #28]	@ (8000df8 <MX_QUADSPI_Init+0x50>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000dde:	4b06      	ldr	r3, [pc, #24]	@ (8000df8 <MX_QUADSPI_Init+0x50>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000de4:	4804      	ldr	r0, [pc, #16]	@ (8000df8 <MX_QUADSPI_Init+0x50>)
 8000de6:	f006 ff83 	bl	8007cf0 <HAL_QSPI_Init>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000df0:	f000 ff3a 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	200007b8 	.word	0x200007b8
 8000dfc:	a0001000 	.word	0xa0001000

08000e00 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b090      	sub	sp, #64	@ 0x40
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
 8000e14:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e16:	2300      	movs	r3, #0
 8000e18:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000e1a:	463b      	mov	r3, r7
 8000e1c:	2228      	movs	r2, #40	@ 0x28
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4618      	mov	r0, r3
 8000e22:	f013 fd6d 	bl	8014900 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e26:	4b46      	ldr	r3, [pc, #280]	@ (8000f40 <MX_RTC_Init+0x140>)
 8000e28:	4a46      	ldr	r2, [pc, #280]	@ (8000f44 <MX_RTC_Init+0x144>)
 8000e2a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e2c:	4b44      	ldr	r3, [pc, #272]	@ (8000f40 <MX_RTC_Init+0x140>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e32:	4b43      	ldr	r3, [pc, #268]	@ (8000f40 <MX_RTC_Init+0x140>)
 8000e34:	227f      	movs	r2, #127	@ 0x7f
 8000e36:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e38:	4b41      	ldr	r3, [pc, #260]	@ (8000f40 <MX_RTC_Init+0x140>)
 8000e3a:	22ff      	movs	r2, #255	@ 0xff
 8000e3c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e3e:	4b40      	ldr	r3, [pc, #256]	@ (8000f40 <MX_RTC_Init+0x140>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e44:	4b3e      	ldr	r3, [pc, #248]	@ (8000f40 <MX_RTC_Init+0x140>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e4a:	4b3d      	ldr	r3, [pc, #244]	@ (8000f40 <MX_RTC_Init+0x140>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e50:	483b      	ldr	r0, [pc, #236]	@ (8000f40 <MX_RTC_Init+0x140>)
 8000e52:	f008 f9fb 	bl	800924c <HAL_RTC_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000e5c:	f000 ff04 	bl	8001c68 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e72:	2300      	movs	r3, #0
 8000e74:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e76:	2300      	movs	r3, #0
 8000e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000e7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e7e:	2201      	movs	r2, #1
 8000e80:	4619      	mov	r1, r3
 8000e82:	482f      	ldr	r0, [pc, #188]	@ (8000f40 <MX_RTC_Init+0x140>)
 8000e84:	f008 fa66 	bl	8009354 <HAL_RTC_SetTime>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000e8e:	f000 feeb 	bl	8001c68 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000e92:	2301      	movs	r3, #1
 8000e94:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000eaa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000eae:	2201      	movs	r2, #1
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4823      	ldr	r0, [pc, #140]	@ (8000f40 <MX_RTC_Init+0x140>)
 8000eb4:	f008 fae8 	bl	8009488 <HAL_RTC_SetDate>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000ebe:	f000 fed3 	bl	8001c68 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000eec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ef0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000ef2:	463b      	mov	r3, r7
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4811      	ldr	r0, [pc, #68]	@ (8000f40 <MX_RTC_Init+0x140>)
 8000efa:	f008 fb49 	bl	8009590 <HAL_RTC_SetAlarm>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8000f04:	f000 feb0 	bl	8001c68 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8000f08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f0c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000f0e:	463b      	mov	r3, r7
 8000f10:	2201      	movs	r2, #1
 8000f12:	4619      	mov	r1, r3
 8000f14:	480a      	ldr	r0, [pc, #40]	@ (8000f40 <MX_RTC_Init+0x140>)
 8000f16:	f008 fb3b 	bl	8009590 <HAL_RTC_SetAlarm>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8000f20:	f000 fea2 	bl	8001c68 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8000f24:	2202      	movs	r2, #2
 8000f26:	2100      	movs	r1, #0
 8000f28:	4805      	ldr	r0, [pc, #20]	@ (8000f40 <MX_RTC_Init+0x140>)
 8000f2a:	f008 fcfb 	bl	8009924 <HAL_RTCEx_SetTimeStamp>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8000f34:	f000 fe98 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f38:	bf00      	nop
 8000f3a:	3740      	adds	r7, #64	@ 0x40
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000804 	.word	0x20000804
 8000f44:	40002800 	.word	0x40002800

08000f48 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000f4c:	4b4c      	ldr	r3, [pc, #304]	@ (8001080 <MX_SAI2_Init+0x138>)
 8000f4e:	4a4d      	ldr	r2, [pc, #308]	@ (8001084 <MX_SAI2_Init+0x13c>)
 8000f50:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000f52:	4b4b      	ldr	r3, [pc, #300]	@ (8001080 <MX_SAI2_Init+0x138>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_RX;
 8000f58:	4b49      	ldr	r3, [pc, #292]	@ (8001080 <MX_SAI2_Init+0x138>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_16;
 8000f5e:	4b48      	ldr	r3, [pc, #288]	@ (8001080 <MX_SAI2_Init+0x138>)
 8000f60:	2280      	movs	r2, #128	@ 0x80
 8000f62:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000f64:	4b46      	ldr	r3, [pc, #280]	@ (8001080 <MX_SAI2_Init+0x138>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000f6a:	4b45      	ldr	r3, [pc, #276]	@ (8001080 <MX_SAI2_Init+0x138>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000f70:	4b43      	ldr	r3, [pc, #268]	@ (8001080 <MX_SAI2_Init+0x138>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000f76:	4b42      	ldr	r3, [pc, #264]	@ (8001080 <MX_SAI2_Init+0x138>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000f7c:	4b40      	ldr	r3, [pc, #256]	@ (8001080 <MX_SAI2_Init+0x138>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000f82:	4b3f      	ldr	r3, [pc, #252]	@ (8001080 <MX_SAI2_Init+0x138>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000f88:	4b3d      	ldr	r3, [pc, #244]	@ (8001080 <MX_SAI2_Init+0x138>)
 8000f8a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000f8e:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000f90:	4b3b      	ldr	r3, [pc, #236]	@ (8001080 <MX_SAI2_Init+0x138>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000f96:	4b3a      	ldr	r3, [pc, #232]	@ (8001080 <MX_SAI2_Init+0x138>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000f9c:	4b38      	ldr	r3, [pc, #224]	@ (8001080 <MX_SAI2_Init+0x138>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.FrameInit.FrameLength = 16;
 8000fa2:	4b37      	ldr	r3, [pc, #220]	@ (8001080 <MX_SAI2_Init+0x138>)
 8000fa4:	2210      	movs	r2, #16
 8000fa6:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000fa8:	4b35      	ldr	r3, [pc, #212]	@ (8001080 <MX_SAI2_Init+0x138>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000fae:	4b34      	ldr	r3, [pc, #208]	@ (8001080 <MX_SAI2_Init+0x138>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000fb4:	4b32      	ldr	r3, [pc, #200]	@ (8001080 <MX_SAI2_Init+0x138>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000fba:	4b31      	ldr	r3, [pc, #196]	@ (8001080 <MX_SAI2_Init+0x138>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000fc0:	4b2f      	ldr	r3, [pc, #188]	@ (8001080 <MX_SAI2_Init+0x138>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000fc6:	4b2e      	ldr	r3, [pc, #184]	@ (8001080 <MX_SAI2_Init+0x138>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000fcc:	4b2c      	ldr	r3, [pc, #176]	@ (8001080 <MX_SAI2_Init+0x138>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000fd2:	4b2b      	ldr	r3, [pc, #172]	@ (8001080 <MX_SAI2_Init+0x138>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000fd8:	4829      	ldr	r0, [pc, #164]	@ (8001080 <MX_SAI2_Init+0x138>)
 8000fda:	f008 fd0b 	bl	80099f4 <HAL_SAI_Init>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_SAI2_Init+0xa0>
  {
    Error_Handler();
 8000fe4:	f000 fe40 	bl	8001c68 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000fe8:	4b27      	ldr	r3, [pc, #156]	@ (8001088 <MX_SAI2_Init+0x140>)
 8000fea:	4a28      	ldr	r2, [pc, #160]	@ (800108c <MX_SAI2_Init+0x144>)
 8000fec:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000fee:	4b26      	ldr	r3, [pc, #152]	@ (8001088 <MX_SAI2_Init+0x140>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_TX;
 8000ff4:	4b24      	ldr	r3, [pc, #144]	@ (8001088 <MX_SAI2_Init+0x140>)
 8000ff6:	2202      	movs	r2, #2
 8000ff8:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_16;
 8000ffa:	4b23      	ldr	r3, [pc, #140]	@ (8001088 <MX_SAI2_Init+0x140>)
 8000ffc:	2280      	movs	r2, #128	@ 0x80
 8000ffe:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001000:	4b21      	ldr	r3, [pc, #132]	@ (8001088 <MX_SAI2_Init+0x140>)
 8001002:	2200      	movs	r2, #0
 8001004:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001006:	4b20      	ldr	r3, [pc, #128]	@ (8001088 <MX_SAI2_Init+0x140>)
 8001008:	2200      	movs	r2, #0
 800100a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 800100c:	4b1e      	ldr	r3, [pc, #120]	@ (8001088 <MX_SAI2_Init+0x140>)
 800100e:	2201      	movs	r2, #1
 8001010:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001012:	4b1d      	ldr	r3, [pc, #116]	@ (8001088 <MX_SAI2_Init+0x140>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001018:	4b1b      	ldr	r3, [pc, #108]	@ (8001088 <MX_SAI2_Init+0x140>)
 800101a:	2200      	movs	r2, #0
 800101c:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800101e:	4b1a      	ldr	r3, [pc, #104]	@ (8001088 <MX_SAI2_Init+0x140>)
 8001020:	2200      	movs	r2, #0
 8001022:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001024:	4b18      	ldr	r3, [pc, #96]	@ (8001088 <MX_SAI2_Init+0x140>)
 8001026:	2200      	movs	r2, #0
 8001028:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800102a:	4b17      	ldr	r3, [pc, #92]	@ (8001088 <MX_SAI2_Init+0x140>)
 800102c:	2200      	movs	r2, #0
 800102e:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001030:	4b15      	ldr	r3, [pc, #84]	@ (8001088 <MX_SAI2_Init+0x140>)
 8001032:	2200      	movs	r2, #0
 8001034:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 16;
 8001036:	4b14      	ldr	r3, [pc, #80]	@ (8001088 <MX_SAI2_Init+0x140>)
 8001038:	2210      	movs	r2, #16
 800103a:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 800103c:	4b12      	ldr	r3, [pc, #72]	@ (8001088 <MX_SAI2_Init+0x140>)
 800103e:	2201      	movs	r2, #1
 8001040:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001042:	4b11      	ldr	r3, [pc, #68]	@ (8001088 <MX_SAI2_Init+0x140>)
 8001044:	2200      	movs	r2, #0
 8001046:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001048:	4b0f      	ldr	r3, [pc, #60]	@ (8001088 <MX_SAI2_Init+0x140>)
 800104a:	2200      	movs	r2, #0
 800104c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800104e:	4b0e      	ldr	r3, [pc, #56]	@ (8001088 <MX_SAI2_Init+0x140>)
 8001050:	2200      	movs	r2, #0
 8001052:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001054:	4b0c      	ldr	r3, [pc, #48]	@ (8001088 <MX_SAI2_Init+0x140>)
 8001056:	2200      	movs	r2, #0
 8001058:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800105a:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <MX_SAI2_Init+0x140>)
 800105c:	2200      	movs	r2, #0
 800105e:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001060:	4b09      	ldr	r3, [pc, #36]	@ (8001088 <MX_SAI2_Init+0x140>)
 8001062:	2201      	movs	r2, #1
 8001064:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001066:	4b08      	ldr	r3, [pc, #32]	@ (8001088 <MX_SAI2_Init+0x140>)
 8001068:	2200      	movs	r2, #0
 800106a:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 800106c:	4806      	ldr	r0, [pc, #24]	@ (8001088 <MX_SAI2_Init+0x140>)
 800106e:	f008 fcc1 	bl	80099f4 <HAL_SAI_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_SAI2_Init+0x134>
  {
    Error_Handler();
 8001078:	f000 fdf6 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000824 	.word	0x20000824
 8001084:	40015c04 	.word	0x40015c04
 8001088:	200008a8 	.word	0x200008a8
 800108c:	40015c24 	.word	0x40015c24

08001090 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001094:	4b0d      	ldr	r3, [pc, #52]	@ (80010cc <MX_SDMMC1_SD_Init+0x3c>)
 8001096:	4a0e      	ldr	r2, [pc, #56]	@ (80010d0 <MX_SDMMC1_SD_Init+0x40>)
 8001098:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800109a:	4b0c      	ldr	r3, [pc, #48]	@ (80010cc <MX_SDMMC1_SD_Init+0x3c>)
 800109c:	2200      	movs	r2, #0
 800109e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80010a0:	4b0a      	ldr	r3, [pc, #40]	@ (80010cc <MX_SDMMC1_SD_Init+0x3c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80010a6:	4b09      	ldr	r3, [pc, #36]	@ (80010cc <MX_SDMMC1_SD_Init+0x3c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80010ac:	4b07      	ldr	r3, [pc, #28]	@ (80010cc <MX_SDMMC1_SD_Init+0x3c>)
 80010ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010b2:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80010b4:	4b05      	ldr	r3, [pc, #20]	@ (80010cc <MX_SDMMC1_SD_Init+0x3c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80010ba:	4b04      	ldr	r3, [pc, #16]	@ (80010cc <MX_SDMMC1_SD_Init+0x3c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	200009ec 	.word	0x200009ec
 80010d0:	40012c00 	.word	0x40012c00

080010d4 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 80010d8:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <MX_SPDIFRX_Init+0x5c>)
 80010da:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80010de:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 80010e0:	4b13      	ldr	r3, [pc, #76]	@ (8001130 <MX_SPDIFRX_Init+0x5c>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 80010e6:	4b12      	ldr	r3, [pc, #72]	@ (8001130 <MX_SPDIFRX_Init+0x5c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 80010ec:	4b10      	ldr	r3, [pc, #64]	@ (8001130 <MX_SPDIFRX_Init+0x5c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 80010f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001130 <MX_SPDIFRX_Init+0x5c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 80010f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001130 <MX_SPDIFRX_Init+0x5c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 80010fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001130 <MX_SPDIFRX_Init+0x5c>)
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001104:	4b0a      	ldr	r3, [pc, #40]	@ (8001130 <MX_SPDIFRX_Init+0x5c>)
 8001106:	2200      	movs	r2, #0
 8001108:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 800110a:	4b09      	ldr	r3, [pc, #36]	@ (8001130 <MX_SPDIFRX_Init+0x5c>)
 800110c:	2200      	movs	r2, #0
 800110e:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001110:	4b07      	ldr	r3, [pc, #28]	@ (8001130 <MX_SPDIFRX_Init+0x5c>)
 8001112:	2200      	movs	r2, #0
 8001114:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001116:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <MX_SPDIFRX_Init+0x5c>)
 8001118:	2200      	movs	r2, #0
 800111a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 800111c:	4804      	ldr	r0, [pc, #16]	@ (8001130 <MX_SPDIFRX_Init+0x5c>)
 800111e:	f00a f937 	bl	800b390 <HAL_SPDIFRX_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001128:	f000 fd9e 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000a70 	.word	0x20000a70

08001134 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001138:	4b1b      	ldr	r3, [pc, #108]	@ (80011a8 <MX_SPI2_Init+0x74>)
 800113a:	4a1c      	ldr	r2, [pc, #112]	@ (80011ac <MX_SPI2_Init+0x78>)
 800113c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800113e:	4b1a      	ldr	r3, [pc, #104]	@ (80011a8 <MX_SPI2_Init+0x74>)
 8001140:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001144:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001146:	4b18      	ldr	r3, [pc, #96]	@ (80011a8 <MX_SPI2_Init+0x74>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800114c:	4b16      	ldr	r3, [pc, #88]	@ (80011a8 <MX_SPI2_Init+0x74>)
 800114e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001152:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001154:	4b14      	ldr	r3, [pc, #80]	@ (80011a8 <MX_SPI2_Init+0x74>)
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800115a:	4b13      	ldr	r3, [pc, #76]	@ (80011a8 <MX_SPI2_Init+0x74>)
 800115c:	2200      	movs	r2, #0
 800115e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001160:	4b11      	ldr	r3, [pc, #68]	@ (80011a8 <MX_SPI2_Init+0x74>)
 8001162:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001166:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001168:	4b0f      	ldr	r3, [pc, #60]	@ (80011a8 <MX_SPI2_Init+0x74>)
 800116a:	2200      	movs	r2, #0
 800116c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800116e:	4b0e      	ldr	r3, [pc, #56]	@ (80011a8 <MX_SPI2_Init+0x74>)
 8001170:	2200      	movs	r2, #0
 8001172:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001174:	4b0c      	ldr	r3, [pc, #48]	@ (80011a8 <MX_SPI2_Init+0x74>)
 8001176:	2200      	movs	r2, #0
 8001178:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800117a:	4b0b      	ldr	r3, [pc, #44]	@ (80011a8 <MX_SPI2_Init+0x74>)
 800117c:	2200      	movs	r2, #0
 800117e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001180:	4b09      	ldr	r3, [pc, #36]	@ (80011a8 <MX_SPI2_Init+0x74>)
 8001182:	2207      	movs	r2, #7
 8001184:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001186:	4b08      	ldr	r3, [pc, #32]	@ (80011a8 <MX_SPI2_Init+0x74>)
 8001188:	2200      	movs	r2, #0
 800118a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800118c:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <MX_SPI2_Init+0x74>)
 800118e:	2208      	movs	r2, #8
 8001190:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001192:	4805      	ldr	r0, [pc, #20]	@ (80011a8 <MX_SPI2_Init+0x74>)
 8001194:	f00a f958 	bl	800b448 <HAL_SPI_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800119e:	f000 fd63 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000abc 	.word	0x20000abc
 80011ac:	40003800 	.word	0x40003800

080011b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b09a      	sub	sp, #104	@ 0x68
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011b6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011d0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
 80011e0:	615a      	str	r2, [r3, #20]
 80011e2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	222c      	movs	r2, #44	@ 0x2c
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f013 fb88 	bl	8014900 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011f0:	4b43      	ldr	r3, [pc, #268]	@ (8001300 <MX_TIM1_Init+0x150>)
 80011f2:	4a44      	ldr	r2, [pc, #272]	@ (8001304 <MX_TIM1_Init+0x154>)
 80011f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011f6:	4b42      	ldr	r3, [pc, #264]	@ (8001300 <MX_TIM1_Init+0x150>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fc:	4b40      	ldr	r3, [pc, #256]	@ (8001300 <MX_TIM1_Init+0x150>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001202:	4b3f      	ldr	r3, [pc, #252]	@ (8001300 <MX_TIM1_Init+0x150>)
 8001204:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001208:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800120a:	4b3d      	ldr	r3, [pc, #244]	@ (8001300 <MX_TIM1_Init+0x150>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001210:	4b3b      	ldr	r3, [pc, #236]	@ (8001300 <MX_TIM1_Init+0x150>)
 8001212:	2200      	movs	r2, #0
 8001214:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001216:	4b3a      	ldr	r3, [pc, #232]	@ (8001300 <MX_TIM1_Init+0x150>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800121c:	4838      	ldr	r0, [pc, #224]	@ (8001300 <MX_TIM1_Init+0x150>)
 800121e:	f00a f9be 	bl	800b59e <HAL_TIM_Base_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001228:	f000 fd1e 	bl	8001c68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800122c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001230:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001232:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001236:	4619      	mov	r1, r3
 8001238:	4831      	ldr	r0, [pc, #196]	@ (8001300 <MX_TIM1_Init+0x150>)
 800123a:	f00a fcf1 	bl	800bc20 <HAL_TIM_ConfigClockSource>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001244:	f000 fd10 	bl	8001c68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001248:	482d      	ldr	r0, [pc, #180]	@ (8001300 <MX_TIM1_Init+0x150>)
 800124a:	f00a fa77 	bl	800b73c <HAL_TIM_PWM_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001254:	f000 fd08 	bl	8001c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001258:	2300      	movs	r3, #0
 800125a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800125c:	2300      	movs	r3, #0
 800125e:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001260:	2300      	movs	r3, #0
 8001262:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001264:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001268:	4619      	mov	r1, r3
 800126a:	4825      	ldr	r0, [pc, #148]	@ (8001300 <MX_TIM1_Init+0x150>)
 800126c:	f00b f96e 	bl	800c54c <HAL_TIMEx_MasterConfigSynchronization>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001276:	f000 fcf7 	bl	8001c68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800127a:	2360      	movs	r3, #96	@ 0x60
 800127c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001282:	2300      	movs	r3, #0
 8001284:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001286:	2300      	movs	r3, #0
 8001288:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800128a:	2300      	movs	r3, #0
 800128c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800128e:	2300      	movs	r3, #0
 8001290:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001292:	2300      	movs	r3, #0
 8001294:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001296:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800129a:	2200      	movs	r2, #0
 800129c:	4619      	mov	r1, r3
 800129e:	4818      	ldr	r0, [pc, #96]	@ (8001300 <MX_TIM1_Init+0x150>)
 80012a0:	f00a fbaa 	bl	800b9f8 <HAL_TIM_PWM_ConfigChannel>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80012aa:	f000 fcdd 	bl	8001c68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80012d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80012d4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012da:	2300      	movs	r3, #0
 80012dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	4619      	mov	r1, r3
 80012e2:	4807      	ldr	r0, [pc, #28]	@ (8001300 <MX_TIM1_Init+0x150>)
 80012e4:	f00b f9c0 	bl	800c668 <HAL_TIMEx_ConfigBreakDeadTime>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80012ee:	f000 fcbb 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012f2:	4803      	ldr	r0, [pc, #12]	@ (8001300 <MX_TIM1_Init+0x150>)
 80012f4:	f001 fac0 	bl	8002878 <HAL_TIM_MspPostInit>

}
 80012f8:	bf00      	nop
 80012fa:	3768      	adds	r7, #104	@ 0x68
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000b20 	.word	0x20000b20
 8001304:	40010000 	.word	0x40010000

08001308 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08e      	sub	sp, #56	@ 0x38
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131c:	f107 031c 	add.w	r3, r7, #28
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001328:	463b      	mov	r3, r7
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
 8001334:	611a      	str	r2, [r3, #16]
 8001336:	615a      	str	r2, [r3, #20]
 8001338:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800133a:	4b2d      	ldr	r3, [pc, #180]	@ (80013f0 <MX_TIM2_Init+0xe8>)
 800133c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001340:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001342:	4b2b      	ldr	r3, [pc, #172]	@ (80013f0 <MX_TIM2_Init+0xe8>)
 8001344:	2200      	movs	r2, #0
 8001346:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001348:	4b29      	ldr	r3, [pc, #164]	@ (80013f0 <MX_TIM2_Init+0xe8>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800134e:	4b28      	ldr	r3, [pc, #160]	@ (80013f0 <MX_TIM2_Init+0xe8>)
 8001350:	f04f 32ff 	mov.w	r2, #4294967295
 8001354:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001356:	4b26      	ldr	r3, [pc, #152]	@ (80013f0 <MX_TIM2_Init+0xe8>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800135c:	4b24      	ldr	r3, [pc, #144]	@ (80013f0 <MX_TIM2_Init+0xe8>)
 800135e:	2200      	movs	r2, #0
 8001360:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001362:	4823      	ldr	r0, [pc, #140]	@ (80013f0 <MX_TIM2_Init+0xe8>)
 8001364:	f00a f91b 	bl	800b59e <HAL_TIM_Base_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800136e:	f000 fc7b 	bl	8001c68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001372:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001376:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001378:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800137c:	4619      	mov	r1, r3
 800137e:	481c      	ldr	r0, [pc, #112]	@ (80013f0 <MX_TIM2_Init+0xe8>)
 8001380:	f00a fc4e 	bl	800bc20 <HAL_TIM_ConfigClockSource>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800138a:	f000 fc6d 	bl	8001c68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800138e:	4818      	ldr	r0, [pc, #96]	@ (80013f0 <MX_TIM2_Init+0xe8>)
 8001390:	f00a f9d4 	bl	800b73c <HAL_TIM_PWM_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800139a:	f000 fc65 	bl	8001c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a2:	2300      	movs	r3, #0
 80013a4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013a6:	f107 031c 	add.w	r3, r7, #28
 80013aa:	4619      	mov	r1, r3
 80013ac:	4810      	ldr	r0, [pc, #64]	@ (80013f0 <MX_TIM2_Init+0xe8>)
 80013ae:	f00b f8cd 	bl	800c54c <HAL_TIMEx_MasterConfigSynchronization>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80013b8:	f000 fc56 	bl	8001c68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013bc:	2360      	movs	r3, #96	@ 0x60
 80013be:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013cc:	463b      	mov	r3, r7
 80013ce:	2200      	movs	r2, #0
 80013d0:	4619      	mov	r1, r3
 80013d2:	4807      	ldr	r0, [pc, #28]	@ (80013f0 <MX_TIM2_Init+0xe8>)
 80013d4:	f00a fb10 	bl	800b9f8 <HAL_TIM_PWM_ConfigChannel>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80013de:	f000 fc43 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013e2:	4803      	ldr	r0, [pc, #12]	@ (80013f0 <MX_TIM2_Init+0xe8>)
 80013e4:	f001 fa48 	bl	8002878 <HAL_TIM_MspPostInit>

}
 80013e8:	bf00      	nop
 80013ea:	3738      	adds	r7, #56	@ 0x38
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000b6c 	.word	0x20000b6c

080013f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08e      	sub	sp, #56	@ 0x38
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001408:	f107 031c 	add.w	r3, r7, #28
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001414:	463b      	mov	r3, r7
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
 8001420:	611a      	str	r2, [r3, #16]
 8001422:	615a      	str	r2, [r3, #20]
 8001424:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001426:	4b2d      	ldr	r3, [pc, #180]	@ (80014dc <MX_TIM3_Init+0xe8>)
 8001428:	4a2d      	ldr	r2, [pc, #180]	@ (80014e0 <MX_TIM3_Init+0xec>)
 800142a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800142c:	4b2b      	ldr	r3, [pc, #172]	@ (80014dc <MX_TIM3_Init+0xe8>)
 800142e:	2200      	movs	r2, #0
 8001430:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001432:	4b2a      	ldr	r3, [pc, #168]	@ (80014dc <MX_TIM3_Init+0xe8>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001438:	4b28      	ldr	r3, [pc, #160]	@ (80014dc <MX_TIM3_Init+0xe8>)
 800143a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800143e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001440:	4b26      	ldr	r3, [pc, #152]	@ (80014dc <MX_TIM3_Init+0xe8>)
 8001442:	2200      	movs	r2, #0
 8001444:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001446:	4b25      	ldr	r3, [pc, #148]	@ (80014dc <MX_TIM3_Init+0xe8>)
 8001448:	2200      	movs	r2, #0
 800144a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800144c:	4823      	ldr	r0, [pc, #140]	@ (80014dc <MX_TIM3_Init+0xe8>)
 800144e:	f00a f8a6 	bl	800b59e <HAL_TIM_Base_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001458:	f000 fc06 	bl	8001c68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800145c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001460:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001462:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001466:	4619      	mov	r1, r3
 8001468:	481c      	ldr	r0, [pc, #112]	@ (80014dc <MX_TIM3_Init+0xe8>)
 800146a:	f00a fbd9 	bl	800bc20 <HAL_TIM_ConfigClockSource>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001474:	f000 fbf8 	bl	8001c68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001478:	4818      	ldr	r0, [pc, #96]	@ (80014dc <MX_TIM3_Init+0xe8>)
 800147a:	f00a f95f 	bl	800b73c <HAL_TIM_PWM_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001484:	f000 fbf0 	bl	8001c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001488:	2300      	movs	r3, #0
 800148a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148c:	2300      	movs	r3, #0
 800148e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001490:	f107 031c 	add.w	r3, r7, #28
 8001494:	4619      	mov	r1, r3
 8001496:	4811      	ldr	r0, [pc, #68]	@ (80014dc <MX_TIM3_Init+0xe8>)
 8001498:	f00b f858 	bl	800c54c <HAL_TIMEx_MasterConfigSynchronization>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80014a2:	f000 fbe1 	bl	8001c68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014a6:	2360      	movs	r3, #96	@ 0x60
 80014a8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014b6:	463b      	mov	r3, r7
 80014b8:	2200      	movs	r2, #0
 80014ba:	4619      	mov	r1, r3
 80014bc:	4807      	ldr	r0, [pc, #28]	@ (80014dc <MX_TIM3_Init+0xe8>)
 80014be:	f00a fa9b 	bl	800b9f8 <HAL_TIM_PWM_ConfigChannel>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80014c8:	f000 fbce 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014cc:	4803      	ldr	r0, [pc, #12]	@ (80014dc <MX_TIM3_Init+0xe8>)
 80014ce:	f001 f9d3 	bl	8002878 <HAL_TIM_MspPostInit>

}
 80014d2:	bf00      	nop
 80014d4:	3738      	adds	r7, #56	@ 0x38
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000bb8 	.word	0x20000bb8
 80014e0:	40000400 	.word	0x40000400

080014e4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08e      	sub	sp, #56	@ 0x38
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f8:	f107 031c 	add.w	r3, r7, #28
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001504:	463b      	mov	r3, r7
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]
 8001510:	611a      	str	r2, [r3, #16]
 8001512:	615a      	str	r2, [r3, #20]
 8001514:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001516:	4b2d      	ldr	r3, [pc, #180]	@ (80015cc <MX_TIM5_Init+0xe8>)
 8001518:	4a2d      	ldr	r2, [pc, #180]	@ (80015d0 <MX_TIM5_Init+0xec>)
 800151a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800151c:	4b2b      	ldr	r3, [pc, #172]	@ (80015cc <MX_TIM5_Init+0xe8>)
 800151e:	2200      	movs	r2, #0
 8001520:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001522:	4b2a      	ldr	r3, [pc, #168]	@ (80015cc <MX_TIM5_Init+0xe8>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001528:	4b28      	ldr	r3, [pc, #160]	@ (80015cc <MX_TIM5_Init+0xe8>)
 800152a:	f04f 32ff 	mov.w	r2, #4294967295
 800152e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001530:	4b26      	ldr	r3, [pc, #152]	@ (80015cc <MX_TIM5_Init+0xe8>)
 8001532:	2200      	movs	r2, #0
 8001534:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001536:	4b25      	ldr	r3, [pc, #148]	@ (80015cc <MX_TIM5_Init+0xe8>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800153c:	4823      	ldr	r0, [pc, #140]	@ (80015cc <MX_TIM5_Init+0xe8>)
 800153e:	f00a f82e 	bl	800b59e <HAL_TIM_Base_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001548:	f000 fb8e 	bl	8001c68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800154c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001550:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001552:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001556:	4619      	mov	r1, r3
 8001558:	481c      	ldr	r0, [pc, #112]	@ (80015cc <MX_TIM5_Init+0xe8>)
 800155a:	f00a fb61 	bl	800bc20 <HAL_TIM_ConfigClockSource>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001564:	f000 fb80 	bl	8001c68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001568:	4818      	ldr	r0, [pc, #96]	@ (80015cc <MX_TIM5_Init+0xe8>)
 800156a:	f00a f8e7 	bl	800b73c <HAL_TIM_PWM_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001574:	f000 fb78 	bl	8001c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001578:	2300      	movs	r3, #0
 800157a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800157c:	2300      	movs	r3, #0
 800157e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001580:	f107 031c 	add.w	r3, r7, #28
 8001584:	4619      	mov	r1, r3
 8001586:	4811      	ldr	r0, [pc, #68]	@ (80015cc <MX_TIM5_Init+0xe8>)
 8001588:	f00a ffe0 	bl	800c54c <HAL_TIMEx_MasterConfigSynchronization>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001592:	f000 fb69 	bl	8001c68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001596:	2360      	movs	r3, #96	@ 0x60
 8001598:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800159e:	2300      	movs	r3, #0
 80015a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015a6:	463b      	mov	r3, r7
 80015a8:	220c      	movs	r2, #12
 80015aa:	4619      	mov	r1, r3
 80015ac:	4807      	ldr	r0, [pc, #28]	@ (80015cc <MX_TIM5_Init+0xe8>)
 80015ae:	f00a fa23 	bl	800b9f8 <HAL_TIM_PWM_ConfigChannel>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80015b8:	f000 fb56 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80015bc:	4803      	ldr	r0, [pc, #12]	@ (80015cc <MX_TIM5_Init+0xe8>)
 80015be:	f001 f95b 	bl	8002878 <HAL_TIM_MspPostInit>

}
 80015c2:	bf00      	nop
 80015c4:	3738      	adds	r7, #56	@ 0x38
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000c04 	.word	0x20000c04
 80015d0:	40000c00 	.word	0x40000c00

080015d4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b088      	sub	sp, #32
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015da:	f107 0310 	add.w	r3, r7, #16
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80015f2:	4b20      	ldr	r3, [pc, #128]	@ (8001674 <MX_TIM8_Init+0xa0>)
 80015f4:	4a20      	ldr	r2, [pc, #128]	@ (8001678 <MX_TIM8_Init+0xa4>)
 80015f6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80015f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001674 <MX_TIM8_Init+0xa0>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001674 <MX_TIM8_Init+0xa0>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001604:	4b1b      	ldr	r3, [pc, #108]	@ (8001674 <MX_TIM8_Init+0xa0>)
 8001606:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800160a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800160c:	4b19      	ldr	r3, [pc, #100]	@ (8001674 <MX_TIM8_Init+0xa0>)
 800160e:	2200      	movs	r2, #0
 8001610:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001612:	4b18      	ldr	r3, [pc, #96]	@ (8001674 <MX_TIM8_Init+0xa0>)
 8001614:	2200      	movs	r2, #0
 8001616:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001618:	4b16      	ldr	r3, [pc, #88]	@ (8001674 <MX_TIM8_Init+0xa0>)
 800161a:	2200      	movs	r2, #0
 800161c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800161e:	4815      	ldr	r0, [pc, #84]	@ (8001674 <MX_TIM8_Init+0xa0>)
 8001620:	f009 ffbd 	bl	800b59e <HAL_TIM_Base_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800162a:	f000 fb1d 	bl	8001c68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800162e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001632:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001634:	f107 0310 	add.w	r3, r7, #16
 8001638:	4619      	mov	r1, r3
 800163a:	480e      	ldr	r0, [pc, #56]	@ (8001674 <MX_TIM8_Init+0xa0>)
 800163c:	f00a faf0 	bl	800bc20 <HAL_TIM_ConfigClockSource>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001646:	f000 fb0f 	bl	8001c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800164a:	2300      	movs	r3, #0
 800164c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800164e:	2300      	movs	r3, #0
 8001650:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	4619      	mov	r1, r3
 800165a:	4806      	ldr	r0, [pc, #24]	@ (8001674 <MX_TIM8_Init+0xa0>)
 800165c:	f00a ff76 	bl	800c54c <HAL_TIMEx_MasterConfigSynchronization>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001666:	f000 faff 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800166a:	bf00      	nop
 800166c:	3720      	adds	r7, #32
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000c50 	.word	0x20000c50
 8001678:	40010400 	.word	0x40010400

0800167c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b088      	sub	sp, #32
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001682:	1d3b      	adds	r3, r7, #4
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
 8001690:	615a      	str	r2, [r3, #20]
 8001692:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001694:	4b1a      	ldr	r3, [pc, #104]	@ (8001700 <MX_TIM12_Init+0x84>)
 8001696:	4a1b      	ldr	r2, [pc, #108]	@ (8001704 <MX_TIM12_Init+0x88>)
 8001698:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800169a:	4b19      	ldr	r3, [pc, #100]	@ (8001700 <MX_TIM12_Init+0x84>)
 800169c:	2200      	movs	r2, #0
 800169e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a0:	4b17      	ldr	r3, [pc, #92]	@ (8001700 <MX_TIM12_Init+0x84>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80016a6:	4b16      	ldr	r3, [pc, #88]	@ (8001700 <MX_TIM12_Init+0x84>)
 80016a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016ac:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ae:	4b14      	ldr	r3, [pc, #80]	@ (8001700 <MX_TIM12_Init+0x84>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016b4:	4b12      	ldr	r3, [pc, #72]	@ (8001700 <MX_TIM12_Init+0x84>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80016ba:	4811      	ldr	r0, [pc, #68]	@ (8001700 <MX_TIM12_Init+0x84>)
 80016bc:	f00a f83e 	bl	800b73c <HAL_TIM_PWM_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80016c6:	f000 facf 	bl	8001c68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ca:	2360      	movs	r3, #96	@ 0x60
 80016cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	2200      	movs	r2, #0
 80016de:	4619      	mov	r1, r3
 80016e0:	4807      	ldr	r0, [pc, #28]	@ (8001700 <MX_TIM12_Init+0x84>)
 80016e2:	f00a f989 	bl	800b9f8 <HAL_TIM_PWM_ConfigChannel>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80016ec:	f000 fabc 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80016f0:	4803      	ldr	r0, [pc, #12]	@ (8001700 <MX_TIM12_Init+0x84>)
 80016f2:	f001 f8c1 	bl	8002878 <HAL_TIM_MspPostInit>

}
 80016f6:	bf00      	nop
 80016f8:	3720      	adds	r7, #32
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000c9c 	.word	0x20000c9c
 8001704:	40001800 	.word	0x40001800

08001708 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800170c:	4b14      	ldr	r3, [pc, #80]	@ (8001760 <MX_USART1_UART_Init+0x58>)
 800170e:	4a15      	ldr	r2, [pc, #84]	@ (8001764 <MX_USART1_UART_Init+0x5c>)
 8001710:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001712:	4b13      	ldr	r3, [pc, #76]	@ (8001760 <MX_USART1_UART_Init+0x58>)
 8001714:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001718:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800171a:	4b11      	ldr	r3, [pc, #68]	@ (8001760 <MX_USART1_UART_Init+0x58>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001720:	4b0f      	ldr	r3, [pc, #60]	@ (8001760 <MX_USART1_UART_Init+0x58>)
 8001722:	2200      	movs	r2, #0
 8001724:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001726:	4b0e      	ldr	r3, [pc, #56]	@ (8001760 <MX_USART1_UART_Init+0x58>)
 8001728:	2200      	movs	r2, #0
 800172a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800172c:	4b0c      	ldr	r3, [pc, #48]	@ (8001760 <MX_USART1_UART_Init+0x58>)
 800172e:	220c      	movs	r2, #12
 8001730:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001732:	4b0b      	ldr	r3, [pc, #44]	@ (8001760 <MX_USART1_UART_Init+0x58>)
 8001734:	2200      	movs	r2, #0
 8001736:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001738:	4b09      	ldr	r3, [pc, #36]	@ (8001760 <MX_USART1_UART_Init+0x58>)
 800173a:	2200      	movs	r2, #0
 800173c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800173e:	4b08      	ldr	r3, [pc, #32]	@ (8001760 <MX_USART1_UART_Init+0x58>)
 8001740:	2200      	movs	r2, #0
 8001742:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001744:	4b06      	ldr	r3, [pc, #24]	@ (8001760 <MX_USART1_UART_Init+0x58>)
 8001746:	2200      	movs	r2, #0
 8001748:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800174a:	4805      	ldr	r0, [pc, #20]	@ (8001760 <MX_USART1_UART_Init+0x58>)
 800174c:	f00b f828 	bl	800c7a0 <HAL_UART_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001756:	f000 fa87 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000ce8 	.word	0x20000ce8
 8001764:	40011000 	.word	0x40011000

08001768 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800176c:	4b14      	ldr	r3, [pc, #80]	@ (80017c0 <MX_USART6_UART_Init+0x58>)
 800176e:	4a15      	ldr	r2, [pc, #84]	@ (80017c4 <MX_USART6_UART_Init+0x5c>)
 8001770:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001772:	4b13      	ldr	r3, [pc, #76]	@ (80017c0 <MX_USART6_UART_Init+0x58>)
 8001774:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001778:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800177a:	4b11      	ldr	r3, [pc, #68]	@ (80017c0 <MX_USART6_UART_Init+0x58>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001780:	4b0f      	ldr	r3, [pc, #60]	@ (80017c0 <MX_USART6_UART_Init+0x58>)
 8001782:	2200      	movs	r2, #0
 8001784:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001786:	4b0e      	ldr	r3, [pc, #56]	@ (80017c0 <MX_USART6_UART_Init+0x58>)
 8001788:	2200      	movs	r2, #0
 800178a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800178c:	4b0c      	ldr	r3, [pc, #48]	@ (80017c0 <MX_USART6_UART_Init+0x58>)
 800178e:	220c      	movs	r2, #12
 8001790:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001792:	4b0b      	ldr	r3, [pc, #44]	@ (80017c0 <MX_USART6_UART_Init+0x58>)
 8001794:	2200      	movs	r2, #0
 8001796:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001798:	4b09      	ldr	r3, [pc, #36]	@ (80017c0 <MX_USART6_UART_Init+0x58>)
 800179a:	2200      	movs	r2, #0
 800179c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800179e:	4b08      	ldr	r3, [pc, #32]	@ (80017c0 <MX_USART6_UART_Init+0x58>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017a4:	4b06      	ldr	r3, [pc, #24]	@ (80017c0 <MX_USART6_UART_Init+0x58>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80017aa:	4805      	ldr	r0, [pc, #20]	@ (80017c0 <MX_USART6_UART_Init+0x58>)
 80017ac:	f00a fff8 	bl	800c7a0 <HAL_UART_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80017b6:	f000 fa57 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000d70 	.word	0x20000d70
 80017c4:	40011400 	.word	0x40011400

080017c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017ce:	4b10      	ldr	r3, [pc, #64]	@ (8001810 <MX_DMA_Init+0x48>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001810 <MX_DMA_Init+0x48>)
 80017d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80017d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017da:	4b0d      	ldr	r3, [pc, #52]	@ (8001810 <MX_DMA_Init+0x48>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017e2:	607b      	str	r3, [r7, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 80017e6:	2200      	movs	r2, #0
 80017e8:	2105      	movs	r1, #5
 80017ea:	203c      	movs	r0, #60	@ 0x3c
 80017ec:	f002 f836 	bl	800385c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80017f0:	203c      	movs	r0, #60	@ 0x3c
 80017f2:	f002 f84f 	bl	8003894 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80017f6:	2200      	movs	r2, #0
 80017f8:	2105      	movs	r1, #5
 80017fa:	2045      	movs	r0, #69	@ 0x45
 80017fc:	f002 f82e 	bl	800385c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001800:	2045      	movs	r0, #69	@ 0x45
 8001802:	f002 f847 	bl	8003894 <HAL_NVIC_EnableIRQ>

}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40023800 	.word	0x40023800

08001814 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b088      	sub	sp, #32
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800181a:	1d3b      	adds	r3, r7, #4
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
 8001828:	615a      	str	r2, [r3, #20]
 800182a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800182c:	4b1f      	ldr	r3, [pc, #124]	@ (80018ac <MX_FMC_Init+0x98>)
 800182e:	4a20      	ldr	r2, [pc, #128]	@ (80018b0 <MX_FMC_Init+0x9c>)
 8001830:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001832:	4b1e      	ldr	r3, [pc, #120]	@ (80018ac <MX_FMC_Init+0x98>)
 8001834:	2200      	movs	r2, #0
 8001836:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001838:	4b1c      	ldr	r3, [pc, #112]	@ (80018ac <MX_FMC_Init+0x98>)
 800183a:	2200      	movs	r2, #0
 800183c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800183e:	4b1b      	ldr	r3, [pc, #108]	@ (80018ac <MX_FMC_Init+0x98>)
 8001840:	2204      	movs	r2, #4
 8001842:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001844:	4b19      	ldr	r3, [pc, #100]	@ (80018ac <MX_FMC_Init+0x98>)
 8001846:	2210      	movs	r2, #16
 8001848:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800184a:	4b18      	ldr	r3, [pc, #96]	@ (80018ac <MX_FMC_Init+0x98>)
 800184c:	2240      	movs	r2, #64	@ 0x40
 800184e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001850:	4b16      	ldr	r3, [pc, #88]	@ (80018ac <MX_FMC_Init+0x98>)
 8001852:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001856:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001858:	4b14      	ldr	r3, [pc, #80]	@ (80018ac <MX_FMC_Init+0x98>)
 800185a:	2200      	movs	r2, #0
 800185c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800185e:	4b13      	ldr	r3, [pc, #76]	@ (80018ac <MX_FMC_Init+0x98>)
 8001860:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001864:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001866:	4b11      	ldr	r3, [pc, #68]	@ (80018ac <MX_FMC_Init+0x98>)
 8001868:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800186c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800186e:	4b0f      	ldr	r3, [pc, #60]	@ (80018ac <MX_FMC_Init+0x98>)
 8001870:	2200      	movs	r2, #0
 8001872:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001874:	2302      	movs	r3, #2
 8001876:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001878:	2307      	movs	r3, #7
 800187a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800187c:	2304      	movs	r3, #4
 800187e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001880:	2307      	movs	r3, #7
 8001882:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001884:	2303      	movs	r3, #3
 8001886:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001888:	2302      	movs	r3, #2
 800188a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800188c:	2302      	movs	r3, #2
 800188e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	4619      	mov	r1, r3
 8001894:	4805      	ldr	r0, [pc, #20]	@ (80018ac <MX_FMC_Init+0x98>)
 8001896:	f009 fd46 	bl	800b326 <HAL_SDRAM_Init>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80018a0:	f000 f9e2 	bl	8001c68 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80018a4:	bf00      	nop
 80018a6:	3720      	adds	r7, #32
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000df8 	.word	0x20000df8
 80018b0:	a0000140 	.word	0xa0000140

080018b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b090      	sub	sp, #64	@ 0x40
 80018b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	60da      	str	r2, [r3, #12]
 80018c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018ca:	4bb0      	ldr	r3, [pc, #704]	@ (8001b8c <MX_GPIO_Init+0x2d8>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	4aaf      	ldr	r2, [pc, #700]	@ (8001b8c <MX_GPIO_Init+0x2d8>)
 80018d0:	f043 0310 	orr.w	r3, r3, #16
 80018d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d6:	4bad      	ldr	r3, [pc, #692]	@ (8001b8c <MX_GPIO_Init+0x2d8>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	f003 0310 	and.w	r3, r3, #16
 80018de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80018e2:	4baa      	ldr	r3, [pc, #680]	@ (8001b8c <MX_GPIO_Init+0x2d8>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	4aa9      	ldr	r2, [pc, #676]	@ (8001b8c <MX_GPIO_Init+0x2d8>)
 80018e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ee:	4ba7      	ldr	r3, [pc, #668]	@ (8001b8c <MX_GPIO_Init+0x2d8>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80018f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fa:	4ba4      	ldr	r3, [pc, #656]	@ (8001b8c <MX_GPIO_Init+0x2d8>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	4aa3      	ldr	r2, [pc, #652]	@ (8001b8c <MX_GPIO_Init+0x2d8>)
 8001900:	f043 0302 	orr.w	r3, r3, #2
 8001904:	6313      	str	r3, [r2, #48]	@ 0x30
 8001906:	4ba1      	ldr	r3, [pc, #644]	@ (8001b8c <MX_GPIO_Init+0x2d8>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	623b      	str	r3, [r7, #32]
 8001910:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001912:	4b9e      	ldr	r3, [pc, #632]	@ (8001b8c <MX_GPIO_Init+0x2d8>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001916:	4a9d      	ldr	r2, [pc, #628]	@ (8001b8c <MX_GPIO_Init+0x2d8>)
 8001918:	f043 0308 	orr.w	r3, r3, #8
 800191c:	6313      	str	r3, [r2, #48]	@ 0x30
 800191e:	4b9b      	ldr	r3, [pc, #620]	@ (8001b8c <MX_GPIO_Init+0x2d8>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	61fb      	str	r3, [r7, #28]
 8001928:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800192a:	4b98      	ldr	r3, [pc, #608]	@ (8001b8c <MX_GPIO_Init+0x2d8>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192e:	4a97      	ldr	r2, [pc, #604]	@ (8001b8c <MX_GPIO_Init+0x2d8>)
 8001930:	f043 0304 	orr.w	r3, r3, #4
 8001934:	6313      	str	r3, [r2, #48]	@ 0x30
 8001936:	4b95      	ldr	r3, [pc, #596]	@ (8001b8c <MX_GPIO_Init+0x2d8>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193a:	f003 0304 	and.w	r3, r3, #4
 800193e:	61bb      	str	r3, [r7, #24]
 8001940:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001942:	4b92      	ldr	r3, [pc, #584]	@ (8001b8c <MX_GPIO_Init+0x2d8>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001946:	4a91      	ldr	r2, [pc, #580]	@ (8001b8c <MX_GPIO_Init+0x2d8>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6313      	str	r3, [r2, #48]	@ 0x30
 800194e:	4b8f      	ldr	r3, [pc, #572]	@ (8001b8c <MX_GPIO_Init+0x2d8>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800195a:	4b8c      	ldr	r3, [pc, #560]	@ (8001b8c <MX_GPIO_Init+0x2d8>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195e:	4a8b      	ldr	r2, [pc, #556]	@ (8001b8c <MX_GPIO_Init+0x2d8>)
 8001960:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001964:	6313      	str	r3, [r2, #48]	@ 0x30
 8001966:	4b89      	ldr	r3, [pc, #548]	@ (8001b8c <MX_GPIO_Init+0x2d8>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800196e:	613b      	str	r3, [r7, #16]
 8001970:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001972:	4b86      	ldr	r3, [pc, #536]	@ (8001b8c <MX_GPIO_Init+0x2d8>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001976:	4a85      	ldr	r2, [pc, #532]	@ (8001b8c <MX_GPIO_Init+0x2d8>)
 8001978:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800197c:	6313      	str	r3, [r2, #48]	@ 0x30
 800197e:	4b83      	ldr	r3, [pc, #524]	@ (8001b8c <MX_GPIO_Init+0x2d8>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001982:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800198a:	4b80      	ldr	r3, [pc, #512]	@ (8001b8c <MX_GPIO_Init+0x2d8>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198e:	4a7f      	ldr	r2, [pc, #508]	@ (8001b8c <MX_GPIO_Init+0x2d8>)
 8001990:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001994:	6313      	str	r3, [r2, #48]	@ 0x30
 8001996:	4b7d      	ldr	r3, [pc, #500]	@ (8001b8c <MX_GPIO_Init+0x2d8>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019a2:	4b7a      	ldr	r3, [pc, #488]	@ (8001b8c <MX_GPIO_Init+0x2d8>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	4a79      	ldr	r2, [pc, #484]	@ (8001b8c <MX_GPIO_Init+0x2d8>)
 80019a8:	f043 0320 	orr.w	r3, r3, #32
 80019ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ae:	4b77      	ldr	r3, [pc, #476]	@ (8001b8c <MX_GPIO_Init+0x2d8>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b2:	f003 0320 	and.w	r3, r3, #32
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019ba:	4b74      	ldr	r3, [pc, #464]	@ (8001b8c <MX_GPIO_Init+0x2d8>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019be:	4a73      	ldr	r2, [pc, #460]	@ (8001b8c <MX_GPIO_Init+0x2d8>)
 80019c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c6:	4b71      	ldr	r3, [pc, #452]	@ (8001b8c <MX_GPIO_Init+0x2d8>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ce:	603b      	str	r3, [r7, #0]
 80019d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80019d2:	2201      	movs	r2, #1
 80019d4:	2120      	movs	r1, #32
 80019d6:	486e      	ldr	r0, [pc, #440]	@ (8001b90 <MX_GPIO_Init+0x2dc>)
 80019d8:	f003 fb58 	bl	800508c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80019dc:	2200      	movs	r2, #0
 80019de:	210c      	movs	r1, #12
 80019e0:	486c      	ldr	r0, [pc, #432]	@ (8001b94 <MX_GPIO_Init+0x2e0>)
 80019e2:	f003 fb53 	bl	800508c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80019e6:	2201      	movs	r2, #1
 80019e8:	2108      	movs	r1, #8
 80019ea:	486b      	ldr	r0, [pc, #428]	@ (8001b98 <MX_GPIO_Init+0x2e4>)
 80019ec:	f003 fb4e 	bl	800508c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80019f0:	2201      	movs	r2, #1
 80019f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019f6:	4867      	ldr	r0, [pc, #412]	@ (8001b94 <MX_GPIO_Init+0x2e0>)
 80019f8:	f003 fb48 	bl	800508c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80019fc:	2200      	movs	r2, #0
 80019fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a02:	4866      	ldr	r0, [pc, #408]	@ (8001b9c <MX_GPIO_Init+0x2e8>)
 8001a04:	f003 fb42 	bl	800508c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	21c8      	movs	r1, #200	@ 0xc8
 8001a0c:	4864      	ldr	r0, [pc, #400]	@ (8001ba0 <MX_GPIO_Init+0x2ec>)
 8001a0e:	f003 fb3d 	bl	800508c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001a12:	2308      	movs	r3, #8
 8001a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a16:	2300      	movs	r3, #0
 8001a18:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a22:	4619      	mov	r1, r3
 8001a24:	485f      	ldr	r0, [pc, #380]	@ (8001ba4 <MX_GPIO_Init+0x2f0>)
 8001a26:	f003 f96d 	bl	8004d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001a2a:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8001a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a30:	2302      	movs	r3, #2
 8001a32:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001a3c:	230a      	movs	r3, #10
 8001a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a40:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a44:	4619      	mov	r1, r3
 8001a46:	4858      	ldr	r0, [pc, #352]	@ (8001ba8 <MX_GPIO_Init+0x2f4>)
 8001a48:	f003 f95c 	bl	8004d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001a4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a52:	2300      	movs	r3, #0
 8001a54:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4852      	ldr	r0, [pc, #328]	@ (8001bac <MX_GPIO_Init+0x2f8>)
 8001a62:	f003 f94f 	bl	8004d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001a66:	2340      	movs	r3, #64	@ 0x40
 8001a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a6a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001a6e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001a74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4845      	ldr	r0, [pc, #276]	@ (8001b90 <MX_GPIO_Init+0x2dc>)
 8001a7c:	f003 f942 	bl	8004d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001a80:	2320      	movs	r3, #32
 8001a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a84:	2301      	movs	r3, #1
 8001a86:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001a90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a94:	4619      	mov	r1, r3
 8001a96:	483e      	ldr	r0, [pc, #248]	@ (8001b90 <MX_GPIO_Init+0x2dc>)
 8001a98:	f003 f934 	bl	8004d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8001a9c:	f241 030c 	movw	r3, #4108	@ 0x100c
 8001aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001aae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4837      	ldr	r0, [pc, #220]	@ (8001b94 <MX_GPIO_Init+0x2e0>)
 8001ab6:	f003 f925 	bl	8004d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001aba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001ac8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001acc:	4619      	mov	r1, r3
 8001ace:	4838      	ldr	r0, [pc, #224]	@ (8001bb0 <MX_GPIO_Init+0x2fc>)
 8001ad0:	f003 f918 	bl	8004d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001ad4:	2308      	movs	r3, #8
 8001ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001adc:	2300      	movs	r3, #0
 8001ade:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001ae4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ae8:	4619      	mov	r1, r3
 8001aea:	482b      	ldr	r0, [pc, #172]	@ (8001b98 <MX_GPIO_Init+0x2e4>)
 8001aec:	f003 f90a 	bl	8004d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001af0:	2310      	movs	r3, #16
 8001af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001af4:	2300      	movs	r3, #0
 8001af6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001afc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b00:	4619      	mov	r1, r3
 8001b02:	4823      	ldr	r0, [pc, #140]	@ (8001b90 <MX_GPIO_Init+0x2dc>)
 8001b04:	f003 f8fe 	bl	8004d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001b08:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	481f      	ldr	r0, [pc, #124]	@ (8001b9c <MX_GPIO_Init+0x2e8>)
 8001b1e:	f003 f8f1 	bl	8004d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001b22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b30:	2300      	movs	r3, #0
 8001b32:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001b34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4818      	ldr	r0, [pc, #96]	@ (8001b9c <MX_GPIO_Init+0x2e8>)
 8001b3c:	f003 f8e2 	bl	8004d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001b40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b46:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001b4a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001b50:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b54:	4619      	mov	r1, r3
 8001b56:	480f      	ldr	r0, [pc, #60]	@ (8001b94 <MX_GPIO_Init+0x2e0>)
 8001b58:	f003 f8d4 	bl	8004d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001b5c:	2310      	movs	r3, #16
 8001b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b60:	2302      	movs	r3, #2
 8001b62:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b6c:	230a      	movs	r3, #10
 8001b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001b70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b74:	4619      	mov	r1, r3
 8001b76:	4809      	ldr	r0, [pc, #36]	@ (8001b9c <MX_GPIO_Init+0x2e8>)
 8001b78:	f003 f8c4 	bl	8004d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001b7c:	23c8      	movs	r3, #200	@ 0xc8
 8001b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b80:	2301      	movs	r3, #1
 8001b82:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b88:	e014      	b.n	8001bb4 <MX_GPIO_Init+0x300>
 8001b8a:	bf00      	nop
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40020c00 	.word	0x40020c00
 8001b94:	40022000 	.word	0x40022000
 8001b98:	40022800 	.word	0x40022800
 8001b9c:	40021c00 	.word	0x40021c00
 8001ba0:	40021800 	.word	0x40021800
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	40020400 	.word	0x40020400
 8001bac:	40022400 	.word	0x40022400
 8001bb0:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bb8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4819      	ldr	r0, [pc, #100]	@ (8001c24 <MX_GPIO_Init+0x370>)
 8001bc0:	f003 f8a0 	bl	8004d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001bc4:	2305      	movs	r3, #5
 8001bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001bd4:	230a      	movs	r3, #10
 8001bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bd8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4812      	ldr	r0, [pc, #72]	@ (8001c28 <MX_GPIO_Init+0x374>)
 8001be0:	f003 f890 	bl	8004d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001be4:	2304      	movs	r3, #4
 8001be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001be8:	2300      	movs	r3, #0
 8001bea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001bf0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	480b      	ldr	r0, [pc, #44]	@ (8001c24 <MX_GPIO_Init+0x370>)
 8001bf8:	f003 f884 	bl	8004d04 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001bfc:	2328      	movs	r3, #40	@ 0x28
 8001bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c00:	2302      	movs	r3, #2
 8001c02:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001c0c:	230a      	movs	r3, #10
 8001c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c14:	4619      	mov	r1, r3
 8001c16:	4805      	ldr	r0, [pc, #20]	@ (8001c2c <MX_GPIO_Init+0x378>)
 8001c18:	f003 f874 	bl	8004d04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c1c:	bf00      	nop
 8001c1e:	3740      	adds	r7, #64	@ 0x40
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40021800 	.word	0x40021800
 8001c28:	40020800 	.word	0x40020800
 8001c2c:	40020000 	.word	0x40020000

08001c30 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001c38:	f012 faac 	bl	8014194 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001c3c:	2001      	movs	r0, #1
 8001c3e:	f00f ffd1 	bl	8011be4 <osDelay>
 8001c42:	e7fb      	b.n	8001c3c <StartDefaultTask+0xc>

08001c44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a04      	ldr	r2, [pc, #16]	@ (8001c64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d101      	bne.n	8001c5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c56:	f001 fa71 	bl	800313c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40001000 	.word	0x40001000

08001c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c6c:	b672      	cpsid	i
}
 8001c6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c70:	bf00      	nop
 8001c72:	e7fd      	b.n	8001c70 <Error_Handler+0x8>

08001c74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c7a:	4b11      	ldr	r3, [pc, #68]	@ (8001cc0 <HAL_MspInit+0x4c>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7e:	4a10      	ldr	r2, [pc, #64]	@ (8001cc0 <HAL_MspInit+0x4c>)
 8001c80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c84:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c86:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc0 <HAL_MspInit+0x4c>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c8e:	607b      	str	r3, [r7, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c92:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc0 <HAL_MspInit+0x4c>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c96:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc0 <HAL_MspInit+0x4c>)
 8001c98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c9e:	4b08      	ldr	r3, [pc, #32]	@ (8001cc0 <HAL_MspInit+0x4c>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ca6:	603b      	str	r3, [r7, #0]
 8001ca8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001caa:	2200      	movs	r2, #0
 8001cac:	210f      	movs	r1, #15
 8001cae:	f06f 0001 	mvn.w	r0, #1
 8001cb2:	f001 fdd3 	bl	800385c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40023800 	.word	0x40023800

08001cc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08a      	sub	sp, #40	@ 0x28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a21      	ldr	r2, [pc, #132]	@ (8001d68 <HAL_ADC_MspInit+0xa4>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d13c      	bne.n	8001d60 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001ce6:	4b21      	ldr	r3, [pc, #132]	@ (8001d6c <HAL_ADC_MspInit+0xa8>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cea:	4a20      	ldr	r2, [pc, #128]	@ (8001d6c <HAL_ADC_MspInit+0xa8>)
 8001cec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cf0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cf2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d6c <HAL_ADC_MspInit+0xa8>)
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cfe:	4b1b      	ldr	r3, [pc, #108]	@ (8001d6c <HAL_ADC_MspInit+0xa8>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d02:	4a1a      	ldr	r2, [pc, #104]	@ (8001d6c <HAL_ADC_MspInit+0xa8>)
 8001d04:	f043 0320 	orr.w	r3, r3, #32
 8001d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d0a:	4b18      	ldr	r3, [pc, #96]	@ (8001d6c <HAL_ADC_MspInit+0xa8>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0e:	f003 0320 	and.w	r3, r3, #32
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d16:	4b15      	ldr	r3, [pc, #84]	@ (8001d6c <HAL_ADC_MspInit+0xa8>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1a:	4a14      	ldr	r2, [pc, #80]	@ (8001d6c <HAL_ADC_MspInit+0xa8>)
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d22:	4b12      	ldr	r3, [pc, #72]	@ (8001d6c <HAL_ADC_MspInit+0xa8>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	60bb      	str	r3, [r7, #8]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001d2e:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8001d32:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d34:	2303      	movs	r3, #3
 8001d36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	4619      	mov	r1, r3
 8001d42:	480b      	ldr	r0, [pc, #44]	@ (8001d70 <HAL_ADC_MspInit+0xac>)
 8001d44:	f002 ffde 	bl	8004d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001d54:	f107 0314 	add.w	r3, r7, #20
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4806      	ldr	r0, [pc, #24]	@ (8001d74 <HAL_ADC_MspInit+0xb0>)
 8001d5c:	f002 ffd2 	bl	8004d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001d60:	bf00      	nop
 8001d62:	3728      	adds	r7, #40	@ 0x28
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40012200 	.word	0x40012200
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	40021400 	.word	0x40021400
 8001d74:	40020000 	.word	0x40020000

08001d78 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a0a      	ldr	r2, [pc, #40]	@ (8001db0 <HAL_CRC_MspInit+0x38>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d10b      	bne.n	8001da2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001db4 <HAL_CRC_MspInit+0x3c>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8e:	4a09      	ldr	r2, [pc, #36]	@ (8001db4 <HAL_CRC_MspInit+0x3c>)
 8001d90:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d96:	4b07      	ldr	r3, [pc, #28]	@ (8001db4 <HAL_CRC_MspInit+0x3c>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001da2:	bf00      	nop
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	40023000 	.word	0x40023000
 8001db4:	40023800 	.word	0x40023800

08001db8 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08e      	sub	sp, #56	@ 0x38
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a50      	ldr	r2, [pc, #320]	@ (8001f18 <HAL_DCMI_MspInit+0x160>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	f040 809a 	bne.w	8001f10 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001ddc:	4b4f      	ldr	r3, [pc, #316]	@ (8001f1c <HAL_DCMI_MspInit+0x164>)
 8001dde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001de0:	4a4e      	ldr	r2, [pc, #312]	@ (8001f1c <HAL_DCMI_MspInit+0x164>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	6353      	str	r3, [r2, #52]	@ 0x34
 8001de8:	4b4c      	ldr	r3, [pc, #304]	@ (8001f1c <HAL_DCMI_MspInit+0x164>)
 8001dea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	623b      	str	r3, [r7, #32]
 8001df2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001df4:	4b49      	ldr	r3, [pc, #292]	@ (8001f1c <HAL_DCMI_MspInit+0x164>)
 8001df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df8:	4a48      	ldr	r2, [pc, #288]	@ (8001f1c <HAL_DCMI_MspInit+0x164>)
 8001dfa:	f043 0310 	orr.w	r3, r3, #16
 8001dfe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e00:	4b46      	ldr	r3, [pc, #280]	@ (8001f1c <HAL_DCMI_MspInit+0x164>)
 8001e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e04:	f003 0310 	and.w	r3, r3, #16
 8001e08:	61fb      	str	r3, [r7, #28]
 8001e0a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e0c:	4b43      	ldr	r3, [pc, #268]	@ (8001f1c <HAL_DCMI_MspInit+0x164>)
 8001e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e10:	4a42      	ldr	r2, [pc, #264]	@ (8001f1c <HAL_DCMI_MspInit+0x164>)
 8001e12:	f043 0308 	orr.w	r3, r3, #8
 8001e16:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e18:	4b40      	ldr	r3, [pc, #256]	@ (8001f1c <HAL_DCMI_MspInit+0x164>)
 8001e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1c:	f003 0308 	and.w	r3, r3, #8
 8001e20:	61bb      	str	r3, [r7, #24]
 8001e22:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e24:	4b3d      	ldr	r3, [pc, #244]	@ (8001f1c <HAL_DCMI_MspInit+0x164>)
 8001e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e28:	4a3c      	ldr	r2, [pc, #240]	@ (8001f1c <HAL_DCMI_MspInit+0x164>)
 8001e2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e30:	4b3a      	ldr	r3, [pc, #232]	@ (8001f1c <HAL_DCMI_MspInit+0x164>)
 8001e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e38:	617b      	str	r3, [r7, #20]
 8001e3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e3c:	4b37      	ldr	r3, [pc, #220]	@ (8001f1c <HAL_DCMI_MspInit+0x164>)
 8001e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e40:	4a36      	ldr	r2, [pc, #216]	@ (8001f1c <HAL_DCMI_MspInit+0x164>)
 8001e42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e46:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e48:	4b34      	ldr	r3, [pc, #208]	@ (8001f1c <HAL_DCMI_MspInit+0x164>)
 8001e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e50:	613b      	str	r3, [r7, #16]
 8001e52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e54:	4b31      	ldr	r3, [pc, #196]	@ (8001f1c <HAL_DCMI_MspInit+0x164>)
 8001e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e58:	4a30      	ldr	r2, [pc, #192]	@ (8001f1c <HAL_DCMI_MspInit+0x164>)
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e60:	4b2e      	ldr	r3, [pc, #184]	@ (8001f1c <HAL_DCMI_MspInit+0x164>)
 8001e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001e6c:	2360      	movs	r3, #96	@ 0x60
 8001e6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e70:	2302      	movs	r3, #2
 8001e72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001e7c:	230d      	movs	r3, #13
 8001e7e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e84:	4619      	mov	r1, r3
 8001e86:	4826      	ldr	r0, [pc, #152]	@ (8001f20 <HAL_DCMI_MspInit+0x168>)
 8001e88:	f002 ff3c 	bl	8004d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001e8c:	2308      	movs	r3, #8
 8001e8e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e90:	2302      	movs	r3, #2
 8001e92:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001e9c:	230d      	movs	r3, #13
 8001e9e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001ea0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	481f      	ldr	r0, [pc, #124]	@ (8001f24 <HAL_DCMI_MspInit+0x16c>)
 8001ea8:	f002 ff2c 	bl	8004d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001eac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001eb0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001ebe:	230d      	movs	r3, #13
 8001ec0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001ec2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4817      	ldr	r0, [pc, #92]	@ (8001f28 <HAL_DCMI_MspInit+0x170>)
 8001eca:	f002 ff1b 	bl	8004d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001ece:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8001ed2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001edc:	2300      	movs	r3, #0
 8001ede:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001ee0:	230d      	movs	r3, #13
 8001ee2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ee4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4810      	ldr	r0, [pc, #64]	@ (8001f2c <HAL_DCMI_MspInit+0x174>)
 8001eec:	f002 ff0a 	bl	8004d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001ef0:	2350      	movs	r3, #80	@ 0x50
 8001ef2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efc:	2300      	movs	r3, #0
 8001efe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001f00:	230d      	movs	r3, #13
 8001f02:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4809      	ldr	r0, [pc, #36]	@ (8001f30 <HAL_DCMI_MspInit+0x178>)
 8001f0c:	f002 fefa 	bl	8004d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001f10:	bf00      	nop
 8001f12:	3738      	adds	r7, #56	@ 0x38
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	50050000 	.word	0x50050000
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40020c00 	.word	0x40020c00
 8001f28:	40021800 	.word	0x40021800
 8001f2c:	40021c00 	.word	0x40021c00
 8001f30:	40020000 	.word	0x40020000

08001f34 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a0d      	ldr	r2, [pc, #52]	@ (8001f78 <HAL_DMA2D_MspInit+0x44>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d113      	bne.n	8001f6e <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001f46:	4b0d      	ldr	r3, [pc, #52]	@ (8001f7c <HAL_DMA2D_MspInit+0x48>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4a:	4a0c      	ldr	r2, [pc, #48]	@ (8001f7c <HAL_DMA2D_MspInit+0x48>)
 8001f4c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f52:	4b0a      	ldr	r3, [pc, #40]	@ (8001f7c <HAL_DMA2D_MspInit+0x48>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2105      	movs	r1, #5
 8001f62:	205a      	movs	r0, #90	@ 0x5a
 8001f64:	f001 fc7a 	bl	800385c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001f68:	205a      	movs	r0, #90	@ 0x5a
 8001f6a:	f001 fc93 	bl	8003894 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001f6e:	bf00      	nop
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	4002b000 	.word	0x4002b000
 8001f7c:	40023800 	.word	0x40023800

08001f80 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08e      	sub	sp, #56	@ 0x38
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a3f      	ldr	r2, [pc, #252]	@ (800209c <HAL_ETH_MspInit+0x11c>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d178      	bne.n	8002094 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001fa2:	4b3f      	ldr	r3, [pc, #252]	@ (80020a0 <HAL_ETH_MspInit+0x120>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	4a3e      	ldr	r2, [pc, #248]	@ (80020a0 <HAL_ETH_MspInit+0x120>)
 8001fa8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fae:	4b3c      	ldr	r3, [pc, #240]	@ (80020a0 <HAL_ETH_MspInit+0x120>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fb6:	623b      	str	r3, [r7, #32]
 8001fb8:	6a3b      	ldr	r3, [r7, #32]
 8001fba:	4b39      	ldr	r3, [pc, #228]	@ (80020a0 <HAL_ETH_MspInit+0x120>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbe:	4a38      	ldr	r2, [pc, #224]	@ (80020a0 <HAL_ETH_MspInit+0x120>)
 8001fc0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fc6:	4b36      	ldr	r3, [pc, #216]	@ (80020a0 <HAL_ETH_MspInit+0x120>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001fce:	61fb      	str	r3, [r7, #28]
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	4b33      	ldr	r3, [pc, #204]	@ (80020a0 <HAL_ETH_MspInit+0x120>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd6:	4a32      	ldr	r2, [pc, #200]	@ (80020a0 <HAL_ETH_MspInit+0x120>)
 8001fd8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fde:	4b30      	ldr	r3, [pc, #192]	@ (80020a0 <HAL_ETH_MspInit+0x120>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001fe6:	61bb      	str	r3, [r7, #24]
 8001fe8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fea:	4b2d      	ldr	r3, [pc, #180]	@ (80020a0 <HAL_ETH_MspInit+0x120>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fee:	4a2c      	ldr	r2, [pc, #176]	@ (80020a0 <HAL_ETH_MspInit+0x120>)
 8001ff0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ff6:	4b2a      	ldr	r3, [pc, #168]	@ (80020a0 <HAL_ETH_MspInit+0x120>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ffe:	617b      	str	r3, [r7, #20]
 8002000:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002002:	4b27      	ldr	r3, [pc, #156]	@ (80020a0 <HAL_ETH_MspInit+0x120>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002006:	4a26      	ldr	r2, [pc, #152]	@ (80020a0 <HAL_ETH_MspInit+0x120>)
 8002008:	f043 0304 	orr.w	r3, r3, #4
 800200c:	6313      	str	r3, [r2, #48]	@ 0x30
 800200e:	4b24      	ldr	r3, [pc, #144]	@ (80020a0 <HAL_ETH_MspInit+0x120>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002012:	f003 0304 	and.w	r3, r3, #4
 8002016:	613b      	str	r3, [r7, #16]
 8002018:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800201a:	4b21      	ldr	r3, [pc, #132]	@ (80020a0 <HAL_ETH_MspInit+0x120>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201e:	4a20      	ldr	r2, [pc, #128]	@ (80020a0 <HAL_ETH_MspInit+0x120>)
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	6313      	str	r3, [r2, #48]	@ 0x30
 8002026:	4b1e      	ldr	r3, [pc, #120]	@ (80020a0 <HAL_ETH_MspInit+0x120>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8002032:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8002036:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002038:	2302      	movs	r3, #2
 800203a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002040:	2303      	movs	r3, #3
 8002042:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002044:	230b      	movs	r3, #11
 8002046:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002048:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800204c:	4619      	mov	r1, r3
 800204e:	4815      	ldr	r0, [pc, #84]	@ (80020a4 <HAL_ETH_MspInit+0x124>)
 8002050:	f002 fe58 	bl	8004d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002054:	2332      	movs	r3, #50	@ 0x32
 8002056:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002058:	2302      	movs	r3, #2
 800205a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002060:	2303      	movs	r3, #3
 8002062:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002064:	230b      	movs	r3, #11
 8002066:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002068:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800206c:	4619      	mov	r1, r3
 800206e:	480e      	ldr	r0, [pc, #56]	@ (80020a8 <HAL_ETH_MspInit+0x128>)
 8002070:	f002 fe48 	bl	8004d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002074:	2386      	movs	r3, #134	@ 0x86
 8002076:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002078:	2302      	movs	r3, #2
 800207a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002080:	2303      	movs	r3, #3
 8002082:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002084:	230b      	movs	r3, #11
 8002086:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002088:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800208c:	4619      	mov	r1, r3
 800208e:	4807      	ldr	r0, [pc, #28]	@ (80020ac <HAL_ETH_MspInit+0x12c>)
 8002090:	f002 fe38 	bl	8004d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002094:	bf00      	nop
 8002096:	3738      	adds	r7, #56	@ 0x38
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40028000 	.word	0x40028000
 80020a0:	40023800 	.word	0x40023800
 80020a4:	40021800 	.word	0x40021800
 80020a8:	40020800 	.word	0x40020800
 80020ac:	40020000 	.word	0x40020000

080020b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b0ac      	sub	sp, #176	@ 0xb0
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]
 80020c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020c8:	f107 0318 	add.w	r3, r7, #24
 80020cc:	2284      	movs	r2, #132	@ 0x84
 80020ce:	2100      	movs	r1, #0
 80020d0:	4618      	mov	r0, r3
 80020d2:	f012 fc15 	bl	8014900 <memset>
  if(hi2c->Instance==I2C1)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a44      	ldr	r2, [pc, #272]	@ (80021ec <HAL_I2C_MspInit+0x13c>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d13d      	bne.n	800215c <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80020e0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80020e4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80020e6:	2300      	movs	r3, #0
 80020e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020ea:	f107 0318 	add.w	r3, r7, #24
 80020ee:	4618      	mov	r0, r3
 80020f0:	f006 fb7c 	bl	80087ec <HAL_RCCEx_PeriphCLKConfig>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80020fa:	f7ff fdb5 	bl	8001c68 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020fe:	4b3c      	ldr	r3, [pc, #240]	@ (80021f0 <HAL_I2C_MspInit+0x140>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002102:	4a3b      	ldr	r2, [pc, #236]	@ (80021f0 <HAL_I2C_MspInit+0x140>)
 8002104:	f043 0302 	orr.w	r3, r3, #2
 8002108:	6313      	str	r3, [r2, #48]	@ 0x30
 800210a:	4b39      	ldr	r3, [pc, #228]	@ (80021f0 <HAL_I2C_MspInit+0x140>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	617b      	str	r3, [r7, #20]
 8002114:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8002116:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800211a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800211e:	2312      	movs	r3, #18
 8002120:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002124:	2301      	movs	r3, #1
 8002126:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212a:	2300      	movs	r3, #0
 800212c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002130:	2304      	movs	r3, #4
 8002132:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002136:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800213a:	4619      	mov	r1, r3
 800213c:	482d      	ldr	r0, [pc, #180]	@ (80021f4 <HAL_I2C_MspInit+0x144>)
 800213e:	f002 fde1 	bl	8004d04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002142:	4b2b      	ldr	r3, [pc, #172]	@ (80021f0 <HAL_I2C_MspInit+0x140>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002146:	4a2a      	ldr	r2, [pc, #168]	@ (80021f0 <HAL_I2C_MspInit+0x140>)
 8002148:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800214c:	6413      	str	r3, [r2, #64]	@ 0x40
 800214e:	4b28      	ldr	r3, [pc, #160]	@ (80021f0 <HAL_I2C_MspInit+0x140>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002152:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002156:	613b      	str	r3, [r7, #16]
 8002158:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800215a:	e042      	b.n	80021e2 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a25      	ldr	r2, [pc, #148]	@ (80021f8 <HAL_I2C_MspInit+0x148>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d13d      	bne.n	80021e2 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002166:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800216a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800216c:	2300      	movs	r3, #0
 800216e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002172:	f107 0318 	add.w	r3, r7, #24
 8002176:	4618      	mov	r0, r3
 8002178:	f006 fb38 	bl	80087ec <HAL_RCCEx_PeriphCLKConfig>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8002182:	f7ff fd71 	bl	8001c68 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002186:	4b1a      	ldr	r3, [pc, #104]	@ (80021f0 <HAL_I2C_MspInit+0x140>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218a:	4a19      	ldr	r2, [pc, #100]	@ (80021f0 <HAL_I2C_MspInit+0x140>)
 800218c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002190:	6313      	str	r3, [r2, #48]	@ 0x30
 8002192:	4b17      	ldr	r3, [pc, #92]	@ (80021f0 <HAL_I2C_MspInit+0x140>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800219e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80021a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021a6:	2312      	movs	r3, #18
 80021a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021ac:	2301      	movs	r3, #1
 80021ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b2:	2303      	movs	r3, #3
 80021b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80021b8:	2304      	movs	r3, #4
 80021ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80021be:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80021c2:	4619      	mov	r1, r3
 80021c4:	480d      	ldr	r0, [pc, #52]	@ (80021fc <HAL_I2C_MspInit+0x14c>)
 80021c6:	f002 fd9d 	bl	8004d04 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80021ca:	4b09      	ldr	r3, [pc, #36]	@ (80021f0 <HAL_I2C_MspInit+0x140>)
 80021cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ce:	4a08      	ldr	r2, [pc, #32]	@ (80021f0 <HAL_I2C_MspInit+0x140>)
 80021d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80021d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80021d6:	4b06      	ldr	r3, [pc, #24]	@ (80021f0 <HAL_I2C_MspInit+0x140>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021de:	60bb      	str	r3, [r7, #8]
 80021e0:	68bb      	ldr	r3, [r7, #8]
}
 80021e2:	bf00      	nop
 80021e4:	37b0      	adds	r7, #176	@ 0xb0
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40005400 	.word	0x40005400
 80021f0:	40023800 	.word	0x40023800
 80021f4:	40020400 	.word	0x40020400
 80021f8:	40005c00 	.word	0x40005c00
 80021fc:	40021c00 	.word	0x40021c00

08002200 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08e      	sub	sp, #56	@ 0x38
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002208:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	60da      	str	r2, [r3, #12]
 8002216:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a55      	ldr	r2, [pc, #340]	@ (8002374 <HAL_LTDC_MspInit+0x174>)
 800221e:	4293      	cmp	r3, r2
 8002220:	f040 80a3 	bne.w	800236a <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002224:	4b54      	ldr	r3, [pc, #336]	@ (8002378 <HAL_LTDC_MspInit+0x178>)
 8002226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002228:	4a53      	ldr	r2, [pc, #332]	@ (8002378 <HAL_LTDC_MspInit+0x178>)
 800222a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800222e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002230:	4b51      	ldr	r3, [pc, #324]	@ (8002378 <HAL_LTDC_MspInit+0x178>)
 8002232:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002234:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002238:	623b      	str	r3, [r7, #32]
 800223a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800223c:	4b4e      	ldr	r3, [pc, #312]	@ (8002378 <HAL_LTDC_MspInit+0x178>)
 800223e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002240:	4a4d      	ldr	r2, [pc, #308]	@ (8002378 <HAL_LTDC_MspInit+0x178>)
 8002242:	f043 0310 	orr.w	r3, r3, #16
 8002246:	6313      	str	r3, [r2, #48]	@ 0x30
 8002248:	4b4b      	ldr	r3, [pc, #300]	@ (8002378 <HAL_LTDC_MspInit+0x178>)
 800224a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224c:	f003 0310 	and.w	r3, r3, #16
 8002250:	61fb      	str	r3, [r7, #28]
 8002252:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002254:	4b48      	ldr	r3, [pc, #288]	@ (8002378 <HAL_LTDC_MspInit+0x178>)
 8002256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002258:	4a47      	ldr	r2, [pc, #284]	@ (8002378 <HAL_LTDC_MspInit+0x178>)
 800225a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800225e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002260:	4b45      	ldr	r3, [pc, #276]	@ (8002378 <HAL_LTDC_MspInit+0x178>)
 8002262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002264:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002268:	61bb      	str	r3, [r7, #24]
 800226a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800226c:	4b42      	ldr	r3, [pc, #264]	@ (8002378 <HAL_LTDC_MspInit+0x178>)
 800226e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002270:	4a41      	ldr	r2, [pc, #260]	@ (8002378 <HAL_LTDC_MspInit+0x178>)
 8002272:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002276:	6313      	str	r3, [r2, #48]	@ 0x30
 8002278:	4b3f      	ldr	r3, [pc, #252]	@ (8002378 <HAL_LTDC_MspInit+0x178>)
 800227a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002280:	617b      	str	r3, [r7, #20]
 8002282:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002284:	4b3c      	ldr	r3, [pc, #240]	@ (8002378 <HAL_LTDC_MspInit+0x178>)
 8002286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002288:	4a3b      	ldr	r2, [pc, #236]	@ (8002378 <HAL_LTDC_MspInit+0x178>)
 800228a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800228e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002290:	4b39      	ldr	r3, [pc, #228]	@ (8002378 <HAL_LTDC_MspInit+0x178>)
 8002292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002298:	613b      	str	r3, [r7, #16]
 800229a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800229c:	4b36      	ldr	r3, [pc, #216]	@ (8002378 <HAL_LTDC_MspInit+0x178>)
 800229e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a0:	4a35      	ldr	r2, [pc, #212]	@ (8002378 <HAL_LTDC_MspInit+0x178>)
 80022a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80022a8:	4b33      	ldr	r3, [pc, #204]	@ (8002378 <HAL_LTDC_MspInit+0x178>)
 80022aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80022b4:	2310      	movs	r3, #16
 80022b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b8:	2302      	movs	r3, #2
 80022ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022bc:	2300      	movs	r3, #0
 80022be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c0:	2300      	movs	r3, #0
 80022c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80022c4:	230e      	movs	r3, #14
 80022c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80022c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022cc:	4619      	mov	r1, r3
 80022ce:	482b      	ldr	r0, [pc, #172]	@ (800237c <HAL_LTDC_MspInit+0x17c>)
 80022d0:	f002 fd18 	bl	8004d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80022d4:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80022d8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022da:	2302      	movs	r3, #2
 80022dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e2:	2300      	movs	r3, #0
 80022e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80022e6:	230e      	movs	r3, #14
 80022e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80022ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022ee:	4619      	mov	r1, r3
 80022f0:	4823      	ldr	r0, [pc, #140]	@ (8002380 <HAL_LTDC_MspInit+0x180>)
 80022f2:	f002 fd07 	bl	8004d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80022f6:	23f7      	movs	r3, #247	@ 0xf7
 80022f8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fa:	2302      	movs	r3, #2
 80022fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002302:	2300      	movs	r3, #0
 8002304:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002306:	230e      	movs	r3, #14
 8002308:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800230a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800230e:	4619      	mov	r1, r3
 8002310:	481c      	ldr	r0, [pc, #112]	@ (8002384 <HAL_LTDC_MspInit+0x184>)
 8002312:	f002 fcf7 	bl	8004d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002316:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800231a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231c:	2302      	movs	r3, #2
 800231e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002320:	2300      	movs	r3, #0
 8002322:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002324:	2300      	movs	r3, #0
 8002326:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002328:	2309      	movs	r3, #9
 800232a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800232c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002330:	4619      	mov	r1, r3
 8002332:	4815      	ldr	r0, [pc, #84]	@ (8002388 <HAL_LTDC_MspInit+0x188>)
 8002334:	f002 fce6 	bl	8004d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002338:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 800233c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233e:	2302      	movs	r3, #2
 8002340:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	2300      	movs	r3, #0
 8002344:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002346:	2300      	movs	r3, #0
 8002348:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800234a:	230e      	movs	r3, #14
 800234c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800234e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002352:	4619      	mov	r1, r3
 8002354:	480d      	ldr	r0, [pc, #52]	@ (800238c <HAL_LTDC_MspInit+0x18c>)
 8002356:	f002 fcd5 	bl	8004d04 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800235a:	2200      	movs	r2, #0
 800235c:	2105      	movs	r1, #5
 800235e:	2058      	movs	r0, #88	@ 0x58
 8002360:	f001 fa7c 	bl	800385c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002364:	2058      	movs	r0, #88	@ 0x58
 8002366:	f001 fa95 	bl	8003894 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800236a:	bf00      	nop
 800236c:	3738      	adds	r7, #56	@ 0x38
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40016800 	.word	0x40016800
 8002378:	40023800 	.word	0x40023800
 800237c:	40021000 	.word	0x40021000
 8002380:	40022400 	.word	0x40022400
 8002384:	40022800 	.word	0x40022800
 8002388:	40021800 	.word	0x40021800
 800238c:	40022000 	.word	0x40022000

08002390 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b08c      	sub	sp, #48	@ 0x30
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002398:	f107 031c 	add.w	r3, r7, #28
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	60da      	str	r2, [r3, #12]
 80023a6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a3b      	ldr	r2, [pc, #236]	@ (800249c <HAL_QSPI_MspInit+0x10c>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d170      	bne.n	8002494 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80023b2:	4b3b      	ldr	r3, [pc, #236]	@ (80024a0 <HAL_QSPI_MspInit+0x110>)
 80023b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023b6:	4a3a      	ldr	r2, [pc, #232]	@ (80024a0 <HAL_QSPI_MspInit+0x110>)
 80023b8:	f043 0302 	orr.w	r3, r3, #2
 80023bc:	6393      	str	r3, [r2, #56]	@ 0x38
 80023be:	4b38      	ldr	r3, [pc, #224]	@ (80024a0 <HAL_QSPI_MspInit+0x110>)
 80023c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	61bb      	str	r3, [r7, #24]
 80023c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80023ca:	4b35      	ldr	r3, [pc, #212]	@ (80024a0 <HAL_QSPI_MspInit+0x110>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ce:	4a34      	ldr	r2, [pc, #208]	@ (80024a0 <HAL_QSPI_MspInit+0x110>)
 80023d0:	f043 0310 	orr.w	r3, r3, #16
 80023d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023d6:	4b32      	ldr	r3, [pc, #200]	@ (80024a0 <HAL_QSPI_MspInit+0x110>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023da:	f003 0310 	and.w	r3, r3, #16
 80023de:	617b      	str	r3, [r7, #20]
 80023e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e2:	4b2f      	ldr	r3, [pc, #188]	@ (80024a0 <HAL_QSPI_MspInit+0x110>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e6:	4a2e      	ldr	r2, [pc, #184]	@ (80024a0 <HAL_QSPI_MspInit+0x110>)
 80023e8:	f043 0302 	orr.w	r3, r3, #2
 80023ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ee:	4b2c      	ldr	r3, [pc, #176]	@ (80024a0 <HAL_QSPI_MspInit+0x110>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	613b      	str	r3, [r7, #16]
 80023f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023fa:	4b29      	ldr	r3, [pc, #164]	@ (80024a0 <HAL_QSPI_MspInit+0x110>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fe:	4a28      	ldr	r2, [pc, #160]	@ (80024a0 <HAL_QSPI_MspInit+0x110>)
 8002400:	f043 0308 	orr.w	r3, r3, #8
 8002404:	6313      	str	r3, [r2, #48]	@ 0x30
 8002406:	4b26      	ldr	r3, [pc, #152]	@ (80024a0 <HAL_QSPI_MspInit+0x110>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002412:	2304      	movs	r3, #4
 8002414:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002416:	2302      	movs	r3, #2
 8002418:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241a:	2300      	movs	r3, #0
 800241c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800241e:	2303      	movs	r3, #3
 8002420:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002422:	2309      	movs	r3, #9
 8002424:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002426:	f107 031c 	add.w	r3, r7, #28
 800242a:	4619      	mov	r1, r3
 800242c:	481d      	ldr	r0, [pc, #116]	@ (80024a4 <HAL_QSPI_MspInit+0x114>)
 800242e:	f002 fc69 	bl	8004d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002432:	2340      	movs	r3, #64	@ 0x40
 8002434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002436:	2302      	movs	r3, #2
 8002438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243a:	2300      	movs	r3, #0
 800243c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800243e:	2303      	movs	r3, #3
 8002440:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002442:	230a      	movs	r3, #10
 8002444:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002446:	f107 031c 	add.w	r3, r7, #28
 800244a:	4619      	mov	r1, r3
 800244c:	4816      	ldr	r0, [pc, #88]	@ (80024a8 <HAL_QSPI_MspInit+0x118>)
 800244e:	f002 fc59 	bl	8004d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002452:	2304      	movs	r3, #4
 8002454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002456:	2302      	movs	r3, #2
 8002458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245a:	2300      	movs	r3, #0
 800245c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800245e:	2303      	movs	r3, #3
 8002460:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002462:	2309      	movs	r3, #9
 8002464:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002466:	f107 031c 	add.w	r3, r7, #28
 800246a:	4619      	mov	r1, r3
 800246c:	480e      	ldr	r0, [pc, #56]	@ (80024a8 <HAL_QSPI_MspInit+0x118>)
 800246e:	f002 fc49 	bl	8004d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002472:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8002476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002478:	2302      	movs	r3, #2
 800247a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247c:	2300      	movs	r3, #0
 800247e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002480:	2303      	movs	r3, #3
 8002482:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002484:	2309      	movs	r3, #9
 8002486:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002488:	f107 031c 	add.w	r3, r7, #28
 800248c:	4619      	mov	r1, r3
 800248e:	4807      	ldr	r0, [pc, #28]	@ (80024ac <HAL_QSPI_MspInit+0x11c>)
 8002490:	f002 fc38 	bl	8004d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002494:	bf00      	nop
 8002496:	3730      	adds	r7, #48	@ 0x30
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	a0001000 	.word	0xa0001000
 80024a0:	40023800 	.word	0x40023800
 80024a4:	40021000 	.word	0x40021000
 80024a8:	40020400 	.word	0x40020400
 80024ac:	40020c00 	.word	0x40020c00

080024b0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b0a4      	sub	sp, #144	@ 0x90
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024b8:	f107 030c 	add.w	r3, r7, #12
 80024bc:	2284      	movs	r2, #132	@ 0x84
 80024be:	2100      	movs	r1, #0
 80024c0:	4618      	mov	r0, r3
 80024c2:	f012 fa1d 	bl	8014900 <memset>
  if(hrtc->Instance==RTC)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a0e      	ldr	r2, [pc, #56]	@ (8002504 <HAL_RTC_MspInit+0x54>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d114      	bne.n	80024fa <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80024d0:	2320      	movs	r3, #32
 80024d2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80024d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80024d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024da:	f107 030c 	add.w	r3, r7, #12
 80024de:	4618      	mov	r0, r3
 80024e0:	f006 f984 	bl	80087ec <HAL_RCCEx_PeriphCLKConfig>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80024ea:	f7ff fbbd 	bl	8001c68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80024ee:	4b06      	ldr	r3, [pc, #24]	@ (8002508 <HAL_RTC_MspInit+0x58>)
 80024f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024f2:	4a05      	ldr	r2, [pc, #20]	@ (8002508 <HAL_RTC_MspInit+0x58>)
 80024f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024f8:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80024fa:	bf00      	nop
 80024fc:	3790      	adds	r7, #144	@ 0x90
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40002800 	.word	0x40002800
 8002508:	40023800 	.word	0x40023800

0800250c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b08a      	sub	sp, #40	@ 0x28
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002514:	f107 0314 	add.w	r3, r7, #20
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	605a      	str	r2, [r3, #4]
 800251e:	609a      	str	r2, [r3, #8]
 8002520:	60da      	str	r2, [r3, #12]
 8002522:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a25      	ldr	r2, [pc, #148]	@ (80025c0 <HAL_SD_MspInit+0xb4>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d144      	bne.n	80025b8 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800252e:	4b25      	ldr	r3, [pc, #148]	@ (80025c4 <HAL_SD_MspInit+0xb8>)
 8002530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002532:	4a24      	ldr	r2, [pc, #144]	@ (80025c4 <HAL_SD_MspInit+0xb8>)
 8002534:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002538:	6453      	str	r3, [r2, #68]	@ 0x44
 800253a:	4b22      	ldr	r3, [pc, #136]	@ (80025c4 <HAL_SD_MspInit+0xb8>)
 800253c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800253e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002542:	613b      	str	r3, [r7, #16]
 8002544:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002546:	4b1f      	ldr	r3, [pc, #124]	@ (80025c4 <HAL_SD_MspInit+0xb8>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254a:	4a1e      	ldr	r2, [pc, #120]	@ (80025c4 <HAL_SD_MspInit+0xb8>)
 800254c:	f043 0304 	orr.w	r3, r3, #4
 8002550:	6313      	str	r3, [r2, #48]	@ 0x30
 8002552:	4b1c      	ldr	r3, [pc, #112]	@ (80025c4 <HAL_SD_MspInit+0xb8>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002556:	f003 0304 	and.w	r3, r3, #4
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800255e:	4b19      	ldr	r3, [pc, #100]	@ (80025c4 <HAL_SD_MspInit+0xb8>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002562:	4a18      	ldr	r2, [pc, #96]	@ (80025c4 <HAL_SD_MspInit+0xb8>)
 8002564:	f043 0308 	orr.w	r3, r3, #8
 8002568:	6313      	str	r3, [r2, #48]	@ 0x30
 800256a:	4b16      	ldr	r3, [pc, #88]	@ (80025c4 <HAL_SD_MspInit+0xb8>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256e:	f003 0308 	and.w	r3, r3, #8
 8002572:	60bb      	str	r3, [r7, #8]
 8002574:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8002576:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800257a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257c:	2302      	movs	r3, #2
 800257e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002580:	2300      	movs	r3, #0
 8002582:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002584:	2303      	movs	r3, #3
 8002586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002588:	230c      	movs	r3, #12
 800258a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800258c:	f107 0314 	add.w	r3, r7, #20
 8002590:	4619      	mov	r1, r3
 8002592:	480d      	ldr	r0, [pc, #52]	@ (80025c8 <HAL_SD_MspInit+0xbc>)
 8002594:	f002 fbb6 	bl	8004d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002598:	2304      	movs	r3, #4
 800259a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259c:	2302      	movs	r3, #2
 800259e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a4:	2303      	movs	r3, #3
 80025a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80025a8:	230c      	movs	r3, #12
 80025aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80025ac:	f107 0314 	add.w	r3, r7, #20
 80025b0:	4619      	mov	r1, r3
 80025b2:	4806      	ldr	r0, [pc, #24]	@ (80025cc <HAL_SD_MspInit+0xc0>)
 80025b4:	f002 fba6 	bl	8004d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80025b8:	bf00      	nop
 80025ba:	3728      	adds	r7, #40	@ 0x28
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40012c00 	.word	0x40012c00
 80025c4:	40023800 	.word	0x40023800
 80025c8:	40020800 	.word	0x40020800
 80025cc:	40020c00 	.word	0x40020c00

080025d0 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b0aa      	sub	sp, #168	@ 0xa8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	605a      	str	r2, [r3, #4]
 80025e2:	609a      	str	r2, [r3, #8]
 80025e4:	60da      	str	r2, [r3, #12]
 80025e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025e8:	f107 0310 	add.w	r3, r7, #16
 80025ec:	2284      	movs	r2, #132	@ 0x84
 80025ee:	2100      	movs	r1, #0
 80025f0:	4618      	mov	r0, r3
 80025f2:	f012 f985 	bl	8014900 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 80025fe:	d143      	bne.n	8002688 <HAL_SPDIFRX_MspInit+0xb8>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8002600:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002604:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8002606:	2364      	movs	r3, #100	@ 0x64
 8002608:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800260a:	2302      	movs	r3, #2
 800260c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800260e:	2302      	movs	r3, #2
 8002610:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8002612:	2302      	movs	r3, #2
 8002614:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8002616:	2301      	movs	r3, #1
 8002618:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800261a:	f107 0310 	add.w	r3, r7, #16
 800261e:	4618      	mov	r0, r3
 8002620:	f006 f8e4 	bl	80087ec <HAL_RCCEx_PeriphCLKConfig>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 800262a:	f7ff fb1d 	bl	8001c68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800262e:	4b18      	ldr	r3, [pc, #96]	@ (8002690 <HAL_SPDIFRX_MspInit+0xc0>)
 8002630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002632:	4a17      	ldr	r2, [pc, #92]	@ (8002690 <HAL_SPDIFRX_MspInit+0xc0>)
 8002634:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002638:	6413      	str	r3, [r2, #64]	@ 0x40
 800263a:	4b15      	ldr	r3, [pc, #84]	@ (8002690 <HAL_SPDIFRX_MspInit+0xc0>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002646:	4b12      	ldr	r3, [pc, #72]	@ (8002690 <HAL_SPDIFRX_MspInit+0xc0>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264a:	4a11      	ldr	r2, [pc, #68]	@ (8002690 <HAL_SPDIFRX_MspInit+0xc0>)
 800264c:	f043 0308 	orr.w	r3, r3, #8
 8002650:	6313      	str	r3, [r2, #48]	@ 0x30
 8002652:	4b0f      	ldr	r3, [pc, #60]	@ (8002690 <HAL_SPDIFRX_MspInit+0xc0>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	60bb      	str	r3, [r7, #8]
 800265c:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800265e:	2380      	movs	r3, #128	@ 0x80
 8002660:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002664:	2302      	movs	r3, #2
 8002666:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266a:	2300      	movs	r3, #0
 800266c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002670:	2300      	movs	r3, #0
 8002672:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002676:	2308      	movs	r3, #8
 8002678:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800267c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002680:	4619      	mov	r1, r3
 8002682:	4804      	ldr	r0, [pc, #16]	@ (8002694 <HAL_SPDIFRX_MspInit+0xc4>)
 8002684:	f002 fb3e 	bl	8004d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002688:	bf00      	nop
 800268a:	37a8      	adds	r7, #168	@ 0xa8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40023800 	.word	0x40023800
 8002694:	40020c00 	.word	0x40020c00

08002698 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b08a      	sub	sp, #40	@ 0x28
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a0:	f107 0314 	add.w	r3, r7, #20
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	605a      	str	r2, [r3, #4]
 80026aa:	609a      	str	r2, [r3, #8]
 80026ac:	60da      	str	r2, [r3, #12]
 80026ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a25      	ldr	r2, [pc, #148]	@ (800274c <HAL_SPI_MspInit+0xb4>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d144      	bne.n	8002744 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80026ba:	4b25      	ldr	r3, [pc, #148]	@ (8002750 <HAL_SPI_MspInit+0xb8>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026be:	4a24      	ldr	r2, [pc, #144]	@ (8002750 <HAL_SPI_MspInit+0xb8>)
 80026c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80026c6:	4b22      	ldr	r3, [pc, #136]	@ (8002750 <HAL_SPI_MspInit+0xb8>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026ce:	613b      	str	r3, [r7, #16]
 80026d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80026d2:	4b1f      	ldr	r3, [pc, #124]	@ (8002750 <HAL_SPI_MspInit+0xb8>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d6:	4a1e      	ldr	r2, [pc, #120]	@ (8002750 <HAL_SPI_MspInit+0xb8>)
 80026d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80026de:	4b1c      	ldr	r3, [pc, #112]	@ (8002750 <HAL_SPI_MspInit+0xb8>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ea:	4b19      	ldr	r3, [pc, #100]	@ (8002750 <HAL_SPI_MspInit+0xb8>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ee:	4a18      	ldr	r2, [pc, #96]	@ (8002750 <HAL_SPI_MspInit+0xb8>)
 80026f0:	f043 0302 	orr.w	r3, r3, #2
 80026f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026f6:	4b16      	ldr	r3, [pc, #88]	@ (8002750 <HAL_SPI_MspInit+0xb8>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	60bb      	str	r3, [r7, #8]
 8002700:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8002702:	2302      	movs	r3, #2
 8002704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002706:	2302      	movs	r3, #2
 8002708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270a:	2300      	movs	r3, #0
 800270c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270e:	2300      	movs	r3, #0
 8002710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002712:	2305      	movs	r3, #5
 8002714:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8002716:	f107 0314 	add.w	r3, r7, #20
 800271a:	4619      	mov	r1, r3
 800271c:	480d      	ldr	r0, [pc, #52]	@ (8002754 <HAL_SPI_MspInit+0xbc>)
 800271e:	f002 faf1 	bl	8004d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002722:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002726:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002728:	2302      	movs	r3, #2
 800272a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272c:	2300      	movs	r3, #0
 800272e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002730:	2300      	movs	r3, #0
 8002732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002734:	2305      	movs	r3, #5
 8002736:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002738:	f107 0314 	add.w	r3, r7, #20
 800273c:	4619      	mov	r1, r3
 800273e:	4806      	ldr	r0, [pc, #24]	@ (8002758 <HAL_SPI_MspInit+0xc0>)
 8002740:	f002 fae0 	bl	8004d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002744:	bf00      	nop
 8002746:	3728      	adds	r7, #40	@ 0x28
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40003800 	.word	0x40003800
 8002750:	40023800 	.word	0x40023800
 8002754:	40022000 	.word	0x40022000
 8002758:	40020400 	.word	0x40020400

0800275c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800275c:	b480      	push	{r7}
 800275e:	b089      	sub	sp, #36	@ 0x24
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a2e      	ldr	r2, [pc, #184]	@ (8002824 <HAL_TIM_Base_MspInit+0xc8>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d10c      	bne.n	8002788 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800276e:	4b2e      	ldr	r3, [pc, #184]	@ (8002828 <HAL_TIM_Base_MspInit+0xcc>)
 8002770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002772:	4a2d      	ldr	r2, [pc, #180]	@ (8002828 <HAL_TIM_Base_MspInit+0xcc>)
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	6453      	str	r3, [r2, #68]	@ 0x44
 800277a:	4b2b      	ldr	r3, [pc, #172]	@ (8002828 <HAL_TIM_Base_MspInit+0xcc>)
 800277c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	61fb      	str	r3, [r7, #28]
 8002784:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002786:	e046      	b.n	8002816 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002790:	d10c      	bne.n	80027ac <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002792:	4b25      	ldr	r3, [pc, #148]	@ (8002828 <HAL_TIM_Base_MspInit+0xcc>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002796:	4a24      	ldr	r2, [pc, #144]	@ (8002828 <HAL_TIM_Base_MspInit+0xcc>)
 8002798:	f043 0301 	orr.w	r3, r3, #1
 800279c:	6413      	str	r3, [r2, #64]	@ 0x40
 800279e:	4b22      	ldr	r3, [pc, #136]	@ (8002828 <HAL_TIM_Base_MspInit+0xcc>)
 80027a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	61bb      	str	r3, [r7, #24]
 80027a8:	69bb      	ldr	r3, [r7, #24]
}
 80027aa:	e034      	b.n	8002816 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a1e      	ldr	r2, [pc, #120]	@ (800282c <HAL_TIM_Base_MspInit+0xd0>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d10c      	bne.n	80027d0 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002828 <HAL_TIM_Base_MspInit+0xcc>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ba:	4a1b      	ldr	r2, [pc, #108]	@ (8002828 <HAL_TIM_Base_MspInit+0xcc>)
 80027bc:	f043 0302 	orr.w	r3, r3, #2
 80027c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80027c2:	4b19      	ldr	r3, [pc, #100]	@ (8002828 <HAL_TIM_Base_MspInit+0xcc>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	697b      	ldr	r3, [r7, #20]
}
 80027ce:	e022      	b.n	8002816 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a16      	ldr	r2, [pc, #88]	@ (8002830 <HAL_TIM_Base_MspInit+0xd4>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d10c      	bne.n	80027f4 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80027da:	4b13      	ldr	r3, [pc, #76]	@ (8002828 <HAL_TIM_Base_MspInit+0xcc>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027de:	4a12      	ldr	r2, [pc, #72]	@ (8002828 <HAL_TIM_Base_MspInit+0xcc>)
 80027e0:	f043 0308 	orr.w	r3, r3, #8
 80027e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80027e6:	4b10      	ldr	r3, [pc, #64]	@ (8002828 <HAL_TIM_Base_MspInit+0xcc>)
 80027e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	613b      	str	r3, [r7, #16]
 80027f0:	693b      	ldr	r3, [r7, #16]
}
 80027f2:	e010      	b.n	8002816 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a0e      	ldr	r2, [pc, #56]	@ (8002834 <HAL_TIM_Base_MspInit+0xd8>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d10b      	bne.n	8002816 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80027fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002828 <HAL_TIM_Base_MspInit+0xcc>)
 8002800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002802:	4a09      	ldr	r2, [pc, #36]	@ (8002828 <HAL_TIM_Base_MspInit+0xcc>)
 8002804:	f043 0302 	orr.w	r3, r3, #2
 8002808:	6453      	str	r3, [r2, #68]	@ 0x44
 800280a:	4b07      	ldr	r3, [pc, #28]	@ (8002828 <HAL_TIM_Base_MspInit+0xcc>)
 800280c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	68fb      	ldr	r3, [r7, #12]
}
 8002816:	bf00      	nop
 8002818:	3724      	adds	r7, #36	@ 0x24
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	40010000 	.word	0x40010000
 8002828:	40023800 	.word	0x40023800
 800282c:	40000400 	.word	0x40000400
 8002830:	40000c00 	.word	0x40000c00
 8002834:	40010400 	.word	0x40010400

08002838 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a0a      	ldr	r2, [pc, #40]	@ (8002870 <HAL_TIM_PWM_MspInit+0x38>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d10b      	bne.n	8002862 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800284a:	4b0a      	ldr	r3, [pc, #40]	@ (8002874 <HAL_TIM_PWM_MspInit+0x3c>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284e:	4a09      	ldr	r2, [pc, #36]	@ (8002874 <HAL_TIM_PWM_MspInit+0x3c>)
 8002850:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002854:	6413      	str	r3, [r2, #64]	@ 0x40
 8002856:	4b07      	ldr	r3, [pc, #28]	@ (8002874 <HAL_TIM_PWM_MspInit+0x3c>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002862:	bf00      	nop
 8002864:	3714      	adds	r7, #20
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	40001800 	.word	0x40001800
 8002874:	40023800 	.word	0x40023800

08002878 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b08c      	sub	sp, #48	@ 0x30
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002880:	f107 031c 	add.w	r3, r7, #28
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	605a      	str	r2, [r3, #4]
 800288a:	609a      	str	r2, [r3, #8]
 800288c:	60da      	str	r2, [r3, #12]
 800288e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a56      	ldr	r2, [pc, #344]	@ (80029f0 <HAL_TIM_MspPostInit+0x178>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d11d      	bne.n	80028d6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800289a:	4b56      	ldr	r3, [pc, #344]	@ (80029f4 <HAL_TIM_MspPostInit+0x17c>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289e:	4a55      	ldr	r2, [pc, #340]	@ (80029f4 <HAL_TIM_MspPostInit+0x17c>)
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028a6:	4b53      	ldr	r3, [pc, #332]	@ (80029f4 <HAL_TIM_MspPostInit+0x17c>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	61bb      	str	r3, [r7, #24]
 80028b0:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80028b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b8:	2302      	movs	r3, #2
 80028ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028bc:	2300      	movs	r3, #0
 80028be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c0:	2300      	movs	r3, #0
 80028c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80028c4:	2301      	movs	r3, #1
 80028c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80028c8:	f107 031c 	add.w	r3, r7, #28
 80028cc:	4619      	mov	r1, r3
 80028ce:	484a      	ldr	r0, [pc, #296]	@ (80029f8 <HAL_TIM_MspPostInit+0x180>)
 80028d0:	f002 fa18 	bl	8004d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80028d4:	e087      	b.n	80029e6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028de:	d11d      	bne.n	800291c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e0:	4b44      	ldr	r3, [pc, #272]	@ (80029f4 <HAL_TIM_MspPostInit+0x17c>)
 80028e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e4:	4a43      	ldr	r2, [pc, #268]	@ (80029f4 <HAL_TIM_MspPostInit+0x17c>)
 80028e6:	f043 0301 	orr.w	r3, r3, #1
 80028ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ec:	4b41      	ldr	r3, [pc, #260]	@ (80029f4 <HAL_TIM_MspPostInit+0x17c>)
 80028ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f0:	f003 0301 	and.w	r3, r3, #1
 80028f4:	617b      	str	r3, [r7, #20]
 80028f6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80028f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80028fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fe:	2302      	movs	r3, #2
 8002900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002902:	2300      	movs	r3, #0
 8002904:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002906:	2300      	movs	r3, #0
 8002908:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800290a:	2301      	movs	r3, #1
 800290c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800290e:	f107 031c 	add.w	r3, r7, #28
 8002912:	4619      	mov	r1, r3
 8002914:	4838      	ldr	r0, [pc, #224]	@ (80029f8 <HAL_TIM_MspPostInit+0x180>)
 8002916:	f002 f9f5 	bl	8004d04 <HAL_GPIO_Init>
}
 800291a:	e064      	b.n	80029e6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a36      	ldr	r2, [pc, #216]	@ (80029fc <HAL_TIM_MspPostInit+0x184>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d11c      	bne.n	8002960 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002926:	4b33      	ldr	r3, [pc, #204]	@ (80029f4 <HAL_TIM_MspPostInit+0x17c>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292a:	4a32      	ldr	r2, [pc, #200]	@ (80029f4 <HAL_TIM_MspPostInit+0x17c>)
 800292c:	f043 0302 	orr.w	r3, r3, #2
 8002930:	6313      	str	r3, [r2, #48]	@ 0x30
 8002932:	4b30      	ldr	r3, [pc, #192]	@ (80029f4 <HAL_TIM_MspPostInit+0x17c>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	613b      	str	r3, [r7, #16]
 800293c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800293e:	2310      	movs	r3, #16
 8002940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002942:	2302      	movs	r3, #2
 8002944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002946:	2300      	movs	r3, #0
 8002948:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800294a:	2300      	movs	r3, #0
 800294c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800294e:	2302      	movs	r3, #2
 8002950:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8002952:	f107 031c 	add.w	r3, r7, #28
 8002956:	4619      	mov	r1, r3
 8002958:	4829      	ldr	r0, [pc, #164]	@ (8002a00 <HAL_TIM_MspPostInit+0x188>)
 800295a:	f002 f9d3 	bl	8004d04 <HAL_GPIO_Init>
}
 800295e:	e042      	b.n	80029e6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a27      	ldr	r2, [pc, #156]	@ (8002a04 <HAL_TIM_MspPostInit+0x18c>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d11c      	bne.n	80029a4 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800296a:	4b22      	ldr	r3, [pc, #136]	@ (80029f4 <HAL_TIM_MspPostInit+0x17c>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296e:	4a21      	ldr	r2, [pc, #132]	@ (80029f4 <HAL_TIM_MspPostInit+0x17c>)
 8002970:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002974:	6313      	str	r3, [r2, #48]	@ 0x30
 8002976:	4b1f      	ldr	r3, [pc, #124]	@ (80029f4 <HAL_TIM_MspPostInit+0x17c>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8002982:	2301      	movs	r3, #1
 8002984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002986:	2302      	movs	r3, #2
 8002988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298a:	2300      	movs	r3, #0
 800298c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298e:	2300      	movs	r3, #0
 8002990:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002992:	2302      	movs	r3, #2
 8002994:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8002996:	f107 031c 	add.w	r3, r7, #28
 800299a:	4619      	mov	r1, r3
 800299c:	481a      	ldr	r0, [pc, #104]	@ (8002a08 <HAL_TIM_MspPostInit+0x190>)
 800299e:	f002 f9b1 	bl	8004d04 <HAL_GPIO_Init>
}
 80029a2:	e020      	b.n	80029e6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a18      	ldr	r2, [pc, #96]	@ (8002a0c <HAL_TIM_MspPostInit+0x194>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d11b      	bne.n	80029e6 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80029ae:	4b11      	ldr	r3, [pc, #68]	@ (80029f4 <HAL_TIM_MspPostInit+0x17c>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b2:	4a10      	ldr	r2, [pc, #64]	@ (80029f4 <HAL_TIM_MspPostInit+0x17c>)
 80029b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ba:	4b0e      	ldr	r3, [pc, #56]	@ (80029f4 <HAL_TIM_MspPostInit+0x17c>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029c2:	60bb      	str	r3, [r7, #8]
 80029c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80029c6:	2340      	movs	r3, #64	@ 0x40
 80029c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ca:	2302      	movs	r3, #2
 80029cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ce:	2300      	movs	r3, #0
 80029d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d2:	2300      	movs	r3, #0
 80029d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80029d6:	2309      	movs	r3, #9
 80029d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80029da:	f107 031c 	add.w	r3, r7, #28
 80029de:	4619      	mov	r1, r3
 80029e0:	480b      	ldr	r0, [pc, #44]	@ (8002a10 <HAL_TIM_MspPostInit+0x198>)
 80029e2:	f002 f98f 	bl	8004d04 <HAL_GPIO_Init>
}
 80029e6:	bf00      	nop
 80029e8:	3730      	adds	r7, #48	@ 0x30
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40010000 	.word	0x40010000
 80029f4:	40023800 	.word	0x40023800
 80029f8:	40020000 	.word	0x40020000
 80029fc:	40000400 	.word	0x40000400
 8002a00:	40020400 	.word	0x40020400
 8002a04:	40000c00 	.word	0x40000c00
 8002a08:	40022000 	.word	0x40022000
 8002a0c:	40001800 	.word	0x40001800
 8002a10:	40021c00 	.word	0x40021c00

08002a14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b0ae      	sub	sp, #184	@ 0xb8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a1c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	605a      	str	r2, [r3, #4]
 8002a26:	609a      	str	r2, [r3, #8]
 8002a28:	60da      	str	r2, [r3, #12]
 8002a2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a2c:	f107 0320 	add.w	r3, r7, #32
 8002a30:	2284      	movs	r2, #132	@ 0x84
 8002a32:	2100      	movs	r1, #0
 8002a34:	4618      	mov	r0, r3
 8002a36:	f011 ff63 	bl	8014900 <memset>
  if(huart->Instance==USART1)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a53      	ldr	r2, [pc, #332]	@ (8002b8c <HAL_UART_MspInit+0x178>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d15d      	bne.n	8002b00 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002a44:	2340      	movs	r3, #64	@ 0x40
 8002a46:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a4c:	f107 0320 	add.w	r3, r7, #32
 8002a50:	4618      	mov	r0, r3
 8002a52:	f005 fecb 	bl	80087ec <HAL_RCCEx_PeriphCLKConfig>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002a5c:	f7ff f904 	bl	8001c68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a60:	4b4b      	ldr	r3, [pc, #300]	@ (8002b90 <HAL_UART_MspInit+0x17c>)
 8002a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a64:	4a4a      	ldr	r2, [pc, #296]	@ (8002b90 <HAL_UART_MspInit+0x17c>)
 8002a66:	f043 0310 	orr.w	r3, r3, #16
 8002a6a:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a6c:	4b48      	ldr	r3, [pc, #288]	@ (8002b90 <HAL_UART_MspInit+0x17c>)
 8002a6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a70:	f003 0310 	and.w	r3, r3, #16
 8002a74:	61fb      	str	r3, [r7, #28]
 8002a76:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a78:	4b45      	ldr	r3, [pc, #276]	@ (8002b90 <HAL_UART_MspInit+0x17c>)
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7c:	4a44      	ldr	r2, [pc, #272]	@ (8002b90 <HAL_UART_MspInit+0x17c>)
 8002a7e:	f043 0302 	orr.w	r3, r3, #2
 8002a82:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a84:	4b42      	ldr	r3, [pc, #264]	@ (8002b90 <HAL_UART_MspInit+0x17c>)
 8002a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	61bb      	str	r3, [r7, #24]
 8002a8e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a90:	4b3f      	ldr	r3, [pc, #252]	@ (8002b90 <HAL_UART_MspInit+0x17c>)
 8002a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a94:	4a3e      	ldr	r2, [pc, #248]	@ (8002b90 <HAL_UART_MspInit+0x17c>)
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a9c:	4b3c      	ldr	r3, [pc, #240]	@ (8002b90 <HAL_UART_MspInit+0x17c>)
 8002a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	617b      	str	r3, [r7, #20]
 8002aa6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002aa8:	2380      	movs	r3, #128	@ 0x80
 8002aaa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aba:	2300      	movs	r3, #0
 8002abc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ac0:	2307      	movs	r3, #7
 8002ac2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002ac6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002aca:	4619      	mov	r1, r3
 8002acc:	4831      	ldr	r0, [pc, #196]	@ (8002b94 <HAL_UART_MspInit+0x180>)
 8002ace:	f002 f919 	bl	8004d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002ad2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ad6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ada:	2302      	movs	r3, #2
 8002adc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002aec:	2307      	movs	r3, #7
 8002aee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002af2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002af6:	4619      	mov	r1, r3
 8002af8:	4827      	ldr	r0, [pc, #156]	@ (8002b98 <HAL_UART_MspInit+0x184>)
 8002afa:	f002 f903 	bl	8004d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002afe:	e040      	b.n	8002b82 <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART6)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a25      	ldr	r2, [pc, #148]	@ (8002b9c <HAL_UART_MspInit+0x188>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d13b      	bne.n	8002b82 <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002b0a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002b0e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8002b10:	2300      	movs	r3, #0
 8002b12:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b14:	f107 0320 	add.w	r3, r7, #32
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f005 fe67 	bl	80087ec <HAL_RCCEx_PeriphCLKConfig>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <HAL_UART_MspInit+0x114>
      Error_Handler();
 8002b24:	f7ff f8a0 	bl	8001c68 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002b28:	4b19      	ldr	r3, [pc, #100]	@ (8002b90 <HAL_UART_MspInit+0x17c>)
 8002b2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b2c:	4a18      	ldr	r2, [pc, #96]	@ (8002b90 <HAL_UART_MspInit+0x17c>)
 8002b2e:	f043 0320 	orr.w	r3, r3, #32
 8002b32:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b34:	4b16      	ldr	r3, [pc, #88]	@ (8002b90 <HAL_UART_MspInit+0x17c>)
 8002b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b38:	f003 0320 	and.w	r3, r3, #32
 8002b3c:	613b      	str	r3, [r7, #16]
 8002b3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b40:	4b13      	ldr	r3, [pc, #76]	@ (8002b90 <HAL_UART_MspInit+0x17c>)
 8002b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b44:	4a12      	ldr	r2, [pc, #72]	@ (8002b90 <HAL_UART_MspInit+0x17c>)
 8002b46:	f043 0304 	orr.w	r3, r3, #4
 8002b4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b4c:	4b10      	ldr	r3, [pc, #64]	@ (8002b90 <HAL_UART_MspInit+0x17c>)
 8002b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002b58:	23c0      	movs	r3, #192	@ 0xc0
 8002b5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5e:	2302      	movs	r3, #2
 8002b60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b64:	2300      	movs	r3, #0
 8002b66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002b70:	2308      	movs	r3, #8
 8002b72:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b76:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	4808      	ldr	r0, [pc, #32]	@ (8002ba0 <HAL_UART_MspInit+0x18c>)
 8002b7e:	f002 f8c1 	bl	8004d04 <HAL_GPIO_Init>
}
 8002b82:	bf00      	nop
 8002b84:	37b8      	adds	r7, #184	@ 0xb8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40011000 	.word	0x40011000
 8002b90:	40023800 	.word	0x40023800
 8002b94:	40020400 	.word	0x40020400
 8002b98:	40020000 	.word	0x40020000
 8002b9c:	40011400 	.word	0x40011400
 8002ba0:	40020800 	.word	0x40020800

08002ba4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002baa:	1d3b      	adds	r3, r7, #4
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	605a      	str	r2, [r3, #4]
 8002bb2:	609a      	str	r2, [r3, #8]
 8002bb4:	60da      	str	r2, [r3, #12]
 8002bb6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002bb8:	4b3a      	ldr	r3, [pc, #232]	@ (8002ca4 <HAL_FMC_MspInit+0x100>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d16d      	bne.n	8002c9c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8002bc0:	4b38      	ldr	r3, [pc, #224]	@ (8002ca4 <HAL_FMC_MspInit+0x100>)
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002bc6:	4b38      	ldr	r3, [pc, #224]	@ (8002ca8 <HAL_FMC_MspInit+0x104>)
 8002bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bca:	4a37      	ldr	r2, [pc, #220]	@ (8002ca8 <HAL_FMC_MspInit+0x104>)
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	6393      	str	r3, [r2, #56]	@ 0x38
 8002bd2:	4b35      	ldr	r3, [pc, #212]	@ (8002ca8 <HAL_FMC_MspInit+0x104>)
 8002bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	603b      	str	r3, [r7, #0]
 8002bdc:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8002bde:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002be2:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be4:	2302      	movs	r3, #2
 8002be6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be8:	2300      	movs	r3, #0
 8002bea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bec:	2303      	movs	r3, #3
 8002bee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002bf0:	230c      	movs	r3, #12
 8002bf2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bf4:	1d3b      	adds	r3, r7, #4
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	482c      	ldr	r0, [pc, #176]	@ (8002cac <HAL_FMC_MspInit+0x108>)
 8002bfa:	f002 f883 	bl	8004d04 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8002bfe:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002c02:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c04:	2302      	movs	r3, #2
 8002c06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c10:	230c      	movs	r3, #12
 8002c12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c14:	1d3b      	adds	r3, r7, #4
 8002c16:	4619      	mov	r1, r3
 8002c18:	4825      	ldr	r0, [pc, #148]	@ (8002cb0 <HAL_FMC_MspInit+0x10c>)
 8002c1a:	f002 f873 	bl	8004d04 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8002c1e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002c22:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c24:	2302      	movs	r3, #2
 8002c26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c30:	230c      	movs	r3, #12
 8002c32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c34:	1d3b      	adds	r3, r7, #4
 8002c36:	4619      	mov	r1, r3
 8002c38:	481e      	ldr	r0, [pc, #120]	@ (8002cb4 <HAL_FMC_MspInit+0x110>)
 8002c3a:	f002 f863 	bl	8004d04 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002c3e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002c42:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c44:	2302      	movs	r3, #2
 8002c46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c50:	230c      	movs	r3, #12
 8002c52:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c54:	1d3b      	adds	r3, r7, #4
 8002c56:	4619      	mov	r1, r3
 8002c58:	4817      	ldr	r0, [pc, #92]	@ (8002cb8 <HAL_FMC_MspInit+0x114>)
 8002c5a:	f002 f853 	bl	8004d04 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8002c5e:	2328      	movs	r3, #40	@ 0x28
 8002c60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c62:	2302      	movs	r3, #2
 8002c64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c66:	2300      	movs	r3, #0
 8002c68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c6e:	230c      	movs	r3, #12
 8002c70:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002c72:	1d3b      	adds	r3, r7, #4
 8002c74:	4619      	mov	r1, r3
 8002c76:	4811      	ldr	r0, [pc, #68]	@ (8002cbc <HAL_FMC_MspInit+0x118>)
 8002c78:	f002 f844 	bl	8004d04 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002c7c:	2308      	movs	r3, #8
 8002c7e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c80:	2302      	movs	r3, #2
 8002c82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c8c:	230c      	movs	r3, #12
 8002c8e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8002c90:	1d3b      	adds	r3, r7, #4
 8002c92:	4619      	mov	r1, r3
 8002c94:	480a      	ldr	r0, [pc, #40]	@ (8002cc0 <HAL_FMC_MspInit+0x11c>)
 8002c96:	f002 f835 	bl	8004d04 <HAL_GPIO_Init>
 8002c9a:	e000      	b.n	8002c9e <HAL_FMC_MspInit+0xfa>
    return;
 8002c9c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	20001050 	.word	0x20001050
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	40021800 	.word	0x40021800
 8002cb4:	40020c00 	.word	0x40020c00
 8002cb8:	40021400 	.word	0x40021400
 8002cbc:	40021c00 	.word	0x40021c00
 8002cc0:	40020800 	.word	0x40020800

08002cc4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002ccc:	f7ff ff6a 	bl	8002ba4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002cd0:	bf00      	nop
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b08a      	sub	sp, #40	@ 0x28
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a63      	ldr	r2, [pc, #396]	@ (8002e74 <HAL_SAI_MspInit+0x19c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d15c      	bne.n	8002da4 <HAL_SAI_MspInit+0xcc>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8002cea:	4b63      	ldr	r3, [pc, #396]	@ (8002e78 <HAL_SAI_MspInit+0x1a0>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10b      	bne.n	8002d0a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002cf2:	4b62      	ldr	r3, [pc, #392]	@ (8002e7c <HAL_SAI_MspInit+0x1a4>)
 8002cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf6:	4a61      	ldr	r2, [pc, #388]	@ (8002e7c <HAL_SAI_MspInit+0x1a4>)
 8002cf8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002cfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cfe:	4b5f      	ldr	r3, [pc, #380]	@ (8002e7c <HAL_SAI_MspInit+0x1a4>)
 8002d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d06:	613b      	str	r3, [r7, #16]
 8002d08:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8002d0a:	4b5b      	ldr	r3, [pc, #364]	@ (8002e78 <HAL_SAI_MspInit+0x1a0>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	4a59      	ldr	r2, [pc, #356]	@ (8002e78 <HAL_SAI_MspInit+0x1a0>)
 8002d12:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8002d14:	23f0      	movs	r3, #240	@ 0xf0
 8002d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d18:	2302      	movs	r3, #2
 8002d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d20:	2300      	movs	r3, #0
 8002d22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002d24:	230a      	movs	r3, #10
 8002d26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002d28:	f107 0314 	add.w	r3, r7, #20
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4854      	ldr	r0, [pc, #336]	@ (8002e80 <HAL_SAI_MspInit+0x1a8>)
 8002d30:	f001 ffe8 	bl	8004d04 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 8002d34:	4b53      	ldr	r3, [pc, #332]	@ (8002e84 <HAL_SAI_MspInit+0x1ac>)
 8002d36:	4a54      	ldr	r2, [pc, #336]	@ (8002e88 <HAL_SAI_MspInit+0x1b0>)
 8002d38:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 8002d3a:	4b52      	ldr	r3, [pc, #328]	@ (8002e84 <HAL_SAI_MspInit+0x1ac>)
 8002d3c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002d40:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d42:	4b50      	ldr	r3, [pc, #320]	@ (8002e84 <HAL_SAI_MspInit+0x1ac>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d48:	4b4e      	ldr	r3, [pc, #312]	@ (8002e84 <HAL_SAI_MspInit+0x1ac>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8002d4e:	4b4d      	ldr	r3, [pc, #308]	@ (8002e84 <HAL_SAI_MspInit+0x1ac>)
 8002d50:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d54:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d56:	4b4b      	ldr	r3, [pc, #300]	@ (8002e84 <HAL_SAI_MspInit+0x1ac>)
 8002d58:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002d5c:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d5e:	4b49      	ldr	r3, [pc, #292]	@ (8002e84 <HAL_SAI_MspInit+0x1ac>)
 8002d60:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d64:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8002d66:	4b47      	ldr	r3, [pc, #284]	@ (8002e84 <HAL_SAI_MspInit+0x1ac>)
 8002d68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d6c:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_HIGH;
 8002d6e:	4b45      	ldr	r3, [pc, #276]	@ (8002e84 <HAL_SAI_MspInit+0x1ac>)
 8002d70:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002d74:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d76:	4b43      	ldr	r3, [pc, #268]	@ (8002e84 <HAL_SAI_MspInit+0x1ac>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8002d7c:	4841      	ldr	r0, [pc, #260]	@ (8002e84 <HAL_SAI_MspInit+0x1ac>)
 8002d7e:	f000 ff03 	bl	8003b88 <HAL_DMA_Init>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <HAL_SAI_MspInit+0xb4>
    {
      Error_Handler();
 8002d88:	f7fe ff6e 	bl	8001c68 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a3d      	ldr	r2, [pc, #244]	@ (8002e84 <HAL_SAI_MspInit+0x1ac>)
 8002d90:	671a      	str	r2, [r3, #112]	@ 0x70
 8002d92:	4a3c      	ldr	r2, [pc, #240]	@ (8002e84 <HAL_SAI_MspInit+0x1ac>)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6393      	str	r3, [r2, #56]	@ 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a3a      	ldr	r2, [pc, #232]	@ (8002e84 <HAL_SAI_MspInit+0x1ac>)
 8002d9c:	66da      	str	r2, [r3, #108]	@ 0x6c
 8002d9e:	4a39      	ldr	r2, [pc, #228]	@ (8002e84 <HAL_SAI_MspInit+0x1ac>)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6393      	str	r3, [r2, #56]	@ 0x38

    }
    if(hsai->Instance==SAI2_Block_B)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a38      	ldr	r2, [pc, #224]	@ (8002e8c <HAL_SAI_MspInit+0x1b4>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d15d      	bne.n	8002e6a <HAL_SAI_MspInit+0x192>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8002dae:	4b32      	ldr	r3, [pc, #200]	@ (8002e78 <HAL_SAI_MspInit+0x1a0>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10b      	bne.n	8002dce <HAL_SAI_MspInit+0xf6>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002db6:	4b31      	ldr	r3, [pc, #196]	@ (8002e7c <HAL_SAI_MspInit+0x1a4>)
 8002db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dba:	4a30      	ldr	r2, [pc, #192]	@ (8002e7c <HAL_SAI_MspInit+0x1a4>)
 8002dbc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002dc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dc2:	4b2e      	ldr	r3, [pc, #184]	@ (8002e7c <HAL_SAI_MspInit+0x1a4>)
 8002dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dc6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8002dce:	4b2a      	ldr	r3, [pc, #168]	@ (8002e78 <HAL_SAI_MspInit+0x1a0>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	4a28      	ldr	r2, [pc, #160]	@ (8002e78 <HAL_SAI_MspInit+0x1a0>)
 8002dd6:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002dd8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ddc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dde:	2302      	movs	r3, #2
 8002de0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de2:	2300      	movs	r3, #0
 8002de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de6:	2300      	movs	r3, #0
 8002de8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002dea:	230a      	movs	r3, #10
 8002dec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002dee:	f107 0314 	add.w	r3, r7, #20
 8002df2:	4619      	mov	r1, r3
 8002df4:	4826      	ldr	r0, [pc, #152]	@ (8002e90 <HAL_SAI_MspInit+0x1b8>)
 8002df6:	f001 ff85 	bl	8004d04 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream6;
 8002dfa:	4b26      	ldr	r3, [pc, #152]	@ (8002e94 <HAL_SAI_MspInit+0x1bc>)
 8002dfc:	4a26      	ldr	r2, [pc, #152]	@ (8002e98 <HAL_SAI_MspInit+0x1c0>)
 8002dfe:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_3;
 8002e00:	4b24      	ldr	r3, [pc, #144]	@ (8002e94 <HAL_SAI_MspInit+0x1bc>)
 8002e02:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002e06:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e08:	4b22      	ldr	r3, [pc, #136]	@ (8002e94 <HAL_SAI_MspInit+0x1bc>)
 8002e0a:	2240      	movs	r2, #64	@ 0x40
 8002e0c:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e0e:	4b21      	ldr	r3, [pc, #132]	@ (8002e94 <HAL_SAI_MspInit+0x1bc>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8002e14:	4b1f      	ldr	r3, [pc, #124]	@ (8002e94 <HAL_SAI_MspInit+0x1bc>)
 8002e16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e1a:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002e94 <HAL_SAI_MspInit+0x1bc>)
 8002e1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002e22:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e24:	4b1b      	ldr	r3, [pc, #108]	@ (8002e94 <HAL_SAI_MspInit+0x1bc>)
 8002e26:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e2a:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8002e2c:	4b19      	ldr	r3, [pc, #100]	@ (8002e94 <HAL_SAI_MspInit+0x1bc>)
 8002e2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e32:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 8002e34:	4b17      	ldr	r3, [pc, #92]	@ (8002e94 <HAL_SAI_MspInit+0x1bc>)
 8002e36:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002e3a:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e3c:	4b15      	ldr	r3, [pc, #84]	@ (8002e94 <HAL_SAI_MspInit+0x1bc>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8002e42:	4814      	ldr	r0, [pc, #80]	@ (8002e94 <HAL_SAI_MspInit+0x1bc>)
 8002e44:	f000 fea0 	bl	8003b88 <HAL_DMA_Init>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <HAL_SAI_MspInit+0x17a>
    {
      Error_Handler();
 8002e4e:	f7fe ff0b 	bl	8001c68 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a0f      	ldr	r2, [pc, #60]	@ (8002e94 <HAL_SAI_MspInit+0x1bc>)
 8002e56:	671a      	str	r2, [r3, #112]	@ 0x70
 8002e58:	4a0e      	ldr	r2, [pc, #56]	@ (8002e94 <HAL_SAI_MspInit+0x1bc>)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a0c      	ldr	r2, [pc, #48]	@ (8002e94 <HAL_SAI_MspInit+0x1bc>)
 8002e62:	66da      	str	r2, [r3, #108]	@ 0x6c
 8002e64:	4a0b      	ldr	r2, [pc, #44]	@ (8002e94 <HAL_SAI_MspInit+0x1bc>)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 8002e6a:	bf00      	nop
 8002e6c:	3728      	adds	r7, #40	@ 0x28
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40015c04 	.word	0x40015c04
 8002e78:	20001054 	.word	0x20001054
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	40022000 	.word	0x40022000
 8002e84:	2000092c 	.word	0x2000092c
 8002e88:	40026470 	.word	0x40026470
 8002e8c:	40015c24 	.word	0x40015c24
 8002e90:	40021800 	.word	0x40021800
 8002e94:	2000098c 	.word	0x2000098c
 8002e98:	400264a0 	.word	0x400264a0

08002e9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b08e      	sub	sp, #56	@ 0x38
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002eac:	4b33      	ldr	r3, [pc, #204]	@ (8002f7c <HAL_InitTick+0xe0>)
 8002eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb0:	4a32      	ldr	r2, [pc, #200]	@ (8002f7c <HAL_InitTick+0xe0>)
 8002eb2:	f043 0310 	orr.w	r3, r3, #16
 8002eb6:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eb8:	4b30      	ldr	r3, [pc, #192]	@ (8002f7c <HAL_InitTick+0xe0>)
 8002eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ebc:	f003 0310 	and.w	r3, r3, #16
 8002ec0:	60fb      	str	r3, [r7, #12]
 8002ec2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ec4:	f107 0210 	add.w	r2, r7, #16
 8002ec8:	f107 0314 	add.w	r3, r7, #20
 8002ecc:	4611      	mov	r1, r2
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f005 fc5a 	bl	8008788 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002ed4:	6a3b      	ldr	r3, [r7, #32]
 8002ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d103      	bne.n	8002ee6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002ede:	f005 fc2b 	bl	8008738 <HAL_RCC_GetPCLK1Freq>
 8002ee2:	6378      	str	r0, [r7, #52]	@ 0x34
 8002ee4:	e004      	b.n	8002ef0 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002ee6:	f005 fc27 	bl	8008738 <HAL_RCC_GetPCLK1Freq>
 8002eea:	4603      	mov	r3, r0
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002ef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ef2:	4a23      	ldr	r2, [pc, #140]	@ (8002f80 <HAL_InitTick+0xe4>)
 8002ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef8:	0c9b      	lsrs	r3, r3, #18
 8002efa:	3b01      	subs	r3, #1
 8002efc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002efe:	4b21      	ldr	r3, [pc, #132]	@ (8002f84 <HAL_InitTick+0xe8>)
 8002f00:	4a21      	ldr	r2, [pc, #132]	@ (8002f88 <HAL_InitTick+0xec>)
 8002f02:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002f04:	4b1f      	ldr	r3, [pc, #124]	@ (8002f84 <HAL_InitTick+0xe8>)
 8002f06:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002f0a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002f0c:	4a1d      	ldr	r2, [pc, #116]	@ (8002f84 <HAL_InitTick+0xe8>)
 8002f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f10:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002f12:	4b1c      	ldr	r3, [pc, #112]	@ (8002f84 <HAL_InitTick+0xe8>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f18:	4b1a      	ldr	r3, [pc, #104]	@ (8002f84 <HAL_InitTick+0xe8>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f1e:	4b19      	ldr	r3, [pc, #100]	@ (8002f84 <HAL_InitTick+0xe8>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002f24:	4817      	ldr	r0, [pc, #92]	@ (8002f84 <HAL_InitTick+0xe8>)
 8002f26:	f008 fb3a 	bl	800b59e <HAL_TIM_Base_Init>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002f30:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d11b      	bne.n	8002f70 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002f38:	4812      	ldr	r0, [pc, #72]	@ (8002f84 <HAL_InitTick+0xe8>)
 8002f3a:	f008 fb87 	bl	800b64c <HAL_TIM_Base_Start_IT>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002f44:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d111      	bne.n	8002f70 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002f4c:	2036      	movs	r0, #54	@ 0x36
 8002f4e:	f000 fca1 	bl	8003894 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b0f      	cmp	r3, #15
 8002f56:	d808      	bhi.n	8002f6a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002f58:	2200      	movs	r2, #0
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	2036      	movs	r0, #54	@ 0x36
 8002f5e:	f000 fc7d 	bl	800385c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f62:	4a0a      	ldr	r2, [pc, #40]	@ (8002f8c <HAL_InitTick+0xf0>)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6013      	str	r3, [r2, #0]
 8002f68:	e002      	b.n	8002f70 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002f70:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3738      	adds	r7, #56	@ 0x38
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	40023800 	.word	0x40023800
 8002f80:	431bde83 	.word	0x431bde83
 8002f84:	20001058 	.word	0x20001058
 8002f88:	40001000 	.word	0x40001000
 8002f8c:	20000008 	.word	0x20000008

08002f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f94:	bf00      	nop
 8002f96:	e7fd      	b.n	8002f94 <NMI_Handler+0x4>

08002f98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f9c:	bf00      	nop
 8002f9e:	e7fd      	b.n	8002f9c <HardFault_Handler+0x4>

08002fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fa4:	bf00      	nop
 8002fa6:	e7fd      	b.n	8002fa4 <MemManage_Handler+0x4>

08002fa8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fac:	bf00      	nop
 8002fae:	e7fd      	b.n	8002fac <BusFault_Handler+0x4>

08002fb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fb4:	bf00      	nop
 8002fb6:	e7fd      	b.n	8002fb4 <UsageFault_Handler+0x4>

08002fb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fbc:	bf00      	nop
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
	...

08002fc8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002fcc:	4802      	ldr	r0, [pc, #8]	@ (8002fd8 <TIM6_DAC_IRQHandler+0x10>)
 8002fce:	f008 fc0c 	bl	800b7ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002fd2:	bf00      	nop
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	20001058 	.word	0x20001058

08002fdc <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8002fe0:	4802      	ldr	r0, [pc, #8]	@ (8002fec <DMA2_Stream4_IRQHandler+0x10>)
 8002fe2:	f000 fedf 	bl	8003da4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8002fe6:	bf00      	nop
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	2000092c 	.word	0x2000092c

08002ff0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002ff4:	4802      	ldr	r0, [pc, #8]	@ (8003000 <OTG_FS_IRQHandler+0x10>)
 8002ff6:	f002 fb43 	bl	8005680 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002ffa:	bf00      	nop
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	200095f8 	.word	0x200095f8

08003004 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8003008:	4802      	ldr	r0, [pc, #8]	@ (8003014 <DMA2_Stream6_IRQHandler+0x10>)
 800300a:	f000 fecb 	bl	8003da4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800300e:	bf00      	nop
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	2000098c 	.word	0x2000098c

08003018 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800301c:	4802      	ldr	r0, [pc, #8]	@ (8003028 <LTDC_IRQHandler+0x10>)
 800301e:	f004 fb6d 	bl	80076fc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003022:	bf00      	nop
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	20000710 	.word	0x20000710

0800302c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003030:	4802      	ldr	r0, [pc, #8]	@ (800303c <DMA2D_IRQHandler+0x10>)
 8003032:	f001 f977 	bl	8004324 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003036:	bf00      	nop
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	20000578 	.word	0x20000578

08003040 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003048:	4a14      	ldr	r2, [pc, #80]	@ (800309c <_sbrk+0x5c>)
 800304a:	4b15      	ldr	r3, [pc, #84]	@ (80030a0 <_sbrk+0x60>)
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003054:	4b13      	ldr	r3, [pc, #76]	@ (80030a4 <_sbrk+0x64>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d102      	bne.n	8003062 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800305c:	4b11      	ldr	r3, [pc, #68]	@ (80030a4 <_sbrk+0x64>)
 800305e:	4a12      	ldr	r2, [pc, #72]	@ (80030a8 <_sbrk+0x68>)
 8003060:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003062:	4b10      	ldr	r3, [pc, #64]	@ (80030a4 <_sbrk+0x64>)
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4413      	add	r3, r2
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	429a      	cmp	r2, r3
 800306e:	d207      	bcs.n	8003080 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003070:	f011 fcb4 	bl	80149dc <__errno>
 8003074:	4603      	mov	r3, r0
 8003076:	220c      	movs	r2, #12
 8003078:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800307a:	f04f 33ff 	mov.w	r3, #4294967295
 800307e:	e009      	b.n	8003094 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003080:	4b08      	ldr	r3, [pc, #32]	@ (80030a4 <_sbrk+0x64>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003086:	4b07      	ldr	r3, [pc, #28]	@ (80030a4 <_sbrk+0x64>)
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4413      	add	r3, r2
 800308e:	4a05      	ldr	r2, [pc, #20]	@ (80030a4 <_sbrk+0x64>)
 8003090:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003092:	68fb      	ldr	r3, [r7, #12]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	20050000 	.word	0x20050000
 80030a0:	00000400 	.word	0x00000400
 80030a4:	200010a4 	.word	0x200010a4
 80030a8:	20009b20 	.word	0x20009b20

080030ac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030b0:	4b06      	ldr	r3, [pc, #24]	@ (80030cc <SystemInit+0x20>)
 80030b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030b6:	4a05      	ldr	r2, [pc, #20]	@ (80030cc <SystemInit+0x20>)
 80030b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80030bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030c0:	bf00      	nop
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	e000ed00 	.word	0xe000ed00

080030d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80030d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003108 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80030d4:	f7ff ffea 	bl	80030ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80030d8:	480c      	ldr	r0, [pc, #48]	@ (800310c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80030da:	490d      	ldr	r1, [pc, #52]	@ (8003110 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80030dc:	4a0d      	ldr	r2, [pc, #52]	@ (8003114 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80030de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030e0:	e002      	b.n	80030e8 <LoopCopyDataInit>

080030e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030e6:	3304      	adds	r3, #4

080030e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030ec:	d3f9      	bcc.n	80030e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030ee:	4a0a      	ldr	r2, [pc, #40]	@ (8003118 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80030f0:	4c0a      	ldr	r4, [pc, #40]	@ (800311c <LoopFillZerobss+0x22>)
  movs r3, #0
 80030f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030f4:	e001      	b.n	80030fa <LoopFillZerobss>

080030f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030f8:	3204      	adds	r2, #4

080030fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030fc:	d3fb      	bcc.n	80030f6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80030fe:	f011 fc73 	bl	80149e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003102:	f7fd fb0f 	bl	8000724 <main>
  bx  lr    
 8003106:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003108:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800310c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003110:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8003114:	08014bbc 	.word	0x08014bbc
  ldr r2, =_sbss
 8003118:	200001c4 	.word	0x200001c4
  ldr r4, =_ebss
 800311c:	20009b20 	.word	0x20009b20

08003120 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003120:	e7fe      	b.n	8003120 <ADC_IRQHandler>

08003122 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003126:	2003      	movs	r0, #3
 8003128:	f000 fb8d 	bl	8003846 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800312c:	2000      	movs	r0, #0
 800312e:	f7ff feb5 	bl	8002e9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003132:	f7fe fd9f 	bl	8001c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003140:	4b06      	ldr	r3, [pc, #24]	@ (800315c <HAL_IncTick+0x20>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	461a      	mov	r2, r3
 8003146:	4b06      	ldr	r3, [pc, #24]	@ (8003160 <HAL_IncTick+0x24>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4413      	add	r3, r2
 800314c:	4a04      	ldr	r2, [pc, #16]	@ (8003160 <HAL_IncTick+0x24>)
 800314e:	6013      	str	r3, [r2, #0]
}
 8003150:	bf00      	nop
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	2000000c 	.word	0x2000000c
 8003160:	200010a8 	.word	0x200010a8

08003164 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  return uwTick;
 8003168:	4b03      	ldr	r3, [pc, #12]	@ (8003178 <HAL_GetTick+0x14>)
 800316a:	681b      	ldr	r3, [r3, #0]
}
 800316c:	4618      	mov	r0, r3
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	200010a8 	.word	0x200010a8

0800317c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003184:	f7ff ffee 	bl	8003164 <HAL_GetTick>
 8003188:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003194:	d005      	beq.n	80031a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003196:	4b0a      	ldr	r3, [pc, #40]	@ (80031c0 <HAL_Delay+0x44>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	461a      	mov	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4413      	add	r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031a2:	bf00      	nop
 80031a4:	f7ff ffde 	bl	8003164 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d8f7      	bhi.n	80031a4 <HAL_Delay+0x28>
  {
  }
}
 80031b4:	bf00      	nop
 80031b6:	bf00      	nop
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	2000000c 	.word	0x2000000c

080031c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031cc:	2300      	movs	r3, #0
 80031ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e031      	b.n	800323e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d109      	bne.n	80031f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7fe fd6e 	bl	8001cc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fa:	f003 0310 	and.w	r3, r3, #16
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d116      	bne.n	8003230 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003206:	4b10      	ldr	r3, [pc, #64]	@ (8003248 <HAL_ADC_Init+0x84>)
 8003208:	4013      	ands	r3, r2
 800320a:	f043 0202 	orr.w	r2, r3, #2
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f970 	bl	80034f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003222:	f023 0303 	bic.w	r3, r3, #3
 8003226:	f043 0201 	orr.w	r2, r3, #1
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	641a      	str	r2, [r3, #64]	@ 0x40
 800322e:	e001      	b.n	8003234 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800323c:	7bfb      	ldrb	r3, [r7, #15]
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	ffffeefd 	.word	0xffffeefd

0800324c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003256:	2300      	movs	r3, #0
 8003258:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003260:	2b01      	cmp	r3, #1
 8003262:	d101      	bne.n	8003268 <HAL_ADC_ConfigChannel+0x1c>
 8003264:	2302      	movs	r3, #2
 8003266:	e136      	b.n	80034d6 <HAL_ADC_ConfigChannel+0x28a>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2b09      	cmp	r3, #9
 8003276:	d93a      	bls.n	80032ee <HAL_ADC_ConfigChannel+0xa2>
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003280:	d035      	beq.n	80032ee <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68d9      	ldr	r1, [r3, #12]
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	b29b      	uxth	r3, r3
 800328e:	461a      	mov	r2, r3
 8003290:	4613      	mov	r3, r2
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	4413      	add	r3, r2
 8003296:	3b1e      	subs	r3, #30
 8003298:	2207      	movs	r2, #7
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	43da      	mvns	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	400a      	ands	r2, r1
 80032a6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a8d      	ldr	r2, [pc, #564]	@ (80034e4 <HAL_ADC_ConfigChannel+0x298>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d10a      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68d9      	ldr	r1, [r3, #12]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	061a      	lsls	r2, r3, #24
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032c6:	e035      	b.n	8003334 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68d9      	ldr	r1, [r3, #12]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	689a      	ldr	r2, [r3, #8]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	4618      	mov	r0, r3
 80032da:	4603      	mov	r3, r0
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	4403      	add	r3, r0
 80032e0:	3b1e      	subs	r3, #30
 80032e2:	409a      	lsls	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032ec:	e022      	b.n	8003334 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6919      	ldr	r1, [r3, #16]
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	461a      	mov	r2, r3
 80032fc:	4613      	mov	r3, r2
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	4413      	add	r3, r2
 8003302:	2207      	movs	r2, #7
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	43da      	mvns	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	400a      	ands	r2, r1
 8003310:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6919      	ldr	r1, [r3, #16]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	b29b      	uxth	r3, r3
 8003322:	4618      	mov	r0, r3
 8003324:	4603      	mov	r3, r0
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	4403      	add	r3, r0
 800332a:	409a      	lsls	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	430a      	orrs	r2, r1
 8003332:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b06      	cmp	r3, #6
 800333a:	d824      	bhi.n	8003386 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	4613      	mov	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	4413      	add	r3, r2
 800334c:	3b05      	subs	r3, #5
 800334e:	221f      	movs	r2, #31
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	43da      	mvns	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	400a      	ands	r2, r1
 800335c:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	b29b      	uxth	r3, r3
 800336a:	4618      	mov	r0, r3
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685a      	ldr	r2, [r3, #4]
 8003370:	4613      	mov	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4413      	add	r3, r2
 8003376:	3b05      	subs	r3, #5
 8003378:	fa00 f203 	lsl.w	r2, r0, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	430a      	orrs	r2, r1
 8003382:	635a      	str	r2, [r3, #52]	@ 0x34
 8003384:	e04c      	b.n	8003420 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	2b0c      	cmp	r3, #12
 800338c:	d824      	bhi.n	80033d8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	4613      	mov	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	3b23      	subs	r3, #35	@ 0x23
 80033a0:	221f      	movs	r2, #31
 80033a2:	fa02 f303 	lsl.w	r3, r2, r3
 80033a6:	43da      	mvns	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	400a      	ands	r2, r1
 80033ae:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	4618      	mov	r0, r3
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	4613      	mov	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	3b23      	subs	r3, #35	@ 0x23
 80033ca:	fa00 f203 	lsl.w	r2, r0, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80033d6:	e023      	b.n	8003420 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	4613      	mov	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	3b41      	subs	r3, #65	@ 0x41
 80033ea:	221f      	movs	r2, #31
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	43da      	mvns	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	400a      	ands	r2, r1
 80033f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	b29b      	uxth	r3, r3
 8003406:	4618      	mov	r0, r3
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	4613      	mov	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	3b41      	subs	r3, #65	@ 0x41
 8003414:	fa00 f203 	lsl.w	r2, r0, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a30      	ldr	r2, [pc, #192]	@ (80034e8 <HAL_ADC_ConfigChannel+0x29c>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d10a      	bne.n	8003440 <HAL_ADC_ConfigChannel+0x1f4>
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003432:	d105      	bne.n	8003440 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003434:	4b2d      	ldr	r3, [pc, #180]	@ (80034ec <HAL_ADC_ConfigChannel+0x2a0>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	4a2c      	ldr	r2, [pc, #176]	@ (80034ec <HAL_ADC_ConfigChannel+0x2a0>)
 800343a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800343e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a28      	ldr	r2, [pc, #160]	@ (80034e8 <HAL_ADC_ConfigChannel+0x29c>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d10f      	bne.n	800346a <HAL_ADC_ConfigChannel+0x21e>
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2b12      	cmp	r3, #18
 8003450:	d10b      	bne.n	800346a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003452:	4b26      	ldr	r3, [pc, #152]	@ (80034ec <HAL_ADC_ConfigChannel+0x2a0>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	4a25      	ldr	r2, [pc, #148]	@ (80034ec <HAL_ADC_ConfigChannel+0x2a0>)
 8003458:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800345c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800345e:	4b23      	ldr	r3, [pc, #140]	@ (80034ec <HAL_ADC_ConfigChannel+0x2a0>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	4a22      	ldr	r2, [pc, #136]	@ (80034ec <HAL_ADC_ConfigChannel+0x2a0>)
 8003464:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003468:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a1e      	ldr	r2, [pc, #120]	@ (80034e8 <HAL_ADC_ConfigChannel+0x29c>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d12b      	bne.n	80034cc <HAL_ADC_ConfigChannel+0x280>
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a1a      	ldr	r2, [pc, #104]	@ (80034e4 <HAL_ADC_ConfigChannel+0x298>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d003      	beq.n	8003486 <HAL_ADC_ConfigChannel+0x23a>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2b11      	cmp	r3, #17
 8003484:	d122      	bne.n	80034cc <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003486:	4b19      	ldr	r3, [pc, #100]	@ (80034ec <HAL_ADC_ConfigChannel+0x2a0>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	4a18      	ldr	r2, [pc, #96]	@ (80034ec <HAL_ADC_ConfigChannel+0x2a0>)
 800348c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003490:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003492:	4b16      	ldr	r3, [pc, #88]	@ (80034ec <HAL_ADC_ConfigChannel+0x2a0>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	4a15      	ldr	r2, [pc, #84]	@ (80034ec <HAL_ADC_ConfigChannel+0x2a0>)
 8003498:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800349c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a10      	ldr	r2, [pc, #64]	@ (80034e4 <HAL_ADC_ConfigChannel+0x298>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d111      	bne.n	80034cc <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80034a8:	4b11      	ldr	r3, [pc, #68]	@ (80034f0 <HAL_ADC_ConfigChannel+0x2a4>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a11      	ldr	r2, [pc, #68]	@ (80034f4 <HAL_ADC_ConfigChannel+0x2a8>)
 80034ae:	fba2 2303 	umull	r2, r3, r2, r3
 80034b2:	0c9a      	lsrs	r2, r3, #18
 80034b4:	4613      	mov	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80034be:	e002      	b.n	80034c6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	3b01      	subs	r3, #1
 80034c4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1f9      	bne.n	80034c0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3714      	adds	r7, #20
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	10000012 	.word	0x10000012
 80034e8:	40012000 	.word	0x40012000
 80034ec:	40012300 	.word	0x40012300
 80034f0:	20000004 	.word	0x20000004
 80034f4:	431bde83 	.word	0x431bde83

080034f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003500:	4b78      	ldr	r3, [pc, #480]	@ (80036e4 <ADC_Init+0x1ec>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	4a77      	ldr	r2, [pc, #476]	@ (80036e4 <ADC_Init+0x1ec>)
 8003506:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800350a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800350c:	4b75      	ldr	r3, [pc, #468]	@ (80036e4 <ADC_Init+0x1ec>)
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	4973      	ldr	r1, [pc, #460]	@ (80036e4 <ADC_Init+0x1ec>)
 8003516:	4313      	orrs	r3, r2
 8003518:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003528:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6859      	ldr	r1, [r3, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	021a      	lsls	r2, r3, #8
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800354c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6859      	ldr	r1, [r3, #4]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689a      	ldr	r2, [r3, #8]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800356e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6899      	ldr	r1, [r3, #8]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68da      	ldr	r2, [r3, #12]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003586:	4a58      	ldr	r2, [pc, #352]	@ (80036e8 <ADC_Init+0x1f0>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d022      	beq.n	80035d2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689a      	ldr	r2, [r3, #8]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800359a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6899      	ldr	r1, [r3, #8]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80035bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	6899      	ldr	r1, [r3, #8]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	609a      	str	r2, [r3, #8]
 80035d0:	e00f      	b.n	80035f2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80035e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689a      	ldr	r2, [r3, #8]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80035f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0202 	bic.w	r2, r2, #2
 8003600:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6899      	ldr	r1, [r3, #8]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	005a      	lsls	r2, r3, #1
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 3020 	ldrb.w	r3, [r3, #32]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d01b      	beq.n	8003658 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800362e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800363e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6859      	ldr	r1, [r3, #4]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364a:	3b01      	subs	r3, #1
 800364c:	035a      	lsls	r2, r3, #13
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	430a      	orrs	r2, r1
 8003654:	605a      	str	r2, [r3, #4]
 8003656:	e007      	b.n	8003668 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003666:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003676:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	69db      	ldr	r3, [r3, #28]
 8003682:	3b01      	subs	r3, #1
 8003684:	051a      	lsls	r2, r3, #20
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800369c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6899      	ldr	r1, [r3, #8]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80036aa:	025a      	lsls	r2, r3, #9
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	430a      	orrs	r2, r1
 80036b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6899      	ldr	r1, [r3, #8]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	029a      	lsls	r2, r3, #10
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	609a      	str	r2, [r3, #8]
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	40012300 	.word	0x40012300
 80036e8:	0f000001 	.word	0x0f000001

080036ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f003 0307 	and.w	r3, r3, #7
 80036fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036fc:	4b0b      	ldr	r3, [pc, #44]	@ (800372c <__NVIC_SetPriorityGrouping+0x40>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003702:	68ba      	ldr	r2, [r7, #8]
 8003704:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003708:	4013      	ands	r3, r2
 800370a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003714:	4b06      	ldr	r3, [pc, #24]	@ (8003730 <__NVIC_SetPriorityGrouping+0x44>)
 8003716:	4313      	orrs	r3, r2
 8003718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800371a:	4a04      	ldr	r2, [pc, #16]	@ (800372c <__NVIC_SetPriorityGrouping+0x40>)
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	60d3      	str	r3, [r2, #12]
}
 8003720:	bf00      	nop
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	e000ed00 	.word	0xe000ed00
 8003730:	05fa0000 	.word	0x05fa0000

08003734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003738:	4b04      	ldr	r3, [pc, #16]	@ (800374c <__NVIC_GetPriorityGrouping+0x18>)
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	0a1b      	lsrs	r3, r3, #8
 800373e:	f003 0307 	and.w	r3, r3, #7
}
 8003742:	4618      	mov	r0, r3
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	e000ed00 	.word	0xe000ed00

08003750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	4603      	mov	r3, r0
 8003758:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800375a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800375e:	2b00      	cmp	r3, #0
 8003760:	db0b      	blt.n	800377a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003762:	79fb      	ldrb	r3, [r7, #7]
 8003764:	f003 021f 	and.w	r2, r3, #31
 8003768:	4907      	ldr	r1, [pc, #28]	@ (8003788 <__NVIC_EnableIRQ+0x38>)
 800376a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376e:	095b      	lsrs	r3, r3, #5
 8003770:	2001      	movs	r0, #1
 8003772:	fa00 f202 	lsl.w	r2, r0, r2
 8003776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800377a:	bf00      	nop
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	e000e100 	.word	0xe000e100

0800378c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	4603      	mov	r3, r0
 8003794:	6039      	str	r1, [r7, #0]
 8003796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379c:	2b00      	cmp	r3, #0
 800379e:	db0a      	blt.n	80037b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	b2da      	uxtb	r2, r3
 80037a4:	490c      	ldr	r1, [pc, #48]	@ (80037d8 <__NVIC_SetPriority+0x4c>)
 80037a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037aa:	0112      	lsls	r2, r2, #4
 80037ac:	b2d2      	uxtb	r2, r2
 80037ae:	440b      	add	r3, r1
 80037b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037b4:	e00a      	b.n	80037cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	4908      	ldr	r1, [pc, #32]	@ (80037dc <__NVIC_SetPriority+0x50>)
 80037bc:	79fb      	ldrb	r3, [r7, #7]
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	3b04      	subs	r3, #4
 80037c4:	0112      	lsls	r2, r2, #4
 80037c6:	b2d2      	uxtb	r2, r2
 80037c8:	440b      	add	r3, r1
 80037ca:	761a      	strb	r2, [r3, #24]
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	e000e100 	.word	0xe000e100
 80037dc:	e000ed00 	.word	0xe000ed00

080037e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b089      	sub	sp, #36	@ 0x24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	f1c3 0307 	rsb	r3, r3, #7
 80037fa:	2b04      	cmp	r3, #4
 80037fc:	bf28      	it	cs
 80037fe:	2304      	movcs	r3, #4
 8003800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	3304      	adds	r3, #4
 8003806:	2b06      	cmp	r3, #6
 8003808:	d902      	bls.n	8003810 <NVIC_EncodePriority+0x30>
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	3b03      	subs	r3, #3
 800380e:	e000      	b.n	8003812 <NVIC_EncodePriority+0x32>
 8003810:	2300      	movs	r3, #0
 8003812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003814:	f04f 32ff 	mov.w	r2, #4294967295
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	43da      	mvns	r2, r3
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	401a      	ands	r2, r3
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003828:	f04f 31ff 	mov.w	r1, #4294967295
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	fa01 f303 	lsl.w	r3, r1, r3
 8003832:	43d9      	mvns	r1, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003838:	4313      	orrs	r3, r2
         );
}
 800383a:	4618      	mov	r0, r3
 800383c:	3724      	adds	r7, #36	@ 0x24
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b082      	sub	sp, #8
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7ff ff4c 	bl	80036ec <__NVIC_SetPriorityGrouping>
}
 8003854:	bf00      	nop
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	4603      	mov	r3, r0
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
 8003868:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800386a:	2300      	movs	r3, #0
 800386c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800386e:	f7ff ff61 	bl	8003734 <__NVIC_GetPriorityGrouping>
 8003872:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	68b9      	ldr	r1, [r7, #8]
 8003878:	6978      	ldr	r0, [r7, #20]
 800387a:	f7ff ffb1 	bl	80037e0 <NVIC_EncodePriority>
 800387e:	4602      	mov	r2, r0
 8003880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003884:	4611      	mov	r1, r2
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff ff80 	bl	800378c <__NVIC_SetPriority>
}
 800388c:	bf00      	nop
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	4603      	mov	r3, r0
 800389c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800389e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7ff ff54 	bl	8003750 <__NVIC_EnableIRQ>
}
 80038a8:	bf00      	nop
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e054      	b.n	800396c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	7f5b      	ldrb	r3, [r3, #29]
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d105      	bne.n	80038d8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7fe fa50 	bl	8001d78 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2202      	movs	r2, #2
 80038dc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	791b      	ldrb	r3, [r3, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10c      	bne.n	8003900 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a22      	ldr	r2, [pc, #136]	@ (8003974 <HAL_CRC_Init+0xc4>)
 80038ec:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 0218 	bic.w	r2, r2, #24
 80038fc:	609a      	str	r2, [r3, #8]
 80038fe:	e00c      	b.n	800391a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6899      	ldr	r1, [r3, #8]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	461a      	mov	r2, r3
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f834 	bl	8003978 <HAL_CRCEx_Polynomial_Set>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e028      	b.n	800396c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	795b      	ldrb	r3, [r3, #5]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d105      	bne.n	800392e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f04f 32ff 	mov.w	r2, #4294967295
 800392a:	611a      	str	r2, [r3, #16]
 800392c:	e004      	b.n	8003938 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	6912      	ldr	r2, [r2, #16]
 8003936:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	695a      	ldr	r2, [r3, #20]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	699a      	ldr	r2, [r3, #24]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	3708      	adds	r7, #8
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	04c11db7 	.word	0x04c11db7

08003978 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003978:	b480      	push	{r7}
 800397a:	b087      	sub	sp, #28
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003984:	2300      	movs	r3, #0
 8003986:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003988:	231f      	movs	r3, #31
 800398a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b00      	cmp	r3, #0
 8003994:	d102      	bne.n	800399c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	75fb      	strb	r3, [r7, #23]
 800399a:	e063      	b.n	8003a64 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800399c:	bf00      	nop
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1e5a      	subs	r2, r3, #1
 80039a2:	613a      	str	r2, [r7, #16]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d009      	beq.n	80039bc <HAL_CRCEx_Polynomial_Set+0x44>
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	f003 031f 	and.w	r3, r3, #31
 80039ae:	68ba      	ldr	r2, [r7, #8]
 80039b0:	fa22 f303 	lsr.w	r3, r2, r3
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d0f0      	beq.n	800399e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b18      	cmp	r3, #24
 80039c0:	d846      	bhi.n	8003a50 <HAL_CRCEx_Polynomial_Set+0xd8>
 80039c2:	a201      	add	r2, pc, #4	@ (adr r2, 80039c8 <HAL_CRCEx_Polynomial_Set+0x50>)
 80039c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c8:	08003a57 	.word	0x08003a57
 80039cc:	08003a51 	.word	0x08003a51
 80039d0:	08003a51 	.word	0x08003a51
 80039d4:	08003a51 	.word	0x08003a51
 80039d8:	08003a51 	.word	0x08003a51
 80039dc:	08003a51 	.word	0x08003a51
 80039e0:	08003a51 	.word	0x08003a51
 80039e4:	08003a51 	.word	0x08003a51
 80039e8:	08003a45 	.word	0x08003a45
 80039ec:	08003a51 	.word	0x08003a51
 80039f0:	08003a51 	.word	0x08003a51
 80039f4:	08003a51 	.word	0x08003a51
 80039f8:	08003a51 	.word	0x08003a51
 80039fc:	08003a51 	.word	0x08003a51
 8003a00:	08003a51 	.word	0x08003a51
 8003a04:	08003a51 	.word	0x08003a51
 8003a08:	08003a39 	.word	0x08003a39
 8003a0c:	08003a51 	.word	0x08003a51
 8003a10:	08003a51 	.word	0x08003a51
 8003a14:	08003a51 	.word	0x08003a51
 8003a18:	08003a51 	.word	0x08003a51
 8003a1c:	08003a51 	.word	0x08003a51
 8003a20:	08003a51 	.word	0x08003a51
 8003a24:	08003a51 	.word	0x08003a51
 8003a28:	08003a2d 	.word	0x08003a2d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	2b06      	cmp	r3, #6
 8003a30:	d913      	bls.n	8003a5a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003a36:	e010      	b.n	8003a5a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	2b07      	cmp	r3, #7
 8003a3c:	d90f      	bls.n	8003a5e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003a42:	e00c      	b.n	8003a5e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	2b0f      	cmp	r3, #15
 8003a48:	d90b      	bls.n	8003a62 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003a4e:	e008      	b.n	8003a62 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	75fb      	strb	r3, [r7, #23]
        break;
 8003a54:	e006      	b.n	8003a64 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003a56:	bf00      	nop
 8003a58:	e004      	b.n	8003a64 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003a5a:	bf00      	nop
 8003a5c:	e002      	b.n	8003a64 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003a5e:	bf00      	nop
 8003a60:	e000      	b.n	8003a64 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003a62:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8003a64:	7dfb      	ldrb	r3, [r7, #23]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10d      	bne.n	8003a86 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68ba      	ldr	r2, [r7, #8]
 8003a70:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f023 0118 	bic.w	r1, r3, #24
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003a86:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	371c      	adds	r7, #28
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e069      	b.n	8003b7a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d102      	bne.n	8003ab8 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7fe f980 	bl	8001db8 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2202      	movs	r2, #2
 8003abc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d002      	beq.n	8003ace <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	625a      	str	r2, [r3, #36]	@ 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	6819      	ldr	r1, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	4b2a      	ldr	r3, [pc, #168]	@ (8003b84 <HAL_DCMI_Init+0xf0>)
 8003ada:	400b      	ands	r3, r1
 8003adc:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	6819      	ldr	r1, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003af2:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003afe:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003b0a:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b10:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003b16:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b1c:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003b22:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	2b10      	cmp	r3, #16
 8003b32:	d112      	bne.n	8003b5a <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	7f1b      	ldrb	r3, [r3, #28]
 8003b38:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	7f5b      	ldrb	r3, [r3, #29]
 8003b3e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003b40:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	7f9b      	ldrb	r3, [r3, #30]
 8003b46:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003b48:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	7fdb      	ldrb	r3, [r3, #31]
 8003b50:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003b56:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003b58:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68da      	ldr	r2, [r3, #12]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f042 021e 	orr.w	r2, r2, #30
 8003b68:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	ffe0f007 	.word	0xffe0f007

08003b88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b94:	f7ff fae6 	bl	8003164 <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e099      	b.n	8003cd8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 0201 	bic.w	r2, r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bc4:	e00f      	b.n	8003be6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bc6:	f7ff facd 	bl	8003164 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b05      	cmp	r3, #5
 8003bd2:	d908      	bls.n	8003be6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2203      	movs	r2, #3
 8003bde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e078      	b.n	8003cd8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1e8      	bne.n	8003bc6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	4b38      	ldr	r3, [pc, #224]	@ (8003ce0 <HAL_DMA_Init+0x158>)
 8003c00:	4013      	ands	r3, r2
 8003c02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3c:	2b04      	cmp	r3, #4
 8003c3e:	d107      	bne.n	8003c50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	f023 0307 	bic.w	r3, r3, #7
 8003c66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	d117      	bne.n	8003caa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00e      	beq.n	8003caa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 fa83 	bl	8004198 <DMA_CheckFifoParam>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d008      	beq.n	8003caa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2240      	movs	r2, #64	@ 0x40
 8003c9c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e016      	b.n	8003cd8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 fa3a 	bl	800412c <DMA_CalcBaseAndBitshift>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cc0:	223f      	movs	r2, #63	@ 0x3f
 8003cc2:	409a      	lsls	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3718      	adds	r7, #24
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	f010803f 	.word	0xf010803f

08003ce4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
 8003cf0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cfa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d101      	bne.n	8003d0a <HAL_DMA_Start_IT+0x26>
 8003d06:	2302      	movs	r3, #2
 8003d08:	e048      	b.n	8003d9c <HAL_DMA_Start_IT+0xb8>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d137      	bne.n	8003d8e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2202      	movs	r2, #2
 8003d22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	68b9      	ldr	r1, [r7, #8]
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f000 f9cc 	bl	80040d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d3c:	223f      	movs	r2, #63	@ 0x3f
 8003d3e:	409a      	lsls	r2, r3
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f042 0216 	orr.w	r2, r2, #22
 8003d52:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	695a      	ldr	r2, [r3, #20]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003d62:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d007      	beq.n	8003d7c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f042 0208 	orr.w	r2, r2, #8
 8003d7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f042 0201 	orr.w	r2, r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	e005      	b.n	8003d9a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003d96:	2302      	movs	r3, #2
 8003d98:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003d9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3718      	adds	r7, #24
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003dac:	2300      	movs	r3, #0
 8003dae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003db0:	4b8e      	ldr	r3, [pc, #568]	@ (8003fec <HAL_DMA_IRQHandler+0x248>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a8e      	ldr	r2, [pc, #568]	@ (8003ff0 <HAL_DMA_IRQHandler+0x24c>)
 8003db6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dba:	0a9b      	lsrs	r3, r3, #10
 8003dbc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dc2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dce:	2208      	movs	r2, #8
 8003dd0:	409a      	lsls	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d01a      	beq.n	8003e10 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d013      	beq.n	8003e10 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 0204 	bic.w	r2, r2, #4
 8003df6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dfc:	2208      	movs	r2, #8
 8003dfe:	409a      	lsls	r2, r3
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e08:	f043 0201 	orr.w	r2, r3, #1
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e14:	2201      	movs	r2, #1
 8003e16:	409a      	lsls	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d012      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00b      	beq.n	8003e46 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e32:	2201      	movs	r2, #1
 8003e34:	409a      	lsls	r2, r3
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e3e:	f043 0202 	orr.w	r2, r3, #2
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e4a:	2204      	movs	r2, #4
 8003e4c:	409a      	lsls	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	4013      	ands	r3, r2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d012      	beq.n	8003e7c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00b      	beq.n	8003e7c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e68:	2204      	movs	r2, #4
 8003e6a:	409a      	lsls	r2, r3
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e74:	f043 0204 	orr.w	r2, r3, #4
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e80:	2210      	movs	r2, #16
 8003e82:	409a      	lsls	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	4013      	ands	r3, r2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d043      	beq.n	8003f14 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0308 	and.w	r3, r3, #8
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d03c      	beq.n	8003f14 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e9e:	2210      	movs	r2, #16
 8003ea0:	409a      	lsls	r2, r3
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d018      	beq.n	8003ee6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d108      	bne.n	8003ed4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d024      	beq.n	8003f14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	4798      	blx	r3
 8003ed2:	e01f      	b.n	8003f14 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d01b      	beq.n	8003f14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	4798      	blx	r3
 8003ee4:	e016      	b.n	8003f14 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d107      	bne.n	8003f04 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f022 0208 	bic.w	r2, r2, #8
 8003f02:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d003      	beq.n	8003f14 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f18:	2220      	movs	r2, #32
 8003f1a:	409a      	lsls	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f000 808f 	beq.w	8004044 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0310 	and.w	r3, r3, #16
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 8087 	beq.w	8004044 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	409a      	lsls	r2, r3
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b05      	cmp	r3, #5
 8003f4c:	d136      	bne.n	8003fbc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 0216 	bic.w	r2, r2, #22
 8003f5c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	695a      	ldr	r2, [r3, #20]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f6c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d103      	bne.n	8003f7e <HAL_DMA_IRQHandler+0x1da>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d007      	beq.n	8003f8e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 0208 	bic.w	r2, r2, #8
 8003f8c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f92:	223f      	movs	r2, #63	@ 0x3f
 8003f94:	409a      	lsls	r2, r3
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d07e      	beq.n	80040b0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	4798      	blx	r3
        }
        return;
 8003fba:	e079      	b.n	80040b0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d01d      	beq.n	8004006 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10d      	bne.n	8003ff4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d031      	beq.n	8004044 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	4798      	blx	r3
 8003fe8:	e02c      	b.n	8004044 <HAL_DMA_IRQHandler+0x2a0>
 8003fea:	bf00      	nop
 8003fec:	20000004 	.word	0x20000004
 8003ff0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d023      	beq.n	8004044 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	4798      	blx	r3
 8004004:	e01e      	b.n	8004044 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004010:	2b00      	cmp	r3, #0
 8004012:	d10f      	bne.n	8004034 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 0210 	bic.w	r2, r2, #16
 8004022:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004038:	2b00      	cmp	r3, #0
 800403a:	d003      	beq.n	8004044 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004048:	2b00      	cmp	r3, #0
 800404a:	d032      	beq.n	80040b2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	2b00      	cmp	r3, #0
 8004056:	d022      	beq.n	800409e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2205      	movs	r2, #5
 800405c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0201 	bic.w	r2, r2, #1
 800406e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	3301      	adds	r3, #1
 8004074:	60bb      	str	r3, [r7, #8]
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	429a      	cmp	r2, r3
 800407a:	d307      	bcc.n	800408c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1f2      	bne.n	8004070 <HAL_DMA_IRQHandler+0x2cc>
 800408a:	e000      	b.n	800408e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800408c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d005      	beq.n	80040b2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	4798      	blx	r3
 80040ae:	e000      	b.n	80040b2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80040b0:	bf00      	nop
    }
  }
}
 80040b2:	3718      	adds	r7, #24
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
 80040dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80040ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	2b40      	cmp	r3, #64	@ 0x40
 80040fc:	d108      	bne.n	8004110 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800410e:	e007      	b.n	8004120 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	60da      	str	r2, [r3, #12]
}
 8004120:	bf00      	nop
 8004122:	3714      	adds	r7, #20
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	b2db      	uxtb	r3, r3
 800413a:	3b10      	subs	r3, #16
 800413c:	4a13      	ldr	r2, [pc, #76]	@ (800418c <DMA_CalcBaseAndBitshift+0x60>)
 800413e:	fba2 2303 	umull	r2, r3, r2, r3
 8004142:	091b      	lsrs	r3, r3, #4
 8004144:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004146:	4a12      	ldr	r2, [pc, #72]	@ (8004190 <DMA_CalcBaseAndBitshift+0x64>)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	4413      	add	r3, r2
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	461a      	mov	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2b03      	cmp	r3, #3
 8004158:	d908      	bls.n	800416c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	461a      	mov	r2, r3
 8004160:	4b0c      	ldr	r3, [pc, #48]	@ (8004194 <DMA_CalcBaseAndBitshift+0x68>)
 8004162:	4013      	ands	r3, r2
 8004164:	1d1a      	adds	r2, r3, #4
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	659a      	str	r2, [r3, #88]	@ 0x58
 800416a:	e006      	b.n	800417a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	461a      	mov	r2, r3
 8004172:	4b08      	ldr	r3, [pc, #32]	@ (8004194 <DMA_CalcBaseAndBitshift+0x68>)
 8004174:	4013      	ands	r3, r2
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800417e:	4618      	mov	r0, r3
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	aaaaaaab 	.word	0xaaaaaaab
 8004190:	08014b90 	.word	0x08014b90
 8004194:	fffffc00 	.word	0xfffffc00

08004198 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041a0:	2300      	movs	r3, #0
 80041a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d11f      	bne.n	80041f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	2b03      	cmp	r3, #3
 80041b6:	d856      	bhi.n	8004266 <DMA_CheckFifoParam+0xce>
 80041b8:	a201      	add	r2, pc, #4	@ (adr r2, 80041c0 <DMA_CheckFifoParam+0x28>)
 80041ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041be:	bf00      	nop
 80041c0:	080041d1 	.word	0x080041d1
 80041c4:	080041e3 	.word	0x080041e3
 80041c8:	080041d1 	.word	0x080041d1
 80041cc:	08004267 	.word	0x08004267
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d046      	beq.n	800426a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041e0:	e043      	b.n	800426a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80041ea:	d140      	bne.n	800426e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041f0:	e03d      	b.n	800426e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041fa:	d121      	bne.n	8004240 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	2b03      	cmp	r3, #3
 8004200:	d837      	bhi.n	8004272 <DMA_CheckFifoParam+0xda>
 8004202:	a201      	add	r2, pc, #4	@ (adr r2, 8004208 <DMA_CheckFifoParam+0x70>)
 8004204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004208:	08004219 	.word	0x08004219
 800420c:	0800421f 	.word	0x0800421f
 8004210:	08004219 	.word	0x08004219
 8004214:	08004231 	.word	0x08004231
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	73fb      	strb	r3, [r7, #15]
      break;
 800421c:	e030      	b.n	8004280 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004222:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d025      	beq.n	8004276 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800422e:	e022      	b.n	8004276 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004234:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004238:	d11f      	bne.n	800427a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800423e:	e01c      	b.n	800427a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	2b02      	cmp	r3, #2
 8004244:	d903      	bls.n	800424e <DMA_CheckFifoParam+0xb6>
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	2b03      	cmp	r3, #3
 800424a:	d003      	beq.n	8004254 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800424c:	e018      	b.n	8004280 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	73fb      	strb	r3, [r7, #15]
      break;
 8004252:	e015      	b.n	8004280 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004258:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00e      	beq.n	800427e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	73fb      	strb	r3, [r7, #15]
      break;
 8004264:	e00b      	b.n	800427e <DMA_CheckFifoParam+0xe6>
      break;
 8004266:	bf00      	nop
 8004268:	e00a      	b.n	8004280 <DMA_CheckFifoParam+0xe8>
      break;
 800426a:	bf00      	nop
 800426c:	e008      	b.n	8004280 <DMA_CheckFifoParam+0xe8>
      break;
 800426e:	bf00      	nop
 8004270:	e006      	b.n	8004280 <DMA_CheckFifoParam+0xe8>
      break;
 8004272:	bf00      	nop
 8004274:	e004      	b.n	8004280 <DMA_CheckFifoParam+0xe8>
      break;
 8004276:	bf00      	nop
 8004278:	e002      	b.n	8004280 <DMA_CheckFifoParam+0xe8>
      break;   
 800427a:	bf00      	nop
 800427c:	e000      	b.n	8004280 <DMA_CheckFifoParam+0xe8>
      break;
 800427e:	bf00      	nop
    }
  } 
  
  return status; 
 8004280:	7bfb      	ldrb	r3, [r7, #15]
}
 8004282:	4618      	mov	r0, r3
 8004284:	3714      	adds	r7, #20
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop

08004290 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e039      	b.n	8004316 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d106      	bne.n	80042bc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7fd fe3c 	bl	8001f34 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2202      	movs	r2, #2
 80042c0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042e0:	f023 0107 	bic.w	r1, r3, #7
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689a      	ldr	r2, [r3, #8]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	430a      	orrs	r2, r1
 80042ee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042f6:	4b0a      	ldr	r3, [pc, #40]	@ (8004320 <HAL_DMA2D_Init+0x90>)
 80042f8:	4013      	ands	r3, r2
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	68d1      	ldr	r1, [r2, #12]
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	6812      	ldr	r2, [r2, #0]
 8004302:	430b      	orrs	r3, r1
 8004304:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3708      	adds	r7, #8
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	ffffc000 	.word	0xffffc000

08004324 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d026      	beq.n	8004394 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800434c:	2b00      	cmp	r3, #0
 800434e:	d021      	beq.n	8004394 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800435e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004364:	f043 0201 	orr.w	r2, r3, #1
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2201      	movs	r2, #1
 8004372:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2204      	movs	r2, #4
 8004378:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f003 0320 	and.w	r3, r3, #32
 800439a:	2b00      	cmp	r3, #0
 800439c:	d026      	beq.n	80043ec <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d021      	beq.n	80043ec <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80043b6:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2220      	movs	r2, #32
 80043be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043c4:	f043 0202 	orr.w	r2, r3, #2
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2204      	movs	r2, #4
 80043d0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d003      	beq.n	80043ec <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f003 0308 	and.w	r3, r3, #8
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d026      	beq.n	8004444 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d021      	beq.n	8004444 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800440e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2208      	movs	r2, #8
 8004416:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800441c:	f043 0204 	orr.w	r2, r3, #4
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2204      	movs	r2, #4
 8004428:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f003 0304 	and.w	r3, r3, #4
 800444a:	2b00      	cmp	r3, #0
 800444c:	d013      	beq.n	8004476 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00e      	beq.n	8004476 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004466:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2204      	movs	r2, #4
 800446e:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 f853 	bl	800451c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d024      	beq.n	80044ca <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004486:	2b00      	cmp	r3, #0
 8004488:	d01f      	beq.n	80044ca <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004498:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2202      	movs	r2, #2
 80044a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2201      	movs	r2, #1
 80044ae:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d003      	beq.n	80044ca <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f003 0310 	and.w	r3, r3, #16
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d01f      	beq.n	8004514 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d01a      	beq.n	8004514 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80044ec:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2210      	movs	r2, #16
 80044f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f80e 	bl	8004530 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004514:	bf00      	nop
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004544:	b480      	push	{r7}
 8004546:	b087      	sub	sp, #28
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800455c:	2b01      	cmp	r3, #1
 800455e:	d101      	bne.n	8004564 <HAL_DMA2D_ConfigLayer+0x20>
 8004560:	2302      	movs	r3, #2
 8004562:	e079      	b.n	8004658 <HAL_DMA2D_ConfigLayer+0x114>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2202      	movs	r2, #2
 8004570:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	011b      	lsls	r3, r3, #4
 8004578:	3318      	adds	r3, #24
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	4413      	add	r3, r2
 800457e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	041b      	lsls	r3, r3, #16
 800458a:	4313      	orrs	r3, r2
 800458c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800458e:	4b35      	ldr	r3, [pc, #212]	@ (8004664 <HAL_DMA2D_ConfigLayer+0x120>)
 8004590:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	2b0a      	cmp	r3, #10
 8004598:	d003      	beq.n	80045a2 <HAL_DMA2D_ConfigLayer+0x5e>
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2b09      	cmp	r3, #9
 80045a0:	d107      	bne.n	80045b2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	617b      	str	r3, [r7, #20]
 80045b0:	e005      	b.n	80045be <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	061b      	lsls	r3, r3, #24
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d120      	bne.n	8004606 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	43db      	mvns	r3, r3
 80045ce:	ea02 0103 	and.w	r1, r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	430a      	orrs	r2, r1
 80045da:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	6812      	ldr	r2, [r2, #0]
 80045e4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2b0a      	cmp	r3, #10
 80045ec:	d003      	beq.n	80045f6 <HAL_DMA2D_ConfigLayer+0xb2>
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	2b09      	cmp	r3, #9
 80045f4:	d127      	bne.n	8004646 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	68da      	ldr	r2, [r3, #12]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8004602:	629a      	str	r2, [r3, #40]	@ 0x28
 8004604:	e01f      	b.n	8004646 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	69da      	ldr	r2, [r3, #28]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	43db      	mvns	r3, r3
 8004610:	ea02 0103 	and.w	r1, r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	430a      	orrs	r2, r1
 800461c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	6812      	ldr	r2, [r2, #0]
 8004626:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	2b0a      	cmp	r3, #10
 800462e:	d003      	beq.n	8004638 <HAL_DMA2D_ConfigLayer+0xf4>
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	2b09      	cmp	r3, #9
 8004636:	d106      	bne.n	8004646 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	68da      	ldr	r2, [r3, #12]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8004644:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	371c      	adds	r7, #28
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr
 8004664:	ff03000f 	.word	0xff03000f

08004668 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e086      	b.n	8004788 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004680:	2b00      	cmp	r3, #0
 8004682:	d106      	bne.n	8004692 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2223      	movs	r2, #35	@ 0x23
 8004688:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f7fd fc77 	bl	8001f80 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004692:	4b3f      	ldr	r3, [pc, #252]	@ (8004790 <HAL_ETH_Init+0x128>)
 8004694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004696:	4a3e      	ldr	r2, [pc, #248]	@ (8004790 <HAL_ETH_Init+0x128>)
 8004698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800469c:	6453      	str	r3, [r2, #68]	@ 0x44
 800469e:	4b3c      	ldr	r3, [pc, #240]	@ (8004790 <HAL_ETH_Init+0x128>)
 80046a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046a6:	60bb      	str	r3, [r7, #8]
 80046a8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80046aa:	4b3a      	ldr	r3, [pc, #232]	@ (8004794 <HAL_ETH_Init+0x12c>)
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	4a39      	ldr	r2, [pc, #228]	@ (8004794 <HAL_ETH_Init+0x12c>)
 80046b0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80046b4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80046b6:	4b37      	ldr	r3, [pc, #220]	@ (8004794 <HAL_ETH_Init+0x12c>)
 80046b8:	685a      	ldr	r2, [r3, #4]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	4935      	ldr	r1, [pc, #212]	@ (8004794 <HAL_ETH_Init+0x12c>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80046c4:	4b33      	ldr	r3, [pc, #204]	@ (8004794 <HAL_ETH_Init+0x12c>)
 80046c6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	6812      	ldr	r2, [r2, #0]
 80046d6:	f043 0301 	orr.w	r3, r3, #1
 80046da:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80046de:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046e0:	f7fe fd40 	bl	8003164 <HAL_GetTick>
 80046e4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80046e6:	e011      	b.n	800470c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80046e8:	f7fe fd3c 	bl	8003164 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80046f6:	d909      	bls.n	800470c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2204      	movs	r2, #4
 80046fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	22e0      	movs	r2, #224	@ 0xe0
 8004704:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e03d      	b.n	8004788 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1e4      	bne.n	80046e8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f97a 	bl	8004a18 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 fa25 	bl	8004b74 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 fa7b 	bl	8004c26 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	461a      	mov	r2, r3
 8004736:	2100      	movs	r1, #0
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 f9e3 	bl	8004b04 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 800474c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	4b0f      	ldr	r3, [pc, #60]	@ (8004798 <HAL_ETH_Init+0x130>)
 800475c:	430b      	orrs	r3, r1
 800475e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8004772:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2210      	movs	r2, #16
 8004782:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	40023800 	.word	0x40023800
 8004794:	40013800 	.word	0x40013800
 8004798:	00020060 	.word	0x00020060

0800479c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	4b53      	ldr	r3, [pc, #332]	@ (8004900 <ETH_SetMACConfig+0x164>)
 80047b2:	4013      	ands	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	7b9b      	ldrb	r3, [r3, #14]
 80047ba:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	7c12      	ldrb	r2, [r2, #16]
 80047c0:	2a00      	cmp	r2, #0
 80047c2:	d102      	bne.n	80047ca <ETH_SetMACConfig+0x2e>
 80047c4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80047c8:	e000      	b.n	80047cc <ETH_SetMACConfig+0x30>
 80047ca:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80047cc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	7c52      	ldrb	r2, [r2, #17]
 80047d2:	2a00      	cmp	r2, #0
 80047d4:	d102      	bne.n	80047dc <ETH_SetMACConfig+0x40>
 80047d6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80047da:	e000      	b.n	80047de <ETH_SetMACConfig+0x42>
 80047dc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80047de:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80047e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	7fdb      	ldrb	r3, [r3, #31]
 80047ea:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80047ec:	431a      	orrs	r2, r3
                        macconf->Speed |
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80047f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80047f4:	683a      	ldr	r2, [r7, #0]
 80047f6:	7f92      	ldrb	r2, [r2, #30]
 80047f8:	2a00      	cmp	r2, #0
 80047fa:	d102      	bne.n	8004802 <ETH_SetMACConfig+0x66>
 80047fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004800:	e000      	b.n	8004804 <ETH_SetMACConfig+0x68>
 8004802:	2200      	movs	r2, #0
                        macconf->Speed |
 8004804:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	7f1b      	ldrb	r3, [r3, #28]
 800480a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800480c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004812:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	791b      	ldrb	r3, [r3, #4]
 8004818:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800481a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004822:	2a00      	cmp	r2, #0
 8004824:	d102      	bne.n	800482c <ETH_SetMACConfig+0x90>
 8004826:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800482a:	e000      	b.n	800482e <ETH_SetMACConfig+0x92>
 800482c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800482e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	7bdb      	ldrb	r3, [r3, #15]
 8004834:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004836:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800483c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004844:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004846:	4313      	orrs	r3, r2
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	4313      	orrs	r3, r2
 800484c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800485e:	2001      	movs	r0, #1
 8004860:	f7fe fc8c 	bl	800317c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800487a:	4013      	ands	r3, r2
 800487c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004882:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800488a:	2a00      	cmp	r2, #0
 800488c:	d101      	bne.n	8004892 <ETH_SetMACConfig+0xf6>
 800488e:	2280      	movs	r2, #128	@ 0x80
 8004890:	e000      	b.n	8004894 <ETH_SetMACConfig+0xf8>
 8004892:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004894:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800489a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80048a2:	2a01      	cmp	r2, #1
 80048a4:	d101      	bne.n	80048aa <ETH_SetMACConfig+0x10e>
 80048a6:	2208      	movs	r2, #8
 80048a8:	e000      	b.n	80048ac <ETH_SetMACConfig+0x110>
 80048aa:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80048ac:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80048b4:	2a01      	cmp	r2, #1
 80048b6:	d101      	bne.n	80048bc <ETH_SetMACConfig+0x120>
 80048b8:	2204      	movs	r2, #4
 80048ba:	e000      	b.n	80048be <ETH_SetMACConfig+0x122>
 80048bc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80048be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80048c6:	2a01      	cmp	r2, #1
 80048c8:	d101      	bne.n	80048ce <ETH_SetMACConfig+0x132>
 80048ca:	2202      	movs	r2, #2
 80048cc:	e000      	b.n	80048d0 <ETH_SetMACConfig+0x134>
 80048ce:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80048d0:	4313      	orrs	r3, r2
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80048e8:	2001      	movs	r0, #1
 80048ea:	f7fe fc47 	bl	800317c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	619a      	str	r2, [r3, #24]
}
 80048f6:	bf00      	nop
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	fd20810f 	.word	0xfd20810f

08004904 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	4b3d      	ldr	r3, [pc, #244]	@ (8004a14 <ETH_SetDMAConfig+0x110>)
 800491e:	4013      	ands	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	7b1b      	ldrb	r3, [r3, #12]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d102      	bne.n	8004930 <ETH_SetDMAConfig+0x2c>
 800492a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800492e:	e000      	b.n	8004932 <ETH_SetDMAConfig+0x2e>
 8004930:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	7b5b      	ldrb	r3, [r3, #13]
 8004936:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004938:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	7f52      	ldrb	r2, [r2, #29]
 800493e:	2a00      	cmp	r2, #0
 8004940:	d102      	bne.n	8004948 <ETH_SetDMAConfig+0x44>
 8004942:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004946:	e000      	b.n	800494a <ETH_SetDMAConfig+0x46>
 8004948:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800494a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	7b9b      	ldrb	r3, [r3, #14]
 8004950:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004952:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004958:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	7f1b      	ldrb	r3, [r3, #28]
 800495e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004960:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	7f9b      	ldrb	r3, [r3, #30]
 8004966:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004968:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800496e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004976:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004978:	4313      	orrs	r3, r2
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	4313      	orrs	r3, r2
 800497e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004988:	461a      	mov	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800499a:	2001      	movs	r0, #1
 800499c:	f7fe fbee 	bl	800317c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049a8:	461a      	mov	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	791b      	ldrb	r3, [r3, #4]
 80049b2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80049b8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80049be:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80049c4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80049cc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80049ce:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80049d6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80049dc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	6812      	ldr	r2, [r2, #0]
 80049e2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80049e6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80049ea:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80049f8:	2001      	movs	r0, #1
 80049fa:	f7fe fbbf 	bl	800317c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a06:	461a      	mov	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6013      	str	r3, [r2, #0]
}
 8004a0c:	bf00      	nop
 8004a0e:	3710      	adds	r7, #16
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	f8de3f23 	.word	0xf8de3f23

08004a18 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b0a6      	sub	sp, #152	@ 0x98
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004a20:	2301      	movs	r3, #1
 8004a22:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8004a26:	2301      	movs	r3, #1
 8004a28:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004a30:	2300      	movs	r3, #0
 8004a32:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004a36:	2301      	movs	r3, #1
 8004a38:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004a42:	2301      	movs	r3, #1
 8004a44:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004a54:	2300      	movs	r3, #0
 8004a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004a64:	2300      	movs	r3, #0
 8004a66:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004a74:	2300      	movs	r3, #0
 8004a76:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004a80:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004a84:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004a86:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004a8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004a92:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004a96:	4619      	mov	r1, r3
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f7ff fe7f 	bl	800479c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004aac:	2301      	movs	r3, #1
 8004aae:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004aba:	2300      	movs	r3, #0
 8004abc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004aca:	2301      	movs	r3, #1
 8004acc:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004ace:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004ad2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004ad4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004ad8:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004ada:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004ade:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004aea:	2300      	movs	r3, #0
 8004aec:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004aee:	f107 0308 	add.w	r3, r7, #8
 8004af2:	4619      	mov	r1, r3
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f7ff ff05 	bl	8004904 <ETH_SetDMAConfig>
}
 8004afa:	bf00      	nop
 8004afc:	3798      	adds	r7, #152	@ 0x98
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
	...

08004b04 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b087      	sub	sp, #28
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	3305      	adds	r3, #5
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	021b      	lsls	r3, r3, #8
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	3204      	adds	r2, #4
 8004b1c:	7812      	ldrb	r2, [r2, #0]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004b22:	68ba      	ldr	r2, [r7, #8]
 8004b24:	4b11      	ldr	r3, [pc, #68]	@ (8004b6c <ETH_MACAddressConfig+0x68>)
 8004b26:	4413      	add	r3, r2
 8004b28:	461a      	mov	r2, r3
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	3303      	adds	r3, #3
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	061a      	lsls	r2, r3, #24
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	3302      	adds	r3, #2
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	041b      	lsls	r3, r3, #16
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	3301      	adds	r3, #1
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	021b      	lsls	r3, r3, #8
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	7812      	ldrb	r2, [r2, #0]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004b52:	68ba      	ldr	r2, [r7, #8]
 8004b54:	4b06      	ldr	r3, [pc, #24]	@ (8004b70 <ETH_MACAddressConfig+0x6c>)
 8004b56:	4413      	add	r3, r2
 8004b58:	461a      	mov	r2, r3
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	6013      	str	r3, [r2, #0]
}
 8004b5e:	bf00      	nop
 8004b60:	371c      	adds	r7, #28
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	40028040 	.word	0x40028040
 8004b70:	40028044 	.word	0x40028044

08004b74 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	60fb      	str	r3, [r7, #12]
 8004b80:	e03e      	b.n	8004c00 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68d9      	ldr	r1, [r3, #12]
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	4613      	mov	r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	4413      	add	r3, r2
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	440b      	add	r3, r1
 8004b92:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	2200      	movs	r2, #0
 8004b98:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004bac:	68b9      	ldr	r1, [r7, #8]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	3206      	adds	r2, #6
 8004bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d80c      	bhi.n	8004be4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68d9      	ldr	r1, [r3, #12]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	1c5a      	adds	r2, r3, #1
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4413      	add	r3, r2
 8004bd8:	00db      	lsls	r3, r3, #3
 8004bda:	440b      	add	r3, r1
 8004bdc:	461a      	mov	r2, r3
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	60da      	str	r2, [r3, #12]
 8004be2:	e004      	b.n	8004bee <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	461a      	mov	r2, r3
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	60fb      	str	r3, [r7, #12]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2b03      	cmp	r3, #3
 8004c04:	d9bd      	bls.n	8004b82 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	68da      	ldr	r2, [r3, #12]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c18:	611a      	str	r2, [r3, #16]
}
 8004c1a:	bf00      	nop
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004c26:	b480      	push	{r7}
 8004c28:	b085      	sub	sp, #20
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004c2e:	2300      	movs	r3, #0
 8004c30:	60fb      	str	r3, [r7, #12]
 8004c32:	e048      	b.n	8004cc6 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6919      	ldr	r1, [r3, #16]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	4413      	add	r3, r2
 8004c40:	00db      	lsls	r3, r3, #3
 8004c42:	440b      	add	r3, r1
 8004c44:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	2200      	movs	r2, #0
 8004c56:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	2200      	movs	r2, #0
 8004c62:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	2200      	movs	r2, #0
 8004c68:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004c70:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004c8a:	68b9      	ldr	r1, [r7, #8]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	3212      	adds	r2, #18
 8004c92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d80c      	bhi.n	8004cb6 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6919      	ldr	r1, [r3, #16]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	1c5a      	adds	r2, r3, #1
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	4413      	add	r3, r2
 8004caa:	00db      	lsls	r3, r3, #3
 8004cac:	440b      	add	r3, r1
 8004cae:	461a      	mov	r2, r3
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	60da      	str	r2, [r3, #12]
 8004cb4:	e004      	b.n	8004cc0 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	461a      	mov	r2, r3
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	60fb      	str	r3, [r7, #12]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2b03      	cmp	r3, #3
 8004cca:	d9b3      	bls.n	8004c34 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	691a      	ldr	r2, [r3, #16]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004cf6:	60da      	str	r2, [r3, #12]
}
 8004cf8:	bf00      	nop
 8004cfa:	3714      	adds	r7, #20
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b089      	sub	sp, #36	@ 0x24
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004d12:	2300      	movs	r3, #0
 8004d14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004d16:	2300      	movs	r3, #0
 8004d18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8004d1e:	2300      	movs	r3, #0
 8004d20:	61fb      	str	r3, [r7, #28]
 8004d22:	e175      	b.n	8005010 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004d24:	2201      	movs	r2, #1
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	4013      	ands	r3, r2
 8004d36:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	f040 8164 	bne.w	800500a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f003 0303 	and.w	r3, r3, #3
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d005      	beq.n	8004d5a <HAL_GPIO_Init+0x56>
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f003 0303 	and.w	r3, r3, #3
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d130      	bne.n	8004dbc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	005b      	lsls	r3, r3, #1
 8004d64:	2203      	movs	r2, #3
 8004d66:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6a:	43db      	mvns	r3, r3
 8004d6c:	69ba      	ldr	r2, [r7, #24]
 8004d6e:	4013      	ands	r3, r2
 8004d70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	68da      	ldr	r2, [r3, #12]
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	69ba      	ldr	r2, [r7, #24]
 8004d88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d90:	2201      	movs	r2, #1
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	fa02 f303 	lsl.w	r3, r2, r3
 8004d98:	43db      	mvns	r3, r3
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	091b      	lsrs	r3, r3, #4
 8004da6:	f003 0201 	and.w	r2, r3, #1
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	fa02 f303 	lsl.w	r3, r2, r3
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	69ba      	ldr	r2, [r7, #24]
 8004dba:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f003 0303 	and.w	r3, r3, #3
 8004dc4:	2b03      	cmp	r3, #3
 8004dc6:	d017      	beq.n	8004df8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	005b      	lsls	r3, r3, #1
 8004dd2:	2203      	movs	r2, #3
 8004dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd8:	43db      	mvns	r3, r3
 8004dda:	69ba      	ldr	r2, [r7, #24]
 8004ddc:	4013      	ands	r3, r2
 8004dde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	689a      	ldr	r2, [r3, #8]
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	005b      	lsls	r3, r3, #1
 8004de8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f003 0303 	and.w	r3, r3, #3
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d123      	bne.n	8004e4c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	08da      	lsrs	r2, r3, #3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	3208      	adds	r2, #8
 8004e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	f003 0307 	and.w	r3, r3, #7
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	220f      	movs	r2, #15
 8004e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e20:	43db      	mvns	r3, r3
 8004e22:	69ba      	ldr	r2, [r7, #24]
 8004e24:	4013      	ands	r3, r2
 8004e26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	691a      	ldr	r2, [r3, #16]
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	f003 0307 	and.w	r3, r3, #7
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	08da      	lsrs	r2, r3, #3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	3208      	adds	r2, #8
 8004e46:	69b9      	ldr	r1, [r7, #24]
 8004e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	005b      	lsls	r3, r3, #1
 8004e56:	2203      	movs	r2, #3
 8004e58:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5c:	43db      	mvns	r3, r3
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	4013      	ands	r3, r2
 8004e62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f003 0203 	and.w	r2, r3, #3
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	fa02 f303 	lsl.w	r3, r2, r3
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f000 80be 	beq.w	800500a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e8e:	4b66      	ldr	r3, [pc, #408]	@ (8005028 <HAL_GPIO_Init+0x324>)
 8004e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e92:	4a65      	ldr	r2, [pc, #404]	@ (8005028 <HAL_GPIO_Init+0x324>)
 8004e94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e98:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e9a:	4b63      	ldr	r3, [pc, #396]	@ (8005028 <HAL_GPIO_Init+0x324>)
 8004e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ea2:	60fb      	str	r3, [r7, #12]
 8004ea4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004ea6:	4a61      	ldr	r2, [pc, #388]	@ (800502c <HAL_GPIO_Init+0x328>)
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	089b      	lsrs	r3, r3, #2
 8004eac:	3302      	adds	r3, #2
 8004eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	f003 0303 	and.w	r3, r3, #3
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	220f      	movs	r2, #15
 8004ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec2:	43db      	mvns	r3, r3
 8004ec4:	69ba      	ldr	r2, [r7, #24]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a58      	ldr	r2, [pc, #352]	@ (8005030 <HAL_GPIO_Init+0x32c>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d037      	beq.n	8004f42 <HAL_GPIO_Init+0x23e>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a57      	ldr	r2, [pc, #348]	@ (8005034 <HAL_GPIO_Init+0x330>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d031      	beq.n	8004f3e <HAL_GPIO_Init+0x23a>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a56      	ldr	r2, [pc, #344]	@ (8005038 <HAL_GPIO_Init+0x334>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d02b      	beq.n	8004f3a <HAL_GPIO_Init+0x236>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a55      	ldr	r2, [pc, #340]	@ (800503c <HAL_GPIO_Init+0x338>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d025      	beq.n	8004f36 <HAL_GPIO_Init+0x232>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a54      	ldr	r2, [pc, #336]	@ (8005040 <HAL_GPIO_Init+0x33c>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d01f      	beq.n	8004f32 <HAL_GPIO_Init+0x22e>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a53      	ldr	r2, [pc, #332]	@ (8005044 <HAL_GPIO_Init+0x340>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d019      	beq.n	8004f2e <HAL_GPIO_Init+0x22a>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a52      	ldr	r2, [pc, #328]	@ (8005048 <HAL_GPIO_Init+0x344>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d013      	beq.n	8004f2a <HAL_GPIO_Init+0x226>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a51      	ldr	r2, [pc, #324]	@ (800504c <HAL_GPIO_Init+0x348>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d00d      	beq.n	8004f26 <HAL_GPIO_Init+0x222>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a50      	ldr	r2, [pc, #320]	@ (8005050 <HAL_GPIO_Init+0x34c>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d007      	beq.n	8004f22 <HAL_GPIO_Init+0x21e>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a4f      	ldr	r2, [pc, #316]	@ (8005054 <HAL_GPIO_Init+0x350>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d101      	bne.n	8004f1e <HAL_GPIO_Init+0x21a>
 8004f1a:	2309      	movs	r3, #9
 8004f1c:	e012      	b.n	8004f44 <HAL_GPIO_Init+0x240>
 8004f1e:	230a      	movs	r3, #10
 8004f20:	e010      	b.n	8004f44 <HAL_GPIO_Init+0x240>
 8004f22:	2308      	movs	r3, #8
 8004f24:	e00e      	b.n	8004f44 <HAL_GPIO_Init+0x240>
 8004f26:	2307      	movs	r3, #7
 8004f28:	e00c      	b.n	8004f44 <HAL_GPIO_Init+0x240>
 8004f2a:	2306      	movs	r3, #6
 8004f2c:	e00a      	b.n	8004f44 <HAL_GPIO_Init+0x240>
 8004f2e:	2305      	movs	r3, #5
 8004f30:	e008      	b.n	8004f44 <HAL_GPIO_Init+0x240>
 8004f32:	2304      	movs	r3, #4
 8004f34:	e006      	b.n	8004f44 <HAL_GPIO_Init+0x240>
 8004f36:	2303      	movs	r3, #3
 8004f38:	e004      	b.n	8004f44 <HAL_GPIO_Init+0x240>
 8004f3a:	2302      	movs	r3, #2
 8004f3c:	e002      	b.n	8004f44 <HAL_GPIO_Init+0x240>
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e000      	b.n	8004f44 <HAL_GPIO_Init+0x240>
 8004f42:	2300      	movs	r3, #0
 8004f44:	69fa      	ldr	r2, [r7, #28]
 8004f46:	f002 0203 	and.w	r2, r2, #3
 8004f4a:	0092      	lsls	r2, r2, #2
 8004f4c:	4093      	lsls	r3, r2
 8004f4e:	69ba      	ldr	r2, [r7, #24]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004f54:	4935      	ldr	r1, [pc, #212]	@ (800502c <HAL_GPIO_Init+0x328>)
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	089b      	lsrs	r3, r3, #2
 8004f5a:	3302      	adds	r3, #2
 8004f5c:	69ba      	ldr	r2, [r7, #24]
 8004f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f62:	4b3d      	ldr	r3, [pc, #244]	@ (8005058 <HAL_GPIO_Init+0x354>)
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	43db      	mvns	r3, r3
 8004f6c:	69ba      	ldr	r2, [r7, #24]
 8004f6e:	4013      	ands	r3, r2
 8004f70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d003      	beq.n	8004f86 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004f7e:	69ba      	ldr	r2, [r7, #24]
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f86:	4a34      	ldr	r2, [pc, #208]	@ (8005058 <HAL_GPIO_Init+0x354>)
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f8c:	4b32      	ldr	r3, [pc, #200]	@ (8005058 <HAL_GPIO_Init+0x354>)
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	43db      	mvns	r3, r3
 8004f96:	69ba      	ldr	r2, [r7, #24]
 8004f98:	4013      	ands	r3, r2
 8004f9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d003      	beq.n	8004fb0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004fa8:	69ba      	ldr	r2, [r7, #24]
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004fb0:	4a29      	ldr	r2, [pc, #164]	@ (8005058 <HAL_GPIO_Init+0x354>)
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004fb6:	4b28      	ldr	r3, [pc, #160]	@ (8005058 <HAL_GPIO_Init+0x354>)
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	43db      	mvns	r3, r3
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004fda:	4a1f      	ldr	r2, [pc, #124]	@ (8005058 <HAL_GPIO_Init+0x354>)
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fe0:	4b1d      	ldr	r3, [pc, #116]	@ (8005058 <HAL_GPIO_Init+0x354>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	43db      	mvns	r3, r3
 8004fea:	69ba      	ldr	r2, [r7, #24]
 8004fec:	4013      	ands	r3, r2
 8004fee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d003      	beq.n	8005004 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004ffc:	69ba      	ldr	r2, [r7, #24]
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	4313      	orrs	r3, r2
 8005002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005004:	4a14      	ldr	r2, [pc, #80]	@ (8005058 <HAL_GPIO_Init+0x354>)
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	3301      	adds	r3, #1
 800500e:	61fb      	str	r3, [r7, #28]
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	2b0f      	cmp	r3, #15
 8005014:	f67f ae86 	bls.w	8004d24 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005018:	bf00      	nop
 800501a:	bf00      	nop
 800501c:	3724      	adds	r7, #36	@ 0x24
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	40023800 	.word	0x40023800
 800502c:	40013800 	.word	0x40013800
 8005030:	40020000 	.word	0x40020000
 8005034:	40020400 	.word	0x40020400
 8005038:	40020800 	.word	0x40020800
 800503c:	40020c00 	.word	0x40020c00
 8005040:	40021000 	.word	0x40021000
 8005044:	40021400 	.word	0x40021400
 8005048:	40021800 	.word	0x40021800
 800504c:	40021c00 	.word	0x40021c00
 8005050:	40022000 	.word	0x40022000
 8005054:	40022400 	.word	0x40022400
 8005058:	40013c00 	.word	0x40013c00

0800505c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	460b      	mov	r3, r1
 8005066:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	691a      	ldr	r2, [r3, #16]
 800506c:	887b      	ldrh	r3, [r7, #2]
 800506e:	4013      	ands	r3, r2
 8005070:	2b00      	cmp	r3, #0
 8005072:	d002      	beq.n	800507a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005074:	2301      	movs	r3, #1
 8005076:	73fb      	strb	r3, [r7, #15]
 8005078:	e001      	b.n	800507e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800507a:	2300      	movs	r3, #0
 800507c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800507e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005080:	4618      	mov	r0, r3
 8005082:	3714      	adds	r7, #20
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	460b      	mov	r3, r1
 8005096:	807b      	strh	r3, [r7, #2]
 8005098:	4613      	mov	r3, r2
 800509a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800509c:	787b      	ldrb	r3, [r7, #1]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d003      	beq.n	80050aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050a2:	887a      	ldrh	r2, [r7, #2]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80050a8:	e003      	b.n	80050b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80050aa:	887b      	ldrh	r3, [r7, #2]
 80050ac:	041a      	lsls	r2, r3, #16
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	619a      	str	r2, [r3, #24]
}
 80050b2:	bf00      	nop
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80050be:	b580      	push	{r7, lr}
 80050c0:	b086      	sub	sp, #24
 80050c2:	af02      	add	r7, sp, #8
 80050c4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d101      	bne.n	80050d0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e059      	b.n	8005184 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d106      	bne.n	80050f0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f00f f8a6 	bl	801423c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2203      	movs	r2, #3
 80050f4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80050fe:	d102      	bne.n	8005106 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4618      	mov	r0, r3
 800510c:	f008 fe5b 	bl	800ddc6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6818      	ldr	r0, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	7c1a      	ldrb	r2, [r3, #16]
 8005118:	f88d 2000 	strb.w	r2, [sp]
 800511c:	3304      	adds	r3, #4
 800511e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005120:	f008 fde6 	bl	800dcf0 <USB_CoreInit>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d005      	beq.n	8005136 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2202      	movs	r2, #2
 800512e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e026      	b.n	8005184 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2101      	movs	r1, #1
 800513c:	4618      	mov	r0, r3
 800513e:	f008 fe53 	bl	800dde8 <USB_SetCurrentMode>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d005      	beq.n	8005154 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e017      	b.n	8005184 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6818      	ldr	r0, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	7c1a      	ldrb	r2, [r3, #16]
 800515c:	f88d 2000 	strb.w	r2, [sp]
 8005160:	3304      	adds	r3, #4
 8005162:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005164:	f008 fff6 	bl	800e154 <USB_HostInit>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d005      	beq.n	800517a <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2202      	movs	r2, #2
 8005172:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e004      	b.n	8005184 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800518c:	b590      	push	{r4, r7, lr}
 800518e:	b08b      	sub	sp, #44	@ 0x2c
 8005190:	af04      	add	r7, sp, #16
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	4608      	mov	r0, r1
 8005196:	4611      	mov	r1, r2
 8005198:	461a      	mov	r2, r3
 800519a:	4603      	mov	r3, r0
 800519c:	70fb      	strb	r3, [r7, #3]
 800519e:	460b      	mov	r3, r1
 80051a0:	70bb      	strb	r3, [r7, #2]
 80051a2:	4613      	mov	r3, r2
 80051a4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80051a6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80051a8:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d101      	bne.n	80051b8 <HAL_HCD_HC_Init+0x2c>
 80051b4:	2302      	movs	r3, #2
 80051b6:	e09d      	b.n	80052f4 <HAL_HCD_HC_Init+0x168>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80051c0:	78fa      	ldrb	r2, [r7, #3]
 80051c2:	6879      	ldr	r1, [r7, #4]
 80051c4:	4613      	mov	r3, r2
 80051c6:	011b      	lsls	r3, r3, #4
 80051c8:	1a9b      	subs	r3, r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	440b      	add	r3, r1
 80051ce:	3319      	adds	r3, #25
 80051d0:	2200      	movs	r2, #0
 80051d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80051d4:	78fa      	ldrb	r2, [r7, #3]
 80051d6:	6879      	ldr	r1, [r7, #4]
 80051d8:	4613      	mov	r3, r2
 80051da:	011b      	lsls	r3, r3, #4
 80051dc:	1a9b      	subs	r3, r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	440b      	add	r3, r1
 80051e2:	3314      	adds	r3, #20
 80051e4:	787a      	ldrb	r2, [r7, #1]
 80051e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80051e8:	78fa      	ldrb	r2, [r7, #3]
 80051ea:	6879      	ldr	r1, [r7, #4]
 80051ec:	4613      	mov	r3, r2
 80051ee:	011b      	lsls	r3, r3, #4
 80051f0:	1a9b      	subs	r3, r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	440b      	add	r3, r1
 80051f6:	3315      	adds	r3, #21
 80051f8:	78fa      	ldrb	r2, [r7, #3]
 80051fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80051fc:	78fa      	ldrb	r2, [r7, #3]
 80051fe:	6879      	ldr	r1, [r7, #4]
 8005200:	4613      	mov	r3, r2
 8005202:	011b      	lsls	r3, r3, #4
 8005204:	1a9b      	subs	r3, r3, r2
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	440b      	add	r3, r1
 800520a:	3326      	adds	r3, #38	@ 0x26
 800520c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8005210:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8005212:	78fa      	ldrb	r2, [r7, #3]
 8005214:	78bb      	ldrb	r3, [r7, #2]
 8005216:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800521a:	b2d8      	uxtb	r0, r3
 800521c:	6879      	ldr	r1, [r7, #4]
 800521e:	4613      	mov	r3, r2
 8005220:	011b      	lsls	r3, r3, #4
 8005222:	1a9b      	subs	r3, r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	440b      	add	r3, r1
 8005228:	3316      	adds	r3, #22
 800522a:	4602      	mov	r2, r0
 800522c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800522e:	78fb      	ldrb	r3, [r7, #3]
 8005230:	4619      	mov	r1, r3
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 fbc8 	bl	80059c8 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8005238:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800523c:	2b00      	cmp	r3, #0
 800523e:	da0a      	bge.n	8005256 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005240:	78fa      	ldrb	r2, [r7, #3]
 8005242:	6879      	ldr	r1, [r7, #4]
 8005244:	4613      	mov	r3, r2
 8005246:	011b      	lsls	r3, r3, #4
 8005248:	1a9b      	subs	r3, r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	440b      	add	r3, r1
 800524e:	3317      	adds	r3, #23
 8005250:	2201      	movs	r2, #1
 8005252:	701a      	strb	r2, [r3, #0]
 8005254:	e009      	b.n	800526a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8005256:	78fa      	ldrb	r2, [r7, #3]
 8005258:	6879      	ldr	r1, [r7, #4]
 800525a:	4613      	mov	r3, r2
 800525c:	011b      	lsls	r3, r3, #4
 800525e:	1a9b      	subs	r3, r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	440b      	add	r3, r1
 8005264:	3317      	adds	r3, #23
 8005266:	2200      	movs	r2, #0
 8005268:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4618      	mov	r0, r3
 8005270:	f009 f8c8 	bl	800e404 <USB_GetHostSpeed>
 8005274:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8005276:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800527a:	2b01      	cmp	r3, #1
 800527c:	d10b      	bne.n	8005296 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800527e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005282:	2b01      	cmp	r3, #1
 8005284:	d107      	bne.n	8005296 <HAL_HCD_HC_Init+0x10a>
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d104      	bne.n	8005296 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	2bbc      	cmp	r3, #188	@ 0xbc
 8005290:	d901      	bls.n	8005296 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8005292:	23bc      	movs	r3, #188	@ 0xbc
 8005294:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8005296:	78fa      	ldrb	r2, [r7, #3]
 8005298:	6879      	ldr	r1, [r7, #4]
 800529a:	4613      	mov	r3, r2
 800529c:	011b      	lsls	r3, r3, #4
 800529e:	1a9b      	subs	r3, r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	440b      	add	r3, r1
 80052a4:	3318      	adds	r3, #24
 80052a6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80052aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80052ac:	78fa      	ldrb	r2, [r7, #3]
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	b298      	uxth	r0, r3
 80052b2:	6879      	ldr	r1, [r7, #4]
 80052b4:	4613      	mov	r3, r2
 80052b6:	011b      	lsls	r3, r3, #4
 80052b8:	1a9b      	subs	r3, r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	440b      	add	r3, r1
 80052be:	3328      	adds	r3, #40	@ 0x28
 80052c0:	4602      	mov	r2, r0
 80052c2:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6818      	ldr	r0, [r3, #0]
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	787c      	ldrb	r4, [r7, #1]
 80052ce:	78ba      	ldrb	r2, [r7, #2]
 80052d0:	78f9      	ldrb	r1, [r7, #3]
 80052d2:	9302      	str	r3, [sp, #8]
 80052d4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80052d8:	9301      	str	r3, [sp, #4]
 80052da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80052de:	9300      	str	r3, [sp, #0]
 80052e0:	4623      	mov	r3, r4
 80052e2:	f009 f8b7 	bl	800e454 <USB_HC_Init>
 80052e6:	4603      	mov	r3, r0
 80052e8:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80052f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	371c      	adds	r7, #28
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd90      	pop	{r4, r7, pc}

080052fc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	460b      	mov	r3, r1
 8005306:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005308:	2300      	movs	r3, #0
 800530a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8005312:	2b01      	cmp	r3, #1
 8005314:	d101      	bne.n	800531a <HAL_HCD_HC_Halt+0x1e>
 8005316:	2302      	movs	r3, #2
 8005318:	e00f      	b.n	800533a <HAL_HCD_HC_Halt+0x3e>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	78fa      	ldrb	r2, [r7, #3]
 8005328:	4611      	mov	r1, r2
 800532a:	4618      	mov	r0, r3
 800532c:	f009 fc49 	bl	800ebc2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8005338:	7bfb      	ldrb	r3, [r7, #15]
}
 800533a:	4618      	mov	r0, r3
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
	...

08005344 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	4608      	mov	r0, r1
 800534e:	4611      	mov	r1, r2
 8005350:	461a      	mov	r2, r3
 8005352:	4603      	mov	r3, r0
 8005354:	70fb      	strb	r3, [r7, #3]
 8005356:	460b      	mov	r3, r1
 8005358:	70bb      	strb	r3, [r7, #2]
 800535a:	4613      	mov	r3, r2
 800535c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800535e:	78fa      	ldrb	r2, [r7, #3]
 8005360:	6879      	ldr	r1, [r7, #4]
 8005362:	4613      	mov	r3, r2
 8005364:	011b      	lsls	r3, r3, #4
 8005366:	1a9b      	subs	r3, r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	440b      	add	r3, r1
 800536c:	3317      	adds	r3, #23
 800536e:	78ba      	ldrb	r2, [r7, #2]
 8005370:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8005372:	78fa      	ldrb	r2, [r7, #3]
 8005374:	6879      	ldr	r1, [r7, #4]
 8005376:	4613      	mov	r3, r2
 8005378:	011b      	lsls	r3, r3, #4
 800537a:	1a9b      	subs	r3, r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	440b      	add	r3, r1
 8005380:	3326      	adds	r3, #38	@ 0x26
 8005382:	787a      	ldrb	r2, [r7, #1]
 8005384:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8005386:	7c3b      	ldrb	r3, [r7, #16]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d114      	bne.n	80053b6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800538c:	78fa      	ldrb	r2, [r7, #3]
 800538e:	6879      	ldr	r1, [r7, #4]
 8005390:	4613      	mov	r3, r2
 8005392:	011b      	lsls	r3, r3, #4
 8005394:	1a9b      	subs	r3, r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	440b      	add	r3, r1
 800539a:	332a      	adds	r3, #42	@ 0x2a
 800539c:	2203      	movs	r2, #3
 800539e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80053a0:	78fa      	ldrb	r2, [r7, #3]
 80053a2:	6879      	ldr	r1, [r7, #4]
 80053a4:	4613      	mov	r3, r2
 80053a6:	011b      	lsls	r3, r3, #4
 80053a8:	1a9b      	subs	r3, r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	440b      	add	r3, r1
 80053ae:	3319      	adds	r3, #25
 80053b0:	7f3a      	ldrb	r2, [r7, #28]
 80053b2:	701a      	strb	r2, [r3, #0]
 80053b4:	e009      	b.n	80053ca <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80053b6:	78fa      	ldrb	r2, [r7, #3]
 80053b8:	6879      	ldr	r1, [r7, #4]
 80053ba:	4613      	mov	r3, r2
 80053bc:	011b      	lsls	r3, r3, #4
 80053be:	1a9b      	subs	r3, r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	440b      	add	r3, r1
 80053c4:	332a      	adds	r3, #42	@ 0x2a
 80053c6:	2202      	movs	r2, #2
 80053c8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80053ca:	787b      	ldrb	r3, [r7, #1]
 80053cc:	2b03      	cmp	r3, #3
 80053ce:	f200 8102 	bhi.w	80055d6 <HAL_HCD_HC_SubmitRequest+0x292>
 80053d2:	a201      	add	r2, pc, #4	@ (adr r2, 80053d8 <HAL_HCD_HC_SubmitRequest+0x94>)
 80053d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d8:	080053e9 	.word	0x080053e9
 80053dc:	080055c1 	.word	0x080055c1
 80053e0:	080054ad 	.word	0x080054ad
 80053e4:	08005537 	.word	0x08005537
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80053e8:	7c3b      	ldrb	r3, [r7, #16]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	f040 80f5 	bne.w	80055da <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80053f0:	78bb      	ldrb	r3, [r7, #2]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d12d      	bne.n	8005452 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80053f6:	8b3b      	ldrh	r3, [r7, #24]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d109      	bne.n	8005410 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80053fc:	78fa      	ldrb	r2, [r7, #3]
 80053fe:	6879      	ldr	r1, [r7, #4]
 8005400:	4613      	mov	r3, r2
 8005402:	011b      	lsls	r3, r3, #4
 8005404:	1a9b      	subs	r3, r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	440b      	add	r3, r1
 800540a:	333d      	adds	r3, #61	@ 0x3d
 800540c:	2201      	movs	r2, #1
 800540e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8005410:	78fa      	ldrb	r2, [r7, #3]
 8005412:	6879      	ldr	r1, [r7, #4]
 8005414:	4613      	mov	r3, r2
 8005416:	011b      	lsls	r3, r3, #4
 8005418:	1a9b      	subs	r3, r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	440b      	add	r3, r1
 800541e:	333d      	adds	r3, #61	@ 0x3d
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10a      	bne.n	800543c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005426:	78fa      	ldrb	r2, [r7, #3]
 8005428:	6879      	ldr	r1, [r7, #4]
 800542a:	4613      	mov	r3, r2
 800542c:	011b      	lsls	r3, r3, #4
 800542e:	1a9b      	subs	r3, r3, r2
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	440b      	add	r3, r1
 8005434:	332a      	adds	r3, #42	@ 0x2a
 8005436:	2200      	movs	r2, #0
 8005438:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800543a:	e0ce      	b.n	80055da <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800543c:	78fa      	ldrb	r2, [r7, #3]
 800543e:	6879      	ldr	r1, [r7, #4]
 8005440:	4613      	mov	r3, r2
 8005442:	011b      	lsls	r3, r3, #4
 8005444:	1a9b      	subs	r3, r3, r2
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	440b      	add	r3, r1
 800544a:	332a      	adds	r3, #42	@ 0x2a
 800544c:	2202      	movs	r2, #2
 800544e:	701a      	strb	r2, [r3, #0]
      break;
 8005450:	e0c3      	b.n	80055da <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8005452:	78fa      	ldrb	r2, [r7, #3]
 8005454:	6879      	ldr	r1, [r7, #4]
 8005456:	4613      	mov	r3, r2
 8005458:	011b      	lsls	r3, r3, #4
 800545a:	1a9b      	subs	r3, r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	440b      	add	r3, r1
 8005460:	331a      	adds	r3, #26
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	2b01      	cmp	r3, #1
 8005466:	f040 80b8 	bne.w	80055da <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800546a:	78fa      	ldrb	r2, [r7, #3]
 800546c:	6879      	ldr	r1, [r7, #4]
 800546e:	4613      	mov	r3, r2
 8005470:	011b      	lsls	r3, r3, #4
 8005472:	1a9b      	subs	r3, r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	440b      	add	r3, r1
 8005478:	333c      	adds	r3, #60	@ 0x3c
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d10a      	bne.n	8005496 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005480:	78fa      	ldrb	r2, [r7, #3]
 8005482:	6879      	ldr	r1, [r7, #4]
 8005484:	4613      	mov	r3, r2
 8005486:	011b      	lsls	r3, r3, #4
 8005488:	1a9b      	subs	r3, r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	440b      	add	r3, r1
 800548e:	332a      	adds	r3, #42	@ 0x2a
 8005490:	2200      	movs	r2, #0
 8005492:	701a      	strb	r2, [r3, #0]
      break;
 8005494:	e0a1      	b.n	80055da <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005496:	78fa      	ldrb	r2, [r7, #3]
 8005498:	6879      	ldr	r1, [r7, #4]
 800549a:	4613      	mov	r3, r2
 800549c:	011b      	lsls	r3, r3, #4
 800549e:	1a9b      	subs	r3, r3, r2
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	440b      	add	r3, r1
 80054a4:	332a      	adds	r3, #42	@ 0x2a
 80054a6:	2202      	movs	r2, #2
 80054a8:	701a      	strb	r2, [r3, #0]
      break;
 80054aa:	e096      	b.n	80055da <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80054ac:	78bb      	ldrb	r3, [r7, #2]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d120      	bne.n	80054f4 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80054b2:	78fa      	ldrb	r2, [r7, #3]
 80054b4:	6879      	ldr	r1, [r7, #4]
 80054b6:	4613      	mov	r3, r2
 80054b8:	011b      	lsls	r3, r3, #4
 80054ba:	1a9b      	subs	r3, r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	440b      	add	r3, r1
 80054c0:	333d      	adds	r3, #61	@ 0x3d
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d10a      	bne.n	80054de <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80054c8:	78fa      	ldrb	r2, [r7, #3]
 80054ca:	6879      	ldr	r1, [r7, #4]
 80054cc:	4613      	mov	r3, r2
 80054ce:	011b      	lsls	r3, r3, #4
 80054d0:	1a9b      	subs	r3, r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	440b      	add	r3, r1
 80054d6:	332a      	adds	r3, #42	@ 0x2a
 80054d8:	2200      	movs	r2, #0
 80054da:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80054dc:	e07e      	b.n	80055dc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80054de:	78fa      	ldrb	r2, [r7, #3]
 80054e0:	6879      	ldr	r1, [r7, #4]
 80054e2:	4613      	mov	r3, r2
 80054e4:	011b      	lsls	r3, r3, #4
 80054e6:	1a9b      	subs	r3, r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	440b      	add	r3, r1
 80054ec:	332a      	adds	r3, #42	@ 0x2a
 80054ee:	2202      	movs	r2, #2
 80054f0:	701a      	strb	r2, [r3, #0]
      break;
 80054f2:	e073      	b.n	80055dc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80054f4:	78fa      	ldrb	r2, [r7, #3]
 80054f6:	6879      	ldr	r1, [r7, #4]
 80054f8:	4613      	mov	r3, r2
 80054fa:	011b      	lsls	r3, r3, #4
 80054fc:	1a9b      	subs	r3, r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	440b      	add	r3, r1
 8005502:	333c      	adds	r3, #60	@ 0x3c
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10a      	bne.n	8005520 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800550a:	78fa      	ldrb	r2, [r7, #3]
 800550c:	6879      	ldr	r1, [r7, #4]
 800550e:	4613      	mov	r3, r2
 8005510:	011b      	lsls	r3, r3, #4
 8005512:	1a9b      	subs	r3, r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	440b      	add	r3, r1
 8005518:	332a      	adds	r3, #42	@ 0x2a
 800551a:	2200      	movs	r2, #0
 800551c:	701a      	strb	r2, [r3, #0]
      break;
 800551e:	e05d      	b.n	80055dc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005520:	78fa      	ldrb	r2, [r7, #3]
 8005522:	6879      	ldr	r1, [r7, #4]
 8005524:	4613      	mov	r3, r2
 8005526:	011b      	lsls	r3, r3, #4
 8005528:	1a9b      	subs	r3, r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	440b      	add	r3, r1
 800552e:	332a      	adds	r3, #42	@ 0x2a
 8005530:	2202      	movs	r2, #2
 8005532:	701a      	strb	r2, [r3, #0]
      break;
 8005534:	e052      	b.n	80055dc <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8005536:	78bb      	ldrb	r3, [r7, #2]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d120      	bne.n	800557e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800553c:	78fa      	ldrb	r2, [r7, #3]
 800553e:	6879      	ldr	r1, [r7, #4]
 8005540:	4613      	mov	r3, r2
 8005542:	011b      	lsls	r3, r3, #4
 8005544:	1a9b      	subs	r3, r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	440b      	add	r3, r1
 800554a:	333d      	adds	r3, #61	@ 0x3d
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10a      	bne.n	8005568 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005552:	78fa      	ldrb	r2, [r7, #3]
 8005554:	6879      	ldr	r1, [r7, #4]
 8005556:	4613      	mov	r3, r2
 8005558:	011b      	lsls	r3, r3, #4
 800555a:	1a9b      	subs	r3, r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	440b      	add	r3, r1
 8005560:	332a      	adds	r3, #42	@ 0x2a
 8005562:	2200      	movs	r2, #0
 8005564:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005566:	e039      	b.n	80055dc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005568:	78fa      	ldrb	r2, [r7, #3]
 800556a:	6879      	ldr	r1, [r7, #4]
 800556c:	4613      	mov	r3, r2
 800556e:	011b      	lsls	r3, r3, #4
 8005570:	1a9b      	subs	r3, r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	440b      	add	r3, r1
 8005576:	332a      	adds	r3, #42	@ 0x2a
 8005578:	2202      	movs	r2, #2
 800557a:	701a      	strb	r2, [r3, #0]
      break;
 800557c:	e02e      	b.n	80055dc <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800557e:	78fa      	ldrb	r2, [r7, #3]
 8005580:	6879      	ldr	r1, [r7, #4]
 8005582:	4613      	mov	r3, r2
 8005584:	011b      	lsls	r3, r3, #4
 8005586:	1a9b      	subs	r3, r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	440b      	add	r3, r1
 800558c:	333c      	adds	r3, #60	@ 0x3c
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10a      	bne.n	80055aa <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005594:	78fa      	ldrb	r2, [r7, #3]
 8005596:	6879      	ldr	r1, [r7, #4]
 8005598:	4613      	mov	r3, r2
 800559a:	011b      	lsls	r3, r3, #4
 800559c:	1a9b      	subs	r3, r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	440b      	add	r3, r1
 80055a2:	332a      	adds	r3, #42	@ 0x2a
 80055a4:	2200      	movs	r2, #0
 80055a6:	701a      	strb	r2, [r3, #0]
      break;
 80055a8:	e018      	b.n	80055dc <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80055aa:	78fa      	ldrb	r2, [r7, #3]
 80055ac:	6879      	ldr	r1, [r7, #4]
 80055ae:	4613      	mov	r3, r2
 80055b0:	011b      	lsls	r3, r3, #4
 80055b2:	1a9b      	subs	r3, r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	440b      	add	r3, r1
 80055b8:	332a      	adds	r3, #42	@ 0x2a
 80055ba:	2202      	movs	r2, #2
 80055bc:	701a      	strb	r2, [r3, #0]
      break;
 80055be:	e00d      	b.n	80055dc <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80055c0:	78fa      	ldrb	r2, [r7, #3]
 80055c2:	6879      	ldr	r1, [r7, #4]
 80055c4:	4613      	mov	r3, r2
 80055c6:	011b      	lsls	r3, r3, #4
 80055c8:	1a9b      	subs	r3, r3, r2
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	440b      	add	r3, r1
 80055ce:	332a      	adds	r3, #42	@ 0x2a
 80055d0:	2200      	movs	r2, #0
 80055d2:	701a      	strb	r2, [r3, #0]
      break;
 80055d4:	e002      	b.n	80055dc <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80055d6:	bf00      	nop
 80055d8:	e000      	b.n	80055dc <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80055da:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80055dc:	78fa      	ldrb	r2, [r7, #3]
 80055de:	6879      	ldr	r1, [r7, #4]
 80055e0:	4613      	mov	r3, r2
 80055e2:	011b      	lsls	r3, r3, #4
 80055e4:	1a9b      	subs	r3, r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	440b      	add	r3, r1
 80055ea:	332c      	adds	r3, #44	@ 0x2c
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80055f0:	78fa      	ldrb	r2, [r7, #3]
 80055f2:	8b39      	ldrh	r1, [r7, #24]
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	4613      	mov	r3, r2
 80055f8:	011b      	lsls	r3, r3, #4
 80055fa:	1a9b      	subs	r3, r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4403      	add	r3, r0
 8005600:	3334      	adds	r3, #52	@ 0x34
 8005602:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005604:	78fa      	ldrb	r2, [r7, #3]
 8005606:	6879      	ldr	r1, [r7, #4]
 8005608:	4613      	mov	r3, r2
 800560a:	011b      	lsls	r3, r3, #4
 800560c:	1a9b      	subs	r3, r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	440b      	add	r3, r1
 8005612:	334c      	adds	r3, #76	@ 0x4c
 8005614:	2200      	movs	r2, #0
 8005616:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8005618:	78fa      	ldrb	r2, [r7, #3]
 800561a:	6879      	ldr	r1, [r7, #4]
 800561c:	4613      	mov	r3, r2
 800561e:	011b      	lsls	r3, r3, #4
 8005620:	1a9b      	subs	r3, r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	440b      	add	r3, r1
 8005626:	3338      	adds	r3, #56	@ 0x38
 8005628:	2200      	movs	r2, #0
 800562a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800562c:	78fa      	ldrb	r2, [r7, #3]
 800562e:	6879      	ldr	r1, [r7, #4]
 8005630:	4613      	mov	r3, r2
 8005632:	011b      	lsls	r3, r3, #4
 8005634:	1a9b      	subs	r3, r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	440b      	add	r3, r1
 800563a:	3315      	adds	r3, #21
 800563c:	78fa      	ldrb	r2, [r7, #3]
 800563e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8005640:	78fa      	ldrb	r2, [r7, #3]
 8005642:	6879      	ldr	r1, [r7, #4]
 8005644:	4613      	mov	r3, r2
 8005646:	011b      	lsls	r3, r3, #4
 8005648:	1a9b      	subs	r3, r3, r2
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	440b      	add	r3, r1
 800564e:	334d      	adds	r3, #77	@ 0x4d
 8005650:	2200      	movs	r2, #0
 8005652:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6818      	ldr	r0, [r3, #0]
 8005658:	78fa      	ldrb	r2, [r7, #3]
 800565a:	4613      	mov	r3, r2
 800565c:	011b      	lsls	r3, r3, #4
 800565e:	1a9b      	subs	r3, r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	3310      	adds	r3, #16
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	4413      	add	r3, r2
 8005668:	1d19      	adds	r1, r3, #4
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	799b      	ldrb	r3, [r3, #6]
 800566e:	461a      	mov	r2, r3
 8005670:	f009 f81c 	bl	800e6ac <USB_HC_StartXfer>
 8005674:	4603      	mov	r3, r0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3708      	adds	r7, #8
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop

08005680 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4618      	mov	r0, r3
 8005698:	f008 fd1c 	bl	800e0d4 <USB_GetMode>
 800569c:	4603      	mov	r3, r0
 800569e:	2b01      	cmp	r3, #1
 80056a0:	f040 80fb 	bne.w	800589a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4618      	mov	r0, r3
 80056aa:	f008 fcdf 	bl	800e06c <USB_ReadInterrupts>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f000 80f1 	beq.w	8005898 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4618      	mov	r0, r3
 80056bc:	f008 fcd6 	bl	800e06c <USB_ReadInterrupts>
 80056c0:	4603      	mov	r3, r0
 80056c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056ca:	d104      	bne.n	80056d6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80056d4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4618      	mov	r0, r3
 80056dc:	f008 fcc6 	bl	800e06c <USB_ReadInterrupts>
 80056e0:	4603      	mov	r3, r0
 80056e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056ea:	d104      	bne.n	80056f6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80056f4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4618      	mov	r0, r3
 80056fc:	f008 fcb6 	bl	800e06c <USB_ReadInterrupts>
 8005700:	4603      	mov	r3, r0
 8005702:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005706:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800570a:	d104      	bne.n	8005716 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8005714:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4618      	mov	r0, r3
 800571c:	f008 fca6 	bl	800e06c <USB_ReadInterrupts>
 8005720:	4603      	mov	r3, r0
 8005722:	f003 0302 	and.w	r3, r3, #2
 8005726:	2b02      	cmp	r3, #2
 8005728:	d103      	bne.n	8005732 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2202      	movs	r2, #2
 8005730:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4618      	mov	r0, r3
 8005738:	f008 fc98 	bl	800e06c <USB_ReadInterrupts>
 800573c:	4603      	mov	r3, r0
 800573e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005742:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005746:	d120      	bne.n	800578a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8005750:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b00      	cmp	r3, #0
 8005760:	d113      	bne.n	800578a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8005762:	2110      	movs	r1, #16
 8005764:	6938      	ldr	r0, [r7, #16]
 8005766:	f008 fb8b 	bl	800de80 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800576a:	6938      	ldr	r0, [r7, #16]
 800576c:	f008 fbba 	bl	800dee4 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	7a5b      	ldrb	r3, [r3, #9]
 8005774:	2b02      	cmp	r3, #2
 8005776:	d105      	bne.n	8005784 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2101      	movs	r1, #1
 800577e:	4618      	mov	r0, r3
 8005780:	f008 fda0 	bl	800e2c4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f00e fdcb 	bl	8014320 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4618      	mov	r0, r3
 8005790:	f008 fc6c 	bl	800e06c <USB_ReadInterrupts>
 8005794:	4603      	mov	r3, r0
 8005796:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800579a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800579e:	d102      	bne.n	80057a6 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f001 fd33 	bl	800720c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4618      	mov	r0, r3
 80057ac:	f008 fc5e 	bl	800e06c <USB_ReadInterrupts>
 80057b0:	4603      	mov	r3, r0
 80057b2:	f003 0308 	and.w	r3, r3, #8
 80057b6:	2b08      	cmp	r3, #8
 80057b8:	d106      	bne.n	80057c8 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f00e fd94 	bl	80142e8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2208      	movs	r2, #8
 80057c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4618      	mov	r0, r3
 80057ce:	f008 fc4d 	bl	800e06c <USB_ReadInterrupts>
 80057d2:	4603      	mov	r3, r0
 80057d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057dc:	d139      	bne.n	8005852 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4618      	mov	r0, r3
 80057e4:	f009 f9dc 	bl	800eba0 <USB_HC_ReadInterrupt>
 80057e8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80057ea:	2300      	movs	r3, #0
 80057ec:	617b      	str	r3, [r7, #20]
 80057ee:	e025      	b.n	800583c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	f003 030f 	and.w	r3, r3, #15
 80057f6:	68ba      	ldr	r2, [r7, #8]
 80057f8:	fa22 f303 	lsr.w	r3, r2, r3
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	2b00      	cmp	r3, #0
 8005802:	d018      	beq.n	8005836 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	015a      	lsls	r2, r3, #5
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	4413      	add	r3, r2
 800580c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005816:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800581a:	d106      	bne.n	800582a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	b2db      	uxtb	r3, r3
 8005820:	4619      	mov	r1, r3
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f905 	bl	8005a32 <HCD_HC_IN_IRQHandler>
 8005828:	e005      	b.n	8005836 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	b2db      	uxtb	r3, r3
 800582e:	4619      	mov	r1, r3
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 ff67 	bl	8006704 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	3301      	adds	r3, #1
 800583a:	617b      	str	r3, [r7, #20]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	795b      	ldrb	r3, [r3, #5]
 8005840:	461a      	mov	r2, r3
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	4293      	cmp	r3, r2
 8005846:	d3d3      	bcc.n	80057f0 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005850:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4618      	mov	r0, r3
 8005858:	f008 fc08 	bl	800e06c <USB_ReadInterrupts>
 800585c:	4603      	mov	r3, r0
 800585e:	f003 0310 	and.w	r3, r3, #16
 8005862:	2b10      	cmp	r3, #16
 8005864:	d101      	bne.n	800586a <HAL_HCD_IRQHandler+0x1ea>
 8005866:	2301      	movs	r3, #1
 8005868:	e000      	b.n	800586c <HAL_HCD_IRQHandler+0x1ec>
 800586a:	2300      	movs	r3, #0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d014      	beq.n	800589a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	699a      	ldr	r2, [r3, #24]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f022 0210 	bic.w	r2, r2, #16
 800587e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f001 fbe4 	bl	800704e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	699a      	ldr	r2, [r3, #24]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f042 0210 	orr.w	r2, r2, #16
 8005894:	619a      	str	r2, [r3, #24]
 8005896:	e000      	b.n	800589a <HAL_HCD_IRQHandler+0x21a>
      return;
 8005898:	bf00      	nop
    }
  }
}
 800589a:	3718      	adds	r7, #24
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d101      	bne.n	80058b6 <HAL_HCD_Start+0x16>
 80058b2:	2302      	movs	r3, #2
 80058b4:	e013      	b.n	80058de <HAL_HCD_Start+0x3e>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2101      	movs	r1, #1
 80058c4:	4618      	mov	r0, r3
 80058c6:	f008 fd64 	bl	800e392 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4618      	mov	r0, r3
 80058d0:	f008 fa68 	bl	800dda4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3708      	adds	r7, #8
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b082      	sub	sp, #8
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d101      	bne.n	80058fc <HAL_HCD_Stop+0x16>
 80058f8:	2302      	movs	r3, #2
 80058fa:	e00d      	b.n	8005918 <HAL_HCD_Stop+0x32>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4618      	mov	r0, r3
 800590a:	f009 fab7 	bl	800ee7c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3708      	adds	r7, #8
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4618      	mov	r0, r3
 800592e:	f008 fd06 	bl	800e33e <USB_ResetPort>
 8005932:	4603      	mov	r3, r0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3708      	adds	r7, #8
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	460b      	mov	r3, r1
 8005946:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005948:	78fa      	ldrb	r2, [r7, #3]
 800594a:	6879      	ldr	r1, [r7, #4]
 800594c:	4613      	mov	r3, r2
 800594e:	011b      	lsls	r3, r3, #4
 8005950:	1a9b      	subs	r3, r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	440b      	add	r3, r1
 8005956:	334c      	adds	r3, #76	@ 0x4c
 8005958:	781b      	ldrb	r3, [r3, #0]
}
 800595a:	4618      	mov	r0, r3
 800595c:	370c      	adds	r7, #12
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr

08005966 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8005966:	b480      	push	{r7}
 8005968:	b083      	sub	sp, #12
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
 800596e:	460b      	mov	r3, r1
 8005970:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005972:	78fa      	ldrb	r2, [r7, #3]
 8005974:	6879      	ldr	r1, [r7, #4]
 8005976:	4613      	mov	r3, r2
 8005978:	011b      	lsls	r3, r3, #4
 800597a:	1a9b      	subs	r3, r3, r2
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	440b      	add	r3, r1
 8005980:	3338      	adds	r3, #56	@ 0x38
 8005982:	681b      	ldr	r3, [r3, #0]
}
 8005984:	4618      	mov	r0, r3
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4618      	mov	r0, r3
 800599e:	f008 fd48 	bl	800e432 <USB_GetCurrentFrame>
 80059a2:	4603      	mov	r3, r0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3708      	adds	r7, #8
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4618      	mov	r0, r3
 80059ba:	f008 fd23 	bl	800e404 <USB_GetHostSpeed>
 80059be:	4603      	mov	r3, r0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3708      	adds	r7, #8
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	460b      	mov	r3, r1
 80059d2:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80059d4:	78fa      	ldrb	r2, [r7, #3]
 80059d6:	6879      	ldr	r1, [r7, #4]
 80059d8:	4613      	mov	r3, r2
 80059da:	011b      	lsls	r3, r3, #4
 80059dc:	1a9b      	subs	r3, r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	440b      	add	r3, r1
 80059e2:	331a      	adds	r3, #26
 80059e4:	2200      	movs	r2, #0
 80059e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80059e8:	78fa      	ldrb	r2, [r7, #3]
 80059ea:	6879      	ldr	r1, [r7, #4]
 80059ec:	4613      	mov	r3, r2
 80059ee:	011b      	lsls	r3, r3, #4
 80059f0:	1a9b      	subs	r3, r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	440b      	add	r3, r1
 80059f6:	331b      	adds	r3, #27
 80059f8:	2200      	movs	r2, #0
 80059fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80059fc:	78fa      	ldrb	r2, [r7, #3]
 80059fe:	6879      	ldr	r1, [r7, #4]
 8005a00:	4613      	mov	r3, r2
 8005a02:	011b      	lsls	r3, r3, #4
 8005a04:	1a9b      	subs	r3, r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	440b      	add	r3, r1
 8005a0a:	3325      	adds	r3, #37	@ 0x25
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8005a10:	78fa      	ldrb	r2, [r7, #3]
 8005a12:	6879      	ldr	r1, [r7, #4]
 8005a14:	4613      	mov	r3, r2
 8005a16:	011b      	lsls	r3, r3, #4
 8005a18:	1a9b      	subs	r3, r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	440b      	add	r3, r1
 8005a1e:	3324      	adds	r3, #36	@ 0x24
 8005a20:	2200      	movs	r2, #0
 8005a22:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	370c      	adds	r7, #12
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr

08005a32 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b086      	sub	sp, #24
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	78fa      	ldrb	r2, [r7, #3]
 8005a4e:	4611      	mov	r1, r2
 8005a50:	4618      	mov	r0, r3
 8005a52:	f008 fb1e 	bl	800e092 <USB_ReadChInterrupts>
 8005a56:	4603      	mov	r3, r0
 8005a58:	f003 0304 	and.w	r3, r3, #4
 8005a5c:	2b04      	cmp	r3, #4
 8005a5e:	d11a      	bne.n	8005a96 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8005a60:	78fb      	ldrb	r3, [r7, #3]
 8005a62:	015a      	lsls	r2, r3, #5
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	4413      	add	r3, r2
 8005a68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	2304      	movs	r3, #4
 8005a70:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005a72:	78fa      	ldrb	r2, [r7, #3]
 8005a74:	6879      	ldr	r1, [r7, #4]
 8005a76:	4613      	mov	r3, r2
 8005a78:	011b      	lsls	r3, r3, #4
 8005a7a:	1a9b      	subs	r3, r3, r2
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	440b      	add	r3, r1
 8005a80:	334d      	adds	r3, #77	@ 0x4d
 8005a82:	2207      	movs	r2, #7
 8005a84:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	78fa      	ldrb	r2, [r7, #3]
 8005a8c:	4611      	mov	r1, r2
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f009 f897 	bl	800ebc2 <USB_HC_Halt>
 8005a94:	e09e      	b.n	8005bd4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	78fa      	ldrb	r2, [r7, #3]
 8005a9c:	4611      	mov	r1, r2
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f008 faf7 	bl	800e092 <USB_ReadChInterrupts>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005aae:	d11b      	bne.n	8005ae8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8005ab0:	78fb      	ldrb	r3, [r7, #3]
 8005ab2:	015a      	lsls	r2, r3, #5
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005abc:	461a      	mov	r2, r3
 8005abe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005ac2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8005ac4:	78fa      	ldrb	r2, [r7, #3]
 8005ac6:	6879      	ldr	r1, [r7, #4]
 8005ac8:	4613      	mov	r3, r2
 8005aca:	011b      	lsls	r3, r3, #4
 8005acc:	1a9b      	subs	r3, r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	440b      	add	r3, r1
 8005ad2:	334d      	adds	r3, #77	@ 0x4d
 8005ad4:	2208      	movs	r2, #8
 8005ad6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	78fa      	ldrb	r2, [r7, #3]
 8005ade:	4611      	mov	r1, r2
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f009 f86e 	bl	800ebc2 <USB_HC_Halt>
 8005ae6:	e075      	b.n	8005bd4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	78fa      	ldrb	r2, [r7, #3]
 8005aee:	4611      	mov	r1, r2
 8005af0:	4618      	mov	r0, r3
 8005af2:	f008 face 	bl	800e092 <USB_ReadChInterrupts>
 8005af6:	4603      	mov	r3, r0
 8005af8:	f003 0308 	and.w	r3, r3, #8
 8005afc:	2b08      	cmp	r3, #8
 8005afe:	d11a      	bne.n	8005b36 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005b00:	78fb      	ldrb	r3, [r7, #3]
 8005b02:	015a      	lsls	r2, r3, #5
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	2308      	movs	r3, #8
 8005b10:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005b12:	78fa      	ldrb	r2, [r7, #3]
 8005b14:	6879      	ldr	r1, [r7, #4]
 8005b16:	4613      	mov	r3, r2
 8005b18:	011b      	lsls	r3, r3, #4
 8005b1a:	1a9b      	subs	r3, r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	440b      	add	r3, r1
 8005b20:	334d      	adds	r3, #77	@ 0x4d
 8005b22:	2206      	movs	r2, #6
 8005b24:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	78fa      	ldrb	r2, [r7, #3]
 8005b2c:	4611      	mov	r1, r2
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f009 f847 	bl	800ebc2 <USB_HC_Halt>
 8005b34:	e04e      	b.n	8005bd4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	78fa      	ldrb	r2, [r7, #3]
 8005b3c:	4611      	mov	r1, r2
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f008 faa7 	bl	800e092 <USB_ReadChInterrupts>
 8005b44:	4603      	mov	r3, r0
 8005b46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b4e:	d11b      	bne.n	8005b88 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005b50:	78fb      	ldrb	r3, [r7, #3]
 8005b52:	015a      	lsls	r2, r3, #5
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b62:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005b64:	78fa      	ldrb	r2, [r7, #3]
 8005b66:	6879      	ldr	r1, [r7, #4]
 8005b68:	4613      	mov	r3, r2
 8005b6a:	011b      	lsls	r3, r3, #4
 8005b6c:	1a9b      	subs	r3, r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	440b      	add	r3, r1
 8005b72:	334d      	adds	r3, #77	@ 0x4d
 8005b74:	2209      	movs	r2, #9
 8005b76:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	78fa      	ldrb	r2, [r7, #3]
 8005b7e:	4611      	mov	r1, r2
 8005b80:	4618      	mov	r0, r3
 8005b82:	f009 f81e 	bl	800ebc2 <USB_HC_Halt>
 8005b86:	e025      	b.n	8005bd4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	78fa      	ldrb	r2, [r7, #3]
 8005b8e:	4611      	mov	r1, r2
 8005b90:	4618      	mov	r0, r3
 8005b92:	f008 fa7e 	bl	800e092 <USB_ReadChInterrupts>
 8005b96:	4603      	mov	r3, r0
 8005b98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b9c:	2b80      	cmp	r3, #128	@ 0x80
 8005b9e:	d119      	bne.n	8005bd4 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005ba0:	78fb      	ldrb	r3, [r7, #3]
 8005ba2:	015a      	lsls	r2, r3, #5
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bac:	461a      	mov	r2, r3
 8005bae:	2380      	movs	r3, #128	@ 0x80
 8005bb0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005bb2:	78fa      	ldrb	r2, [r7, #3]
 8005bb4:	6879      	ldr	r1, [r7, #4]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	011b      	lsls	r3, r3, #4
 8005bba:	1a9b      	subs	r3, r3, r2
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	440b      	add	r3, r1
 8005bc0:	334d      	adds	r3, #77	@ 0x4d
 8005bc2:	2207      	movs	r2, #7
 8005bc4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	78fa      	ldrb	r2, [r7, #3]
 8005bcc:	4611      	mov	r1, r2
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f008 fff7 	bl	800ebc2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	78fa      	ldrb	r2, [r7, #3]
 8005bda:	4611      	mov	r1, r2
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f008 fa58 	bl	800e092 <USB_ReadChInterrupts>
 8005be2:	4603      	mov	r3, r0
 8005be4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005be8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bec:	d112      	bne.n	8005c14 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	78fa      	ldrb	r2, [r7, #3]
 8005bf4:	4611      	mov	r1, r2
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f008 ffe3 	bl	800ebc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005bfc:	78fb      	ldrb	r3, [r7, #3]
 8005bfe:	015a      	lsls	r2, r3, #5
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	4413      	add	r3, r2
 8005c04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c08:	461a      	mov	r2, r3
 8005c0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005c0e:	6093      	str	r3, [r2, #8]
 8005c10:	f000 bd75 	b.w	80066fe <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	78fa      	ldrb	r2, [r7, #3]
 8005c1a:	4611      	mov	r1, r2
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f008 fa38 	bl	800e092 <USB_ReadChInterrupts>
 8005c22:	4603      	mov	r3, r0
 8005c24:	f003 0301 	and.w	r3, r3, #1
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	f040 8128 	bne.w	8005e7e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005c2e:	78fb      	ldrb	r3, [r7, #3]
 8005c30:	015a      	lsls	r2, r3, #5
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	4413      	add	r3, r2
 8005c36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	2320      	movs	r3, #32
 8005c3e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8005c40:	78fa      	ldrb	r2, [r7, #3]
 8005c42:	6879      	ldr	r1, [r7, #4]
 8005c44:	4613      	mov	r3, r2
 8005c46:	011b      	lsls	r3, r3, #4
 8005c48:	1a9b      	subs	r3, r3, r2
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	440b      	add	r3, r1
 8005c4e:	331b      	adds	r3, #27
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d119      	bne.n	8005c8a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005c56:	78fa      	ldrb	r2, [r7, #3]
 8005c58:	6879      	ldr	r1, [r7, #4]
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	011b      	lsls	r3, r3, #4
 8005c5e:	1a9b      	subs	r3, r3, r2
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	440b      	add	r3, r1
 8005c64:	331b      	adds	r3, #27
 8005c66:	2200      	movs	r2, #0
 8005c68:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005c6a:	78fb      	ldrb	r3, [r7, #3]
 8005c6c:	015a      	lsls	r2, r3, #5
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	4413      	add	r3, r2
 8005c72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	78fa      	ldrb	r2, [r7, #3]
 8005c7a:	0151      	lsls	r1, r2, #5
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	440a      	add	r2, r1
 8005c80:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c88:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	799b      	ldrb	r3, [r3, #6]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d01b      	beq.n	8005cca <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005c92:	78fa      	ldrb	r2, [r7, #3]
 8005c94:	6879      	ldr	r1, [r7, #4]
 8005c96:	4613      	mov	r3, r2
 8005c98:	011b      	lsls	r3, r3, #4
 8005c9a:	1a9b      	subs	r3, r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	440b      	add	r3, r1
 8005ca0:	3330      	adds	r3, #48	@ 0x30
 8005ca2:	6819      	ldr	r1, [r3, #0]
 8005ca4:	78fb      	ldrb	r3, [r7, #3]
 8005ca6:	015a      	lsls	r2, r3, #5
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	4413      	add	r3, r2
 8005cac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cb6:	78fa      	ldrb	r2, [r7, #3]
 8005cb8:	1ac9      	subs	r1, r1, r3
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	011b      	lsls	r3, r3, #4
 8005cc0:	1a9b      	subs	r3, r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4403      	add	r3, r0
 8005cc6:	3338      	adds	r3, #56	@ 0x38
 8005cc8:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8005cca:	78fa      	ldrb	r2, [r7, #3]
 8005ccc:	6879      	ldr	r1, [r7, #4]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	011b      	lsls	r3, r3, #4
 8005cd2:	1a9b      	subs	r3, r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	440b      	add	r3, r1
 8005cd8:	334d      	adds	r3, #77	@ 0x4d
 8005cda:	2201      	movs	r2, #1
 8005cdc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8005cde:	78fa      	ldrb	r2, [r7, #3]
 8005ce0:	6879      	ldr	r1, [r7, #4]
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	011b      	lsls	r3, r3, #4
 8005ce6:	1a9b      	subs	r3, r3, r2
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	440b      	add	r3, r1
 8005cec:	3344      	adds	r3, #68	@ 0x44
 8005cee:	2200      	movs	r2, #0
 8005cf0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005cf2:	78fb      	ldrb	r3, [r7, #3]
 8005cf4:	015a      	lsls	r2, r3, #5
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cfe:	461a      	mov	r2, r3
 8005d00:	2301      	movs	r3, #1
 8005d02:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005d04:	78fa      	ldrb	r2, [r7, #3]
 8005d06:	6879      	ldr	r1, [r7, #4]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	011b      	lsls	r3, r3, #4
 8005d0c:	1a9b      	subs	r3, r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	440b      	add	r3, r1
 8005d12:	3326      	adds	r3, #38	@ 0x26
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00a      	beq.n	8005d30 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005d1a:	78fa      	ldrb	r2, [r7, #3]
 8005d1c:	6879      	ldr	r1, [r7, #4]
 8005d1e:	4613      	mov	r3, r2
 8005d20:	011b      	lsls	r3, r3, #4
 8005d22:	1a9b      	subs	r3, r3, r2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	440b      	add	r3, r1
 8005d28:	3326      	adds	r3, #38	@ 0x26
 8005d2a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d110      	bne.n	8005d52 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	78fa      	ldrb	r2, [r7, #3]
 8005d36:	4611      	mov	r1, r2
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f008 ff42 	bl	800ebc2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005d3e:	78fb      	ldrb	r3, [r7, #3]
 8005d40:	015a      	lsls	r2, r3, #5
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	4413      	add	r3, r2
 8005d46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	2310      	movs	r3, #16
 8005d4e:	6093      	str	r3, [r2, #8]
 8005d50:	e03d      	b.n	8005dce <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8005d52:	78fa      	ldrb	r2, [r7, #3]
 8005d54:	6879      	ldr	r1, [r7, #4]
 8005d56:	4613      	mov	r3, r2
 8005d58:	011b      	lsls	r3, r3, #4
 8005d5a:	1a9b      	subs	r3, r3, r2
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	440b      	add	r3, r1
 8005d60:	3326      	adds	r3, #38	@ 0x26
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	2b03      	cmp	r3, #3
 8005d66:	d00a      	beq.n	8005d7e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8005d68:	78fa      	ldrb	r2, [r7, #3]
 8005d6a:	6879      	ldr	r1, [r7, #4]
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	011b      	lsls	r3, r3, #4
 8005d70:	1a9b      	subs	r3, r3, r2
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	440b      	add	r3, r1
 8005d76:	3326      	adds	r3, #38	@ 0x26
 8005d78:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d127      	bne.n	8005dce <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005d7e:	78fb      	ldrb	r3, [r7, #3]
 8005d80:	015a      	lsls	r2, r3, #5
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	4413      	add	r3, r2
 8005d86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	78fa      	ldrb	r2, [r7, #3]
 8005d8e:	0151      	lsls	r1, r2, #5
 8005d90:	693a      	ldr	r2, [r7, #16]
 8005d92:	440a      	add	r2, r1
 8005d94:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d98:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005d9c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005d9e:	78fa      	ldrb	r2, [r7, #3]
 8005da0:	6879      	ldr	r1, [r7, #4]
 8005da2:	4613      	mov	r3, r2
 8005da4:	011b      	lsls	r3, r3, #4
 8005da6:	1a9b      	subs	r3, r3, r2
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	440b      	add	r3, r1
 8005dac:	334c      	adds	r3, #76	@ 0x4c
 8005dae:	2201      	movs	r2, #1
 8005db0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005db2:	78fa      	ldrb	r2, [r7, #3]
 8005db4:	6879      	ldr	r1, [r7, #4]
 8005db6:	4613      	mov	r3, r2
 8005db8:	011b      	lsls	r3, r3, #4
 8005dba:	1a9b      	subs	r3, r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	440b      	add	r3, r1
 8005dc0:	334c      	adds	r3, #76	@ 0x4c
 8005dc2:	781a      	ldrb	r2, [r3, #0]
 8005dc4:	78fb      	ldrb	r3, [r7, #3]
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f00e fab7 	bl	801433c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	799b      	ldrb	r3, [r3, #6]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d13b      	bne.n	8005e4e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8005dd6:	78fa      	ldrb	r2, [r7, #3]
 8005dd8:	6879      	ldr	r1, [r7, #4]
 8005dda:	4613      	mov	r3, r2
 8005ddc:	011b      	lsls	r3, r3, #4
 8005dde:	1a9b      	subs	r3, r3, r2
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	440b      	add	r3, r1
 8005de4:	3338      	adds	r3, #56	@ 0x38
 8005de6:	6819      	ldr	r1, [r3, #0]
 8005de8:	78fa      	ldrb	r2, [r7, #3]
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	4613      	mov	r3, r2
 8005dee:	011b      	lsls	r3, r3, #4
 8005df0:	1a9b      	subs	r3, r3, r2
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	4403      	add	r3, r0
 8005df6:	3328      	adds	r3, #40	@ 0x28
 8005df8:	881b      	ldrh	r3, [r3, #0]
 8005dfa:	440b      	add	r3, r1
 8005dfc:	1e59      	subs	r1, r3, #1
 8005dfe:	78fa      	ldrb	r2, [r7, #3]
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	4613      	mov	r3, r2
 8005e04:	011b      	lsls	r3, r3, #4
 8005e06:	1a9b      	subs	r3, r3, r2
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	4403      	add	r3, r0
 8005e0c:	3328      	adds	r3, #40	@ 0x28
 8005e0e:	881b      	ldrh	r3, [r3, #0]
 8005e10:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e14:	f003 0301 	and.w	r3, r3, #1
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f000 8470 	beq.w	80066fe <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8005e1e:	78fa      	ldrb	r2, [r7, #3]
 8005e20:	6879      	ldr	r1, [r7, #4]
 8005e22:	4613      	mov	r3, r2
 8005e24:	011b      	lsls	r3, r3, #4
 8005e26:	1a9b      	subs	r3, r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	440b      	add	r3, r1
 8005e2c:	333c      	adds	r3, #60	@ 0x3c
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	78fa      	ldrb	r2, [r7, #3]
 8005e32:	f083 0301 	eor.w	r3, r3, #1
 8005e36:	b2d8      	uxtb	r0, r3
 8005e38:	6879      	ldr	r1, [r7, #4]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	011b      	lsls	r3, r3, #4
 8005e3e:	1a9b      	subs	r3, r3, r2
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	440b      	add	r3, r1
 8005e44:	333c      	adds	r3, #60	@ 0x3c
 8005e46:	4602      	mov	r2, r0
 8005e48:	701a      	strb	r2, [r3, #0]
 8005e4a:	f000 bc58 	b.w	80066fe <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8005e4e:	78fa      	ldrb	r2, [r7, #3]
 8005e50:	6879      	ldr	r1, [r7, #4]
 8005e52:	4613      	mov	r3, r2
 8005e54:	011b      	lsls	r3, r3, #4
 8005e56:	1a9b      	subs	r3, r3, r2
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	440b      	add	r3, r1
 8005e5c:	333c      	adds	r3, #60	@ 0x3c
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	78fa      	ldrb	r2, [r7, #3]
 8005e62:	f083 0301 	eor.w	r3, r3, #1
 8005e66:	b2d8      	uxtb	r0, r3
 8005e68:	6879      	ldr	r1, [r7, #4]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	011b      	lsls	r3, r3, #4
 8005e6e:	1a9b      	subs	r3, r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	440b      	add	r3, r1
 8005e74:	333c      	adds	r3, #60	@ 0x3c
 8005e76:	4602      	mov	r2, r0
 8005e78:	701a      	strb	r2, [r3, #0]
 8005e7a:	f000 bc40 	b.w	80066fe <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	78fa      	ldrb	r2, [r7, #3]
 8005e84:	4611      	mov	r1, r2
 8005e86:	4618      	mov	r0, r3
 8005e88:	f008 f903 	bl	800e092 <USB_ReadChInterrupts>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	f003 0320 	and.w	r3, r3, #32
 8005e92:	2b20      	cmp	r3, #32
 8005e94:	d131      	bne.n	8005efa <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005e96:	78fb      	ldrb	r3, [r7, #3]
 8005e98:	015a      	lsls	r2, r3, #5
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	2320      	movs	r3, #32
 8005ea6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8005ea8:	78fa      	ldrb	r2, [r7, #3]
 8005eaa:	6879      	ldr	r1, [r7, #4]
 8005eac:	4613      	mov	r3, r2
 8005eae:	011b      	lsls	r3, r3, #4
 8005eb0:	1a9b      	subs	r3, r3, r2
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	440b      	add	r3, r1
 8005eb6:	331a      	adds	r3, #26
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	f040 841f 	bne.w	80066fe <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8005ec0:	78fa      	ldrb	r2, [r7, #3]
 8005ec2:	6879      	ldr	r1, [r7, #4]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	011b      	lsls	r3, r3, #4
 8005ec8:	1a9b      	subs	r3, r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	440b      	add	r3, r1
 8005ece:	331b      	adds	r3, #27
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8005ed4:	78fa      	ldrb	r2, [r7, #3]
 8005ed6:	6879      	ldr	r1, [r7, #4]
 8005ed8:	4613      	mov	r3, r2
 8005eda:	011b      	lsls	r3, r3, #4
 8005edc:	1a9b      	subs	r3, r3, r2
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	440b      	add	r3, r1
 8005ee2:	334d      	adds	r3, #77	@ 0x4d
 8005ee4:	2203      	movs	r2, #3
 8005ee6:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	78fa      	ldrb	r2, [r7, #3]
 8005eee:	4611      	mov	r1, r2
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f008 fe66 	bl	800ebc2 <USB_HC_Halt>
 8005ef6:	f000 bc02 	b.w	80066fe <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	78fa      	ldrb	r2, [r7, #3]
 8005f00:	4611      	mov	r1, r2
 8005f02:	4618      	mov	r0, r3
 8005f04:	f008 f8c5 	bl	800e092 <USB_ReadChInterrupts>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	f003 0302 	and.w	r3, r3, #2
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	f040 8305 	bne.w	800651e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005f14:	78fb      	ldrb	r3, [r7, #3]
 8005f16:	015a      	lsls	r2, r3, #5
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f20:	461a      	mov	r2, r3
 8005f22:	2302      	movs	r3, #2
 8005f24:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005f26:	78fa      	ldrb	r2, [r7, #3]
 8005f28:	6879      	ldr	r1, [r7, #4]
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	011b      	lsls	r3, r3, #4
 8005f2e:	1a9b      	subs	r3, r3, r2
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	440b      	add	r3, r1
 8005f34:	334d      	adds	r3, #77	@ 0x4d
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d114      	bne.n	8005f66 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005f3c:	78fa      	ldrb	r2, [r7, #3]
 8005f3e:	6879      	ldr	r1, [r7, #4]
 8005f40:	4613      	mov	r3, r2
 8005f42:	011b      	lsls	r3, r3, #4
 8005f44:	1a9b      	subs	r3, r3, r2
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	440b      	add	r3, r1
 8005f4a:	334d      	adds	r3, #77	@ 0x4d
 8005f4c:	2202      	movs	r2, #2
 8005f4e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005f50:	78fa      	ldrb	r2, [r7, #3]
 8005f52:	6879      	ldr	r1, [r7, #4]
 8005f54:	4613      	mov	r3, r2
 8005f56:	011b      	lsls	r3, r3, #4
 8005f58:	1a9b      	subs	r3, r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	440b      	add	r3, r1
 8005f5e:	334c      	adds	r3, #76	@ 0x4c
 8005f60:	2201      	movs	r2, #1
 8005f62:	701a      	strb	r2, [r3, #0]
 8005f64:	e2cc      	b.n	8006500 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005f66:	78fa      	ldrb	r2, [r7, #3]
 8005f68:	6879      	ldr	r1, [r7, #4]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	011b      	lsls	r3, r3, #4
 8005f6e:	1a9b      	subs	r3, r3, r2
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	440b      	add	r3, r1
 8005f74:	334d      	adds	r3, #77	@ 0x4d
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	2b06      	cmp	r3, #6
 8005f7a:	d114      	bne.n	8005fa6 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005f7c:	78fa      	ldrb	r2, [r7, #3]
 8005f7e:	6879      	ldr	r1, [r7, #4]
 8005f80:	4613      	mov	r3, r2
 8005f82:	011b      	lsls	r3, r3, #4
 8005f84:	1a9b      	subs	r3, r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	440b      	add	r3, r1
 8005f8a:	334d      	adds	r3, #77	@ 0x4d
 8005f8c:	2202      	movs	r2, #2
 8005f8e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8005f90:	78fa      	ldrb	r2, [r7, #3]
 8005f92:	6879      	ldr	r1, [r7, #4]
 8005f94:	4613      	mov	r3, r2
 8005f96:	011b      	lsls	r3, r3, #4
 8005f98:	1a9b      	subs	r3, r3, r2
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	440b      	add	r3, r1
 8005f9e:	334c      	adds	r3, #76	@ 0x4c
 8005fa0:	2205      	movs	r2, #5
 8005fa2:	701a      	strb	r2, [r3, #0]
 8005fa4:	e2ac      	b.n	8006500 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005fa6:	78fa      	ldrb	r2, [r7, #3]
 8005fa8:	6879      	ldr	r1, [r7, #4]
 8005faa:	4613      	mov	r3, r2
 8005fac:	011b      	lsls	r3, r3, #4
 8005fae:	1a9b      	subs	r3, r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	440b      	add	r3, r1
 8005fb4:	334d      	adds	r3, #77	@ 0x4d
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	2b07      	cmp	r3, #7
 8005fba:	d00b      	beq.n	8005fd4 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005fbc:	78fa      	ldrb	r2, [r7, #3]
 8005fbe:	6879      	ldr	r1, [r7, #4]
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	011b      	lsls	r3, r3, #4
 8005fc4:	1a9b      	subs	r3, r3, r2
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	440b      	add	r3, r1
 8005fca:	334d      	adds	r3, #77	@ 0x4d
 8005fcc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005fce:	2b09      	cmp	r3, #9
 8005fd0:	f040 80a6 	bne.w	8006120 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005fd4:	78fa      	ldrb	r2, [r7, #3]
 8005fd6:	6879      	ldr	r1, [r7, #4]
 8005fd8:	4613      	mov	r3, r2
 8005fda:	011b      	lsls	r3, r3, #4
 8005fdc:	1a9b      	subs	r3, r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	440b      	add	r3, r1
 8005fe2:	334d      	adds	r3, #77	@ 0x4d
 8005fe4:	2202      	movs	r2, #2
 8005fe6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005fe8:	78fa      	ldrb	r2, [r7, #3]
 8005fea:	6879      	ldr	r1, [r7, #4]
 8005fec:	4613      	mov	r3, r2
 8005fee:	011b      	lsls	r3, r3, #4
 8005ff0:	1a9b      	subs	r3, r3, r2
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	440b      	add	r3, r1
 8005ff6:	3344      	adds	r3, #68	@ 0x44
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	1c59      	adds	r1, r3, #1
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	4613      	mov	r3, r2
 8006000:	011b      	lsls	r3, r3, #4
 8006002:	1a9b      	subs	r3, r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	4403      	add	r3, r0
 8006008:	3344      	adds	r3, #68	@ 0x44
 800600a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800600c:	78fa      	ldrb	r2, [r7, #3]
 800600e:	6879      	ldr	r1, [r7, #4]
 8006010:	4613      	mov	r3, r2
 8006012:	011b      	lsls	r3, r3, #4
 8006014:	1a9b      	subs	r3, r3, r2
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	440b      	add	r3, r1
 800601a:	3344      	adds	r3, #68	@ 0x44
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2b02      	cmp	r3, #2
 8006020:	d943      	bls.n	80060aa <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006022:	78fa      	ldrb	r2, [r7, #3]
 8006024:	6879      	ldr	r1, [r7, #4]
 8006026:	4613      	mov	r3, r2
 8006028:	011b      	lsls	r3, r3, #4
 800602a:	1a9b      	subs	r3, r3, r2
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	440b      	add	r3, r1
 8006030:	3344      	adds	r3, #68	@ 0x44
 8006032:	2200      	movs	r2, #0
 8006034:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8006036:	78fa      	ldrb	r2, [r7, #3]
 8006038:	6879      	ldr	r1, [r7, #4]
 800603a:	4613      	mov	r3, r2
 800603c:	011b      	lsls	r3, r3, #4
 800603e:	1a9b      	subs	r3, r3, r2
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	440b      	add	r3, r1
 8006044:	331a      	adds	r3, #26
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d123      	bne.n	8006094 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800604c:	78fa      	ldrb	r2, [r7, #3]
 800604e:	6879      	ldr	r1, [r7, #4]
 8006050:	4613      	mov	r3, r2
 8006052:	011b      	lsls	r3, r3, #4
 8006054:	1a9b      	subs	r3, r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	440b      	add	r3, r1
 800605a:	331b      	adds	r3, #27
 800605c:	2200      	movs	r2, #0
 800605e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8006060:	78fa      	ldrb	r2, [r7, #3]
 8006062:	6879      	ldr	r1, [r7, #4]
 8006064:	4613      	mov	r3, r2
 8006066:	011b      	lsls	r3, r3, #4
 8006068:	1a9b      	subs	r3, r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	440b      	add	r3, r1
 800606e:	331c      	adds	r3, #28
 8006070:	2200      	movs	r2, #0
 8006072:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006074:	78fb      	ldrb	r3, [r7, #3]
 8006076:	015a      	lsls	r2, r3, #5
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	4413      	add	r3, r2
 800607c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	78fa      	ldrb	r2, [r7, #3]
 8006084:	0151      	lsls	r1, r2, #5
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	440a      	add	r2, r1
 800608a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800608e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006092:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006094:	78fa      	ldrb	r2, [r7, #3]
 8006096:	6879      	ldr	r1, [r7, #4]
 8006098:	4613      	mov	r3, r2
 800609a:	011b      	lsls	r3, r3, #4
 800609c:	1a9b      	subs	r3, r3, r2
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	440b      	add	r3, r1
 80060a2:	334c      	adds	r3, #76	@ 0x4c
 80060a4:	2204      	movs	r2, #4
 80060a6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80060a8:	e229      	b.n	80064fe <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80060aa:	78fa      	ldrb	r2, [r7, #3]
 80060ac:	6879      	ldr	r1, [r7, #4]
 80060ae:	4613      	mov	r3, r2
 80060b0:	011b      	lsls	r3, r3, #4
 80060b2:	1a9b      	subs	r3, r3, r2
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	440b      	add	r3, r1
 80060b8:	334c      	adds	r3, #76	@ 0x4c
 80060ba:	2202      	movs	r2, #2
 80060bc:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80060be:	78fa      	ldrb	r2, [r7, #3]
 80060c0:	6879      	ldr	r1, [r7, #4]
 80060c2:	4613      	mov	r3, r2
 80060c4:	011b      	lsls	r3, r3, #4
 80060c6:	1a9b      	subs	r3, r3, r2
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	440b      	add	r3, r1
 80060cc:	3326      	adds	r3, #38	@ 0x26
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00b      	beq.n	80060ec <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80060d4:	78fa      	ldrb	r2, [r7, #3]
 80060d6:	6879      	ldr	r1, [r7, #4]
 80060d8:	4613      	mov	r3, r2
 80060da:	011b      	lsls	r3, r3, #4
 80060dc:	1a9b      	subs	r3, r3, r2
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	440b      	add	r3, r1
 80060e2:	3326      	adds	r3, #38	@ 0x26
 80060e4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	f040 8209 	bne.w	80064fe <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80060ec:	78fb      	ldrb	r3, [r7, #3]
 80060ee:	015a      	lsls	r2, r3, #5
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	4413      	add	r3, r2
 80060f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006102:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800610a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800610c:	78fb      	ldrb	r3, [r7, #3]
 800610e:	015a      	lsls	r2, r3, #5
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	4413      	add	r3, r2
 8006114:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006118:	461a      	mov	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800611e:	e1ee      	b.n	80064fe <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8006120:	78fa      	ldrb	r2, [r7, #3]
 8006122:	6879      	ldr	r1, [r7, #4]
 8006124:	4613      	mov	r3, r2
 8006126:	011b      	lsls	r3, r3, #4
 8006128:	1a9b      	subs	r3, r3, r2
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	440b      	add	r3, r1
 800612e:	334d      	adds	r3, #77	@ 0x4d
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	2b05      	cmp	r3, #5
 8006134:	f040 80c8 	bne.w	80062c8 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006138:	78fa      	ldrb	r2, [r7, #3]
 800613a:	6879      	ldr	r1, [r7, #4]
 800613c:	4613      	mov	r3, r2
 800613e:	011b      	lsls	r3, r3, #4
 8006140:	1a9b      	subs	r3, r3, r2
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	440b      	add	r3, r1
 8006146:	334d      	adds	r3, #77	@ 0x4d
 8006148:	2202      	movs	r2, #2
 800614a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800614c:	78fa      	ldrb	r2, [r7, #3]
 800614e:	6879      	ldr	r1, [r7, #4]
 8006150:	4613      	mov	r3, r2
 8006152:	011b      	lsls	r3, r3, #4
 8006154:	1a9b      	subs	r3, r3, r2
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	440b      	add	r3, r1
 800615a:	331b      	adds	r3, #27
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	2b01      	cmp	r3, #1
 8006160:	f040 81ce 	bne.w	8006500 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8006164:	78fa      	ldrb	r2, [r7, #3]
 8006166:	6879      	ldr	r1, [r7, #4]
 8006168:	4613      	mov	r3, r2
 800616a:	011b      	lsls	r3, r3, #4
 800616c:	1a9b      	subs	r3, r3, r2
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	440b      	add	r3, r1
 8006172:	3326      	adds	r3, #38	@ 0x26
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	2b03      	cmp	r3, #3
 8006178:	d16b      	bne.n	8006252 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800617a:	78fa      	ldrb	r2, [r7, #3]
 800617c:	6879      	ldr	r1, [r7, #4]
 800617e:	4613      	mov	r3, r2
 8006180:	011b      	lsls	r3, r3, #4
 8006182:	1a9b      	subs	r3, r3, r2
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	440b      	add	r3, r1
 8006188:	3348      	adds	r3, #72	@ 0x48
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	1c59      	adds	r1, r3, #1
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	4613      	mov	r3, r2
 8006192:	011b      	lsls	r3, r3, #4
 8006194:	1a9b      	subs	r3, r3, r2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4403      	add	r3, r0
 800619a:	3348      	adds	r3, #72	@ 0x48
 800619c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800619e:	78fa      	ldrb	r2, [r7, #3]
 80061a0:	6879      	ldr	r1, [r7, #4]
 80061a2:	4613      	mov	r3, r2
 80061a4:	011b      	lsls	r3, r3, #4
 80061a6:	1a9b      	subs	r3, r3, r2
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	440b      	add	r3, r1
 80061ac:	3348      	adds	r3, #72	@ 0x48
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d943      	bls.n	800623c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80061b4:	78fa      	ldrb	r2, [r7, #3]
 80061b6:	6879      	ldr	r1, [r7, #4]
 80061b8:	4613      	mov	r3, r2
 80061ba:	011b      	lsls	r3, r3, #4
 80061bc:	1a9b      	subs	r3, r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	440b      	add	r3, r1
 80061c2:	3348      	adds	r3, #72	@ 0x48
 80061c4:	2200      	movs	r2, #0
 80061c6:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80061c8:	78fa      	ldrb	r2, [r7, #3]
 80061ca:	6879      	ldr	r1, [r7, #4]
 80061cc:	4613      	mov	r3, r2
 80061ce:	011b      	lsls	r3, r3, #4
 80061d0:	1a9b      	subs	r3, r3, r2
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	440b      	add	r3, r1
 80061d6:	331b      	adds	r3, #27
 80061d8:	2200      	movs	r2, #0
 80061da:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80061dc:	78fa      	ldrb	r2, [r7, #3]
 80061de:	6879      	ldr	r1, [r7, #4]
 80061e0:	4613      	mov	r3, r2
 80061e2:	011b      	lsls	r3, r3, #4
 80061e4:	1a9b      	subs	r3, r3, r2
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	440b      	add	r3, r1
 80061ea:	3344      	adds	r3, #68	@ 0x44
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d809      	bhi.n	8006206 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80061f2:	78fa      	ldrb	r2, [r7, #3]
 80061f4:	6879      	ldr	r1, [r7, #4]
 80061f6:	4613      	mov	r3, r2
 80061f8:	011b      	lsls	r3, r3, #4
 80061fa:	1a9b      	subs	r3, r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	440b      	add	r3, r1
 8006200:	331c      	adds	r3, #28
 8006202:	2201      	movs	r2, #1
 8006204:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006206:	78fb      	ldrb	r3, [r7, #3]
 8006208:	015a      	lsls	r2, r3, #5
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	4413      	add	r3, r2
 800620e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	78fa      	ldrb	r2, [r7, #3]
 8006216:	0151      	lsls	r1, r2, #5
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	440a      	add	r2, r1
 800621c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006220:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006224:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8006226:	78fa      	ldrb	r2, [r7, #3]
 8006228:	6879      	ldr	r1, [r7, #4]
 800622a:	4613      	mov	r3, r2
 800622c:	011b      	lsls	r3, r3, #4
 800622e:	1a9b      	subs	r3, r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	440b      	add	r3, r1
 8006234:	334c      	adds	r3, #76	@ 0x4c
 8006236:	2204      	movs	r2, #4
 8006238:	701a      	strb	r2, [r3, #0]
 800623a:	e014      	b.n	8006266 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800623c:	78fa      	ldrb	r2, [r7, #3]
 800623e:	6879      	ldr	r1, [r7, #4]
 8006240:	4613      	mov	r3, r2
 8006242:	011b      	lsls	r3, r3, #4
 8006244:	1a9b      	subs	r3, r3, r2
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	440b      	add	r3, r1
 800624a:	334c      	adds	r3, #76	@ 0x4c
 800624c:	2202      	movs	r2, #2
 800624e:	701a      	strb	r2, [r3, #0]
 8006250:	e009      	b.n	8006266 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006252:	78fa      	ldrb	r2, [r7, #3]
 8006254:	6879      	ldr	r1, [r7, #4]
 8006256:	4613      	mov	r3, r2
 8006258:	011b      	lsls	r3, r3, #4
 800625a:	1a9b      	subs	r3, r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	440b      	add	r3, r1
 8006260:	334c      	adds	r3, #76	@ 0x4c
 8006262:	2202      	movs	r2, #2
 8006264:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006266:	78fa      	ldrb	r2, [r7, #3]
 8006268:	6879      	ldr	r1, [r7, #4]
 800626a:	4613      	mov	r3, r2
 800626c:	011b      	lsls	r3, r3, #4
 800626e:	1a9b      	subs	r3, r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	440b      	add	r3, r1
 8006274:	3326      	adds	r3, #38	@ 0x26
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00b      	beq.n	8006294 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800627c:	78fa      	ldrb	r2, [r7, #3]
 800627e:	6879      	ldr	r1, [r7, #4]
 8006280:	4613      	mov	r3, r2
 8006282:	011b      	lsls	r3, r3, #4
 8006284:	1a9b      	subs	r3, r3, r2
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	440b      	add	r3, r1
 800628a:	3326      	adds	r3, #38	@ 0x26
 800628c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800628e:	2b02      	cmp	r3, #2
 8006290:	f040 8136 	bne.w	8006500 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8006294:	78fb      	ldrb	r3, [r7, #3]
 8006296:	015a      	lsls	r2, r3, #5
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	4413      	add	r3, r2
 800629c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80062aa:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80062b2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80062b4:	78fb      	ldrb	r3, [r7, #3]
 80062b6:	015a      	lsls	r2, r3, #5
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	4413      	add	r3, r2
 80062bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062c0:	461a      	mov	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6013      	str	r3, [r2, #0]
 80062c6:	e11b      	b.n	8006500 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80062c8:	78fa      	ldrb	r2, [r7, #3]
 80062ca:	6879      	ldr	r1, [r7, #4]
 80062cc:	4613      	mov	r3, r2
 80062ce:	011b      	lsls	r3, r3, #4
 80062d0:	1a9b      	subs	r3, r3, r2
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	440b      	add	r3, r1
 80062d6:	334d      	adds	r3, #77	@ 0x4d
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	2b03      	cmp	r3, #3
 80062dc:	f040 8081 	bne.w	80063e2 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80062e0:	78fa      	ldrb	r2, [r7, #3]
 80062e2:	6879      	ldr	r1, [r7, #4]
 80062e4:	4613      	mov	r3, r2
 80062e6:	011b      	lsls	r3, r3, #4
 80062e8:	1a9b      	subs	r3, r3, r2
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	440b      	add	r3, r1
 80062ee:	334d      	adds	r3, #77	@ 0x4d
 80062f0:	2202      	movs	r2, #2
 80062f2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80062f4:	78fa      	ldrb	r2, [r7, #3]
 80062f6:	6879      	ldr	r1, [r7, #4]
 80062f8:	4613      	mov	r3, r2
 80062fa:	011b      	lsls	r3, r3, #4
 80062fc:	1a9b      	subs	r3, r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	440b      	add	r3, r1
 8006302:	331b      	adds	r3, #27
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	2b01      	cmp	r3, #1
 8006308:	f040 80fa 	bne.w	8006500 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800630c:	78fa      	ldrb	r2, [r7, #3]
 800630e:	6879      	ldr	r1, [r7, #4]
 8006310:	4613      	mov	r3, r2
 8006312:	011b      	lsls	r3, r3, #4
 8006314:	1a9b      	subs	r3, r3, r2
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	440b      	add	r3, r1
 800631a:	334c      	adds	r3, #76	@ 0x4c
 800631c:	2202      	movs	r2, #2
 800631e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006320:	78fb      	ldrb	r3, [r7, #3]
 8006322:	015a      	lsls	r2, r3, #5
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	4413      	add	r3, r2
 8006328:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	78fa      	ldrb	r2, [r7, #3]
 8006330:	0151      	lsls	r1, r2, #5
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	440a      	add	r2, r1
 8006336:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800633a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800633e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006340:	78fb      	ldrb	r3, [r7, #3]
 8006342:	015a      	lsls	r2, r3, #5
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	4413      	add	r3, r2
 8006348:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	78fa      	ldrb	r2, [r7, #3]
 8006350:	0151      	lsls	r1, r2, #5
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	440a      	add	r2, r1
 8006356:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800635a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800635e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8006360:	78fb      	ldrb	r3, [r7, #3]
 8006362:	015a      	lsls	r2, r3, #5
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	4413      	add	r3, r2
 8006368:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	78fa      	ldrb	r2, [r7, #3]
 8006370:	0151      	lsls	r1, r2, #5
 8006372:	693a      	ldr	r2, [r7, #16]
 8006374:	440a      	add	r2, r1
 8006376:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800637a:	f023 0320 	bic.w	r3, r3, #32
 800637e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006380:	78fa      	ldrb	r2, [r7, #3]
 8006382:	6879      	ldr	r1, [r7, #4]
 8006384:	4613      	mov	r3, r2
 8006386:	011b      	lsls	r3, r3, #4
 8006388:	1a9b      	subs	r3, r3, r2
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	440b      	add	r3, r1
 800638e:	3326      	adds	r3, #38	@ 0x26
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00b      	beq.n	80063ae <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006396:	78fa      	ldrb	r2, [r7, #3]
 8006398:	6879      	ldr	r1, [r7, #4]
 800639a:	4613      	mov	r3, r2
 800639c:	011b      	lsls	r3, r3, #4
 800639e:	1a9b      	subs	r3, r3, r2
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	440b      	add	r3, r1
 80063a4:	3326      	adds	r3, #38	@ 0x26
 80063a6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	f040 80a9 	bne.w	8006500 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80063ae:	78fb      	ldrb	r3, [r7, #3]
 80063b0:	015a      	lsls	r2, r3, #5
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	4413      	add	r3, r2
 80063b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80063c4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80063cc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80063ce:	78fb      	ldrb	r3, [r7, #3]
 80063d0:	015a      	lsls	r2, r3, #5
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	4413      	add	r3, r2
 80063d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063da:	461a      	mov	r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6013      	str	r3, [r2, #0]
 80063e0:	e08e      	b.n	8006500 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80063e2:	78fa      	ldrb	r2, [r7, #3]
 80063e4:	6879      	ldr	r1, [r7, #4]
 80063e6:	4613      	mov	r3, r2
 80063e8:	011b      	lsls	r3, r3, #4
 80063ea:	1a9b      	subs	r3, r3, r2
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	440b      	add	r3, r1
 80063f0:	334d      	adds	r3, #77	@ 0x4d
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	2b04      	cmp	r3, #4
 80063f6:	d143      	bne.n	8006480 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80063f8:	78fa      	ldrb	r2, [r7, #3]
 80063fa:	6879      	ldr	r1, [r7, #4]
 80063fc:	4613      	mov	r3, r2
 80063fe:	011b      	lsls	r3, r3, #4
 8006400:	1a9b      	subs	r3, r3, r2
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	440b      	add	r3, r1
 8006406:	334d      	adds	r3, #77	@ 0x4d
 8006408:	2202      	movs	r2, #2
 800640a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800640c:	78fa      	ldrb	r2, [r7, #3]
 800640e:	6879      	ldr	r1, [r7, #4]
 8006410:	4613      	mov	r3, r2
 8006412:	011b      	lsls	r3, r3, #4
 8006414:	1a9b      	subs	r3, r3, r2
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	440b      	add	r3, r1
 800641a:	334c      	adds	r3, #76	@ 0x4c
 800641c:	2202      	movs	r2, #2
 800641e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006420:	78fa      	ldrb	r2, [r7, #3]
 8006422:	6879      	ldr	r1, [r7, #4]
 8006424:	4613      	mov	r3, r2
 8006426:	011b      	lsls	r3, r3, #4
 8006428:	1a9b      	subs	r3, r3, r2
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	440b      	add	r3, r1
 800642e:	3326      	adds	r3, #38	@ 0x26
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00a      	beq.n	800644c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006436:	78fa      	ldrb	r2, [r7, #3]
 8006438:	6879      	ldr	r1, [r7, #4]
 800643a:	4613      	mov	r3, r2
 800643c:	011b      	lsls	r3, r3, #4
 800643e:	1a9b      	subs	r3, r3, r2
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	440b      	add	r3, r1
 8006444:	3326      	adds	r3, #38	@ 0x26
 8006446:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006448:	2b02      	cmp	r3, #2
 800644a:	d159      	bne.n	8006500 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800644c:	78fb      	ldrb	r3, [r7, #3]
 800644e:	015a      	lsls	r2, r3, #5
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	4413      	add	r3, r2
 8006454:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006462:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800646a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800646c:	78fb      	ldrb	r3, [r7, #3]
 800646e:	015a      	lsls	r2, r3, #5
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	4413      	add	r3, r2
 8006474:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006478:	461a      	mov	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6013      	str	r3, [r2, #0]
 800647e:	e03f      	b.n	8006500 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8006480:	78fa      	ldrb	r2, [r7, #3]
 8006482:	6879      	ldr	r1, [r7, #4]
 8006484:	4613      	mov	r3, r2
 8006486:	011b      	lsls	r3, r3, #4
 8006488:	1a9b      	subs	r3, r3, r2
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	440b      	add	r3, r1
 800648e:	334d      	adds	r3, #77	@ 0x4d
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	2b08      	cmp	r3, #8
 8006494:	d126      	bne.n	80064e4 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006496:	78fa      	ldrb	r2, [r7, #3]
 8006498:	6879      	ldr	r1, [r7, #4]
 800649a:	4613      	mov	r3, r2
 800649c:	011b      	lsls	r3, r3, #4
 800649e:	1a9b      	subs	r3, r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	440b      	add	r3, r1
 80064a4:	334d      	adds	r3, #77	@ 0x4d
 80064a6:	2202      	movs	r2, #2
 80064a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80064aa:	78fa      	ldrb	r2, [r7, #3]
 80064ac:	6879      	ldr	r1, [r7, #4]
 80064ae:	4613      	mov	r3, r2
 80064b0:	011b      	lsls	r3, r3, #4
 80064b2:	1a9b      	subs	r3, r3, r2
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	440b      	add	r3, r1
 80064b8:	3344      	adds	r3, #68	@ 0x44
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	1c59      	adds	r1, r3, #1
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	4613      	mov	r3, r2
 80064c2:	011b      	lsls	r3, r3, #4
 80064c4:	1a9b      	subs	r3, r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4403      	add	r3, r0
 80064ca:	3344      	adds	r3, #68	@ 0x44
 80064cc:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80064ce:	78fa      	ldrb	r2, [r7, #3]
 80064d0:	6879      	ldr	r1, [r7, #4]
 80064d2:	4613      	mov	r3, r2
 80064d4:	011b      	lsls	r3, r3, #4
 80064d6:	1a9b      	subs	r3, r3, r2
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	440b      	add	r3, r1
 80064dc:	334c      	adds	r3, #76	@ 0x4c
 80064de:	2204      	movs	r2, #4
 80064e0:	701a      	strb	r2, [r3, #0]
 80064e2:	e00d      	b.n	8006500 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80064e4:	78fa      	ldrb	r2, [r7, #3]
 80064e6:	6879      	ldr	r1, [r7, #4]
 80064e8:	4613      	mov	r3, r2
 80064ea:	011b      	lsls	r3, r3, #4
 80064ec:	1a9b      	subs	r3, r3, r2
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	440b      	add	r3, r1
 80064f2:	334d      	adds	r3, #77	@ 0x4d
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	f000 8100 	beq.w	80066fc <HCD_HC_IN_IRQHandler+0xcca>
 80064fc:	e000      	b.n	8006500 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80064fe:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006500:	78fa      	ldrb	r2, [r7, #3]
 8006502:	6879      	ldr	r1, [r7, #4]
 8006504:	4613      	mov	r3, r2
 8006506:	011b      	lsls	r3, r3, #4
 8006508:	1a9b      	subs	r3, r3, r2
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	440b      	add	r3, r1
 800650e:	334c      	adds	r3, #76	@ 0x4c
 8006510:	781a      	ldrb	r2, [r3, #0]
 8006512:	78fb      	ldrb	r3, [r7, #3]
 8006514:	4619      	mov	r1, r3
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f00d ff10 	bl	801433c <HAL_HCD_HC_NotifyURBChange_Callback>
 800651c:	e0ef      	b.n	80066fe <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	78fa      	ldrb	r2, [r7, #3]
 8006524:	4611      	mov	r1, r2
 8006526:	4618      	mov	r0, r3
 8006528:	f007 fdb3 	bl	800e092 <USB_ReadChInterrupts>
 800652c:	4603      	mov	r3, r0
 800652e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006532:	2b40      	cmp	r3, #64	@ 0x40
 8006534:	d12f      	bne.n	8006596 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8006536:	78fb      	ldrb	r3, [r7, #3]
 8006538:	015a      	lsls	r2, r3, #5
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	4413      	add	r3, r2
 800653e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006542:	461a      	mov	r2, r3
 8006544:	2340      	movs	r3, #64	@ 0x40
 8006546:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8006548:	78fa      	ldrb	r2, [r7, #3]
 800654a:	6879      	ldr	r1, [r7, #4]
 800654c:	4613      	mov	r3, r2
 800654e:	011b      	lsls	r3, r3, #4
 8006550:	1a9b      	subs	r3, r3, r2
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	440b      	add	r3, r1
 8006556:	334d      	adds	r3, #77	@ 0x4d
 8006558:	2205      	movs	r2, #5
 800655a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800655c:	78fa      	ldrb	r2, [r7, #3]
 800655e:	6879      	ldr	r1, [r7, #4]
 8006560:	4613      	mov	r3, r2
 8006562:	011b      	lsls	r3, r3, #4
 8006564:	1a9b      	subs	r3, r3, r2
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	440b      	add	r3, r1
 800656a:	331a      	adds	r3, #26
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d109      	bne.n	8006586 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8006572:	78fa      	ldrb	r2, [r7, #3]
 8006574:	6879      	ldr	r1, [r7, #4]
 8006576:	4613      	mov	r3, r2
 8006578:	011b      	lsls	r3, r3, #4
 800657a:	1a9b      	subs	r3, r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	440b      	add	r3, r1
 8006580:	3344      	adds	r3, #68	@ 0x44
 8006582:	2200      	movs	r2, #0
 8006584:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	78fa      	ldrb	r2, [r7, #3]
 800658c:	4611      	mov	r1, r2
 800658e:	4618      	mov	r0, r3
 8006590:	f008 fb17 	bl	800ebc2 <USB_HC_Halt>
 8006594:	e0b3      	b.n	80066fe <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	78fa      	ldrb	r2, [r7, #3]
 800659c:	4611      	mov	r1, r2
 800659e:	4618      	mov	r0, r3
 80065a0:	f007 fd77 	bl	800e092 <USB_ReadChInterrupts>
 80065a4:	4603      	mov	r3, r0
 80065a6:	f003 0310 	and.w	r3, r3, #16
 80065aa:	2b10      	cmp	r3, #16
 80065ac:	f040 80a7 	bne.w	80066fe <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80065b0:	78fa      	ldrb	r2, [r7, #3]
 80065b2:	6879      	ldr	r1, [r7, #4]
 80065b4:	4613      	mov	r3, r2
 80065b6:	011b      	lsls	r3, r3, #4
 80065b8:	1a9b      	subs	r3, r3, r2
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	440b      	add	r3, r1
 80065be:	3326      	adds	r3, #38	@ 0x26
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	2b03      	cmp	r3, #3
 80065c4:	d11b      	bne.n	80065fe <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80065c6:	78fa      	ldrb	r2, [r7, #3]
 80065c8:	6879      	ldr	r1, [r7, #4]
 80065ca:	4613      	mov	r3, r2
 80065cc:	011b      	lsls	r3, r3, #4
 80065ce:	1a9b      	subs	r3, r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	440b      	add	r3, r1
 80065d4:	3344      	adds	r3, #68	@ 0x44
 80065d6:	2200      	movs	r2, #0
 80065d8:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80065da:	78fa      	ldrb	r2, [r7, #3]
 80065dc:	6879      	ldr	r1, [r7, #4]
 80065de:	4613      	mov	r3, r2
 80065e0:	011b      	lsls	r3, r3, #4
 80065e2:	1a9b      	subs	r3, r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	440b      	add	r3, r1
 80065e8:	334d      	adds	r3, #77	@ 0x4d
 80065ea:	2204      	movs	r2, #4
 80065ec:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	78fa      	ldrb	r2, [r7, #3]
 80065f4:	4611      	mov	r1, r2
 80065f6:	4618      	mov	r0, r3
 80065f8:	f008 fae3 	bl	800ebc2 <USB_HC_Halt>
 80065fc:	e03f      	b.n	800667e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80065fe:	78fa      	ldrb	r2, [r7, #3]
 8006600:	6879      	ldr	r1, [r7, #4]
 8006602:	4613      	mov	r3, r2
 8006604:	011b      	lsls	r3, r3, #4
 8006606:	1a9b      	subs	r3, r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	440b      	add	r3, r1
 800660c:	3326      	adds	r3, #38	@ 0x26
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00a      	beq.n	800662a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006614:	78fa      	ldrb	r2, [r7, #3]
 8006616:	6879      	ldr	r1, [r7, #4]
 8006618:	4613      	mov	r3, r2
 800661a:	011b      	lsls	r3, r3, #4
 800661c:	1a9b      	subs	r3, r3, r2
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	440b      	add	r3, r1
 8006622:	3326      	adds	r3, #38	@ 0x26
 8006624:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006626:	2b02      	cmp	r3, #2
 8006628:	d129      	bne.n	800667e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800662a:	78fa      	ldrb	r2, [r7, #3]
 800662c:	6879      	ldr	r1, [r7, #4]
 800662e:	4613      	mov	r3, r2
 8006630:	011b      	lsls	r3, r3, #4
 8006632:	1a9b      	subs	r3, r3, r2
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	440b      	add	r3, r1
 8006638:	3344      	adds	r3, #68	@ 0x44
 800663a:	2200      	movs	r2, #0
 800663c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	799b      	ldrb	r3, [r3, #6]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00a      	beq.n	800665c <HCD_HC_IN_IRQHandler+0xc2a>
 8006646:	78fa      	ldrb	r2, [r7, #3]
 8006648:	6879      	ldr	r1, [r7, #4]
 800664a:	4613      	mov	r3, r2
 800664c:	011b      	lsls	r3, r3, #4
 800664e:	1a9b      	subs	r3, r3, r2
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	440b      	add	r3, r1
 8006654:	331b      	adds	r3, #27
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	2b01      	cmp	r3, #1
 800665a:	d110      	bne.n	800667e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800665c:	78fa      	ldrb	r2, [r7, #3]
 800665e:	6879      	ldr	r1, [r7, #4]
 8006660:	4613      	mov	r3, r2
 8006662:	011b      	lsls	r3, r3, #4
 8006664:	1a9b      	subs	r3, r3, r2
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	440b      	add	r3, r1
 800666a:	334d      	adds	r3, #77	@ 0x4d
 800666c:	2204      	movs	r2, #4
 800666e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	78fa      	ldrb	r2, [r7, #3]
 8006676:	4611      	mov	r1, r2
 8006678:	4618      	mov	r0, r3
 800667a:	f008 faa2 	bl	800ebc2 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800667e:	78fa      	ldrb	r2, [r7, #3]
 8006680:	6879      	ldr	r1, [r7, #4]
 8006682:	4613      	mov	r3, r2
 8006684:	011b      	lsls	r3, r3, #4
 8006686:	1a9b      	subs	r3, r3, r2
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	440b      	add	r3, r1
 800668c:	331b      	adds	r3, #27
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	2b01      	cmp	r3, #1
 8006692:	d129      	bne.n	80066e8 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8006694:	78fa      	ldrb	r2, [r7, #3]
 8006696:	6879      	ldr	r1, [r7, #4]
 8006698:	4613      	mov	r3, r2
 800669a:	011b      	lsls	r3, r3, #4
 800669c:	1a9b      	subs	r3, r3, r2
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	440b      	add	r3, r1
 80066a2:	331b      	adds	r3, #27
 80066a4:	2200      	movs	r2, #0
 80066a6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80066a8:	78fb      	ldrb	r3, [r7, #3]
 80066aa:	015a      	lsls	r2, r3, #5
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	4413      	add	r3, r2
 80066b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	78fa      	ldrb	r2, [r7, #3]
 80066b8:	0151      	lsls	r1, r2, #5
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	440a      	add	r2, r1
 80066be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066c6:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80066c8:	78fb      	ldrb	r3, [r7, #3]
 80066ca:	015a      	lsls	r2, r3, #5
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	4413      	add	r3, r2
 80066d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	78fa      	ldrb	r2, [r7, #3]
 80066d8:	0151      	lsls	r1, r2, #5
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	440a      	add	r2, r1
 80066de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066e2:	f043 0320 	orr.w	r3, r3, #32
 80066e6:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80066e8:	78fb      	ldrb	r3, [r7, #3]
 80066ea:	015a      	lsls	r2, r3, #5
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	4413      	add	r3, r2
 80066f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066f4:	461a      	mov	r2, r3
 80066f6:	2310      	movs	r3, #16
 80066f8:	6093      	str	r3, [r2, #8]
 80066fa:	e000      	b.n	80066fe <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80066fc:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80066fe:	3718      	adds	r7, #24
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b086      	sub	sp, #24
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	460b      	mov	r3, r1
 800670e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	78fa      	ldrb	r2, [r7, #3]
 8006720:	4611      	mov	r1, r2
 8006722:	4618      	mov	r0, r3
 8006724:	f007 fcb5 	bl	800e092 <USB_ReadChInterrupts>
 8006728:	4603      	mov	r3, r0
 800672a:	f003 0304 	and.w	r3, r3, #4
 800672e:	2b04      	cmp	r3, #4
 8006730:	d11b      	bne.n	800676a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8006732:	78fb      	ldrb	r3, [r7, #3]
 8006734:	015a      	lsls	r2, r3, #5
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	4413      	add	r3, r2
 800673a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800673e:	461a      	mov	r2, r3
 8006740:	2304      	movs	r3, #4
 8006742:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8006744:	78fa      	ldrb	r2, [r7, #3]
 8006746:	6879      	ldr	r1, [r7, #4]
 8006748:	4613      	mov	r3, r2
 800674a:	011b      	lsls	r3, r3, #4
 800674c:	1a9b      	subs	r3, r3, r2
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	440b      	add	r3, r1
 8006752:	334d      	adds	r3, #77	@ 0x4d
 8006754:	2207      	movs	r2, #7
 8006756:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	78fa      	ldrb	r2, [r7, #3]
 800675e:	4611      	mov	r1, r2
 8006760:	4618      	mov	r0, r3
 8006762:	f008 fa2e 	bl	800ebc2 <USB_HC_Halt>
 8006766:	f000 bc6f 	b.w	8007048 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	78fa      	ldrb	r2, [r7, #3]
 8006770:	4611      	mov	r1, r2
 8006772:	4618      	mov	r0, r3
 8006774:	f007 fc8d 	bl	800e092 <USB_ReadChInterrupts>
 8006778:	4603      	mov	r3, r0
 800677a:	f003 0320 	and.w	r3, r3, #32
 800677e:	2b20      	cmp	r3, #32
 8006780:	f040 8082 	bne.w	8006888 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8006784:	78fb      	ldrb	r3, [r7, #3]
 8006786:	015a      	lsls	r2, r3, #5
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	4413      	add	r3, r2
 800678c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006790:	461a      	mov	r2, r3
 8006792:	2320      	movs	r3, #32
 8006794:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8006796:	78fa      	ldrb	r2, [r7, #3]
 8006798:	6879      	ldr	r1, [r7, #4]
 800679a:	4613      	mov	r3, r2
 800679c:	011b      	lsls	r3, r3, #4
 800679e:	1a9b      	subs	r3, r3, r2
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	440b      	add	r3, r1
 80067a4:	3319      	adds	r3, #25
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d124      	bne.n	80067f6 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80067ac:	78fa      	ldrb	r2, [r7, #3]
 80067ae:	6879      	ldr	r1, [r7, #4]
 80067b0:	4613      	mov	r3, r2
 80067b2:	011b      	lsls	r3, r3, #4
 80067b4:	1a9b      	subs	r3, r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	440b      	add	r3, r1
 80067ba:	3319      	adds	r3, #25
 80067bc:	2200      	movs	r2, #0
 80067be:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80067c0:	78fa      	ldrb	r2, [r7, #3]
 80067c2:	6879      	ldr	r1, [r7, #4]
 80067c4:	4613      	mov	r3, r2
 80067c6:	011b      	lsls	r3, r3, #4
 80067c8:	1a9b      	subs	r3, r3, r2
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	440b      	add	r3, r1
 80067ce:	334c      	adds	r3, #76	@ 0x4c
 80067d0:	2202      	movs	r2, #2
 80067d2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80067d4:	78fa      	ldrb	r2, [r7, #3]
 80067d6:	6879      	ldr	r1, [r7, #4]
 80067d8:	4613      	mov	r3, r2
 80067da:	011b      	lsls	r3, r3, #4
 80067dc:	1a9b      	subs	r3, r3, r2
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	440b      	add	r3, r1
 80067e2:	334d      	adds	r3, #77	@ 0x4d
 80067e4:	2203      	movs	r2, #3
 80067e6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	78fa      	ldrb	r2, [r7, #3]
 80067ee:	4611      	mov	r1, r2
 80067f0:	4618      	mov	r0, r3
 80067f2:	f008 f9e6 	bl	800ebc2 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80067f6:	78fa      	ldrb	r2, [r7, #3]
 80067f8:	6879      	ldr	r1, [r7, #4]
 80067fa:	4613      	mov	r3, r2
 80067fc:	011b      	lsls	r3, r3, #4
 80067fe:	1a9b      	subs	r3, r3, r2
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	440b      	add	r3, r1
 8006804:	331a      	adds	r3, #26
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	2b01      	cmp	r3, #1
 800680a:	f040 841d 	bne.w	8007048 <HCD_HC_OUT_IRQHandler+0x944>
 800680e:	78fa      	ldrb	r2, [r7, #3]
 8006810:	6879      	ldr	r1, [r7, #4]
 8006812:	4613      	mov	r3, r2
 8006814:	011b      	lsls	r3, r3, #4
 8006816:	1a9b      	subs	r3, r3, r2
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	440b      	add	r3, r1
 800681c:	331b      	adds	r3, #27
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	f040 8411 	bne.w	8007048 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8006826:	78fa      	ldrb	r2, [r7, #3]
 8006828:	6879      	ldr	r1, [r7, #4]
 800682a:	4613      	mov	r3, r2
 800682c:	011b      	lsls	r3, r3, #4
 800682e:	1a9b      	subs	r3, r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	440b      	add	r3, r1
 8006834:	3326      	adds	r3, #38	@ 0x26
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d009      	beq.n	8006850 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800683c:	78fa      	ldrb	r2, [r7, #3]
 800683e:	6879      	ldr	r1, [r7, #4]
 8006840:	4613      	mov	r3, r2
 8006842:	011b      	lsls	r3, r3, #4
 8006844:	1a9b      	subs	r3, r3, r2
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	440b      	add	r3, r1
 800684a:	331b      	adds	r3, #27
 800684c:	2201      	movs	r2, #1
 800684e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8006850:	78fa      	ldrb	r2, [r7, #3]
 8006852:	6879      	ldr	r1, [r7, #4]
 8006854:	4613      	mov	r3, r2
 8006856:	011b      	lsls	r3, r3, #4
 8006858:	1a9b      	subs	r3, r3, r2
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	440b      	add	r3, r1
 800685e:	334d      	adds	r3, #77	@ 0x4d
 8006860:	2203      	movs	r2, #3
 8006862:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	78fa      	ldrb	r2, [r7, #3]
 800686a:	4611      	mov	r1, r2
 800686c:	4618      	mov	r0, r3
 800686e:	f008 f9a8 	bl	800ebc2 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8006872:	78fa      	ldrb	r2, [r7, #3]
 8006874:	6879      	ldr	r1, [r7, #4]
 8006876:	4613      	mov	r3, r2
 8006878:	011b      	lsls	r3, r3, #4
 800687a:	1a9b      	subs	r3, r3, r2
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	440b      	add	r3, r1
 8006880:	3344      	adds	r3, #68	@ 0x44
 8006882:	2200      	movs	r2, #0
 8006884:	601a      	str	r2, [r3, #0]
 8006886:	e3df      	b.n	8007048 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	78fa      	ldrb	r2, [r7, #3]
 800688e:	4611      	mov	r1, r2
 8006890:	4618      	mov	r0, r3
 8006892:	f007 fbfe 	bl	800e092 <USB_ReadChInterrupts>
 8006896:	4603      	mov	r3, r0
 8006898:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800689c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068a0:	d111      	bne.n	80068c6 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80068a2:	78fb      	ldrb	r3, [r7, #3]
 80068a4:	015a      	lsls	r2, r3, #5
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	4413      	add	r3, r2
 80068aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068ae:	461a      	mov	r2, r3
 80068b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80068b4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	78fa      	ldrb	r2, [r7, #3]
 80068bc:	4611      	mov	r1, r2
 80068be:	4618      	mov	r0, r3
 80068c0:	f008 f97f 	bl	800ebc2 <USB_HC_Halt>
 80068c4:	e3c0      	b.n	8007048 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	78fa      	ldrb	r2, [r7, #3]
 80068cc:	4611      	mov	r1, r2
 80068ce:	4618      	mov	r0, r3
 80068d0:	f007 fbdf 	bl	800e092 <USB_ReadChInterrupts>
 80068d4:	4603      	mov	r3, r0
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d168      	bne.n	80069b0 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80068de:	78fa      	ldrb	r2, [r7, #3]
 80068e0:	6879      	ldr	r1, [r7, #4]
 80068e2:	4613      	mov	r3, r2
 80068e4:	011b      	lsls	r3, r3, #4
 80068e6:	1a9b      	subs	r3, r3, r2
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	440b      	add	r3, r1
 80068ec:	3344      	adds	r3, #68	@ 0x44
 80068ee:	2200      	movs	r2, #0
 80068f0:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	78fa      	ldrb	r2, [r7, #3]
 80068f8:	4611      	mov	r1, r2
 80068fa:	4618      	mov	r0, r3
 80068fc:	f007 fbc9 	bl	800e092 <USB_ReadChInterrupts>
 8006900:	4603      	mov	r3, r0
 8006902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006906:	2b40      	cmp	r3, #64	@ 0x40
 8006908:	d112      	bne.n	8006930 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800690a:	78fa      	ldrb	r2, [r7, #3]
 800690c:	6879      	ldr	r1, [r7, #4]
 800690e:	4613      	mov	r3, r2
 8006910:	011b      	lsls	r3, r3, #4
 8006912:	1a9b      	subs	r3, r3, r2
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	440b      	add	r3, r1
 8006918:	3319      	adds	r3, #25
 800691a:	2201      	movs	r2, #1
 800691c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800691e:	78fb      	ldrb	r3, [r7, #3]
 8006920:	015a      	lsls	r2, r3, #5
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	4413      	add	r3, r2
 8006926:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800692a:	461a      	mov	r2, r3
 800692c:	2340      	movs	r3, #64	@ 0x40
 800692e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8006930:	78fa      	ldrb	r2, [r7, #3]
 8006932:	6879      	ldr	r1, [r7, #4]
 8006934:	4613      	mov	r3, r2
 8006936:	011b      	lsls	r3, r3, #4
 8006938:	1a9b      	subs	r3, r3, r2
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	440b      	add	r3, r1
 800693e:	331b      	adds	r3, #27
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d019      	beq.n	800697a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8006946:	78fa      	ldrb	r2, [r7, #3]
 8006948:	6879      	ldr	r1, [r7, #4]
 800694a:	4613      	mov	r3, r2
 800694c:	011b      	lsls	r3, r3, #4
 800694e:	1a9b      	subs	r3, r3, r2
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	440b      	add	r3, r1
 8006954:	331b      	adds	r3, #27
 8006956:	2200      	movs	r2, #0
 8006958:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800695a:	78fb      	ldrb	r3, [r7, #3]
 800695c:	015a      	lsls	r2, r3, #5
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	4413      	add	r3, r2
 8006962:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	78fa      	ldrb	r2, [r7, #3]
 800696a:	0151      	lsls	r1, r2, #5
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	440a      	add	r2, r1
 8006970:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006974:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006978:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800697a:	78fb      	ldrb	r3, [r7, #3]
 800697c:	015a      	lsls	r2, r3, #5
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	4413      	add	r3, r2
 8006982:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006986:	461a      	mov	r2, r3
 8006988:	2301      	movs	r3, #1
 800698a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800698c:	78fa      	ldrb	r2, [r7, #3]
 800698e:	6879      	ldr	r1, [r7, #4]
 8006990:	4613      	mov	r3, r2
 8006992:	011b      	lsls	r3, r3, #4
 8006994:	1a9b      	subs	r3, r3, r2
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	440b      	add	r3, r1
 800699a:	334d      	adds	r3, #77	@ 0x4d
 800699c:	2201      	movs	r2, #1
 800699e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	78fa      	ldrb	r2, [r7, #3]
 80069a6:	4611      	mov	r1, r2
 80069a8:	4618      	mov	r0, r3
 80069aa:	f008 f90a 	bl	800ebc2 <USB_HC_Halt>
 80069ae:	e34b      	b.n	8007048 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	78fa      	ldrb	r2, [r7, #3]
 80069b6:	4611      	mov	r1, r2
 80069b8:	4618      	mov	r0, r3
 80069ba:	f007 fb6a 	bl	800e092 <USB_ReadChInterrupts>
 80069be:	4603      	mov	r3, r0
 80069c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069c4:	2b40      	cmp	r3, #64	@ 0x40
 80069c6:	d139      	bne.n	8006a3c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80069c8:	78fa      	ldrb	r2, [r7, #3]
 80069ca:	6879      	ldr	r1, [r7, #4]
 80069cc:	4613      	mov	r3, r2
 80069ce:	011b      	lsls	r3, r3, #4
 80069d0:	1a9b      	subs	r3, r3, r2
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	440b      	add	r3, r1
 80069d6:	334d      	adds	r3, #77	@ 0x4d
 80069d8:	2205      	movs	r2, #5
 80069da:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80069dc:	78fa      	ldrb	r2, [r7, #3]
 80069de:	6879      	ldr	r1, [r7, #4]
 80069e0:	4613      	mov	r3, r2
 80069e2:	011b      	lsls	r3, r3, #4
 80069e4:	1a9b      	subs	r3, r3, r2
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	440b      	add	r3, r1
 80069ea:	331a      	adds	r3, #26
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d109      	bne.n	8006a06 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80069f2:	78fa      	ldrb	r2, [r7, #3]
 80069f4:	6879      	ldr	r1, [r7, #4]
 80069f6:	4613      	mov	r3, r2
 80069f8:	011b      	lsls	r3, r3, #4
 80069fa:	1a9b      	subs	r3, r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	440b      	add	r3, r1
 8006a00:	3319      	adds	r3, #25
 8006a02:	2201      	movs	r2, #1
 8006a04:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8006a06:	78fa      	ldrb	r2, [r7, #3]
 8006a08:	6879      	ldr	r1, [r7, #4]
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	011b      	lsls	r3, r3, #4
 8006a0e:	1a9b      	subs	r3, r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	440b      	add	r3, r1
 8006a14:	3344      	adds	r3, #68	@ 0x44
 8006a16:	2200      	movs	r2, #0
 8006a18:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	78fa      	ldrb	r2, [r7, #3]
 8006a20:	4611      	mov	r1, r2
 8006a22:	4618      	mov	r0, r3
 8006a24:	f008 f8cd 	bl	800ebc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8006a28:	78fb      	ldrb	r3, [r7, #3]
 8006a2a:	015a      	lsls	r2, r3, #5
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	4413      	add	r3, r2
 8006a30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a34:	461a      	mov	r2, r3
 8006a36:	2340      	movs	r3, #64	@ 0x40
 8006a38:	6093      	str	r3, [r2, #8]
 8006a3a:	e305      	b.n	8007048 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	78fa      	ldrb	r2, [r7, #3]
 8006a42:	4611      	mov	r1, r2
 8006a44:	4618      	mov	r0, r3
 8006a46:	f007 fb24 	bl	800e092 <USB_ReadChInterrupts>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	f003 0308 	and.w	r3, r3, #8
 8006a50:	2b08      	cmp	r3, #8
 8006a52:	d11a      	bne.n	8006a8a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8006a54:	78fb      	ldrb	r3, [r7, #3]
 8006a56:	015a      	lsls	r2, r3, #5
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a60:	461a      	mov	r2, r3
 8006a62:	2308      	movs	r3, #8
 8006a64:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8006a66:	78fa      	ldrb	r2, [r7, #3]
 8006a68:	6879      	ldr	r1, [r7, #4]
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	011b      	lsls	r3, r3, #4
 8006a6e:	1a9b      	subs	r3, r3, r2
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	440b      	add	r3, r1
 8006a74:	334d      	adds	r3, #77	@ 0x4d
 8006a76:	2206      	movs	r2, #6
 8006a78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	78fa      	ldrb	r2, [r7, #3]
 8006a80:	4611      	mov	r1, r2
 8006a82:	4618      	mov	r0, r3
 8006a84:	f008 f89d 	bl	800ebc2 <USB_HC_Halt>
 8006a88:	e2de      	b.n	8007048 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	78fa      	ldrb	r2, [r7, #3]
 8006a90:	4611      	mov	r1, r2
 8006a92:	4618      	mov	r0, r3
 8006a94:	f007 fafd 	bl	800e092 <USB_ReadChInterrupts>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	f003 0310 	and.w	r3, r3, #16
 8006a9e:	2b10      	cmp	r3, #16
 8006aa0:	d144      	bne.n	8006b2c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8006aa2:	78fa      	ldrb	r2, [r7, #3]
 8006aa4:	6879      	ldr	r1, [r7, #4]
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	011b      	lsls	r3, r3, #4
 8006aaa:	1a9b      	subs	r3, r3, r2
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	440b      	add	r3, r1
 8006ab0:	3344      	adds	r3, #68	@ 0x44
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8006ab6:	78fa      	ldrb	r2, [r7, #3]
 8006ab8:	6879      	ldr	r1, [r7, #4]
 8006aba:	4613      	mov	r3, r2
 8006abc:	011b      	lsls	r3, r3, #4
 8006abe:	1a9b      	subs	r3, r3, r2
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	440b      	add	r3, r1
 8006ac4:	334d      	adds	r3, #77	@ 0x4d
 8006ac6:	2204      	movs	r2, #4
 8006ac8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8006aca:	78fa      	ldrb	r2, [r7, #3]
 8006acc:	6879      	ldr	r1, [r7, #4]
 8006ace:	4613      	mov	r3, r2
 8006ad0:	011b      	lsls	r3, r3, #4
 8006ad2:	1a9b      	subs	r3, r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	440b      	add	r3, r1
 8006ad8:	3319      	adds	r3, #25
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d114      	bne.n	8006b0a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8006ae0:	78fa      	ldrb	r2, [r7, #3]
 8006ae2:	6879      	ldr	r1, [r7, #4]
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	011b      	lsls	r3, r3, #4
 8006ae8:	1a9b      	subs	r3, r3, r2
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	440b      	add	r3, r1
 8006aee:	3318      	adds	r3, #24
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d109      	bne.n	8006b0a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8006af6:	78fa      	ldrb	r2, [r7, #3]
 8006af8:	6879      	ldr	r1, [r7, #4]
 8006afa:	4613      	mov	r3, r2
 8006afc:	011b      	lsls	r3, r3, #4
 8006afe:	1a9b      	subs	r3, r3, r2
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	440b      	add	r3, r1
 8006b04:	3319      	adds	r3, #25
 8006b06:	2201      	movs	r2, #1
 8006b08:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	78fa      	ldrb	r2, [r7, #3]
 8006b10:	4611      	mov	r1, r2
 8006b12:	4618      	mov	r0, r3
 8006b14:	f008 f855 	bl	800ebc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8006b18:	78fb      	ldrb	r3, [r7, #3]
 8006b1a:	015a      	lsls	r2, r3, #5
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	4413      	add	r3, r2
 8006b20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b24:	461a      	mov	r2, r3
 8006b26:	2310      	movs	r3, #16
 8006b28:	6093      	str	r3, [r2, #8]
 8006b2a:	e28d      	b.n	8007048 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	78fa      	ldrb	r2, [r7, #3]
 8006b32:	4611      	mov	r1, r2
 8006b34:	4618      	mov	r0, r3
 8006b36:	f007 faac 	bl	800e092 <USB_ReadChInterrupts>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b40:	2b80      	cmp	r3, #128	@ 0x80
 8006b42:	d169      	bne.n	8006c18 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	799b      	ldrb	r3, [r3, #6]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d111      	bne.n	8006b70 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8006b4c:	78fa      	ldrb	r2, [r7, #3]
 8006b4e:	6879      	ldr	r1, [r7, #4]
 8006b50:	4613      	mov	r3, r2
 8006b52:	011b      	lsls	r3, r3, #4
 8006b54:	1a9b      	subs	r3, r3, r2
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	440b      	add	r3, r1
 8006b5a:	334d      	adds	r3, #77	@ 0x4d
 8006b5c:	2207      	movs	r2, #7
 8006b5e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	78fa      	ldrb	r2, [r7, #3]
 8006b66:	4611      	mov	r1, r2
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f008 f82a 	bl	800ebc2 <USB_HC_Halt>
 8006b6e:	e049      	b.n	8006c04 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8006b70:	78fa      	ldrb	r2, [r7, #3]
 8006b72:	6879      	ldr	r1, [r7, #4]
 8006b74:	4613      	mov	r3, r2
 8006b76:	011b      	lsls	r3, r3, #4
 8006b78:	1a9b      	subs	r3, r3, r2
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	440b      	add	r3, r1
 8006b7e:	3344      	adds	r3, #68	@ 0x44
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	1c59      	adds	r1, r3, #1
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	4613      	mov	r3, r2
 8006b88:	011b      	lsls	r3, r3, #4
 8006b8a:	1a9b      	subs	r3, r3, r2
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	4403      	add	r3, r0
 8006b90:	3344      	adds	r3, #68	@ 0x44
 8006b92:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006b94:	78fa      	ldrb	r2, [r7, #3]
 8006b96:	6879      	ldr	r1, [r7, #4]
 8006b98:	4613      	mov	r3, r2
 8006b9a:	011b      	lsls	r3, r3, #4
 8006b9c:	1a9b      	subs	r3, r3, r2
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	440b      	add	r3, r1
 8006ba2:	3344      	adds	r3, #68	@ 0x44
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d922      	bls.n	8006bf0 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006baa:	78fa      	ldrb	r2, [r7, #3]
 8006bac:	6879      	ldr	r1, [r7, #4]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	011b      	lsls	r3, r3, #4
 8006bb2:	1a9b      	subs	r3, r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	440b      	add	r3, r1
 8006bb8:	3344      	adds	r3, #68	@ 0x44
 8006bba:	2200      	movs	r2, #0
 8006bbc:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006bbe:	78fa      	ldrb	r2, [r7, #3]
 8006bc0:	6879      	ldr	r1, [r7, #4]
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	011b      	lsls	r3, r3, #4
 8006bc6:	1a9b      	subs	r3, r3, r2
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	440b      	add	r3, r1
 8006bcc:	334c      	adds	r3, #76	@ 0x4c
 8006bce:	2204      	movs	r2, #4
 8006bd0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006bd2:	78fa      	ldrb	r2, [r7, #3]
 8006bd4:	6879      	ldr	r1, [r7, #4]
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	011b      	lsls	r3, r3, #4
 8006bda:	1a9b      	subs	r3, r3, r2
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	440b      	add	r3, r1
 8006be0:	334c      	adds	r3, #76	@ 0x4c
 8006be2:	781a      	ldrb	r2, [r3, #0]
 8006be4:	78fb      	ldrb	r3, [r7, #3]
 8006be6:	4619      	mov	r1, r3
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f00d fba7 	bl	801433c <HAL_HCD_HC_NotifyURBChange_Callback>
 8006bee:	e009      	b.n	8006c04 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006bf0:	78fa      	ldrb	r2, [r7, #3]
 8006bf2:	6879      	ldr	r1, [r7, #4]
 8006bf4:	4613      	mov	r3, r2
 8006bf6:	011b      	lsls	r3, r3, #4
 8006bf8:	1a9b      	subs	r3, r3, r2
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	440b      	add	r3, r1
 8006bfe:	334c      	adds	r3, #76	@ 0x4c
 8006c00:	2202      	movs	r2, #2
 8006c02:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8006c04:	78fb      	ldrb	r3, [r7, #3]
 8006c06:	015a      	lsls	r2, r3, #5
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c10:	461a      	mov	r2, r3
 8006c12:	2380      	movs	r3, #128	@ 0x80
 8006c14:	6093      	str	r3, [r2, #8]
 8006c16:	e217      	b.n	8007048 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	78fa      	ldrb	r2, [r7, #3]
 8006c1e:	4611      	mov	r1, r2
 8006c20:	4618      	mov	r0, r3
 8006c22:	f007 fa36 	bl	800e092 <USB_ReadChInterrupts>
 8006c26:	4603      	mov	r3, r0
 8006c28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c30:	d11b      	bne.n	8006c6a <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8006c32:	78fa      	ldrb	r2, [r7, #3]
 8006c34:	6879      	ldr	r1, [r7, #4]
 8006c36:	4613      	mov	r3, r2
 8006c38:	011b      	lsls	r3, r3, #4
 8006c3a:	1a9b      	subs	r3, r3, r2
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	440b      	add	r3, r1
 8006c40:	334d      	adds	r3, #77	@ 0x4d
 8006c42:	2209      	movs	r2, #9
 8006c44:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	78fa      	ldrb	r2, [r7, #3]
 8006c4c:	4611      	mov	r1, r2
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f007 ffb7 	bl	800ebc2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8006c54:	78fb      	ldrb	r3, [r7, #3]
 8006c56:	015a      	lsls	r2, r3, #5
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c60:	461a      	mov	r2, r3
 8006c62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006c66:	6093      	str	r3, [r2, #8]
 8006c68:	e1ee      	b.n	8007048 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	78fa      	ldrb	r2, [r7, #3]
 8006c70:	4611      	mov	r1, r2
 8006c72:	4618      	mov	r0, r3
 8006c74:	f007 fa0d 	bl	800e092 <USB_ReadChInterrupts>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	f003 0302 	and.w	r3, r3, #2
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	f040 81df 	bne.w	8007042 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8006c84:	78fb      	ldrb	r3, [r7, #3]
 8006c86:	015a      	lsls	r2, r3, #5
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c90:	461a      	mov	r2, r3
 8006c92:	2302      	movs	r3, #2
 8006c94:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8006c96:	78fa      	ldrb	r2, [r7, #3]
 8006c98:	6879      	ldr	r1, [r7, #4]
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	011b      	lsls	r3, r3, #4
 8006c9e:	1a9b      	subs	r3, r3, r2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	440b      	add	r3, r1
 8006ca4:	334d      	adds	r3, #77	@ 0x4d
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	f040 8093 	bne.w	8006dd4 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006cae:	78fa      	ldrb	r2, [r7, #3]
 8006cb0:	6879      	ldr	r1, [r7, #4]
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	011b      	lsls	r3, r3, #4
 8006cb6:	1a9b      	subs	r3, r3, r2
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	440b      	add	r3, r1
 8006cbc:	334d      	adds	r3, #77	@ 0x4d
 8006cbe:	2202      	movs	r2, #2
 8006cc0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8006cc2:	78fa      	ldrb	r2, [r7, #3]
 8006cc4:	6879      	ldr	r1, [r7, #4]
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	011b      	lsls	r3, r3, #4
 8006cca:	1a9b      	subs	r3, r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	440b      	add	r3, r1
 8006cd0:	334c      	adds	r3, #76	@ 0x4c
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8006cd6:	78fa      	ldrb	r2, [r7, #3]
 8006cd8:	6879      	ldr	r1, [r7, #4]
 8006cda:	4613      	mov	r3, r2
 8006cdc:	011b      	lsls	r3, r3, #4
 8006cde:	1a9b      	subs	r3, r3, r2
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	440b      	add	r3, r1
 8006ce4:	3326      	adds	r3, #38	@ 0x26
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d00b      	beq.n	8006d04 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8006cec:	78fa      	ldrb	r2, [r7, #3]
 8006cee:	6879      	ldr	r1, [r7, #4]
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	011b      	lsls	r3, r3, #4
 8006cf4:	1a9b      	subs	r3, r3, r2
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	440b      	add	r3, r1
 8006cfa:	3326      	adds	r3, #38	@ 0x26
 8006cfc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8006cfe:	2b03      	cmp	r3, #3
 8006d00:	f040 8190 	bne.w	8007024 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	799b      	ldrb	r3, [r3, #6]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d115      	bne.n	8006d38 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8006d0c:	78fa      	ldrb	r2, [r7, #3]
 8006d0e:	6879      	ldr	r1, [r7, #4]
 8006d10:	4613      	mov	r3, r2
 8006d12:	011b      	lsls	r3, r3, #4
 8006d14:	1a9b      	subs	r3, r3, r2
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	440b      	add	r3, r1
 8006d1a:	333d      	adds	r3, #61	@ 0x3d
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	78fa      	ldrb	r2, [r7, #3]
 8006d20:	f083 0301 	eor.w	r3, r3, #1
 8006d24:	b2d8      	uxtb	r0, r3
 8006d26:	6879      	ldr	r1, [r7, #4]
 8006d28:	4613      	mov	r3, r2
 8006d2a:	011b      	lsls	r3, r3, #4
 8006d2c:	1a9b      	subs	r3, r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	440b      	add	r3, r1
 8006d32:	333d      	adds	r3, #61	@ 0x3d
 8006d34:	4602      	mov	r2, r0
 8006d36:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	799b      	ldrb	r3, [r3, #6]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	f040 8171 	bne.w	8007024 <HCD_HC_OUT_IRQHandler+0x920>
 8006d42:	78fa      	ldrb	r2, [r7, #3]
 8006d44:	6879      	ldr	r1, [r7, #4]
 8006d46:	4613      	mov	r3, r2
 8006d48:	011b      	lsls	r3, r3, #4
 8006d4a:	1a9b      	subs	r3, r3, r2
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	440b      	add	r3, r1
 8006d50:	3334      	adds	r3, #52	@ 0x34
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f000 8165 	beq.w	8007024 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8006d5a:	78fa      	ldrb	r2, [r7, #3]
 8006d5c:	6879      	ldr	r1, [r7, #4]
 8006d5e:	4613      	mov	r3, r2
 8006d60:	011b      	lsls	r3, r3, #4
 8006d62:	1a9b      	subs	r3, r3, r2
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	440b      	add	r3, r1
 8006d68:	3334      	adds	r3, #52	@ 0x34
 8006d6a:	6819      	ldr	r1, [r3, #0]
 8006d6c:	78fa      	ldrb	r2, [r7, #3]
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	4613      	mov	r3, r2
 8006d72:	011b      	lsls	r3, r3, #4
 8006d74:	1a9b      	subs	r3, r3, r2
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	4403      	add	r3, r0
 8006d7a:	3328      	adds	r3, #40	@ 0x28
 8006d7c:	881b      	ldrh	r3, [r3, #0]
 8006d7e:	440b      	add	r3, r1
 8006d80:	1e59      	subs	r1, r3, #1
 8006d82:	78fa      	ldrb	r2, [r7, #3]
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	4613      	mov	r3, r2
 8006d88:	011b      	lsls	r3, r3, #4
 8006d8a:	1a9b      	subs	r3, r3, r2
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	4403      	add	r3, r0
 8006d90:	3328      	adds	r3, #40	@ 0x28
 8006d92:	881b      	ldrh	r3, [r3, #0]
 8006d94:	fbb1 f3f3 	udiv	r3, r1, r3
 8006d98:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	f003 0301 	and.w	r3, r3, #1
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f000 813f 	beq.w	8007024 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8006da6:	78fa      	ldrb	r2, [r7, #3]
 8006da8:	6879      	ldr	r1, [r7, #4]
 8006daa:	4613      	mov	r3, r2
 8006dac:	011b      	lsls	r3, r3, #4
 8006dae:	1a9b      	subs	r3, r3, r2
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	440b      	add	r3, r1
 8006db4:	333d      	adds	r3, #61	@ 0x3d
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	78fa      	ldrb	r2, [r7, #3]
 8006dba:	f083 0301 	eor.w	r3, r3, #1
 8006dbe:	b2d8      	uxtb	r0, r3
 8006dc0:	6879      	ldr	r1, [r7, #4]
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	011b      	lsls	r3, r3, #4
 8006dc6:	1a9b      	subs	r3, r3, r2
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	440b      	add	r3, r1
 8006dcc:	333d      	adds	r3, #61	@ 0x3d
 8006dce:	4602      	mov	r2, r0
 8006dd0:	701a      	strb	r2, [r3, #0]
 8006dd2:	e127      	b.n	8007024 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8006dd4:	78fa      	ldrb	r2, [r7, #3]
 8006dd6:	6879      	ldr	r1, [r7, #4]
 8006dd8:	4613      	mov	r3, r2
 8006dda:	011b      	lsls	r3, r3, #4
 8006ddc:	1a9b      	subs	r3, r3, r2
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	440b      	add	r3, r1
 8006de2:	334d      	adds	r3, #77	@ 0x4d
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	2b03      	cmp	r3, #3
 8006de8:	d120      	bne.n	8006e2c <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006dea:	78fa      	ldrb	r2, [r7, #3]
 8006dec:	6879      	ldr	r1, [r7, #4]
 8006dee:	4613      	mov	r3, r2
 8006df0:	011b      	lsls	r3, r3, #4
 8006df2:	1a9b      	subs	r3, r3, r2
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	440b      	add	r3, r1
 8006df8:	334d      	adds	r3, #77	@ 0x4d
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006dfe:	78fa      	ldrb	r2, [r7, #3]
 8006e00:	6879      	ldr	r1, [r7, #4]
 8006e02:	4613      	mov	r3, r2
 8006e04:	011b      	lsls	r3, r3, #4
 8006e06:	1a9b      	subs	r3, r3, r2
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	440b      	add	r3, r1
 8006e0c:	331b      	adds	r3, #27
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	f040 8107 	bne.w	8007024 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006e16:	78fa      	ldrb	r2, [r7, #3]
 8006e18:	6879      	ldr	r1, [r7, #4]
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	011b      	lsls	r3, r3, #4
 8006e1e:	1a9b      	subs	r3, r3, r2
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	440b      	add	r3, r1
 8006e24:	334c      	adds	r3, #76	@ 0x4c
 8006e26:	2202      	movs	r2, #2
 8006e28:	701a      	strb	r2, [r3, #0]
 8006e2a:	e0fb      	b.n	8007024 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8006e2c:	78fa      	ldrb	r2, [r7, #3]
 8006e2e:	6879      	ldr	r1, [r7, #4]
 8006e30:	4613      	mov	r3, r2
 8006e32:	011b      	lsls	r3, r3, #4
 8006e34:	1a9b      	subs	r3, r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	440b      	add	r3, r1
 8006e3a:	334d      	adds	r3, #77	@ 0x4d
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	2b04      	cmp	r3, #4
 8006e40:	d13a      	bne.n	8006eb8 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006e42:	78fa      	ldrb	r2, [r7, #3]
 8006e44:	6879      	ldr	r1, [r7, #4]
 8006e46:	4613      	mov	r3, r2
 8006e48:	011b      	lsls	r3, r3, #4
 8006e4a:	1a9b      	subs	r3, r3, r2
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	440b      	add	r3, r1
 8006e50:	334d      	adds	r3, #77	@ 0x4d
 8006e52:	2202      	movs	r2, #2
 8006e54:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006e56:	78fa      	ldrb	r2, [r7, #3]
 8006e58:	6879      	ldr	r1, [r7, #4]
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	011b      	lsls	r3, r3, #4
 8006e5e:	1a9b      	subs	r3, r3, r2
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	440b      	add	r3, r1
 8006e64:	334c      	adds	r3, #76	@ 0x4c
 8006e66:	2202      	movs	r2, #2
 8006e68:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006e6a:	78fa      	ldrb	r2, [r7, #3]
 8006e6c:	6879      	ldr	r1, [r7, #4]
 8006e6e:	4613      	mov	r3, r2
 8006e70:	011b      	lsls	r3, r3, #4
 8006e72:	1a9b      	subs	r3, r3, r2
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	440b      	add	r3, r1
 8006e78:	331b      	adds	r3, #27
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	f040 80d1 	bne.w	8007024 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8006e82:	78fa      	ldrb	r2, [r7, #3]
 8006e84:	6879      	ldr	r1, [r7, #4]
 8006e86:	4613      	mov	r3, r2
 8006e88:	011b      	lsls	r3, r3, #4
 8006e8a:	1a9b      	subs	r3, r3, r2
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	440b      	add	r3, r1
 8006e90:	331b      	adds	r3, #27
 8006e92:	2200      	movs	r2, #0
 8006e94:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006e96:	78fb      	ldrb	r3, [r7, #3]
 8006e98:	015a      	lsls	r2, r3, #5
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	78fa      	ldrb	r2, [r7, #3]
 8006ea6:	0151      	lsls	r1, r2, #5
 8006ea8:	693a      	ldr	r2, [r7, #16]
 8006eaa:	440a      	add	r2, r1
 8006eac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006eb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006eb4:	6053      	str	r3, [r2, #4]
 8006eb6:	e0b5      	b.n	8007024 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8006eb8:	78fa      	ldrb	r2, [r7, #3]
 8006eba:	6879      	ldr	r1, [r7, #4]
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	011b      	lsls	r3, r3, #4
 8006ec0:	1a9b      	subs	r3, r3, r2
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	440b      	add	r3, r1
 8006ec6:	334d      	adds	r3, #77	@ 0x4d
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	2b05      	cmp	r3, #5
 8006ecc:	d114      	bne.n	8006ef8 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006ece:	78fa      	ldrb	r2, [r7, #3]
 8006ed0:	6879      	ldr	r1, [r7, #4]
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	011b      	lsls	r3, r3, #4
 8006ed6:	1a9b      	subs	r3, r3, r2
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	440b      	add	r3, r1
 8006edc:	334d      	adds	r3, #77	@ 0x4d
 8006ede:	2202      	movs	r2, #2
 8006ee0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8006ee2:	78fa      	ldrb	r2, [r7, #3]
 8006ee4:	6879      	ldr	r1, [r7, #4]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	011b      	lsls	r3, r3, #4
 8006eea:	1a9b      	subs	r3, r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	440b      	add	r3, r1
 8006ef0:	334c      	adds	r3, #76	@ 0x4c
 8006ef2:	2202      	movs	r2, #2
 8006ef4:	701a      	strb	r2, [r3, #0]
 8006ef6:	e095      	b.n	8007024 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8006ef8:	78fa      	ldrb	r2, [r7, #3]
 8006efa:	6879      	ldr	r1, [r7, #4]
 8006efc:	4613      	mov	r3, r2
 8006efe:	011b      	lsls	r3, r3, #4
 8006f00:	1a9b      	subs	r3, r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	440b      	add	r3, r1
 8006f06:	334d      	adds	r3, #77	@ 0x4d
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	2b06      	cmp	r3, #6
 8006f0c:	d114      	bne.n	8006f38 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006f0e:	78fa      	ldrb	r2, [r7, #3]
 8006f10:	6879      	ldr	r1, [r7, #4]
 8006f12:	4613      	mov	r3, r2
 8006f14:	011b      	lsls	r3, r3, #4
 8006f16:	1a9b      	subs	r3, r3, r2
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	440b      	add	r3, r1
 8006f1c:	334d      	adds	r3, #77	@ 0x4d
 8006f1e:	2202      	movs	r2, #2
 8006f20:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8006f22:	78fa      	ldrb	r2, [r7, #3]
 8006f24:	6879      	ldr	r1, [r7, #4]
 8006f26:	4613      	mov	r3, r2
 8006f28:	011b      	lsls	r3, r3, #4
 8006f2a:	1a9b      	subs	r3, r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	440b      	add	r3, r1
 8006f30:	334c      	adds	r3, #76	@ 0x4c
 8006f32:	2205      	movs	r2, #5
 8006f34:	701a      	strb	r2, [r3, #0]
 8006f36:	e075      	b.n	8007024 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006f38:	78fa      	ldrb	r2, [r7, #3]
 8006f3a:	6879      	ldr	r1, [r7, #4]
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	011b      	lsls	r3, r3, #4
 8006f40:	1a9b      	subs	r3, r3, r2
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	440b      	add	r3, r1
 8006f46:	334d      	adds	r3, #77	@ 0x4d
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	2b07      	cmp	r3, #7
 8006f4c:	d00a      	beq.n	8006f64 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8006f4e:	78fa      	ldrb	r2, [r7, #3]
 8006f50:	6879      	ldr	r1, [r7, #4]
 8006f52:	4613      	mov	r3, r2
 8006f54:	011b      	lsls	r3, r3, #4
 8006f56:	1a9b      	subs	r3, r3, r2
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	440b      	add	r3, r1
 8006f5c:	334d      	adds	r3, #77	@ 0x4d
 8006f5e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006f60:	2b09      	cmp	r3, #9
 8006f62:	d170      	bne.n	8007046 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006f64:	78fa      	ldrb	r2, [r7, #3]
 8006f66:	6879      	ldr	r1, [r7, #4]
 8006f68:	4613      	mov	r3, r2
 8006f6a:	011b      	lsls	r3, r3, #4
 8006f6c:	1a9b      	subs	r3, r3, r2
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	440b      	add	r3, r1
 8006f72:	334d      	adds	r3, #77	@ 0x4d
 8006f74:	2202      	movs	r2, #2
 8006f76:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8006f78:	78fa      	ldrb	r2, [r7, #3]
 8006f7a:	6879      	ldr	r1, [r7, #4]
 8006f7c:	4613      	mov	r3, r2
 8006f7e:	011b      	lsls	r3, r3, #4
 8006f80:	1a9b      	subs	r3, r3, r2
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	440b      	add	r3, r1
 8006f86:	3344      	adds	r3, #68	@ 0x44
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	1c59      	adds	r1, r3, #1
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	4613      	mov	r3, r2
 8006f90:	011b      	lsls	r3, r3, #4
 8006f92:	1a9b      	subs	r3, r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	4403      	add	r3, r0
 8006f98:	3344      	adds	r3, #68	@ 0x44
 8006f9a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006f9c:	78fa      	ldrb	r2, [r7, #3]
 8006f9e:	6879      	ldr	r1, [r7, #4]
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	011b      	lsls	r3, r3, #4
 8006fa4:	1a9b      	subs	r3, r3, r2
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	440b      	add	r3, r1
 8006faa:	3344      	adds	r3, #68	@ 0x44
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	d914      	bls.n	8006fdc <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006fb2:	78fa      	ldrb	r2, [r7, #3]
 8006fb4:	6879      	ldr	r1, [r7, #4]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	011b      	lsls	r3, r3, #4
 8006fba:	1a9b      	subs	r3, r3, r2
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	440b      	add	r3, r1
 8006fc0:	3344      	adds	r3, #68	@ 0x44
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006fc6:	78fa      	ldrb	r2, [r7, #3]
 8006fc8:	6879      	ldr	r1, [r7, #4]
 8006fca:	4613      	mov	r3, r2
 8006fcc:	011b      	lsls	r3, r3, #4
 8006fce:	1a9b      	subs	r3, r3, r2
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	440b      	add	r3, r1
 8006fd4:	334c      	adds	r3, #76	@ 0x4c
 8006fd6:	2204      	movs	r2, #4
 8006fd8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006fda:	e022      	b.n	8007022 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006fdc:	78fa      	ldrb	r2, [r7, #3]
 8006fde:	6879      	ldr	r1, [r7, #4]
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	011b      	lsls	r3, r3, #4
 8006fe4:	1a9b      	subs	r3, r3, r2
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	440b      	add	r3, r1
 8006fea:	334c      	adds	r3, #76	@ 0x4c
 8006fec:	2202      	movs	r2, #2
 8006fee:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8006ff0:	78fb      	ldrb	r3, [r7, #3]
 8006ff2:	015a      	lsls	r2, r3, #5
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007006:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800700e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8007010:	78fb      	ldrb	r3, [r7, #3]
 8007012:	015a      	lsls	r2, r3, #5
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	4413      	add	r3, r2
 8007018:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800701c:	461a      	mov	r2, r3
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007022:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8007024:	78fa      	ldrb	r2, [r7, #3]
 8007026:	6879      	ldr	r1, [r7, #4]
 8007028:	4613      	mov	r3, r2
 800702a:	011b      	lsls	r3, r3, #4
 800702c:	1a9b      	subs	r3, r3, r2
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	440b      	add	r3, r1
 8007032:	334c      	adds	r3, #76	@ 0x4c
 8007034:	781a      	ldrb	r2, [r3, #0]
 8007036:	78fb      	ldrb	r3, [r7, #3]
 8007038:	4619      	mov	r1, r3
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f00d f97e 	bl	801433c <HAL_HCD_HC_NotifyURBChange_Callback>
 8007040:	e002      	b.n	8007048 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8007042:	bf00      	nop
 8007044:	e000      	b.n	8007048 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8007046:	bf00      	nop
  }
}
 8007048:	3718      	adds	r7, #24
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b08a      	sub	sp, #40	@ 0x28
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800705c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	6a1b      	ldr	r3, [r3, #32]
 8007066:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	f003 030f 	and.w	r3, r3, #15
 800706e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	0c5b      	lsrs	r3, r3, #17
 8007074:	f003 030f 	and.w	r3, r3, #15
 8007078:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	091b      	lsrs	r3, r3, #4
 800707e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007082:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	2b02      	cmp	r3, #2
 8007088:	d004      	beq.n	8007094 <HCD_RXQLVL_IRQHandler+0x46>
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	2b05      	cmp	r3, #5
 800708e:	f000 80b6 	beq.w	80071fe <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8007092:	e0b7      	b.n	8007204 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	2b00      	cmp	r3, #0
 8007098:	f000 80b3 	beq.w	8007202 <HCD_RXQLVL_IRQHandler+0x1b4>
 800709c:	6879      	ldr	r1, [r7, #4]
 800709e:	69ba      	ldr	r2, [r7, #24]
 80070a0:	4613      	mov	r3, r2
 80070a2:	011b      	lsls	r3, r3, #4
 80070a4:	1a9b      	subs	r3, r3, r2
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	440b      	add	r3, r1
 80070aa:	332c      	adds	r3, #44	@ 0x2c
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	f000 80a7 	beq.w	8007202 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80070b4:	6879      	ldr	r1, [r7, #4]
 80070b6:	69ba      	ldr	r2, [r7, #24]
 80070b8:	4613      	mov	r3, r2
 80070ba:	011b      	lsls	r3, r3, #4
 80070bc:	1a9b      	subs	r3, r3, r2
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	440b      	add	r3, r1
 80070c2:	3338      	adds	r3, #56	@ 0x38
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	18d1      	adds	r1, r2, r3
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	69ba      	ldr	r2, [r7, #24]
 80070ce:	4613      	mov	r3, r2
 80070d0:	011b      	lsls	r3, r3, #4
 80070d2:	1a9b      	subs	r3, r3, r2
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	4403      	add	r3, r0
 80070d8:	3334      	adds	r3, #52	@ 0x34
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4299      	cmp	r1, r3
 80070de:	f200 8083 	bhi.w	80071e8 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6818      	ldr	r0, [r3, #0]
 80070e6:	6879      	ldr	r1, [r7, #4]
 80070e8:	69ba      	ldr	r2, [r7, #24]
 80070ea:	4613      	mov	r3, r2
 80070ec:	011b      	lsls	r3, r3, #4
 80070ee:	1a9b      	subs	r3, r3, r2
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	440b      	add	r3, r1
 80070f4:	332c      	adds	r3, #44	@ 0x2c
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	693a      	ldr	r2, [r7, #16]
 80070fa:	b292      	uxth	r2, r2
 80070fc:	4619      	mov	r1, r3
 80070fe:	f006 ff5d 	bl	800dfbc <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8007102:	6879      	ldr	r1, [r7, #4]
 8007104:	69ba      	ldr	r2, [r7, #24]
 8007106:	4613      	mov	r3, r2
 8007108:	011b      	lsls	r3, r3, #4
 800710a:	1a9b      	subs	r3, r3, r2
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	440b      	add	r3, r1
 8007110:	332c      	adds	r3, #44	@ 0x2c
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	18d1      	adds	r1, r2, r3
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	69ba      	ldr	r2, [r7, #24]
 800711c:	4613      	mov	r3, r2
 800711e:	011b      	lsls	r3, r3, #4
 8007120:	1a9b      	subs	r3, r3, r2
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	4403      	add	r3, r0
 8007126:	332c      	adds	r3, #44	@ 0x2c
 8007128:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800712a:	6879      	ldr	r1, [r7, #4]
 800712c:	69ba      	ldr	r2, [r7, #24]
 800712e:	4613      	mov	r3, r2
 8007130:	011b      	lsls	r3, r3, #4
 8007132:	1a9b      	subs	r3, r3, r2
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	440b      	add	r3, r1
 8007138:	3338      	adds	r3, #56	@ 0x38
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	18d1      	adds	r1, r2, r3
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	69ba      	ldr	r2, [r7, #24]
 8007144:	4613      	mov	r3, r2
 8007146:	011b      	lsls	r3, r3, #4
 8007148:	1a9b      	subs	r3, r3, r2
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	4403      	add	r3, r0
 800714e:	3338      	adds	r3, #56	@ 0x38
 8007150:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	015a      	lsls	r2, r3, #5
 8007156:	6a3b      	ldr	r3, [r7, #32]
 8007158:	4413      	add	r3, r2
 800715a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	0cdb      	lsrs	r3, r3, #19
 8007162:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007166:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8007168:	6879      	ldr	r1, [r7, #4]
 800716a:	69ba      	ldr	r2, [r7, #24]
 800716c:	4613      	mov	r3, r2
 800716e:	011b      	lsls	r3, r3, #4
 8007170:	1a9b      	subs	r3, r3, r2
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	440b      	add	r3, r1
 8007176:	3328      	adds	r3, #40	@ 0x28
 8007178:	881b      	ldrh	r3, [r3, #0]
 800717a:	461a      	mov	r2, r3
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	4293      	cmp	r3, r2
 8007180:	d13f      	bne.n	8007202 <HCD_RXQLVL_IRQHandler+0x1b4>
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d03c      	beq.n	8007202 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	015a      	lsls	r2, r3, #5
 800718c:	6a3b      	ldr	r3, [r7, #32]
 800718e:	4413      	add	r3, r2
 8007190:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800719e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80071a6:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	015a      	lsls	r2, r3, #5
 80071ac:	6a3b      	ldr	r3, [r7, #32]
 80071ae:	4413      	add	r3, r2
 80071b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071b4:	461a      	mov	r2, r3
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80071ba:	6879      	ldr	r1, [r7, #4]
 80071bc:	69ba      	ldr	r2, [r7, #24]
 80071be:	4613      	mov	r3, r2
 80071c0:	011b      	lsls	r3, r3, #4
 80071c2:	1a9b      	subs	r3, r3, r2
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	440b      	add	r3, r1
 80071c8:	333c      	adds	r3, #60	@ 0x3c
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	f083 0301 	eor.w	r3, r3, #1
 80071d0:	b2d8      	uxtb	r0, r3
 80071d2:	6879      	ldr	r1, [r7, #4]
 80071d4:	69ba      	ldr	r2, [r7, #24]
 80071d6:	4613      	mov	r3, r2
 80071d8:	011b      	lsls	r3, r3, #4
 80071da:	1a9b      	subs	r3, r3, r2
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	440b      	add	r3, r1
 80071e0:	333c      	adds	r3, #60	@ 0x3c
 80071e2:	4602      	mov	r2, r0
 80071e4:	701a      	strb	r2, [r3, #0]
      break;
 80071e6:	e00c      	b.n	8007202 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80071e8:	6879      	ldr	r1, [r7, #4]
 80071ea:	69ba      	ldr	r2, [r7, #24]
 80071ec:	4613      	mov	r3, r2
 80071ee:	011b      	lsls	r3, r3, #4
 80071f0:	1a9b      	subs	r3, r3, r2
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	440b      	add	r3, r1
 80071f6:	334c      	adds	r3, #76	@ 0x4c
 80071f8:	2204      	movs	r2, #4
 80071fa:	701a      	strb	r2, [r3, #0]
      break;
 80071fc:	e001      	b.n	8007202 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80071fe:	bf00      	nop
 8007200:	e000      	b.n	8007204 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8007202:	bf00      	nop
  }
}
 8007204:	bf00      	nop
 8007206:	3728      	adds	r7, #40	@ 0x28
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b086      	sub	sp, #24
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007238:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f003 0302 	and.w	r3, r3, #2
 8007240:	2b02      	cmp	r3, #2
 8007242:	d10b      	bne.n	800725c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f003 0301 	and.w	r3, r3, #1
 800724a:	2b01      	cmp	r3, #1
 800724c:	d102      	bne.n	8007254 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f00d f858 	bl	8014304 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	f043 0302 	orr.w	r3, r3, #2
 800725a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f003 0308 	and.w	r3, r3, #8
 8007262:	2b08      	cmp	r3, #8
 8007264:	d132      	bne.n	80072cc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	f043 0308 	orr.w	r3, r3, #8
 800726c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f003 0304 	and.w	r3, r3, #4
 8007274:	2b04      	cmp	r3, #4
 8007276:	d126      	bne.n	80072c6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	7a5b      	ldrb	r3, [r3, #9]
 800727c:	2b02      	cmp	r3, #2
 800727e:	d113      	bne.n	80072a8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8007286:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800728a:	d106      	bne.n	800729a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2102      	movs	r1, #2
 8007292:	4618      	mov	r0, r3
 8007294:	f007 f816 	bl	800e2c4 <USB_InitFSLSPClkSel>
 8007298:	e011      	b.n	80072be <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2101      	movs	r1, #1
 80072a0:	4618      	mov	r0, r3
 80072a2:	f007 f80f 	bl	800e2c4 <USB_InitFSLSPClkSel>
 80072a6:	e00a      	b.n	80072be <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	79db      	ldrb	r3, [r3, #7]
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d106      	bne.n	80072be <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80072b6:	461a      	mov	r2, r3
 80072b8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80072bc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f00d f84e 	bl	8014360 <HAL_HCD_PortEnabled_Callback>
 80072c4:	e002      	b.n	80072cc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f00d f858 	bl	801437c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f003 0320 	and.w	r3, r3, #32
 80072d2:	2b20      	cmp	r3, #32
 80072d4:	d103      	bne.n	80072de <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	f043 0320 	orr.w	r3, r3, #32
 80072dc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80072e4:	461a      	mov	r2, r3
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	6013      	str	r3, [r2, #0]
}
 80072ea:	bf00      	nop
 80072ec:	3718      	adds	r7, #24
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
	...

080072f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d101      	bne.n	8007306 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e08b      	b.n	800741e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800730c:	b2db      	uxtb	r3, r3
 800730e:	2b00      	cmp	r3, #0
 8007310:	d106      	bne.n	8007320 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f7fa fec8 	bl	80020b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2224      	movs	r2, #36	@ 0x24
 8007324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f022 0201 	bic.w	r2, r2, #1
 8007336:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	685a      	ldr	r2, [r3, #4]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007344:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	689a      	ldr	r2, [r3, #8]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007354:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	2b01      	cmp	r3, #1
 800735c:	d107      	bne.n	800736e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	689a      	ldr	r2, [r3, #8]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800736a:	609a      	str	r2, [r3, #8]
 800736c:	e006      	b.n	800737c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	689a      	ldr	r2, [r3, #8]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800737a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	2b02      	cmp	r3, #2
 8007382:	d108      	bne.n	8007396 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	685a      	ldr	r2, [r3, #4]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007392:	605a      	str	r2, [r3, #4]
 8007394:	e007      	b.n	80073a6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	685a      	ldr	r2, [r3, #4]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80073a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	6859      	ldr	r1, [r3, #4]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	4b1d      	ldr	r3, [pc, #116]	@ (8007428 <HAL_I2C_Init+0x134>)
 80073b2:	430b      	orrs	r3, r1
 80073b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	68da      	ldr	r2, [r3, #12]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80073c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	691a      	ldr	r2, [r3, #16]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	695b      	ldr	r3, [r3, #20]
 80073ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	699b      	ldr	r3, [r3, #24]
 80073d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	430a      	orrs	r2, r1
 80073de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	69d9      	ldr	r1, [r3, #28]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a1a      	ldr	r2, [r3, #32]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	430a      	orrs	r2, r1
 80073ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f042 0201 	orr.w	r2, r2, #1
 80073fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2220      	movs	r2, #32
 800740a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3708      	adds	r7, #8
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	02008000 	.word	0x02008000

0800742c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800743c:	b2db      	uxtb	r3, r3
 800743e:	2b20      	cmp	r3, #32
 8007440:	d138      	bne.n	80074b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007448:	2b01      	cmp	r3, #1
 800744a:	d101      	bne.n	8007450 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800744c:	2302      	movs	r3, #2
 800744e:	e032      	b.n	80074b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2224      	movs	r2, #36	@ 0x24
 800745c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f022 0201 	bic.w	r2, r2, #1
 800746e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800747e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	6819      	ldr	r1, [r3, #0]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	683a      	ldr	r2, [r7, #0]
 800748c:	430a      	orrs	r2, r1
 800748e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f042 0201 	orr.w	r2, r2, #1
 800749e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2220      	movs	r2, #32
 80074a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80074b0:	2300      	movs	r3, #0
 80074b2:	e000      	b.n	80074b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80074b4:	2302      	movs	r3, #2
  }
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	370c      	adds	r7, #12
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr

080074c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80074c2:	b480      	push	{r7}
 80074c4:	b085      	sub	sp, #20
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
 80074ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	2b20      	cmp	r3, #32
 80074d6:	d139      	bne.n	800754c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d101      	bne.n	80074e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80074e2:	2302      	movs	r3, #2
 80074e4:	e033      	b.n	800754e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2201      	movs	r2, #1
 80074ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2224      	movs	r2, #36	@ 0x24
 80074f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f022 0201 	bic.w	r2, r2, #1
 8007504:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007514:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	021b      	lsls	r3, r3, #8
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	4313      	orrs	r3, r2
 800751e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f042 0201 	orr.w	r2, r2, #1
 8007536:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2220      	movs	r2, #32
 800753c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007548:	2300      	movs	r3, #0
 800754a:	e000      	b.n	800754e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800754c:	2302      	movs	r3, #2
  }
}
 800754e:	4618      	mov	r0, r3
 8007550:	3714      	adds	r7, #20
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr
	...

0800755c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d101      	bne.n	800756e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	e0bf      	b.n	80076ee <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8007574:	b2db      	uxtb	r3, r3
 8007576:	2b00      	cmp	r3, #0
 8007578:	d106      	bne.n	8007588 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f7fa fe3c 	bl	8002200 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2202      	movs	r2, #2
 800758c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	699a      	ldr	r2, [r3, #24]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800759e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	6999      	ldr	r1, [r3, #24]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	685a      	ldr	r2, [r3, #4]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80075b4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	691b      	ldr	r3, [r3, #16]
 80075ba:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	430a      	orrs	r2, r1
 80075c2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	6899      	ldr	r1, [r3, #8]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	4b4a      	ldr	r3, [pc, #296]	@ (80076f8 <HAL_LTDC_Init+0x19c>)
 80075d0:	400b      	ands	r3, r1
 80075d2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	695b      	ldr	r3, [r3, #20]
 80075d8:	041b      	lsls	r3, r3, #16
 80075da:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	6899      	ldr	r1, [r3, #8]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	699a      	ldr	r2, [r3, #24]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	431a      	orrs	r2, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	430a      	orrs	r2, r1
 80075f0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68d9      	ldr	r1, [r3, #12]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	4b3e      	ldr	r3, [pc, #248]	@ (80076f8 <HAL_LTDC_Init+0x19c>)
 80075fe:	400b      	ands	r3, r1
 8007600:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	69db      	ldr	r3, [r3, #28]
 8007606:	041b      	lsls	r3, r3, #16
 8007608:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	68d9      	ldr	r1, [r3, #12]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6a1a      	ldr	r2, [r3, #32]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	431a      	orrs	r2, r3
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	430a      	orrs	r2, r1
 800761e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	6919      	ldr	r1, [r3, #16]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	4b33      	ldr	r3, [pc, #204]	@ (80076f8 <HAL_LTDC_Init+0x19c>)
 800762c:	400b      	ands	r3, r1
 800762e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007634:	041b      	lsls	r3, r3, #16
 8007636:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	6919      	ldr	r1, [r3, #16]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	431a      	orrs	r2, r3
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	430a      	orrs	r2, r1
 800764c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	6959      	ldr	r1, [r3, #20]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	4b27      	ldr	r3, [pc, #156]	@ (80076f8 <HAL_LTDC_Init+0x19c>)
 800765a:	400b      	ands	r3, r1
 800765c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007662:	041b      	lsls	r3, r3, #16
 8007664:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	6959      	ldr	r1, [r3, #20]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	431a      	orrs	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	430a      	orrs	r2, r1
 800767a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007682:	021b      	lsls	r3, r3, #8
 8007684:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800768c:	041b      	lsls	r3, r3, #16
 800768e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800769e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80076a6:	68ba      	ldr	r2, [r7, #8]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80076b2:	431a      	orrs	r2, r3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	430a      	orrs	r2, r1
 80076ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f042 0206 	orr.w	r2, r2, #6
 80076ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	699a      	ldr	r2, [r3, #24]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f042 0201 	orr.w	r2, r2, #1
 80076da:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	f000f800 	.word	0xf000f800

080076fc <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800770a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007712:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f003 0304 	and.w	r3, r3, #4
 800771a:	2b00      	cmp	r3, #0
 800771c:	d023      	beq.n	8007766 <HAL_LTDC_IRQHandler+0x6a>
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	f003 0304 	and.w	r3, r3, #4
 8007724:	2b00      	cmp	r3, #0
 8007726:	d01e      	beq.n	8007766 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f022 0204 	bic.w	r2, r2, #4
 8007736:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2204      	movs	r2, #4
 800773e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007746:	f043 0201 	orr.w	r2, r3, #1
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2204      	movs	r2, #4
 8007754:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 f86f 	bl	8007844 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f003 0302 	and.w	r3, r3, #2
 800776c:	2b00      	cmp	r3, #0
 800776e:	d023      	beq.n	80077b8 <HAL_LTDC_IRQHandler+0xbc>
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	f003 0302 	and.w	r3, r3, #2
 8007776:	2b00      	cmp	r3, #0
 8007778:	d01e      	beq.n	80077b8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f022 0202 	bic.w	r2, r2, #2
 8007788:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	2202      	movs	r2, #2
 8007790:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007798:	f043 0202 	orr.w	r2, r3, #2
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2204      	movs	r2, #4
 80077a6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f846 	bl	8007844 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f003 0301 	and.w	r3, r3, #1
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d01b      	beq.n	80077fa <HAL_LTDC_IRQHandler+0xfe>
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	f003 0301 	and.w	r3, r3, #1
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d016      	beq.n	80077fa <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f022 0201 	bic.w	r2, r2, #1
 80077da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	2201      	movs	r2, #1
 80077e2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 f82f 	bl	8007858 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f003 0308 	and.w	r3, r3, #8
 8007800:	2b00      	cmp	r3, #0
 8007802:	d01b      	beq.n	800783c <HAL_LTDC_IRQHandler+0x140>
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	f003 0308 	and.w	r3, r3, #8
 800780a:	2b00      	cmp	r3, #0
 800780c:	d016      	beq.n	800783c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f022 0208 	bic.w	r2, r2, #8
 800781c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2208      	movs	r2, #8
 8007824:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2201      	movs	r2, #1
 800782a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 f818 	bl	800786c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800783c:	bf00      	nop
 800783e:	3710      	adds	r7, #16
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800784c:	bf00      	nop
 800784e:	370c      	adds	r7, #12
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007858:	b480      	push	{r7}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007860:	bf00      	nop
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007874:	bf00      	nop
 8007876:	370c      	adds	r7, #12
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007880:	b5b0      	push	{r4, r5, r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8007892:	2b01      	cmp	r3, #1
 8007894:	d101      	bne.n	800789a <HAL_LTDC_ConfigLayer+0x1a>
 8007896:	2302      	movs	r3, #2
 8007898:	e02c      	b.n	80078f4 <HAL_LTDC_ConfigLayer+0x74>
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2201      	movs	r2, #1
 800789e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2202      	movs	r2, #2
 80078a6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2134      	movs	r1, #52	@ 0x34
 80078b0:	fb01 f303 	mul.w	r3, r1, r3
 80078b4:	4413      	add	r3, r2
 80078b6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	4614      	mov	r4, r2
 80078be:	461d      	mov	r5, r3
 80078c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80078c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80078c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80078c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80078c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80078ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80078cc:	682b      	ldr	r3, [r5, #0]
 80078ce:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	68b9      	ldr	r1, [r7, #8]
 80078d4:	68f8      	ldr	r0, [r7, #12]
 80078d6:	f000 f811 	bl	80078fc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2201      	movs	r2, #1
 80078e0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2201      	movs	r2, #1
 80078e6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80078f2:	2300      	movs	r3, #0
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3710      	adds	r7, #16
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bdb0      	pop	{r4, r5, r7, pc}

080078fc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b089      	sub	sp, #36	@ 0x24
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	685a      	ldr	r2, [r3, #4]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	0c1b      	lsrs	r3, r3, #16
 8007914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007918:	4413      	add	r3, r2
 800791a:	041b      	lsls	r3, r3, #16
 800791c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	461a      	mov	r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	01db      	lsls	r3, r3, #7
 8007928:	4413      	add	r3, r2
 800792a:	3384      	adds	r3, #132	@ 0x84
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	68fa      	ldr	r2, [r7, #12]
 8007930:	6812      	ldr	r2, [r2, #0]
 8007932:	4611      	mov	r1, r2
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	01d2      	lsls	r2, r2, #7
 8007938:	440a      	add	r2, r1
 800793a:	3284      	adds	r2, #132	@ 0x84
 800793c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8007940:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	0c1b      	lsrs	r3, r3, #16
 800794e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007952:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007954:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4619      	mov	r1, r3
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	01db      	lsls	r3, r3, #7
 8007960:	440b      	add	r3, r1
 8007962:	3384      	adds	r3, #132	@ 0x84
 8007964:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800796a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	68da      	ldr	r2, [r3, #12]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800797a:	4413      	add	r3, r2
 800797c:	041b      	lsls	r3, r3, #16
 800797e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	461a      	mov	r2, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	01db      	lsls	r3, r3, #7
 800798a:	4413      	add	r3, r2
 800798c:	3384      	adds	r3, #132	@ 0x84
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	68fa      	ldr	r2, [r7, #12]
 8007992:	6812      	ldr	r2, [r2, #0]
 8007994:	4611      	mov	r1, r2
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	01d2      	lsls	r2, r2, #7
 800799a:	440a      	add	r2, r1
 800799c:	3284      	adds	r2, #132	@ 0x84
 800799e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80079a2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	689a      	ldr	r2, [r3, #8]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80079b2:	4413      	add	r3, r2
 80079b4:	1c5a      	adds	r2, r3, #1
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4619      	mov	r1, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	01db      	lsls	r3, r3, #7
 80079c0:	440b      	add	r3, r1
 80079c2:	3384      	adds	r3, #132	@ 0x84
 80079c4:	4619      	mov	r1, r3
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	4313      	orrs	r3, r2
 80079ca:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	461a      	mov	r2, r3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	01db      	lsls	r3, r3, #7
 80079d6:	4413      	add	r3, r2
 80079d8:	3384      	adds	r3, #132	@ 0x84
 80079da:	691b      	ldr	r3, [r3, #16]
 80079dc:	68fa      	ldr	r2, [r7, #12]
 80079de:	6812      	ldr	r2, [r2, #0]
 80079e0:	4611      	mov	r1, r2
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	01d2      	lsls	r2, r2, #7
 80079e6:	440a      	add	r2, r1
 80079e8:	3284      	adds	r2, #132	@ 0x84
 80079ea:	f023 0307 	bic.w	r3, r3, #7
 80079ee:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	461a      	mov	r2, r3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	01db      	lsls	r3, r3, #7
 80079fa:	4413      	add	r3, r2
 80079fc:	3384      	adds	r3, #132	@ 0x84
 80079fe:	461a      	mov	r2, r3
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	691b      	ldr	r3, [r3, #16]
 8007a04:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007a0c:	021b      	lsls	r3, r3, #8
 8007a0e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007a16:	041b      	lsls	r3, r3, #16
 8007a18:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	699b      	ldr	r3, [r3, #24]
 8007a1e:	061b      	lsls	r3, r3, #24
 8007a20:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	461a      	mov	r2, r3
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	01db      	lsls	r3, r3, #7
 8007a2c:	4413      	add	r3, r2
 8007a2e:	3384      	adds	r3, #132	@ 0x84
 8007a30:	699b      	ldr	r3, [r3, #24]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	461a      	mov	r2, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	01db      	lsls	r3, r3, #7
 8007a3c:	4413      	add	r3, r2
 8007a3e:	3384      	adds	r3, #132	@ 0x84
 8007a40:	461a      	mov	r2, r3
 8007a42:	2300      	movs	r3, #0
 8007a44:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	69fb      	ldr	r3, [r7, #28]
 8007a50:	431a      	orrs	r2, r3
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	431a      	orrs	r2, r3
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	01db      	lsls	r3, r3, #7
 8007a60:	440b      	add	r3, r1
 8007a62:	3384      	adds	r3, #132	@ 0x84
 8007a64:	4619      	mov	r1, r3
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	461a      	mov	r2, r3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	01db      	lsls	r3, r3, #7
 8007a76:	4413      	add	r3, r2
 8007a78:	3384      	adds	r3, #132	@ 0x84
 8007a7a:	695b      	ldr	r3, [r3, #20]
 8007a7c:	68fa      	ldr	r2, [r7, #12]
 8007a7e:	6812      	ldr	r2, [r2, #0]
 8007a80:	4611      	mov	r1, r2
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	01d2      	lsls	r2, r2, #7
 8007a86:	440a      	add	r2, r1
 8007a88:	3284      	adds	r2, #132	@ 0x84
 8007a8a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007a8e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	461a      	mov	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	01db      	lsls	r3, r3, #7
 8007a9a:	4413      	add	r3, r2
 8007a9c:	3384      	adds	r3, #132	@ 0x84
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	695b      	ldr	r3, [r3, #20]
 8007aa4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	461a      	mov	r2, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	01db      	lsls	r3, r3, #7
 8007ab0:	4413      	add	r3, r2
 8007ab2:	3384      	adds	r3, #132	@ 0x84
 8007ab4:	69da      	ldr	r2, [r3, #28]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4619      	mov	r1, r3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	01db      	lsls	r3, r3, #7
 8007ac0:	440b      	add	r3, r1
 8007ac2:	3384      	adds	r3, #132	@ 0x84
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	4b58      	ldr	r3, [pc, #352]	@ (8007c28 <LTDC_SetConfig+0x32c>)
 8007ac8:	4013      	ands	r3, r2
 8007aca:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	69da      	ldr	r2, [r3, #28]
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	6a1b      	ldr	r3, [r3, #32]
 8007ad4:	68f9      	ldr	r1, [r7, #12]
 8007ad6:	6809      	ldr	r1, [r1, #0]
 8007ad8:	4608      	mov	r0, r1
 8007ada:	6879      	ldr	r1, [r7, #4]
 8007adc:	01c9      	lsls	r1, r1, #7
 8007ade:	4401      	add	r1, r0
 8007ae0:	3184      	adds	r1, #132	@ 0x84
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	461a      	mov	r2, r3
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	01db      	lsls	r3, r3, #7
 8007af0:	4413      	add	r3, r2
 8007af2:	3384      	adds	r3, #132	@ 0x84
 8007af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	461a      	mov	r2, r3
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	01db      	lsls	r3, r3, #7
 8007b00:	4413      	add	r3, r2
 8007b02:	3384      	adds	r3, #132	@ 0x84
 8007b04:	461a      	mov	r2, r3
 8007b06:	2300      	movs	r3, #0
 8007b08:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	461a      	mov	r2, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	01db      	lsls	r3, r3, #7
 8007b14:	4413      	add	r3, r2
 8007b16:	3384      	adds	r3, #132	@ 0x84
 8007b18:	461a      	mov	r2, r3
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b1e:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d102      	bne.n	8007b2e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007b28:	2304      	movs	r3, #4
 8007b2a:	61fb      	str	r3, [r7, #28]
 8007b2c:	e01b      	b.n	8007b66 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	691b      	ldr	r3, [r3, #16]
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d102      	bne.n	8007b3c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8007b36:	2303      	movs	r3, #3
 8007b38:	61fb      	str	r3, [r7, #28]
 8007b3a:	e014      	b.n	8007b66 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	691b      	ldr	r3, [r3, #16]
 8007b40:	2b04      	cmp	r3, #4
 8007b42:	d00b      	beq.n	8007b5c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d007      	beq.n	8007b5c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007b50:	2b03      	cmp	r3, #3
 8007b52:	d003      	beq.n	8007b5c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007b58:	2b07      	cmp	r3, #7
 8007b5a:	d102      	bne.n	8007b62 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007b5c:	2302      	movs	r3, #2
 8007b5e:	61fb      	str	r3, [r7, #28]
 8007b60:	e001      	b.n	8007b66 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8007b62:	2301      	movs	r3, #1
 8007b64:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	01db      	lsls	r3, r3, #7
 8007b70:	4413      	add	r3, r2
 8007b72:	3384      	adds	r3, #132	@ 0x84
 8007b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b76:	68fa      	ldr	r2, [r7, #12]
 8007b78:	6812      	ldr	r2, [r2, #0]
 8007b7a:	4611      	mov	r1, r2
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	01d2      	lsls	r2, r2, #7
 8007b80:	440a      	add	r2, r1
 8007b82:	3284      	adds	r2, #132	@ 0x84
 8007b84:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8007b88:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b8e:	69fa      	ldr	r2, [r7, #28]
 8007b90:	fb02 f303 	mul.w	r3, r2, r3
 8007b94:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	6859      	ldr	r1, [r3, #4]
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	1acb      	subs	r3, r1, r3
 8007ba0:	69f9      	ldr	r1, [r7, #28]
 8007ba2:	fb01 f303 	mul.w	r3, r1, r3
 8007ba6:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007ba8:	68f9      	ldr	r1, [r7, #12]
 8007baa:	6809      	ldr	r1, [r1, #0]
 8007bac:	4608      	mov	r0, r1
 8007bae:	6879      	ldr	r1, [r7, #4]
 8007bb0:	01c9      	lsls	r1, r1, #7
 8007bb2:	4401      	add	r1, r0
 8007bb4:	3184      	adds	r1, #132	@ 0x84
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	01db      	lsls	r3, r3, #7
 8007bc4:	4413      	add	r3, r2
 8007bc6:	3384      	adds	r3, #132	@ 0x84
 8007bc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4619      	mov	r1, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	01db      	lsls	r3, r3, #7
 8007bd4:	440b      	add	r3, r1
 8007bd6:	3384      	adds	r3, #132	@ 0x84
 8007bd8:	4619      	mov	r1, r3
 8007bda:	4b14      	ldr	r3, [pc, #80]	@ (8007c2c <LTDC_SetConfig+0x330>)
 8007bdc:	4013      	ands	r3, r2
 8007bde:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	461a      	mov	r2, r3
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	01db      	lsls	r3, r3, #7
 8007bea:	4413      	add	r3, r2
 8007bec:	3384      	adds	r3, #132	@ 0x84
 8007bee:	461a      	mov	r2, r3
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bf4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	01db      	lsls	r3, r3, #7
 8007c00:	4413      	add	r3, r2
 8007c02:	3384      	adds	r3, #132	@ 0x84
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	68fa      	ldr	r2, [r7, #12]
 8007c08:	6812      	ldr	r2, [r2, #0]
 8007c0a:	4611      	mov	r1, r2
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	01d2      	lsls	r2, r2, #7
 8007c10:	440a      	add	r2, r1
 8007c12:	3284      	adds	r2, #132	@ 0x84
 8007c14:	f043 0301 	orr.w	r3, r3, #1
 8007c18:	6013      	str	r3, [r2, #0]
}
 8007c1a:	bf00      	nop
 8007c1c:	3724      	adds	r7, #36	@ 0x24
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	fffff8f8 	.word	0xfffff8f8
 8007c2c:	fffff800 	.word	0xfffff800

08007c30 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007c30:	b480      	push	{r7}
 8007c32:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c34:	4b05      	ldr	r3, [pc, #20]	@ (8007c4c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a04      	ldr	r2, [pc, #16]	@ (8007c4c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007c3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c3e:	6013      	str	r3, [r2, #0]
}
 8007c40:	bf00      	nop
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	40007000 	.word	0x40007000

08007c50 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b082      	sub	sp, #8
 8007c54:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007c56:	2300      	movs	r3, #0
 8007c58:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007c5a:	4b23      	ldr	r3, [pc, #140]	@ (8007ce8 <HAL_PWREx_EnableOverDrive+0x98>)
 8007c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c5e:	4a22      	ldr	r2, [pc, #136]	@ (8007ce8 <HAL_PWREx_EnableOverDrive+0x98>)
 8007c60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c64:	6413      	str	r3, [r2, #64]	@ 0x40
 8007c66:	4b20      	ldr	r3, [pc, #128]	@ (8007ce8 <HAL_PWREx_EnableOverDrive+0x98>)
 8007c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c6e:	603b      	str	r3, [r7, #0]
 8007c70:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007c72:	4b1e      	ldr	r3, [pc, #120]	@ (8007cec <HAL_PWREx_EnableOverDrive+0x9c>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a1d      	ldr	r2, [pc, #116]	@ (8007cec <HAL_PWREx_EnableOverDrive+0x9c>)
 8007c78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c7c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007c7e:	f7fb fa71 	bl	8003164 <HAL_GetTick>
 8007c82:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007c84:	e009      	b.n	8007c9a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007c86:	f7fb fa6d 	bl	8003164 <HAL_GetTick>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	1ad3      	subs	r3, r2, r3
 8007c90:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007c94:	d901      	bls.n	8007c9a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007c96:	2303      	movs	r3, #3
 8007c98:	e022      	b.n	8007ce0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007c9a:	4b14      	ldr	r3, [pc, #80]	@ (8007cec <HAL_PWREx_EnableOverDrive+0x9c>)
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ca2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ca6:	d1ee      	bne.n	8007c86 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007ca8:	4b10      	ldr	r3, [pc, #64]	@ (8007cec <HAL_PWREx_EnableOverDrive+0x9c>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a0f      	ldr	r2, [pc, #60]	@ (8007cec <HAL_PWREx_EnableOverDrive+0x9c>)
 8007cae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007cb2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007cb4:	f7fb fa56 	bl	8003164 <HAL_GetTick>
 8007cb8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007cba:	e009      	b.n	8007cd0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007cbc:	f7fb fa52 	bl	8003164 <HAL_GetTick>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	1ad3      	subs	r3, r2, r3
 8007cc6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007cca:	d901      	bls.n	8007cd0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007ccc:	2303      	movs	r3, #3
 8007cce:	e007      	b.n	8007ce0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007cd0:	4b06      	ldr	r3, [pc, #24]	@ (8007cec <HAL_PWREx_EnableOverDrive+0x9c>)
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cdc:	d1ee      	bne.n	8007cbc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3708      	adds	r7, #8
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	40023800 	.word	0x40023800
 8007cec:	40007000 	.word	0x40007000

08007cf0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b086      	sub	sp, #24
 8007cf4:	af02      	add	r7, sp, #8
 8007cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007cf8:	f7fb fa34 	bl	8003164 <HAL_GetTick>
 8007cfc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d101      	bne.n	8007d08 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	e067      	b.n	8007dd8 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d10b      	bne.n	8007d2c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f7fa fb37 	bl	8002390 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8007d22:	f241 3188 	movw	r1, #5000	@ 0x1388
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 f85e 	bl	8007de8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	021a      	lsls	r2, r3, #8
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	430a      	orrs	r2, r1
 8007d44:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d4a:	9300      	str	r3, [sp, #0]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	2120      	movs	r1, #32
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 f856 	bl	8007e04 <QSPI_WaitFlagStateUntilTimeout>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007d5c:	7afb      	ldrb	r3, [r7, #11]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d135      	bne.n	8007dce <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	4b1d      	ldr	r3, [pc, #116]	@ (8007de0 <HAL_QSPI_Init+0xf0>)
 8007d6a:	4013      	ands	r3, r2
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	6852      	ldr	r2, [r2, #4]
 8007d70:	0611      	lsls	r1, r2, #24
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	68d2      	ldr	r2, [r2, #12]
 8007d76:	4311      	orrs	r1, r2
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	69d2      	ldr	r2, [r2, #28]
 8007d7c:	4311      	orrs	r1, r2
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	6a12      	ldr	r2, [r2, #32]
 8007d82:	4311      	orrs	r1, r2
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	6812      	ldr	r2, [r2, #0]
 8007d88:	430b      	orrs	r3, r1
 8007d8a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	685a      	ldr	r2, [r3, #4]
 8007d92:	4b14      	ldr	r3, [pc, #80]	@ (8007de4 <HAL_QSPI_Init+0xf4>)
 8007d94:	4013      	ands	r3, r2
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	6912      	ldr	r2, [r2, #16]
 8007d9a:	0411      	lsls	r1, r2, #16
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	6952      	ldr	r2, [r2, #20]
 8007da0:	4311      	orrs	r1, r2
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	6992      	ldr	r2, [r2, #24]
 8007da6:	4311      	orrs	r1, r2
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	6812      	ldr	r2, [r2, #0]
 8007dac:	430b      	orrs	r3, r1
 8007dae:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f042 0201 	orr.w	r2, r2, #1
 8007dbe:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8007dd6:	7afb      	ldrb	r3, [r7, #11]
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3710      	adds	r7, #16
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	00ffff2f 	.word	0x00ffff2f
 8007de4:	ffe0f8fe 	.word	0xffe0f8fe

08007de8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	683a      	ldr	r2, [r7, #0]
 8007df6:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8007df8:	bf00      	nop
 8007dfa:	370c      	adds	r7, #12
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	603b      	str	r3, [r7, #0]
 8007e10:	4613      	mov	r3, r2
 8007e12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007e14:	e01a      	b.n	8007e4c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e1c:	d016      	beq.n	8007e4c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e1e:	f7fb f9a1 	bl	8003164 <HAL_GetTick>
 8007e22:	4602      	mov	r2, r0
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	1ad3      	subs	r3, r2, r3
 8007e28:	69ba      	ldr	r2, [r7, #24]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d302      	bcc.n	8007e34 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d10b      	bne.n	8007e4c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2204      	movs	r2, #4
 8007e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e40:	f043 0201 	orr.w	r2, r3, #1
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e00e      	b.n	8007e6a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	689a      	ldr	r2, [r3, #8]
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	4013      	ands	r3, r2
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	bf14      	ite	ne
 8007e5a:	2301      	movne	r3, #1
 8007e5c:	2300      	moveq	r3, #0
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	461a      	mov	r2, r3
 8007e62:	79fb      	ldrb	r3, [r7, #7]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d1d6      	bne.n	8007e16 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3710      	adds	r7, #16
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
	...

08007e74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b086      	sub	sp, #24
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d101      	bne.n	8007e8a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	e291      	b.n	80083ae <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f003 0301 	and.w	r3, r3, #1
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	f000 8087 	beq.w	8007fa6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007e98:	4b96      	ldr	r3, [pc, #600]	@ (80080f4 <HAL_RCC_OscConfig+0x280>)
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	f003 030c 	and.w	r3, r3, #12
 8007ea0:	2b04      	cmp	r3, #4
 8007ea2:	d00c      	beq.n	8007ebe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007ea4:	4b93      	ldr	r3, [pc, #588]	@ (80080f4 <HAL_RCC_OscConfig+0x280>)
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	f003 030c 	and.w	r3, r3, #12
 8007eac:	2b08      	cmp	r3, #8
 8007eae:	d112      	bne.n	8007ed6 <HAL_RCC_OscConfig+0x62>
 8007eb0:	4b90      	ldr	r3, [pc, #576]	@ (80080f4 <HAL_RCC_OscConfig+0x280>)
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007eb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ebc:	d10b      	bne.n	8007ed6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ebe:	4b8d      	ldr	r3, [pc, #564]	@ (80080f4 <HAL_RCC_OscConfig+0x280>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d06c      	beq.n	8007fa4 <HAL_RCC_OscConfig+0x130>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d168      	bne.n	8007fa4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e26b      	b.n	80083ae <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ede:	d106      	bne.n	8007eee <HAL_RCC_OscConfig+0x7a>
 8007ee0:	4b84      	ldr	r3, [pc, #528]	@ (80080f4 <HAL_RCC_OscConfig+0x280>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a83      	ldr	r2, [pc, #524]	@ (80080f4 <HAL_RCC_OscConfig+0x280>)
 8007ee6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007eea:	6013      	str	r3, [r2, #0]
 8007eec:	e02e      	b.n	8007f4c <HAL_RCC_OscConfig+0xd8>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d10c      	bne.n	8007f10 <HAL_RCC_OscConfig+0x9c>
 8007ef6:	4b7f      	ldr	r3, [pc, #508]	@ (80080f4 <HAL_RCC_OscConfig+0x280>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a7e      	ldr	r2, [pc, #504]	@ (80080f4 <HAL_RCC_OscConfig+0x280>)
 8007efc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f00:	6013      	str	r3, [r2, #0]
 8007f02:	4b7c      	ldr	r3, [pc, #496]	@ (80080f4 <HAL_RCC_OscConfig+0x280>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a7b      	ldr	r2, [pc, #492]	@ (80080f4 <HAL_RCC_OscConfig+0x280>)
 8007f08:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007f0c:	6013      	str	r3, [r2, #0]
 8007f0e:	e01d      	b.n	8007f4c <HAL_RCC_OscConfig+0xd8>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007f18:	d10c      	bne.n	8007f34 <HAL_RCC_OscConfig+0xc0>
 8007f1a:	4b76      	ldr	r3, [pc, #472]	@ (80080f4 <HAL_RCC_OscConfig+0x280>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a75      	ldr	r2, [pc, #468]	@ (80080f4 <HAL_RCC_OscConfig+0x280>)
 8007f20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007f24:	6013      	str	r3, [r2, #0]
 8007f26:	4b73      	ldr	r3, [pc, #460]	@ (80080f4 <HAL_RCC_OscConfig+0x280>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a72      	ldr	r2, [pc, #456]	@ (80080f4 <HAL_RCC_OscConfig+0x280>)
 8007f2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f30:	6013      	str	r3, [r2, #0]
 8007f32:	e00b      	b.n	8007f4c <HAL_RCC_OscConfig+0xd8>
 8007f34:	4b6f      	ldr	r3, [pc, #444]	@ (80080f4 <HAL_RCC_OscConfig+0x280>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a6e      	ldr	r2, [pc, #440]	@ (80080f4 <HAL_RCC_OscConfig+0x280>)
 8007f3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f3e:	6013      	str	r3, [r2, #0]
 8007f40:	4b6c      	ldr	r3, [pc, #432]	@ (80080f4 <HAL_RCC_OscConfig+0x280>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a6b      	ldr	r2, [pc, #428]	@ (80080f4 <HAL_RCC_OscConfig+0x280>)
 8007f46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007f4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d013      	beq.n	8007f7c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f54:	f7fb f906 	bl	8003164 <HAL_GetTick>
 8007f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f5a:	e008      	b.n	8007f6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f5c:	f7fb f902 	bl	8003164 <HAL_GetTick>
 8007f60:	4602      	mov	r2, r0
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	1ad3      	subs	r3, r2, r3
 8007f66:	2b64      	cmp	r3, #100	@ 0x64
 8007f68:	d901      	bls.n	8007f6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007f6a:	2303      	movs	r3, #3
 8007f6c:	e21f      	b.n	80083ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f6e:	4b61      	ldr	r3, [pc, #388]	@ (80080f4 <HAL_RCC_OscConfig+0x280>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d0f0      	beq.n	8007f5c <HAL_RCC_OscConfig+0xe8>
 8007f7a:	e014      	b.n	8007fa6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f7c:	f7fb f8f2 	bl	8003164 <HAL_GetTick>
 8007f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f82:	e008      	b.n	8007f96 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f84:	f7fb f8ee 	bl	8003164 <HAL_GetTick>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	1ad3      	subs	r3, r2, r3
 8007f8e:	2b64      	cmp	r3, #100	@ 0x64
 8007f90:	d901      	bls.n	8007f96 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007f92:	2303      	movs	r3, #3
 8007f94:	e20b      	b.n	80083ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f96:	4b57      	ldr	r3, [pc, #348]	@ (80080f4 <HAL_RCC_OscConfig+0x280>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1f0      	bne.n	8007f84 <HAL_RCC_OscConfig+0x110>
 8007fa2:	e000      	b.n	8007fa6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f003 0302 	and.w	r3, r3, #2
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d069      	beq.n	8008086 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007fb2:	4b50      	ldr	r3, [pc, #320]	@ (80080f4 <HAL_RCC_OscConfig+0x280>)
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	f003 030c 	and.w	r3, r3, #12
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00b      	beq.n	8007fd6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007fbe:	4b4d      	ldr	r3, [pc, #308]	@ (80080f4 <HAL_RCC_OscConfig+0x280>)
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	f003 030c 	and.w	r3, r3, #12
 8007fc6:	2b08      	cmp	r3, #8
 8007fc8:	d11c      	bne.n	8008004 <HAL_RCC_OscConfig+0x190>
 8007fca:	4b4a      	ldr	r3, [pc, #296]	@ (80080f4 <HAL_RCC_OscConfig+0x280>)
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d116      	bne.n	8008004 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007fd6:	4b47      	ldr	r3, [pc, #284]	@ (80080f4 <HAL_RCC_OscConfig+0x280>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f003 0302 	and.w	r3, r3, #2
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d005      	beq.n	8007fee <HAL_RCC_OscConfig+0x17a>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	68db      	ldr	r3, [r3, #12]
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d001      	beq.n	8007fee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e1df      	b.n	80083ae <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fee:	4b41      	ldr	r3, [pc, #260]	@ (80080f4 <HAL_RCC_OscConfig+0x280>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	691b      	ldr	r3, [r3, #16]
 8007ffa:	00db      	lsls	r3, r3, #3
 8007ffc:	493d      	ldr	r1, [pc, #244]	@ (80080f4 <HAL_RCC_OscConfig+0x280>)
 8007ffe:	4313      	orrs	r3, r2
 8008000:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008002:	e040      	b.n	8008086 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d023      	beq.n	8008054 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800800c:	4b39      	ldr	r3, [pc, #228]	@ (80080f4 <HAL_RCC_OscConfig+0x280>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a38      	ldr	r2, [pc, #224]	@ (80080f4 <HAL_RCC_OscConfig+0x280>)
 8008012:	f043 0301 	orr.w	r3, r3, #1
 8008016:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008018:	f7fb f8a4 	bl	8003164 <HAL_GetTick>
 800801c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800801e:	e008      	b.n	8008032 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008020:	f7fb f8a0 	bl	8003164 <HAL_GetTick>
 8008024:	4602      	mov	r2, r0
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	1ad3      	subs	r3, r2, r3
 800802a:	2b02      	cmp	r3, #2
 800802c:	d901      	bls.n	8008032 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800802e:	2303      	movs	r3, #3
 8008030:	e1bd      	b.n	80083ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008032:	4b30      	ldr	r3, [pc, #192]	@ (80080f4 <HAL_RCC_OscConfig+0x280>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f003 0302 	and.w	r3, r3, #2
 800803a:	2b00      	cmp	r3, #0
 800803c:	d0f0      	beq.n	8008020 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800803e:	4b2d      	ldr	r3, [pc, #180]	@ (80080f4 <HAL_RCC_OscConfig+0x280>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	691b      	ldr	r3, [r3, #16]
 800804a:	00db      	lsls	r3, r3, #3
 800804c:	4929      	ldr	r1, [pc, #164]	@ (80080f4 <HAL_RCC_OscConfig+0x280>)
 800804e:	4313      	orrs	r3, r2
 8008050:	600b      	str	r3, [r1, #0]
 8008052:	e018      	b.n	8008086 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008054:	4b27      	ldr	r3, [pc, #156]	@ (80080f4 <HAL_RCC_OscConfig+0x280>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a26      	ldr	r2, [pc, #152]	@ (80080f4 <HAL_RCC_OscConfig+0x280>)
 800805a:	f023 0301 	bic.w	r3, r3, #1
 800805e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008060:	f7fb f880 	bl	8003164 <HAL_GetTick>
 8008064:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008066:	e008      	b.n	800807a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008068:	f7fb f87c 	bl	8003164 <HAL_GetTick>
 800806c:	4602      	mov	r2, r0
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	1ad3      	subs	r3, r2, r3
 8008072:	2b02      	cmp	r3, #2
 8008074:	d901      	bls.n	800807a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008076:	2303      	movs	r3, #3
 8008078:	e199      	b.n	80083ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800807a:	4b1e      	ldr	r3, [pc, #120]	@ (80080f4 <HAL_RCC_OscConfig+0x280>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f003 0302 	and.w	r3, r3, #2
 8008082:	2b00      	cmp	r3, #0
 8008084:	d1f0      	bne.n	8008068 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f003 0308 	and.w	r3, r3, #8
 800808e:	2b00      	cmp	r3, #0
 8008090:	d038      	beq.n	8008104 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	695b      	ldr	r3, [r3, #20]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d019      	beq.n	80080ce <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800809a:	4b16      	ldr	r3, [pc, #88]	@ (80080f4 <HAL_RCC_OscConfig+0x280>)
 800809c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800809e:	4a15      	ldr	r2, [pc, #84]	@ (80080f4 <HAL_RCC_OscConfig+0x280>)
 80080a0:	f043 0301 	orr.w	r3, r3, #1
 80080a4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080a6:	f7fb f85d 	bl	8003164 <HAL_GetTick>
 80080aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80080ac:	e008      	b.n	80080c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080ae:	f7fb f859 	bl	8003164 <HAL_GetTick>
 80080b2:	4602      	mov	r2, r0
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	1ad3      	subs	r3, r2, r3
 80080b8:	2b02      	cmp	r3, #2
 80080ba:	d901      	bls.n	80080c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80080bc:	2303      	movs	r3, #3
 80080be:	e176      	b.n	80083ae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80080c0:	4b0c      	ldr	r3, [pc, #48]	@ (80080f4 <HAL_RCC_OscConfig+0x280>)
 80080c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080c4:	f003 0302 	and.w	r3, r3, #2
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d0f0      	beq.n	80080ae <HAL_RCC_OscConfig+0x23a>
 80080cc:	e01a      	b.n	8008104 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80080ce:	4b09      	ldr	r3, [pc, #36]	@ (80080f4 <HAL_RCC_OscConfig+0x280>)
 80080d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080d2:	4a08      	ldr	r2, [pc, #32]	@ (80080f4 <HAL_RCC_OscConfig+0x280>)
 80080d4:	f023 0301 	bic.w	r3, r3, #1
 80080d8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080da:	f7fb f843 	bl	8003164 <HAL_GetTick>
 80080de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80080e0:	e00a      	b.n	80080f8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080e2:	f7fb f83f 	bl	8003164 <HAL_GetTick>
 80080e6:	4602      	mov	r2, r0
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	1ad3      	subs	r3, r2, r3
 80080ec:	2b02      	cmp	r3, #2
 80080ee:	d903      	bls.n	80080f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80080f0:	2303      	movs	r3, #3
 80080f2:	e15c      	b.n	80083ae <HAL_RCC_OscConfig+0x53a>
 80080f4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80080f8:	4b91      	ldr	r3, [pc, #580]	@ (8008340 <HAL_RCC_OscConfig+0x4cc>)
 80080fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080fc:	f003 0302 	and.w	r3, r3, #2
 8008100:	2b00      	cmp	r3, #0
 8008102:	d1ee      	bne.n	80080e2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f003 0304 	and.w	r3, r3, #4
 800810c:	2b00      	cmp	r3, #0
 800810e:	f000 80a4 	beq.w	800825a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008112:	4b8b      	ldr	r3, [pc, #556]	@ (8008340 <HAL_RCC_OscConfig+0x4cc>)
 8008114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008116:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800811a:	2b00      	cmp	r3, #0
 800811c:	d10d      	bne.n	800813a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800811e:	4b88      	ldr	r3, [pc, #544]	@ (8008340 <HAL_RCC_OscConfig+0x4cc>)
 8008120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008122:	4a87      	ldr	r2, [pc, #540]	@ (8008340 <HAL_RCC_OscConfig+0x4cc>)
 8008124:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008128:	6413      	str	r3, [r2, #64]	@ 0x40
 800812a:	4b85      	ldr	r3, [pc, #532]	@ (8008340 <HAL_RCC_OscConfig+0x4cc>)
 800812c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800812e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008132:	60bb      	str	r3, [r7, #8]
 8008134:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008136:	2301      	movs	r3, #1
 8008138:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800813a:	4b82      	ldr	r3, [pc, #520]	@ (8008344 <HAL_RCC_OscConfig+0x4d0>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008142:	2b00      	cmp	r3, #0
 8008144:	d118      	bne.n	8008178 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008146:	4b7f      	ldr	r3, [pc, #508]	@ (8008344 <HAL_RCC_OscConfig+0x4d0>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a7e      	ldr	r2, [pc, #504]	@ (8008344 <HAL_RCC_OscConfig+0x4d0>)
 800814c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008150:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008152:	f7fb f807 	bl	8003164 <HAL_GetTick>
 8008156:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008158:	e008      	b.n	800816c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800815a:	f7fb f803 	bl	8003164 <HAL_GetTick>
 800815e:	4602      	mov	r2, r0
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	1ad3      	subs	r3, r2, r3
 8008164:	2b64      	cmp	r3, #100	@ 0x64
 8008166:	d901      	bls.n	800816c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008168:	2303      	movs	r3, #3
 800816a:	e120      	b.n	80083ae <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800816c:	4b75      	ldr	r3, [pc, #468]	@ (8008344 <HAL_RCC_OscConfig+0x4d0>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008174:	2b00      	cmp	r3, #0
 8008176:	d0f0      	beq.n	800815a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	2b01      	cmp	r3, #1
 800817e:	d106      	bne.n	800818e <HAL_RCC_OscConfig+0x31a>
 8008180:	4b6f      	ldr	r3, [pc, #444]	@ (8008340 <HAL_RCC_OscConfig+0x4cc>)
 8008182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008184:	4a6e      	ldr	r2, [pc, #440]	@ (8008340 <HAL_RCC_OscConfig+0x4cc>)
 8008186:	f043 0301 	orr.w	r3, r3, #1
 800818a:	6713      	str	r3, [r2, #112]	@ 0x70
 800818c:	e02d      	b.n	80081ea <HAL_RCC_OscConfig+0x376>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d10c      	bne.n	80081b0 <HAL_RCC_OscConfig+0x33c>
 8008196:	4b6a      	ldr	r3, [pc, #424]	@ (8008340 <HAL_RCC_OscConfig+0x4cc>)
 8008198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800819a:	4a69      	ldr	r2, [pc, #420]	@ (8008340 <HAL_RCC_OscConfig+0x4cc>)
 800819c:	f023 0301 	bic.w	r3, r3, #1
 80081a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80081a2:	4b67      	ldr	r3, [pc, #412]	@ (8008340 <HAL_RCC_OscConfig+0x4cc>)
 80081a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081a6:	4a66      	ldr	r2, [pc, #408]	@ (8008340 <HAL_RCC_OscConfig+0x4cc>)
 80081a8:	f023 0304 	bic.w	r3, r3, #4
 80081ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80081ae:	e01c      	b.n	80081ea <HAL_RCC_OscConfig+0x376>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	2b05      	cmp	r3, #5
 80081b6:	d10c      	bne.n	80081d2 <HAL_RCC_OscConfig+0x35e>
 80081b8:	4b61      	ldr	r3, [pc, #388]	@ (8008340 <HAL_RCC_OscConfig+0x4cc>)
 80081ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081bc:	4a60      	ldr	r2, [pc, #384]	@ (8008340 <HAL_RCC_OscConfig+0x4cc>)
 80081be:	f043 0304 	orr.w	r3, r3, #4
 80081c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80081c4:	4b5e      	ldr	r3, [pc, #376]	@ (8008340 <HAL_RCC_OscConfig+0x4cc>)
 80081c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081c8:	4a5d      	ldr	r2, [pc, #372]	@ (8008340 <HAL_RCC_OscConfig+0x4cc>)
 80081ca:	f043 0301 	orr.w	r3, r3, #1
 80081ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80081d0:	e00b      	b.n	80081ea <HAL_RCC_OscConfig+0x376>
 80081d2:	4b5b      	ldr	r3, [pc, #364]	@ (8008340 <HAL_RCC_OscConfig+0x4cc>)
 80081d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081d6:	4a5a      	ldr	r2, [pc, #360]	@ (8008340 <HAL_RCC_OscConfig+0x4cc>)
 80081d8:	f023 0301 	bic.w	r3, r3, #1
 80081dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80081de:	4b58      	ldr	r3, [pc, #352]	@ (8008340 <HAL_RCC_OscConfig+0x4cc>)
 80081e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081e2:	4a57      	ldr	r2, [pc, #348]	@ (8008340 <HAL_RCC_OscConfig+0x4cc>)
 80081e4:	f023 0304 	bic.w	r3, r3, #4
 80081e8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d015      	beq.n	800821e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081f2:	f7fa ffb7 	bl	8003164 <HAL_GetTick>
 80081f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081f8:	e00a      	b.n	8008210 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081fa:	f7fa ffb3 	bl	8003164 <HAL_GetTick>
 80081fe:	4602      	mov	r2, r0
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	1ad3      	subs	r3, r2, r3
 8008204:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008208:	4293      	cmp	r3, r2
 800820a:	d901      	bls.n	8008210 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800820c:	2303      	movs	r3, #3
 800820e:	e0ce      	b.n	80083ae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008210:	4b4b      	ldr	r3, [pc, #300]	@ (8008340 <HAL_RCC_OscConfig+0x4cc>)
 8008212:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008214:	f003 0302 	and.w	r3, r3, #2
 8008218:	2b00      	cmp	r3, #0
 800821a:	d0ee      	beq.n	80081fa <HAL_RCC_OscConfig+0x386>
 800821c:	e014      	b.n	8008248 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800821e:	f7fa ffa1 	bl	8003164 <HAL_GetTick>
 8008222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008224:	e00a      	b.n	800823c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008226:	f7fa ff9d 	bl	8003164 <HAL_GetTick>
 800822a:	4602      	mov	r2, r0
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	1ad3      	subs	r3, r2, r3
 8008230:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008234:	4293      	cmp	r3, r2
 8008236:	d901      	bls.n	800823c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008238:	2303      	movs	r3, #3
 800823a:	e0b8      	b.n	80083ae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800823c:	4b40      	ldr	r3, [pc, #256]	@ (8008340 <HAL_RCC_OscConfig+0x4cc>)
 800823e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008240:	f003 0302 	and.w	r3, r3, #2
 8008244:	2b00      	cmp	r3, #0
 8008246:	d1ee      	bne.n	8008226 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008248:	7dfb      	ldrb	r3, [r7, #23]
 800824a:	2b01      	cmp	r3, #1
 800824c:	d105      	bne.n	800825a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800824e:	4b3c      	ldr	r3, [pc, #240]	@ (8008340 <HAL_RCC_OscConfig+0x4cc>)
 8008250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008252:	4a3b      	ldr	r2, [pc, #236]	@ (8008340 <HAL_RCC_OscConfig+0x4cc>)
 8008254:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008258:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	699b      	ldr	r3, [r3, #24]
 800825e:	2b00      	cmp	r3, #0
 8008260:	f000 80a4 	beq.w	80083ac <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008264:	4b36      	ldr	r3, [pc, #216]	@ (8008340 <HAL_RCC_OscConfig+0x4cc>)
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	f003 030c 	and.w	r3, r3, #12
 800826c:	2b08      	cmp	r3, #8
 800826e:	d06b      	beq.n	8008348 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	699b      	ldr	r3, [r3, #24]
 8008274:	2b02      	cmp	r3, #2
 8008276:	d149      	bne.n	800830c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008278:	4b31      	ldr	r3, [pc, #196]	@ (8008340 <HAL_RCC_OscConfig+0x4cc>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a30      	ldr	r2, [pc, #192]	@ (8008340 <HAL_RCC_OscConfig+0x4cc>)
 800827e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008282:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008284:	f7fa ff6e 	bl	8003164 <HAL_GetTick>
 8008288:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800828a:	e008      	b.n	800829e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800828c:	f7fa ff6a 	bl	8003164 <HAL_GetTick>
 8008290:	4602      	mov	r2, r0
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	1ad3      	subs	r3, r2, r3
 8008296:	2b02      	cmp	r3, #2
 8008298:	d901      	bls.n	800829e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800829a:	2303      	movs	r3, #3
 800829c:	e087      	b.n	80083ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800829e:	4b28      	ldr	r3, [pc, #160]	@ (8008340 <HAL_RCC_OscConfig+0x4cc>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d1f0      	bne.n	800828c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	69da      	ldr	r2, [r3, #28]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6a1b      	ldr	r3, [r3, #32]
 80082b2:	431a      	orrs	r2, r3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082b8:	019b      	lsls	r3, r3, #6
 80082ba:	431a      	orrs	r2, r3
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082c0:	085b      	lsrs	r3, r3, #1
 80082c2:	3b01      	subs	r3, #1
 80082c4:	041b      	lsls	r3, r3, #16
 80082c6:	431a      	orrs	r2, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082cc:	061b      	lsls	r3, r3, #24
 80082ce:	4313      	orrs	r3, r2
 80082d0:	4a1b      	ldr	r2, [pc, #108]	@ (8008340 <HAL_RCC_OscConfig+0x4cc>)
 80082d2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80082d6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80082d8:	4b19      	ldr	r3, [pc, #100]	@ (8008340 <HAL_RCC_OscConfig+0x4cc>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a18      	ldr	r2, [pc, #96]	@ (8008340 <HAL_RCC_OscConfig+0x4cc>)
 80082de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80082e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082e4:	f7fa ff3e 	bl	8003164 <HAL_GetTick>
 80082e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082ea:	e008      	b.n	80082fe <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082ec:	f7fa ff3a 	bl	8003164 <HAL_GetTick>
 80082f0:	4602      	mov	r2, r0
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	1ad3      	subs	r3, r2, r3
 80082f6:	2b02      	cmp	r3, #2
 80082f8:	d901      	bls.n	80082fe <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80082fa:	2303      	movs	r3, #3
 80082fc:	e057      	b.n	80083ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082fe:	4b10      	ldr	r3, [pc, #64]	@ (8008340 <HAL_RCC_OscConfig+0x4cc>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008306:	2b00      	cmp	r3, #0
 8008308:	d0f0      	beq.n	80082ec <HAL_RCC_OscConfig+0x478>
 800830a:	e04f      	b.n	80083ac <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800830c:	4b0c      	ldr	r3, [pc, #48]	@ (8008340 <HAL_RCC_OscConfig+0x4cc>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a0b      	ldr	r2, [pc, #44]	@ (8008340 <HAL_RCC_OscConfig+0x4cc>)
 8008312:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008318:	f7fa ff24 	bl	8003164 <HAL_GetTick>
 800831c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800831e:	e008      	b.n	8008332 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008320:	f7fa ff20 	bl	8003164 <HAL_GetTick>
 8008324:	4602      	mov	r2, r0
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	1ad3      	subs	r3, r2, r3
 800832a:	2b02      	cmp	r3, #2
 800832c:	d901      	bls.n	8008332 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800832e:	2303      	movs	r3, #3
 8008330:	e03d      	b.n	80083ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008332:	4b03      	ldr	r3, [pc, #12]	@ (8008340 <HAL_RCC_OscConfig+0x4cc>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800833a:	2b00      	cmp	r3, #0
 800833c:	d1f0      	bne.n	8008320 <HAL_RCC_OscConfig+0x4ac>
 800833e:	e035      	b.n	80083ac <HAL_RCC_OscConfig+0x538>
 8008340:	40023800 	.word	0x40023800
 8008344:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008348:	4b1b      	ldr	r3, [pc, #108]	@ (80083b8 <HAL_RCC_OscConfig+0x544>)
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	699b      	ldr	r3, [r3, #24]
 8008352:	2b01      	cmp	r3, #1
 8008354:	d028      	beq.n	80083a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008360:	429a      	cmp	r2, r3
 8008362:	d121      	bne.n	80083a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800836e:	429a      	cmp	r2, r3
 8008370:	d11a      	bne.n	80083a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008372:	68fa      	ldr	r2, [r7, #12]
 8008374:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008378:	4013      	ands	r3, r2
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800837e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008380:	4293      	cmp	r3, r2
 8008382:	d111      	bne.n	80083a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800838e:	085b      	lsrs	r3, r3, #1
 8008390:	3b01      	subs	r3, #1
 8008392:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008394:	429a      	cmp	r2, r3
 8008396:	d107      	bne.n	80083a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083a2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d001      	beq.n	80083ac <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80083a8:	2301      	movs	r3, #1
 80083aa:	e000      	b.n	80083ae <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3718      	adds	r7, #24
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	40023800 	.word	0x40023800

080083bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80083c6:	2300      	movs	r3, #0
 80083c8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d101      	bne.n	80083d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	e0d0      	b.n	8008576 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80083d4:	4b6a      	ldr	r3, [pc, #424]	@ (8008580 <HAL_RCC_ClockConfig+0x1c4>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f003 030f 	and.w	r3, r3, #15
 80083dc:	683a      	ldr	r2, [r7, #0]
 80083de:	429a      	cmp	r2, r3
 80083e0:	d910      	bls.n	8008404 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083e2:	4b67      	ldr	r3, [pc, #412]	@ (8008580 <HAL_RCC_ClockConfig+0x1c4>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f023 020f 	bic.w	r2, r3, #15
 80083ea:	4965      	ldr	r1, [pc, #404]	@ (8008580 <HAL_RCC_ClockConfig+0x1c4>)
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80083f2:	4b63      	ldr	r3, [pc, #396]	@ (8008580 <HAL_RCC_ClockConfig+0x1c4>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f003 030f 	and.w	r3, r3, #15
 80083fa:	683a      	ldr	r2, [r7, #0]
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d001      	beq.n	8008404 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	e0b8      	b.n	8008576 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f003 0302 	and.w	r3, r3, #2
 800840c:	2b00      	cmp	r3, #0
 800840e:	d020      	beq.n	8008452 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f003 0304 	and.w	r3, r3, #4
 8008418:	2b00      	cmp	r3, #0
 800841a:	d005      	beq.n	8008428 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800841c:	4b59      	ldr	r3, [pc, #356]	@ (8008584 <HAL_RCC_ClockConfig+0x1c8>)
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	4a58      	ldr	r2, [pc, #352]	@ (8008584 <HAL_RCC_ClockConfig+0x1c8>)
 8008422:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008426:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f003 0308 	and.w	r3, r3, #8
 8008430:	2b00      	cmp	r3, #0
 8008432:	d005      	beq.n	8008440 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008434:	4b53      	ldr	r3, [pc, #332]	@ (8008584 <HAL_RCC_ClockConfig+0x1c8>)
 8008436:	689b      	ldr	r3, [r3, #8]
 8008438:	4a52      	ldr	r2, [pc, #328]	@ (8008584 <HAL_RCC_ClockConfig+0x1c8>)
 800843a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800843e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008440:	4b50      	ldr	r3, [pc, #320]	@ (8008584 <HAL_RCC_ClockConfig+0x1c8>)
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	494d      	ldr	r1, [pc, #308]	@ (8008584 <HAL_RCC_ClockConfig+0x1c8>)
 800844e:	4313      	orrs	r3, r2
 8008450:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f003 0301 	and.w	r3, r3, #1
 800845a:	2b00      	cmp	r3, #0
 800845c:	d040      	beq.n	80084e0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	2b01      	cmp	r3, #1
 8008464:	d107      	bne.n	8008476 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008466:	4b47      	ldr	r3, [pc, #284]	@ (8008584 <HAL_RCC_ClockConfig+0x1c8>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800846e:	2b00      	cmp	r3, #0
 8008470:	d115      	bne.n	800849e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008472:	2301      	movs	r3, #1
 8008474:	e07f      	b.n	8008576 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	2b02      	cmp	r3, #2
 800847c:	d107      	bne.n	800848e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800847e:	4b41      	ldr	r3, [pc, #260]	@ (8008584 <HAL_RCC_ClockConfig+0x1c8>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008486:	2b00      	cmp	r3, #0
 8008488:	d109      	bne.n	800849e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800848a:	2301      	movs	r3, #1
 800848c:	e073      	b.n	8008576 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800848e:	4b3d      	ldr	r3, [pc, #244]	@ (8008584 <HAL_RCC_ClockConfig+0x1c8>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f003 0302 	and.w	r3, r3, #2
 8008496:	2b00      	cmp	r3, #0
 8008498:	d101      	bne.n	800849e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800849a:	2301      	movs	r3, #1
 800849c:	e06b      	b.n	8008576 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800849e:	4b39      	ldr	r3, [pc, #228]	@ (8008584 <HAL_RCC_ClockConfig+0x1c8>)
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	f023 0203 	bic.w	r2, r3, #3
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	4936      	ldr	r1, [pc, #216]	@ (8008584 <HAL_RCC_ClockConfig+0x1c8>)
 80084ac:	4313      	orrs	r3, r2
 80084ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084b0:	f7fa fe58 	bl	8003164 <HAL_GetTick>
 80084b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084b6:	e00a      	b.n	80084ce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084b8:	f7fa fe54 	bl	8003164 <HAL_GetTick>
 80084bc:	4602      	mov	r2, r0
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	1ad3      	subs	r3, r2, r3
 80084c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d901      	bls.n	80084ce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80084ca:	2303      	movs	r3, #3
 80084cc:	e053      	b.n	8008576 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084ce:	4b2d      	ldr	r3, [pc, #180]	@ (8008584 <HAL_RCC_ClockConfig+0x1c8>)
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	f003 020c 	and.w	r2, r3, #12
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	429a      	cmp	r2, r3
 80084de:	d1eb      	bne.n	80084b8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80084e0:	4b27      	ldr	r3, [pc, #156]	@ (8008580 <HAL_RCC_ClockConfig+0x1c4>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f003 030f 	and.w	r3, r3, #15
 80084e8:	683a      	ldr	r2, [r7, #0]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d210      	bcs.n	8008510 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084ee:	4b24      	ldr	r3, [pc, #144]	@ (8008580 <HAL_RCC_ClockConfig+0x1c4>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f023 020f 	bic.w	r2, r3, #15
 80084f6:	4922      	ldr	r1, [pc, #136]	@ (8008580 <HAL_RCC_ClockConfig+0x1c4>)
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	4313      	orrs	r3, r2
 80084fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80084fe:	4b20      	ldr	r3, [pc, #128]	@ (8008580 <HAL_RCC_ClockConfig+0x1c4>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f003 030f 	and.w	r3, r3, #15
 8008506:	683a      	ldr	r2, [r7, #0]
 8008508:	429a      	cmp	r2, r3
 800850a:	d001      	beq.n	8008510 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	e032      	b.n	8008576 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f003 0304 	and.w	r3, r3, #4
 8008518:	2b00      	cmp	r3, #0
 800851a:	d008      	beq.n	800852e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800851c:	4b19      	ldr	r3, [pc, #100]	@ (8008584 <HAL_RCC_ClockConfig+0x1c8>)
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	68db      	ldr	r3, [r3, #12]
 8008528:	4916      	ldr	r1, [pc, #88]	@ (8008584 <HAL_RCC_ClockConfig+0x1c8>)
 800852a:	4313      	orrs	r3, r2
 800852c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f003 0308 	and.w	r3, r3, #8
 8008536:	2b00      	cmp	r3, #0
 8008538:	d009      	beq.n	800854e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800853a:	4b12      	ldr	r3, [pc, #72]	@ (8008584 <HAL_RCC_ClockConfig+0x1c8>)
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	691b      	ldr	r3, [r3, #16]
 8008546:	00db      	lsls	r3, r3, #3
 8008548:	490e      	ldr	r1, [pc, #56]	@ (8008584 <HAL_RCC_ClockConfig+0x1c8>)
 800854a:	4313      	orrs	r3, r2
 800854c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800854e:	f000 f821 	bl	8008594 <HAL_RCC_GetSysClockFreq>
 8008552:	4602      	mov	r2, r0
 8008554:	4b0b      	ldr	r3, [pc, #44]	@ (8008584 <HAL_RCC_ClockConfig+0x1c8>)
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	091b      	lsrs	r3, r3, #4
 800855a:	f003 030f 	and.w	r3, r3, #15
 800855e:	490a      	ldr	r1, [pc, #40]	@ (8008588 <HAL_RCC_ClockConfig+0x1cc>)
 8008560:	5ccb      	ldrb	r3, [r1, r3]
 8008562:	fa22 f303 	lsr.w	r3, r2, r3
 8008566:	4a09      	ldr	r2, [pc, #36]	@ (800858c <HAL_RCC_ClockConfig+0x1d0>)
 8008568:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800856a:	4b09      	ldr	r3, [pc, #36]	@ (8008590 <HAL_RCC_ClockConfig+0x1d4>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4618      	mov	r0, r3
 8008570:	f7fa fc94 	bl	8002e9c <HAL_InitTick>

  return HAL_OK;
 8008574:	2300      	movs	r3, #0
}
 8008576:	4618      	mov	r0, r3
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	40023c00 	.word	0x40023c00
 8008584:	40023800 	.word	0x40023800
 8008588:	08014b78 	.word	0x08014b78
 800858c:	20000004 	.word	0x20000004
 8008590:	20000008 	.word	0x20000008

08008594 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008598:	b090      	sub	sp, #64	@ 0x40
 800859a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800859c:	2300      	movs	r3, #0
 800859e:	637b      	str	r3, [r7, #52]	@ 0x34
 80085a0:	2300      	movs	r3, #0
 80085a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085a4:	2300      	movs	r3, #0
 80085a6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80085a8:	2300      	movs	r3, #0
 80085aa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80085ac:	4b59      	ldr	r3, [pc, #356]	@ (8008714 <HAL_RCC_GetSysClockFreq+0x180>)
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	f003 030c 	and.w	r3, r3, #12
 80085b4:	2b08      	cmp	r3, #8
 80085b6:	d00d      	beq.n	80085d4 <HAL_RCC_GetSysClockFreq+0x40>
 80085b8:	2b08      	cmp	r3, #8
 80085ba:	f200 80a1 	bhi.w	8008700 <HAL_RCC_GetSysClockFreq+0x16c>
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d002      	beq.n	80085c8 <HAL_RCC_GetSysClockFreq+0x34>
 80085c2:	2b04      	cmp	r3, #4
 80085c4:	d003      	beq.n	80085ce <HAL_RCC_GetSysClockFreq+0x3a>
 80085c6:	e09b      	b.n	8008700 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80085c8:	4b53      	ldr	r3, [pc, #332]	@ (8008718 <HAL_RCC_GetSysClockFreq+0x184>)
 80085ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80085cc:	e09b      	b.n	8008706 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80085ce:	4b53      	ldr	r3, [pc, #332]	@ (800871c <HAL_RCC_GetSysClockFreq+0x188>)
 80085d0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80085d2:	e098      	b.n	8008706 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80085d4:	4b4f      	ldr	r3, [pc, #316]	@ (8008714 <HAL_RCC_GetSysClockFreq+0x180>)
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80085dc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80085de:	4b4d      	ldr	r3, [pc, #308]	@ (8008714 <HAL_RCC_GetSysClockFreq+0x180>)
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d028      	beq.n	800863c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80085ea:	4b4a      	ldr	r3, [pc, #296]	@ (8008714 <HAL_RCC_GetSysClockFreq+0x180>)
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	099b      	lsrs	r3, r3, #6
 80085f0:	2200      	movs	r2, #0
 80085f2:	623b      	str	r3, [r7, #32]
 80085f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80085f6:	6a3b      	ldr	r3, [r7, #32]
 80085f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80085fc:	2100      	movs	r1, #0
 80085fe:	4b47      	ldr	r3, [pc, #284]	@ (800871c <HAL_RCC_GetSysClockFreq+0x188>)
 8008600:	fb03 f201 	mul.w	r2, r3, r1
 8008604:	2300      	movs	r3, #0
 8008606:	fb00 f303 	mul.w	r3, r0, r3
 800860a:	4413      	add	r3, r2
 800860c:	4a43      	ldr	r2, [pc, #268]	@ (800871c <HAL_RCC_GetSysClockFreq+0x188>)
 800860e:	fba0 1202 	umull	r1, r2, r0, r2
 8008612:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008614:	460a      	mov	r2, r1
 8008616:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008618:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800861a:	4413      	add	r3, r2
 800861c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800861e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008620:	2200      	movs	r2, #0
 8008622:	61bb      	str	r3, [r7, #24]
 8008624:	61fa      	str	r2, [r7, #28]
 8008626:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800862a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800862e:	f7f7 fdef 	bl	8000210 <__aeabi_uldivmod>
 8008632:	4602      	mov	r2, r0
 8008634:	460b      	mov	r3, r1
 8008636:	4613      	mov	r3, r2
 8008638:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800863a:	e053      	b.n	80086e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800863c:	4b35      	ldr	r3, [pc, #212]	@ (8008714 <HAL_RCC_GetSysClockFreq+0x180>)
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	099b      	lsrs	r3, r3, #6
 8008642:	2200      	movs	r2, #0
 8008644:	613b      	str	r3, [r7, #16]
 8008646:	617a      	str	r2, [r7, #20]
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800864e:	f04f 0b00 	mov.w	fp, #0
 8008652:	4652      	mov	r2, sl
 8008654:	465b      	mov	r3, fp
 8008656:	f04f 0000 	mov.w	r0, #0
 800865a:	f04f 0100 	mov.w	r1, #0
 800865e:	0159      	lsls	r1, r3, #5
 8008660:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008664:	0150      	lsls	r0, r2, #5
 8008666:	4602      	mov	r2, r0
 8008668:	460b      	mov	r3, r1
 800866a:	ebb2 080a 	subs.w	r8, r2, sl
 800866e:	eb63 090b 	sbc.w	r9, r3, fp
 8008672:	f04f 0200 	mov.w	r2, #0
 8008676:	f04f 0300 	mov.w	r3, #0
 800867a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800867e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008682:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008686:	ebb2 0408 	subs.w	r4, r2, r8
 800868a:	eb63 0509 	sbc.w	r5, r3, r9
 800868e:	f04f 0200 	mov.w	r2, #0
 8008692:	f04f 0300 	mov.w	r3, #0
 8008696:	00eb      	lsls	r3, r5, #3
 8008698:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800869c:	00e2      	lsls	r2, r4, #3
 800869e:	4614      	mov	r4, r2
 80086a0:	461d      	mov	r5, r3
 80086a2:	eb14 030a 	adds.w	r3, r4, sl
 80086a6:	603b      	str	r3, [r7, #0]
 80086a8:	eb45 030b 	adc.w	r3, r5, fp
 80086ac:	607b      	str	r3, [r7, #4]
 80086ae:	f04f 0200 	mov.w	r2, #0
 80086b2:	f04f 0300 	mov.w	r3, #0
 80086b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80086ba:	4629      	mov	r1, r5
 80086bc:	028b      	lsls	r3, r1, #10
 80086be:	4621      	mov	r1, r4
 80086c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80086c4:	4621      	mov	r1, r4
 80086c6:	028a      	lsls	r2, r1, #10
 80086c8:	4610      	mov	r0, r2
 80086ca:	4619      	mov	r1, r3
 80086cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086ce:	2200      	movs	r2, #0
 80086d0:	60bb      	str	r3, [r7, #8]
 80086d2:	60fa      	str	r2, [r7, #12]
 80086d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80086d8:	f7f7 fd9a 	bl	8000210 <__aeabi_uldivmod>
 80086dc:	4602      	mov	r2, r0
 80086de:	460b      	mov	r3, r1
 80086e0:	4613      	mov	r3, r2
 80086e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80086e4:	4b0b      	ldr	r3, [pc, #44]	@ (8008714 <HAL_RCC_GetSysClockFreq+0x180>)
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	0c1b      	lsrs	r3, r3, #16
 80086ea:	f003 0303 	and.w	r3, r3, #3
 80086ee:	3301      	adds	r3, #1
 80086f0:	005b      	lsls	r3, r3, #1
 80086f2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80086f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80086f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80086fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80086fe:	e002      	b.n	8008706 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008700:	4b05      	ldr	r3, [pc, #20]	@ (8008718 <HAL_RCC_GetSysClockFreq+0x184>)
 8008702:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008704:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008708:	4618      	mov	r0, r3
 800870a:	3740      	adds	r7, #64	@ 0x40
 800870c:	46bd      	mov	sp, r7
 800870e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008712:	bf00      	nop
 8008714:	40023800 	.word	0x40023800
 8008718:	00f42400 	.word	0x00f42400
 800871c:	017d7840 	.word	0x017d7840

08008720 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008720:	b480      	push	{r7}
 8008722:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008724:	4b03      	ldr	r3, [pc, #12]	@ (8008734 <HAL_RCC_GetHCLKFreq+0x14>)
 8008726:	681b      	ldr	r3, [r3, #0]
}
 8008728:	4618      	mov	r0, r3
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr
 8008732:	bf00      	nop
 8008734:	20000004 	.word	0x20000004

08008738 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800873c:	f7ff fff0 	bl	8008720 <HAL_RCC_GetHCLKFreq>
 8008740:	4602      	mov	r2, r0
 8008742:	4b05      	ldr	r3, [pc, #20]	@ (8008758 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	0a9b      	lsrs	r3, r3, #10
 8008748:	f003 0307 	and.w	r3, r3, #7
 800874c:	4903      	ldr	r1, [pc, #12]	@ (800875c <HAL_RCC_GetPCLK1Freq+0x24>)
 800874e:	5ccb      	ldrb	r3, [r1, r3]
 8008750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008754:	4618      	mov	r0, r3
 8008756:	bd80      	pop	{r7, pc}
 8008758:	40023800 	.word	0x40023800
 800875c:	08014b88 	.word	0x08014b88

08008760 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008764:	f7ff ffdc 	bl	8008720 <HAL_RCC_GetHCLKFreq>
 8008768:	4602      	mov	r2, r0
 800876a:	4b05      	ldr	r3, [pc, #20]	@ (8008780 <HAL_RCC_GetPCLK2Freq+0x20>)
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	0b5b      	lsrs	r3, r3, #13
 8008770:	f003 0307 	and.w	r3, r3, #7
 8008774:	4903      	ldr	r1, [pc, #12]	@ (8008784 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008776:	5ccb      	ldrb	r3, [r1, r3]
 8008778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800877c:	4618      	mov	r0, r3
 800877e:	bd80      	pop	{r7, pc}
 8008780:	40023800 	.word	0x40023800
 8008784:	08014b88 	.word	0x08014b88

08008788 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	220f      	movs	r2, #15
 8008796:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008798:	4b12      	ldr	r3, [pc, #72]	@ (80087e4 <HAL_RCC_GetClockConfig+0x5c>)
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	f003 0203 	and.w	r2, r3, #3
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80087a4:	4b0f      	ldr	r3, [pc, #60]	@ (80087e4 <HAL_RCC_GetClockConfig+0x5c>)
 80087a6:	689b      	ldr	r3, [r3, #8]
 80087a8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80087b0:	4b0c      	ldr	r3, [pc, #48]	@ (80087e4 <HAL_RCC_GetClockConfig+0x5c>)
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80087bc:	4b09      	ldr	r3, [pc, #36]	@ (80087e4 <HAL_RCC_GetClockConfig+0x5c>)
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	08db      	lsrs	r3, r3, #3
 80087c2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80087ca:	4b07      	ldr	r3, [pc, #28]	@ (80087e8 <HAL_RCC_GetClockConfig+0x60>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f003 020f 	and.w	r2, r3, #15
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	601a      	str	r2, [r3, #0]
}
 80087d6:	bf00      	nop
 80087d8:	370c      	adds	r7, #12
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr
 80087e2:	bf00      	nop
 80087e4:	40023800 	.word	0x40023800
 80087e8:	40023c00 	.word	0x40023c00

080087ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b088      	sub	sp, #32
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80087f4:	2300      	movs	r3, #0
 80087f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80087f8:	2300      	movs	r3, #0
 80087fa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80087fc:	2300      	movs	r3, #0
 80087fe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008800:	2300      	movs	r3, #0
 8008802:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008804:	2300      	movs	r3, #0
 8008806:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f003 0301 	and.w	r3, r3, #1
 8008810:	2b00      	cmp	r3, #0
 8008812:	d012      	beq.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008814:	4b69      	ldr	r3, [pc, #420]	@ (80089bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	4a68      	ldr	r2, [pc, #416]	@ (80089bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800881a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800881e:	6093      	str	r3, [r2, #8]
 8008820:	4b66      	ldr	r3, [pc, #408]	@ (80089bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008822:	689a      	ldr	r2, [r3, #8]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008828:	4964      	ldr	r1, [pc, #400]	@ (80089bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800882a:	4313      	orrs	r3, r2
 800882c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008832:	2b00      	cmp	r3, #0
 8008834:	d101      	bne.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008836:	2301      	movs	r3, #1
 8008838:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008842:	2b00      	cmp	r3, #0
 8008844:	d017      	beq.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008846:	4b5d      	ldr	r3, [pc, #372]	@ (80089bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008848:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800884c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008854:	4959      	ldr	r1, [pc, #356]	@ (80089bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008856:	4313      	orrs	r3, r2
 8008858:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008860:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008864:	d101      	bne.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008866:	2301      	movs	r3, #1
 8008868:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800886e:	2b00      	cmp	r3, #0
 8008870:	d101      	bne.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008872:	2301      	movs	r3, #1
 8008874:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800887e:	2b00      	cmp	r3, #0
 8008880:	d017      	beq.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008882:	4b4e      	ldr	r3, [pc, #312]	@ (80089bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008884:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008888:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008890:	494a      	ldr	r1, [pc, #296]	@ (80089bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008892:	4313      	orrs	r3, r2
 8008894:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800889c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80088a0:	d101      	bne.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80088a2:	2301      	movs	r3, #1
 80088a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d101      	bne.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80088ae:	2301      	movs	r3, #1
 80088b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d001      	beq.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80088be:	2301      	movs	r3, #1
 80088c0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f003 0320 	and.w	r3, r3, #32
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	f000 808b 	beq.w	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80088d0:	4b3a      	ldr	r3, [pc, #232]	@ (80089bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80088d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088d4:	4a39      	ldr	r2, [pc, #228]	@ (80089bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80088d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80088da:	6413      	str	r3, [r2, #64]	@ 0x40
 80088dc:	4b37      	ldr	r3, [pc, #220]	@ (80089bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80088de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80088e4:	60bb      	str	r3, [r7, #8]
 80088e6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80088e8:	4b35      	ldr	r3, [pc, #212]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a34      	ldr	r2, [pc, #208]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80088ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80088f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088f4:	f7fa fc36 	bl	8003164 <HAL_GetTick>
 80088f8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80088fa:	e008      	b.n	800890e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80088fc:	f7fa fc32 	bl	8003164 <HAL_GetTick>
 8008900:	4602      	mov	r2, r0
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	1ad3      	subs	r3, r2, r3
 8008906:	2b64      	cmp	r3, #100	@ 0x64
 8008908:	d901      	bls.n	800890e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800890a:	2303      	movs	r3, #3
 800890c:	e357      	b.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800890e:	4b2c      	ldr	r3, [pc, #176]	@ (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008916:	2b00      	cmp	r3, #0
 8008918:	d0f0      	beq.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800891a:	4b28      	ldr	r3, [pc, #160]	@ (80089bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800891c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800891e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008922:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d035      	beq.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800892e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008932:	693a      	ldr	r2, [r7, #16]
 8008934:	429a      	cmp	r2, r3
 8008936:	d02e      	beq.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008938:	4b20      	ldr	r3, [pc, #128]	@ (80089bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800893a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800893c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008940:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008942:	4b1e      	ldr	r3, [pc, #120]	@ (80089bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008946:	4a1d      	ldr	r2, [pc, #116]	@ (80089bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008948:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800894c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800894e:	4b1b      	ldr	r3, [pc, #108]	@ (80089bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008952:	4a1a      	ldr	r2, [pc, #104]	@ (80089bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008954:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008958:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800895a:	4a18      	ldr	r2, [pc, #96]	@ (80089bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008960:	4b16      	ldr	r3, [pc, #88]	@ (80089bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008964:	f003 0301 	and.w	r3, r3, #1
 8008968:	2b01      	cmp	r3, #1
 800896a:	d114      	bne.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800896c:	f7fa fbfa 	bl	8003164 <HAL_GetTick>
 8008970:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008972:	e00a      	b.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008974:	f7fa fbf6 	bl	8003164 <HAL_GetTick>
 8008978:	4602      	mov	r2, r0
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	1ad3      	subs	r3, r2, r3
 800897e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008982:	4293      	cmp	r3, r2
 8008984:	d901      	bls.n	800898a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008986:	2303      	movs	r3, #3
 8008988:	e319      	b.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800898a:	4b0c      	ldr	r3, [pc, #48]	@ (80089bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800898c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800898e:	f003 0302 	and.w	r3, r3, #2
 8008992:	2b00      	cmp	r3, #0
 8008994:	d0ee      	beq.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800899a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800899e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80089a2:	d111      	bne.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80089a4:	4b05      	ldr	r3, [pc, #20]	@ (80089bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80089b0:	4b04      	ldr	r3, [pc, #16]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80089b2:	400b      	ands	r3, r1
 80089b4:	4901      	ldr	r1, [pc, #4]	@ (80089bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80089b6:	4313      	orrs	r3, r2
 80089b8:	608b      	str	r3, [r1, #8]
 80089ba:	e00b      	b.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80089bc:	40023800 	.word	0x40023800
 80089c0:	40007000 	.word	0x40007000
 80089c4:	0ffffcff 	.word	0x0ffffcff
 80089c8:	4baa      	ldr	r3, [pc, #680]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	4aa9      	ldr	r2, [pc, #676]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80089ce:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80089d2:	6093      	str	r3, [r2, #8]
 80089d4:	4ba7      	ldr	r3, [pc, #668]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80089d6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089e0:	49a4      	ldr	r1, [pc, #656]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80089e2:	4313      	orrs	r3, r2
 80089e4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f003 0310 	and.w	r3, r3, #16
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d010      	beq.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80089f2:	4ba0      	ldr	r3, [pc, #640]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80089f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089f8:	4a9e      	ldr	r2, [pc, #632]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80089fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80089fe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8008a02:	4b9c      	ldr	r3, [pc, #624]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008a04:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a0c:	4999      	ldr	r1, [pc, #612]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d00a      	beq.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008a20:	4b94      	ldr	r3, [pc, #592]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a26:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a2e:	4991      	ldr	r1, [pc, #580]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008a30:	4313      	orrs	r3, r2
 8008a32:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d00a      	beq.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008a42:	4b8c      	ldr	r3, [pc, #560]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a48:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a50:	4988      	ldr	r1, [pc, #544]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008a52:	4313      	orrs	r3, r2
 8008a54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d00a      	beq.n	8008a7a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008a64:	4b83      	ldr	r3, [pc, #524]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a72:	4980      	ldr	r1, [pc, #512]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008a74:	4313      	orrs	r3, r2
 8008a76:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d00a      	beq.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008a86:	4b7b      	ldr	r3, [pc, #492]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a8c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a94:	4977      	ldr	r1, [pc, #476]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008a96:	4313      	orrs	r3, r2
 8008a98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d00a      	beq.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008aa8:	4b72      	ldr	r3, [pc, #456]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008aae:	f023 0203 	bic.w	r2, r3, #3
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ab6:	496f      	ldr	r1, [pc, #444]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d00a      	beq.n	8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008aca:	4b6a      	ldr	r3, [pc, #424]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ad0:	f023 020c 	bic.w	r2, r3, #12
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ad8:	4966      	ldr	r1, [pc, #408]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ada:	4313      	orrs	r3, r2
 8008adc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d00a      	beq.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008aec:	4b61      	ldr	r3, [pc, #388]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008af2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008afa:	495e      	ldr	r1, [pc, #376]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008afc:	4313      	orrs	r3, r2
 8008afe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00a      	beq.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008b0e:	4b59      	ldr	r3, [pc, #356]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b14:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b1c:	4955      	ldr	r1, [pc, #340]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d00a      	beq.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008b30:	4b50      	ldr	r3, [pc, #320]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b36:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b3e:	494d      	ldr	r1, [pc, #308]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008b40:	4313      	orrs	r3, r2
 8008b42:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d00a      	beq.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008b52:	4b48      	ldr	r3, [pc, #288]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b58:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b60:	4944      	ldr	r1, [pc, #272]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008b62:	4313      	orrs	r3, r2
 8008b64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d00a      	beq.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008b74:	4b3f      	ldr	r3, [pc, #252]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b7a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b82:	493c      	ldr	r1, [pc, #240]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008b84:	4313      	orrs	r3, r2
 8008b86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d00a      	beq.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008b96:	4b37      	ldr	r3, [pc, #220]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b9c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ba4:	4933      	ldr	r1, [pc, #204]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d00a      	beq.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008bb8:	4b2e      	ldr	r3, [pc, #184]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bbe:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008bc6:	492b      	ldr	r1, [pc, #172]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d011      	beq.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008bda:	4b26      	ldr	r3, [pc, #152]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008be0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008be8:	4922      	ldr	r1, [pc, #136]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008bea:	4313      	orrs	r3, r2
 8008bec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008bf4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008bf8:	d101      	bne.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f003 0308 	and.w	r3, r3, #8
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d001      	beq.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d00a      	beq.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008c1a:	4b16      	ldr	r3, [pc, #88]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c20:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c28:	4912      	ldr	r1, [pc, #72]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d00b      	beq.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008c3c:	4b0d      	ldr	r3, [pc, #52]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c42:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c4c:	4909      	ldr	r1, [pc, #36]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d006      	beq.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	f000 80d9 	beq.w	8008e1a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008c68:	4b02      	ldr	r3, [pc, #8]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a01      	ldr	r2, [pc, #4]	@ (8008c74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008c6e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008c72:	e001      	b.n	8008c78 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8008c74:	40023800 	.word	0x40023800
 8008c78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c7a:	f7fa fa73 	bl	8003164 <HAL_GetTick>
 8008c7e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008c80:	e008      	b.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008c82:	f7fa fa6f 	bl	8003164 <HAL_GetTick>
 8008c86:	4602      	mov	r2, r0
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	1ad3      	subs	r3, r2, r3
 8008c8c:	2b64      	cmp	r3, #100	@ 0x64
 8008c8e:	d901      	bls.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008c90:	2303      	movs	r3, #3
 8008c92:	e194      	b.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008c94:	4b6c      	ldr	r3, [pc, #432]	@ (8008e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d1f0      	bne.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f003 0301 	and.w	r3, r3, #1
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d021      	beq.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d11d      	bne.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008cb4:	4b64      	ldr	r3, [pc, #400]	@ (8008e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008cb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008cba:	0c1b      	lsrs	r3, r3, #16
 8008cbc:	f003 0303 	and.w	r3, r3, #3
 8008cc0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008cc2:	4b61      	ldr	r3, [pc, #388]	@ (8008e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008cc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008cc8:	0e1b      	lsrs	r3, r3, #24
 8008cca:	f003 030f 	and.w	r3, r3, #15
 8008cce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	019a      	lsls	r2, r3, #6
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	041b      	lsls	r3, r3, #16
 8008cda:	431a      	orrs	r2, r3
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	061b      	lsls	r3, r3, #24
 8008ce0:	431a      	orrs	r2, r3
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	071b      	lsls	r3, r3, #28
 8008ce8:	4957      	ldr	r1, [pc, #348]	@ (8008e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008cea:	4313      	orrs	r3, r2
 8008cec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d004      	beq.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d00:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d04:	d00a      	beq.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d02e      	beq.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008d1a:	d129      	bne.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008d1c:	4b4a      	ldr	r3, [pc, #296]	@ (8008e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008d1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d22:	0c1b      	lsrs	r3, r3, #16
 8008d24:	f003 0303 	and.w	r3, r3, #3
 8008d28:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008d2a:	4b47      	ldr	r3, [pc, #284]	@ (8008e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008d2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d30:	0f1b      	lsrs	r3, r3, #28
 8008d32:	f003 0307 	and.w	r3, r3, #7
 8008d36:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	019a      	lsls	r2, r3, #6
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	041b      	lsls	r3, r3, #16
 8008d42:	431a      	orrs	r2, r3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	68db      	ldr	r3, [r3, #12]
 8008d48:	061b      	lsls	r3, r3, #24
 8008d4a:	431a      	orrs	r2, r3
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	071b      	lsls	r3, r3, #28
 8008d50:	493d      	ldr	r1, [pc, #244]	@ (8008e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008d52:	4313      	orrs	r3, r2
 8008d54:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008d58:	4b3b      	ldr	r3, [pc, #236]	@ (8008e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008d5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d5e:	f023 021f 	bic.w	r2, r3, #31
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d66:	3b01      	subs	r3, #1
 8008d68:	4937      	ldr	r1, [pc, #220]	@ (8008e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d01d      	beq.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008d7c:	4b32      	ldr	r3, [pc, #200]	@ (8008e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008d7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d82:	0e1b      	lsrs	r3, r3, #24
 8008d84:	f003 030f 	and.w	r3, r3, #15
 8008d88:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008d8a:	4b2f      	ldr	r3, [pc, #188]	@ (8008e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008d8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d90:	0f1b      	lsrs	r3, r3, #28
 8008d92:	f003 0307 	and.w	r3, r3, #7
 8008d96:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	019a      	lsls	r2, r3, #6
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	691b      	ldr	r3, [r3, #16]
 8008da2:	041b      	lsls	r3, r3, #16
 8008da4:	431a      	orrs	r2, r3
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	061b      	lsls	r3, r3, #24
 8008daa:	431a      	orrs	r2, r3
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	071b      	lsls	r3, r3, #28
 8008db0:	4925      	ldr	r1, [pc, #148]	@ (8008e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008db2:	4313      	orrs	r3, r2
 8008db4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d011      	beq.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	019a      	lsls	r2, r3, #6
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	691b      	ldr	r3, [r3, #16]
 8008dce:	041b      	lsls	r3, r3, #16
 8008dd0:	431a      	orrs	r2, r3
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	68db      	ldr	r3, [r3, #12]
 8008dd6:	061b      	lsls	r3, r3, #24
 8008dd8:	431a      	orrs	r2, r3
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	071b      	lsls	r3, r3, #28
 8008de0:	4919      	ldr	r1, [pc, #100]	@ (8008e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008de2:	4313      	orrs	r3, r2
 8008de4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008de8:	4b17      	ldr	r3, [pc, #92]	@ (8008e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a16      	ldr	r2, [pc, #88]	@ (8008e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008dee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008df2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008df4:	f7fa f9b6 	bl	8003164 <HAL_GetTick>
 8008df8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008dfa:	e008      	b.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008dfc:	f7fa f9b2 	bl	8003164 <HAL_GetTick>
 8008e00:	4602      	mov	r2, r0
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	1ad3      	subs	r3, r2, r3
 8008e06:	2b64      	cmp	r3, #100	@ 0x64
 8008e08:	d901      	bls.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008e0a:	2303      	movs	r3, #3
 8008e0c:	e0d7      	b.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8008e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d0f0      	beq.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008e1a:	69bb      	ldr	r3, [r7, #24]
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	f040 80cd 	bne.w	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008e22:	4b09      	ldr	r3, [pc, #36]	@ (8008e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a08      	ldr	r2, [pc, #32]	@ (8008e48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008e28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008e2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e2e:	f7fa f999 	bl	8003164 <HAL_GetTick>
 8008e32:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008e34:	e00a      	b.n	8008e4c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008e36:	f7fa f995 	bl	8003164 <HAL_GetTick>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	1ad3      	subs	r3, r2, r3
 8008e40:	2b64      	cmp	r3, #100	@ 0x64
 8008e42:	d903      	bls.n	8008e4c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008e44:	2303      	movs	r3, #3
 8008e46:	e0ba      	b.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008e48:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008e4c:	4b5e      	ldr	r3, [pc, #376]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e58:	d0ed      	beq.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d003      	beq.n	8008e6e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d009      	beq.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d02e      	beq.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d12a      	bne.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008e82:	4b51      	ldr	r3, [pc, #324]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e88:	0c1b      	lsrs	r3, r3, #16
 8008e8a:	f003 0303 	and.w	r3, r3, #3
 8008e8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008e90:	4b4d      	ldr	r3, [pc, #308]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e96:	0f1b      	lsrs	r3, r3, #28
 8008e98:	f003 0307 	and.w	r3, r3, #7
 8008e9c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	695b      	ldr	r3, [r3, #20]
 8008ea2:	019a      	lsls	r2, r3, #6
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	041b      	lsls	r3, r3, #16
 8008ea8:	431a      	orrs	r2, r3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	699b      	ldr	r3, [r3, #24]
 8008eae:	061b      	lsls	r3, r3, #24
 8008eb0:	431a      	orrs	r2, r3
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	071b      	lsls	r3, r3, #28
 8008eb6:	4944      	ldr	r1, [pc, #272]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008ebe:	4b42      	ldr	r3, [pc, #264]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008ec0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ec4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	021b      	lsls	r3, r3, #8
 8008ed0:	493d      	ldr	r1, [pc, #244]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d022      	beq.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ee8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008eec:	d11d      	bne.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008eee:	4b36      	ldr	r3, [pc, #216]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ef4:	0e1b      	lsrs	r3, r3, #24
 8008ef6:	f003 030f 	and.w	r3, r3, #15
 8008efa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008efc:	4b32      	ldr	r3, [pc, #200]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f02:	0f1b      	lsrs	r3, r3, #28
 8008f04:	f003 0307 	and.w	r3, r3, #7
 8008f08:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	695b      	ldr	r3, [r3, #20]
 8008f0e:	019a      	lsls	r2, r3, #6
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6a1b      	ldr	r3, [r3, #32]
 8008f14:	041b      	lsls	r3, r3, #16
 8008f16:	431a      	orrs	r2, r3
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	061b      	lsls	r3, r3, #24
 8008f1c:	431a      	orrs	r2, r3
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	071b      	lsls	r3, r3, #28
 8008f22:	4929      	ldr	r1, [pc, #164]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008f24:	4313      	orrs	r3, r2
 8008f26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f003 0308 	and.w	r3, r3, #8
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d028      	beq.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008f36:	4b24      	ldr	r3, [pc, #144]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f3c:	0e1b      	lsrs	r3, r3, #24
 8008f3e:	f003 030f 	and.w	r3, r3, #15
 8008f42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008f44:	4b20      	ldr	r3, [pc, #128]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f4a:	0c1b      	lsrs	r3, r3, #16
 8008f4c:	f003 0303 	and.w	r3, r3, #3
 8008f50:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	695b      	ldr	r3, [r3, #20]
 8008f56:	019a      	lsls	r2, r3, #6
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	041b      	lsls	r3, r3, #16
 8008f5c:	431a      	orrs	r2, r3
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	061b      	lsls	r3, r3, #24
 8008f62:	431a      	orrs	r2, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	69db      	ldr	r3, [r3, #28]
 8008f68:	071b      	lsls	r3, r3, #28
 8008f6a:	4917      	ldr	r1, [pc, #92]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008f72:	4b15      	ldr	r3, [pc, #84]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f78:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f80:	4911      	ldr	r1, [pc, #68]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008f82:	4313      	orrs	r3, r2
 8008f84:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008f88:	4b0f      	ldr	r3, [pc, #60]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a0e      	ldr	r2, [pc, #56]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008f8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f94:	f7fa f8e6 	bl	8003164 <HAL_GetTick>
 8008f98:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008f9a:	e008      	b.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008f9c:	f7fa f8e2 	bl	8003164 <HAL_GetTick>
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	1ad3      	subs	r3, r2, r3
 8008fa6:	2b64      	cmp	r3, #100	@ 0x64
 8008fa8:	d901      	bls.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008faa:	2303      	movs	r3, #3
 8008fac:	e007      	b.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008fae:	4b06      	ldr	r3, [pc, #24]	@ (8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008fb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008fba:	d1ef      	bne.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008fbc:	2300      	movs	r3, #0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3720      	adds	r7, #32
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	bf00      	nop
 8008fc8:	40023800 	.word	0x40023800

08008fcc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b087      	sub	sp, #28
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008fea:	f040 808d 	bne.w	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 8008fee:	4b93      	ldr	r3, [pc, #588]	@ (800923c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ff4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008ffc:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009004:	d07c      	beq.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800900c:	d87b      	bhi.n	8009106 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d004      	beq.n	800901e <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800901a:	d039      	beq.n	8009090 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800901c:	e073      	b.n	8009106 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800901e:	4b87      	ldr	r3, [pc, #540]	@ (800923c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009026:	2b00      	cmp	r3, #0
 8009028:	d108      	bne.n	800903c <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800902a:	4b84      	ldr	r3, [pc, #528]	@ (800923c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009032:	4a83      	ldr	r2, [pc, #524]	@ (8009240 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009034:	fbb2 f3f3 	udiv	r3, r2, r3
 8009038:	613b      	str	r3, [r7, #16]
 800903a:	e007      	b.n	800904c <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800903c:	4b7f      	ldr	r3, [pc, #508]	@ (800923c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009044:	4a7f      	ldr	r2, [pc, #508]	@ (8009244 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009046:	fbb2 f3f3 	udiv	r3, r2, r3
 800904a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800904c:	4b7b      	ldr	r3, [pc, #492]	@ (800923c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800904e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009052:	0e1b      	lsrs	r3, r3, #24
 8009054:	f003 030f 	and.w	r3, r3, #15
 8009058:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800905a:	4b78      	ldr	r3, [pc, #480]	@ (800923c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800905c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009060:	099b      	lsrs	r3, r3, #6
 8009062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009066:	693a      	ldr	r2, [r7, #16]
 8009068:	fb03 f202 	mul.w	r2, r3, r2
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009072:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8009074:	4b71      	ldr	r3, [pc, #452]	@ (800923c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009076:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800907a:	0a1b      	lsrs	r3, r3, #8
 800907c:	f003 031f 	and.w	r3, r3, #31
 8009080:	3301      	adds	r3, #1
 8009082:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009084:	697a      	ldr	r2, [r7, #20]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	fbb2 f3f3 	udiv	r3, r2, r3
 800908c:	617b      	str	r3, [r7, #20]
        break;
 800908e:	e03b      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009090:	4b6a      	ldr	r3, [pc, #424]	@ (800923c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009098:	2b00      	cmp	r3, #0
 800909a:	d108      	bne.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800909c:	4b67      	ldr	r3, [pc, #412]	@ (800923c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80090a4:	4a66      	ldr	r2, [pc, #408]	@ (8009240 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80090a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80090aa:	613b      	str	r3, [r7, #16]
 80090ac:	e007      	b.n	80090be <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80090ae:	4b63      	ldr	r3, [pc, #396]	@ (800923c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80090b6:	4a63      	ldr	r2, [pc, #396]	@ (8009244 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80090b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80090bc:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80090be:	4b5f      	ldr	r3, [pc, #380]	@ (800923c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80090c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80090c4:	0e1b      	lsrs	r3, r3, #24
 80090c6:	f003 030f 	and.w	r3, r3, #15
 80090ca:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80090cc:	4b5b      	ldr	r3, [pc, #364]	@ (800923c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80090ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80090d2:	099b      	lsrs	r3, r3, #6
 80090d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090d8:	693a      	ldr	r2, [r7, #16]
 80090da:	fb03 f202 	mul.w	r2, r3, r2
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80090e4:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80090e6:	4b55      	ldr	r3, [pc, #340]	@ (800923c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80090e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80090ec:	f003 031f 	and.w	r3, r3, #31
 80090f0:	3301      	adds	r3, #1
 80090f2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80090f4:	697a      	ldr	r2, [r7, #20]
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80090fc:	617b      	str	r3, [r7, #20]
        break;
 80090fe:	e003      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8009100:	4b51      	ldr	r3, [pc, #324]	@ (8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009102:	617b      	str	r3, [r7, #20]
        break;
 8009104:	e000      	b.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 8009106:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800910e:	f040 808d 	bne.w	800922c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 8009112:	4b4a      	ldr	r3, [pc, #296]	@ (800923c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009114:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009118:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8009120:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009128:	d07c      	beq.n	8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009130:	d87b      	bhi.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d004      	beq.n	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800913e:	d039      	beq.n	80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8009140:	e073      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009142:	4b3e      	ldr	r3, [pc, #248]	@ (800923c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800914a:	2b00      	cmp	r3, #0
 800914c:	d108      	bne.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800914e:	4b3b      	ldr	r3, [pc, #236]	@ (800923c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009150:	685b      	ldr	r3, [r3, #4]
 8009152:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009156:	4a3a      	ldr	r2, [pc, #232]	@ (8009240 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009158:	fbb2 f3f3 	udiv	r3, r2, r3
 800915c:	613b      	str	r3, [r7, #16]
 800915e:	e007      	b.n	8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009160:	4b36      	ldr	r3, [pc, #216]	@ (800923c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009168:	4a36      	ldr	r2, [pc, #216]	@ (8009244 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800916a:	fbb2 f3f3 	udiv	r3, r2, r3
 800916e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8009170:	4b32      	ldr	r3, [pc, #200]	@ (800923c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009176:	0e1b      	lsrs	r3, r3, #24
 8009178:	f003 030f 	and.w	r3, r3, #15
 800917c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800917e:	4b2f      	ldr	r3, [pc, #188]	@ (800923c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8009180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009184:	099b      	lsrs	r3, r3, #6
 8009186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800918a:	693a      	ldr	r2, [r7, #16]
 800918c:	fb03 f202 	mul.w	r2, r3, r2
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	fbb2 f3f3 	udiv	r3, r2, r3
 8009196:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8009198:	4b28      	ldr	r3, [pc, #160]	@ (800923c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800919a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800919e:	0a1b      	lsrs	r3, r3, #8
 80091a0:	f003 031f 	and.w	r3, r3, #31
 80091a4:	3301      	adds	r3, #1
 80091a6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80091a8:	697a      	ldr	r2, [r7, #20]
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80091b0:	617b      	str	r3, [r7, #20]
        break;
 80091b2:	e03b      	b.n	800922c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80091b4:	4b21      	ldr	r3, [pc, #132]	@ (800923c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d108      	bne.n	80091d2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80091c0:	4b1e      	ldr	r3, [pc, #120]	@ (800923c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80091c8:	4a1d      	ldr	r2, [pc, #116]	@ (8009240 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80091ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80091ce:	613b      	str	r3, [r7, #16]
 80091d0:	e007      	b.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80091d2:	4b1a      	ldr	r3, [pc, #104]	@ (800923c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80091da:	4a1a      	ldr	r2, [pc, #104]	@ (8009244 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80091dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80091e0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80091e2:	4b16      	ldr	r3, [pc, #88]	@ (800923c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80091e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80091e8:	0e1b      	lsrs	r3, r3, #24
 80091ea:	f003 030f 	and.w	r3, r3, #15
 80091ee:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80091f0:	4b12      	ldr	r3, [pc, #72]	@ (800923c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80091f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80091f6:	099b      	lsrs	r3, r3, #6
 80091f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091fc:	693a      	ldr	r2, [r7, #16]
 80091fe:	fb03 f202 	mul.w	r2, r3, r2
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	fbb2 f3f3 	udiv	r3, r2, r3
 8009208:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800920a:	4b0c      	ldr	r3, [pc, #48]	@ (800923c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800920c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009210:	f003 031f 	and.w	r3, r3, #31
 8009214:	3301      	adds	r3, #1
 8009216:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009218:	697a      	ldr	r2, [r7, #20]
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009220:	617b      	str	r3, [r7, #20]
        break;
 8009222:	e003      	b.n	800922c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 8009224:	4b08      	ldr	r3, [pc, #32]	@ (8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009226:	617b      	str	r3, [r7, #20]
        break;
 8009228:	e000      	b.n	800922c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 800922a:	bf00      	nop
      }
    }
  }

  return frequency;
 800922c:	697b      	ldr	r3, [r7, #20]
}
 800922e:	4618      	mov	r0, r3
 8009230:	371c      	adds	r7, #28
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr
 800923a:	bf00      	nop
 800923c:	40023800 	.word	0x40023800
 8009240:	00f42400 	.word	0x00f42400
 8009244:	017d7840 	.word	0x017d7840
 8009248:	00bb8000 	.word	0x00bb8000

0800924c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b084      	sub	sp, #16
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009254:	2301      	movs	r3, #1
 8009256:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d101      	bne.n	8009262 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800925e:	2301      	movs	r3, #1
 8009260:	e071      	b.n	8009346 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	7f5b      	ldrb	r3, [r3, #29]
 8009266:	b2db      	uxtb	r3, r3
 8009268:	2b00      	cmp	r3, #0
 800926a:	d105      	bne.n	8009278 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2200      	movs	r2, #0
 8009270:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f7f9 f91c 	bl	80024b0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2202      	movs	r2, #2
 800927c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	68db      	ldr	r3, [r3, #12]
 8009284:	f003 0310 	and.w	r3, r3, #16
 8009288:	2b10      	cmp	r3, #16
 800928a:	d053      	beq.n	8009334 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	22ca      	movs	r2, #202	@ 0xca
 8009292:	625a      	str	r2, [r3, #36]	@ 0x24
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	2253      	movs	r2, #83	@ 0x53
 800929a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 fac7 	bl	8009830 <RTC_EnterInitMode>
 80092a2:	4603      	mov	r3, r0
 80092a4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80092a6:	7bfb      	ldrb	r3, [r7, #15]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d12a      	bne.n	8009302 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	6899      	ldr	r1, [r3, #8]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	4b26      	ldr	r3, [pc, #152]	@ (8009350 <HAL_RTC_Init+0x104>)
 80092b8:	400b      	ands	r3, r1
 80092ba:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	6899      	ldr	r1, [r3, #8]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	685a      	ldr	r2, [r3, #4]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	691b      	ldr	r3, [r3, #16]
 80092ca:	431a      	orrs	r2, r3
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	695b      	ldr	r3, [r3, #20]
 80092d0:	431a      	orrs	r2, r3
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	430a      	orrs	r2, r1
 80092d8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	68d2      	ldr	r2, [r2, #12]
 80092e2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	6919      	ldr	r1, [r3, #16]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	689b      	ldr	r3, [r3, #8]
 80092ee:	041a      	lsls	r2, r3, #16
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	430a      	orrs	r2, r1
 80092f6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 fad0 	bl	800989e <RTC_ExitInitMode>
 80092fe:	4603      	mov	r3, r0
 8009300:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009302:	7bfb      	ldrb	r3, [r7, #15]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d110      	bne.n	800932a <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f022 0208 	bic.w	r2, r2, #8
 8009316:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	699a      	ldr	r2, [r3, #24]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	430a      	orrs	r2, r1
 8009328:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	22ff      	movs	r2, #255	@ 0xff
 8009330:	625a      	str	r2, [r3, #36]	@ 0x24
 8009332:	e001      	b.n	8009338 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8009334:	2300      	movs	r3, #0
 8009336:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8009338:	7bfb      	ldrb	r3, [r7, #15]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d102      	bne.n	8009344 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2201      	movs	r2, #1
 8009342:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8009344:	7bfb      	ldrb	r3, [r7, #15]
}
 8009346:	4618      	mov	r0, r3
 8009348:	3710      	adds	r7, #16
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
 800934e:	bf00      	nop
 8009350:	ff8fffbf 	.word	0xff8fffbf

08009354 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009354:	b590      	push	{r4, r7, lr}
 8009356:	b087      	sub	sp, #28
 8009358:	af00      	add	r7, sp, #0
 800935a:	60f8      	str	r0, [r7, #12]
 800935c:	60b9      	str	r1, [r7, #8]
 800935e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009360:	2300      	movs	r3, #0
 8009362:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	7f1b      	ldrb	r3, [r3, #28]
 8009368:	2b01      	cmp	r3, #1
 800936a:	d101      	bne.n	8009370 <HAL_RTC_SetTime+0x1c>
 800936c:	2302      	movs	r3, #2
 800936e:	e085      	b.n	800947c <HAL_RTC_SetTime+0x128>
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2201      	movs	r2, #1
 8009374:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2202      	movs	r2, #2
 800937a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d126      	bne.n	80093d0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	689b      	ldr	r3, [r3, #8]
 8009388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800938c:	2b00      	cmp	r3, #0
 800938e:	d102      	bne.n	8009396 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	2200      	movs	r2, #0
 8009394:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	4618      	mov	r0, r3
 800939c:	f000 faa4 	bl	80098e8 <RTC_ByteToBcd2>
 80093a0:	4603      	mov	r3, r0
 80093a2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	785b      	ldrb	r3, [r3, #1]
 80093a8:	4618      	mov	r0, r3
 80093aa:	f000 fa9d 	bl	80098e8 <RTC_ByteToBcd2>
 80093ae:	4603      	mov	r3, r0
 80093b0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80093b2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	789b      	ldrb	r3, [r3, #2]
 80093b8:	4618      	mov	r0, r3
 80093ba:	f000 fa95 	bl	80098e8 <RTC_ByteToBcd2>
 80093be:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80093c0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	78db      	ldrb	r3, [r3, #3]
 80093c8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80093ca:	4313      	orrs	r3, r2
 80093cc:	617b      	str	r3, [r7, #20]
 80093ce:	e018      	b.n	8009402 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d102      	bne.n	80093e4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	2200      	movs	r2, #0
 80093e2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	781b      	ldrb	r3, [r3, #0]
 80093e8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	785b      	ldrb	r3, [r3, #1]
 80093ee:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80093f0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80093f2:	68ba      	ldr	r2, [r7, #8]
 80093f4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80093f6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	78db      	ldrb	r3, [r3, #3]
 80093fc:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80093fe:	4313      	orrs	r3, r2
 8009400:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	22ca      	movs	r2, #202	@ 0xca
 8009408:	625a      	str	r2, [r3, #36]	@ 0x24
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	2253      	movs	r2, #83	@ 0x53
 8009410:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009412:	68f8      	ldr	r0, [r7, #12]
 8009414:	f000 fa0c 	bl	8009830 <RTC_EnterInitMode>
 8009418:	4603      	mov	r3, r0
 800941a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800941c:	7cfb      	ldrb	r3, [r7, #19]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d11e      	bne.n	8009460 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	6979      	ldr	r1, [r7, #20]
 8009428:	4b16      	ldr	r3, [pc, #88]	@ (8009484 <HAL_RTC_SetTime+0x130>)
 800942a:	400b      	ands	r3, r1
 800942c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	689a      	ldr	r2, [r3, #8]
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800943c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	6899      	ldr	r1, [r3, #8]
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	68da      	ldr	r2, [r3, #12]
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	691b      	ldr	r3, [r3, #16]
 800944c:	431a      	orrs	r2, r3
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	430a      	orrs	r2, r1
 8009454:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009456:	68f8      	ldr	r0, [r7, #12]
 8009458:	f000 fa21 	bl	800989e <RTC_ExitInitMode>
 800945c:	4603      	mov	r3, r0
 800945e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009460:	7cfb      	ldrb	r3, [r7, #19]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d102      	bne.n	800946c <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2201      	movs	r2, #1
 800946a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	22ff      	movs	r2, #255	@ 0xff
 8009472:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2200      	movs	r2, #0
 8009478:	771a      	strb	r2, [r3, #28]

  return status;
 800947a:	7cfb      	ldrb	r3, [r7, #19]
}
 800947c:	4618      	mov	r0, r3
 800947e:	371c      	adds	r7, #28
 8009480:	46bd      	mov	sp, r7
 8009482:	bd90      	pop	{r4, r7, pc}
 8009484:	007f7f7f 	.word	0x007f7f7f

08009488 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009488:	b590      	push	{r4, r7, lr}
 800948a:	b087      	sub	sp, #28
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009494:	2300      	movs	r3, #0
 8009496:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	7f1b      	ldrb	r3, [r3, #28]
 800949c:	2b01      	cmp	r3, #1
 800949e:	d101      	bne.n	80094a4 <HAL_RTC_SetDate+0x1c>
 80094a0:	2302      	movs	r3, #2
 80094a2:	e06f      	b.n	8009584 <HAL_RTC_SetDate+0xfc>
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2201      	movs	r2, #1
 80094a8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2202      	movs	r2, #2
 80094ae:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d10e      	bne.n	80094d4 <HAL_RTC_SetDate+0x4c>
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	785b      	ldrb	r3, [r3, #1]
 80094ba:	f003 0310 	and.w	r3, r3, #16
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d008      	beq.n	80094d4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	785b      	ldrb	r3, [r3, #1]
 80094c6:	f023 0310 	bic.w	r3, r3, #16
 80094ca:	b2db      	uxtb	r3, r3
 80094cc:	330a      	adds	r3, #10
 80094ce:	b2da      	uxtb	r2, r3
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d11c      	bne.n	8009514 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	78db      	ldrb	r3, [r3, #3]
 80094de:	4618      	mov	r0, r3
 80094e0:	f000 fa02 	bl	80098e8 <RTC_ByteToBcd2>
 80094e4:	4603      	mov	r3, r0
 80094e6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	785b      	ldrb	r3, [r3, #1]
 80094ec:	4618      	mov	r0, r3
 80094ee:	f000 f9fb 	bl	80098e8 <RTC_ByteToBcd2>
 80094f2:	4603      	mov	r3, r0
 80094f4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80094f6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	789b      	ldrb	r3, [r3, #2]
 80094fc:	4618      	mov	r0, r3
 80094fe:	f000 f9f3 	bl	80098e8 <RTC_ByteToBcd2>
 8009502:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009504:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800950e:	4313      	orrs	r3, r2
 8009510:	617b      	str	r3, [r7, #20]
 8009512:	e00e      	b.n	8009532 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	78db      	ldrb	r3, [r3, #3]
 8009518:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	785b      	ldrb	r3, [r3, #1]
 800951e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009520:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8009522:	68ba      	ldr	r2, [r7, #8]
 8009524:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009526:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	781b      	ldrb	r3, [r3, #0]
 800952c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800952e:	4313      	orrs	r3, r2
 8009530:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	22ca      	movs	r2, #202	@ 0xca
 8009538:	625a      	str	r2, [r3, #36]	@ 0x24
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	2253      	movs	r2, #83	@ 0x53
 8009540:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009542:	68f8      	ldr	r0, [r7, #12]
 8009544:	f000 f974 	bl	8009830 <RTC_EnterInitMode>
 8009548:	4603      	mov	r3, r0
 800954a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800954c:	7cfb      	ldrb	r3, [r7, #19]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d10a      	bne.n	8009568 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681a      	ldr	r2, [r3, #0]
 8009556:	6979      	ldr	r1, [r7, #20]
 8009558:	4b0c      	ldr	r3, [pc, #48]	@ (800958c <HAL_RTC_SetDate+0x104>)
 800955a:	400b      	ands	r3, r1
 800955c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800955e:	68f8      	ldr	r0, [r7, #12]
 8009560:	f000 f99d 	bl	800989e <RTC_ExitInitMode>
 8009564:	4603      	mov	r3, r0
 8009566:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009568:	7cfb      	ldrb	r3, [r7, #19]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d102      	bne.n	8009574 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2201      	movs	r2, #1
 8009572:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	22ff      	movs	r2, #255	@ 0xff
 800957a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2200      	movs	r2, #0
 8009580:	771a      	strb	r2, [r3, #28]

  return status;
 8009582:	7cfb      	ldrb	r3, [r7, #19]
}
 8009584:	4618      	mov	r0, r3
 8009586:	371c      	adds	r7, #28
 8009588:	46bd      	mov	sp, r7
 800958a:	bd90      	pop	{r4, r7, pc}
 800958c:	00ffff3f 	.word	0x00ffff3f

08009590 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009590:	b590      	push	{r4, r7, lr}
 8009592:	b089      	sub	sp, #36	@ 0x24
 8009594:	af00      	add	r7, sp, #0
 8009596:	60f8      	str	r0, [r7, #12]
 8009598:	60b9      	str	r1, [r7, #8]
 800959a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800959c:	2300      	movs	r3, #0
 800959e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 80095a0:	2300      	movs	r3, #0
 80095a2:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 80095a4:	2300      	movs	r3, #0
 80095a6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	7f1b      	ldrb	r3, [r3, #28]
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d101      	bne.n	80095b4 <HAL_RTC_SetAlarm+0x24>
 80095b0:	2302      	movs	r3, #2
 80095b2:	e113      	b.n	80097dc <HAL_RTC_SetAlarm+0x24c>
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2201      	movs	r2, #1
 80095b8:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2202      	movs	r2, #2
 80095be:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d137      	bne.n	8009636 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d102      	bne.n	80095da <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	2200      	movs	r2, #0
 80095d8:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	4618      	mov	r0, r3
 80095e0:	f000 f982 	bl	80098e8 <RTC_ByteToBcd2>
 80095e4:	4603      	mov	r3, r0
 80095e6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	785b      	ldrb	r3, [r3, #1]
 80095ec:	4618      	mov	r0, r3
 80095ee:	f000 f97b 	bl	80098e8 <RTC_ByteToBcd2>
 80095f2:	4603      	mov	r3, r0
 80095f4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80095f6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	789b      	ldrb	r3, [r3, #2]
 80095fc:	4618      	mov	r0, r3
 80095fe:	f000 f973 	bl	80098e8 <RTC_ByteToBcd2>
 8009602:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009604:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	78db      	ldrb	r3, [r3, #3]
 800960c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800960e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009618:	4618      	mov	r0, r3
 800961a:	f000 f965 	bl	80098e8 <RTC_ByteToBcd2>
 800961e:	4603      	mov	r3, r0
 8009620:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009622:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800962a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009630:	4313      	orrs	r3, r2
 8009632:	61fb      	str	r3, [r7, #28]
 8009634:	e023      	b.n	800967e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009640:	2b00      	cmp	r3, #0
 8009642:	d102      	bne.n	800964a <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	2200      	movs	r2, #0
 8009648:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	781b      	ldrb	r3, [r3, #0]
 800964e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	785b      	ldrb	r3, [r3, #1]
 8009654:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009656:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009658:	68ba      	ldr	r2, [r7, #8]
 800965a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800965c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	78db      	ldrb	r3, [r3, #3]
 8009662:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009664:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	f893 3020 	ldrb.w	r3, [r3, #32]
 800966c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800966e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009674:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800967a:	4313      	orrs	r3, r2
 800967c:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009686:	4313      	orrs	r3, r2
 8009688:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	22ca      	movs	r2, #202	@ 0xca
 8009690:	625a      	str	r2, [r3, #36]	@ 0x24
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	2253      	movs	r2, #83	@ 0x53
 8009698:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800969e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096a2:	d148      	bne.n	8009736 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	689a      	ldr	r2, [r3, #8]
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80096b2:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	689a      	ldr	r2, [r3, #8]
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80096c2:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	68db      	ldr	r3, [r3, #12]
 80096ca:	b2da      	uxtb	r2, r3
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80096d4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80096d6:	f7f9 fd45 	bl	8003164 <HAL_GetTick>
 80096da:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80096dc:	e013      	b.n	8009706 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80096de:	f7f9 fd41 	bl	8003164 <HAL_GetTick>
 80096e2:	4602      	mov	r2, r0
 80096e4:	69bb      	ldr	r3, [r7, #24]
 80096e6:	1ad3      	subs	r3, r2, r3
 80096e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80096ec:	d90b      	bls.n	8009706 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	22ff      	movs	r2, #255	@ 0xff
 80096f4:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	2203      	movs	r2, #3
 80096fa:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2200      	movs	r2, #0
 8009700:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009702:	2303      	movs	r3, #3
 8009704:	e06a      	b.n	80097dc <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	68db      	ldr	r3, [r3, #12]
 800970c:	f003 0301 	and.w	r3, r3, #1
 8009710:	2b00      	cmp	r3, #0
 8009712:	d0e4      	beq.n	80096de <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	69fa      	ldr	r2, [r7, #28]
 800971a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	697a      	ldr	r2, [r7, #20]
 8009722:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	689a      	ldr	r2, [r3, #8]
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009732:	609a      	str	r2, [r3, #8]
 8009734:	e047      	b.n	80097c6 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	689a      	ldr	r2, [r3, #8]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8009744:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	689a      	ldr	r2, [r3, #8]
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009754:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	68db      	ldr	r3, [r3, #12]
 800975c:	b2da      	uxtb	r2, r3
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8009766:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009768:	f7f9 fcfc 	bl	8003164 <HAL_GetTick>
 800976c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800976e:	e013      	b.n	8009798 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009770:	f7f9 fcf8 	bl	8003164 <HAL_GetTick>
 8009774:	4602      	mov	r2, r0
 8009776:	69bb      	ldr	r3, [r7, #24]
 8009778:	1ad3      	subs	r3, r2, r3
 800977a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800977e:	d90b      	bls.n	8009798 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	22ff      	movs	r2, #255	@ 0xff
 8009786:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2203      	movs	r2, #3
 800978c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2200      	movs	r2, #0
 8009792:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009794:	2303      	movs	r3, #3
 8009796:	e021      	b.n	80097dc <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	68db      	ldr	r3, [r3, #12]
 800979e:	f003 0302 	and.w	r3, r3, #2
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d0e4      	beq.n	8009770 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	69fa      	ldr	r2, [r7, #28]
 80097ac:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	697a      	ldr	r2, [r7, #20]
 80097b4:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	689a      	ldr	r2, [r3, #8]
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80097c4:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	22ff      	movs	r2, #255	@ 0xff
 80097cc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	2201      	movs	r2, #1
 80097d2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2200      	movs	r2, #0
 80097d8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80097da:	2300      	movs	r3, #0
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3724      	adds	r7, #36	@ 0x24
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd90      	pop	{r4, r7, pc}

080097e4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80097ec:	2300      	movs	r3, #0
 80097ee:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4a0d      	ldr	r2, [pc, #52]	@ (800982c <HAL_RTC_WaitForSynchro+0x48>)
 80097f6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80097f8:	f7f9 fcb4 	bl	8003164 <HAL_GetTick>
 80097fc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80097fe:	e009      	b.n	8009814 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009800:	f7f9 fcb0 	bl	8003164 <HAL_GetTick>
 8009804:	4602      	mov	r2, r0
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	1ad3      	subs	r3, r2, r3
 800980a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800980e:	d901      	bls.n	8009814 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8009810:	2303      	movs	r3, #3
 8009812:	e007      	b.n	8009824 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	68db      	ldr	r3, [r3, #12]
 800981a:	f003 0320 	and.w	r3, r3, #32
 800981e:	2b00      	cmp	r3, #0
 8009820:	d0ee      	beq.n	8009800 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8009822:	2300      	movs	r3, #0
}
 8009824:	4618      	mov	r0, r3
 8009826:	3710      	adds	r7, #16
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}
 800982c:	0001ff5f 	.word	0x0001ff5f

08009830 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009838:	2300      	movs	r3, #0
 800983a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800983c:	2300      	movs	r3, #0
 800983e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	68db      	ldr	r3, [r3, #12]
 8009846:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800984a:	2b00      	cmp	r3, #0
 800984c:	d122      	bne.n	8009894 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	68da      	ldr	r2, [r3, #12]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800985c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800985e:	f7f9 fc81 	bl	8003164 <HAL_GetTick>
 8009862:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009864:	e00c      	b.n	8009880 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009866:	f7f9 fc7d 	bl	8003164 <HAL_GetTick>
 800986a:	4602      	mov	r2, r0
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	1ad3      	subs	r3, r2, r3
 8009870:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009874:	d904      	bls.n	8009880 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2204      	movs	r2, #4
 800987a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800987c:	2301      	movs	r3, #1
 800987e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	68db      	ldr	r3, [r3, #12]
 8009886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800988a:	2b00      	cmp	r3, #0
 800988c:	d102      	bne.n	8009894 <RTC_EnterInitMode+0x64>
 800988e:	7bfb      	ldrb	r3, [r7, #15]
 8009890:	2b01      	cmp	r3, #1
 8009892:	d1e8      	bne.n	8009866 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009894:	7bfb      	ldrb	r3, [r7, #15]
}
 8009896:	4618      	mov	r0, r3
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b084      	sub	sp, #16
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80098a6:	2300      	movs	r3, #0
 80098a8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	68da      	ldr	r2, [r3, #12]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80098b8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	f003 0320 	and.w	r3, r3, #32
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d10a      	bne.n	80098de <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f7ff ff8b 	bl	80097e4 <HAL_RTC_WaitForSynchro>
 80098ce:	4603      	mov	r3, r0
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d004      	beq.n	80098de <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2204      	movs	r2, #4
 80098d8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80098da:	2301      	movs	r3, #1
 80098dc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80098de:	7bfb      	ldrb	r3, [r7, #15]
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3710      	adds	r7, #16
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b085      	sub	sp, #20
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	4603      	mov	r3, r0
 80098f0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80098f2:	2300      	movs	r3, #0
 80098f4:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80098f6:	e005      	b.n	8009904 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	3301      	adds	r3, #1
 80098fc:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80098fe:	79fb      	ldrb	r3, [r7, #7]
 8009900:	3b0a      	subs	r3, #10
 8009902:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8009904:	79fb      	ldrb	r3, [r7, #7]
 8009906:	2b09      	cmp	r3, #9
 8009908:	d8f6      	bhi.n	80098f8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	b2db      	uxtb	r3, r3
 800990e:	011b      	lsls	r3, r3, #4
 8009910:	b2da      	uxtb	r2, r3
 8009912:	79fb      	ldrb	r3, [r7, #7]
 8009914:	4313      	orrs	r3, r2
 8009916:	b2db      	uxtb	r3, r3
}
 8009918:	4618      	mov	r0, r3
 800991a:	3714      	adds	r7, #20
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr

08009924 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8009924:	b480      	push	{r7}
 8009926:	b087      	sub	sp, #28
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009930:	2300      	movs	r3, #0
 8009932:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	7f1b      	ldrb	r3, [r3, #28]
 8009938:	2b01      	cmp	r3, #1
 800993a:	d101      	bne.n	8009940 <HAL_RTCEx_SetTimeStamp+0x1c>
 800993c:	2302      	movs	r3, #2
 800993e:	e050      	b.n	80099e2 <HAL_RTCEx_SetTimeStamp+0xbe>
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2201      	movs	r2, #1
 8009944:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2202      	movs	r2, #2
 800994a:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f022 0206 	bic.w	r2, r2, #6
 800995a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	687a      	ldr	r2, [r7, #4]
 8009968:	430a      	orrs	r2, r1
 800996a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	689a      	ldr	r2, [r3, #8]
 8009972:	4b1f      	ldr	r3, [pc, #124]	@ (80099f0 <HAL_RTCEx_SetTimeStamp+0xcc>)
 8009974:	4013      	ands	r3, r2
 8009976:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 8009978:	697a      	ldr	r2, [r7, #20]
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	4313      	orrs	r3, r2
 800997e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	22ca      	movs	r2, #202	@ 0xca
 8009986:	625a      	str	r2, [r3, #36]	@ 0x24
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	2253      	movs	r2, #83	@ 0x53
 800998e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	697a      	ldr	r2, [r7, #20]
 8009996:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	68db      	ldr	r3, [r3, #12]
 800999e:	b2da      	uxtb	r2, r3
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 80099a8:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	68db      	ldr	r3, [r3, #12]
 80099b0:	b2da      	uxtb	r2, r3
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 80099ba:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	689a      	ldr	r2, [r3, #8]
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80099ca:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	22ff      	movs	r2, #255	@ 0xff
 80099d2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2201      	movs	r2, #1
 80099d8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2200      	movs	r2, #0
 80099de:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80099e0:	2300      	movs	r3, #0
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	371c      	adds	r7, #28
 80099e6:	46bd      	mov	sp, r7
 80099e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ec:	4770      	bx	lr
 80099ee:	bf00      	nop
 80099f0:	fffff7f7 	.word	0xfffff7f7

080099f4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b088      	sub	sp, #32
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80099fc:	2300      	movs	r3, #0
 80099fe:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8009a00:	2300      	movs	r3, #0
 8009a02:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8009a04:	2300      	movs	r3, #0
 8009a06:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d101      	bne.n	8009a12 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	e156      	b.n	8009cc0 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8009a18:	b2db      	uxtb	r3, r3
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d106      	bne.n	8009a2c <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2200      	movs	r2, #0
 8009a22:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f7f9 f956 	bl	8002cd8 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2202      	movs	r2, #2
 8009a30:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f000 faed 	bl	800a014 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	68db      	ldr	r3, [r3, #12]
 8009a3e:	2b02      	cmp	r3, #2
 8009a40:	d00c      	beq.n	8009a5c <HAL_SAI_Init+0x68>
 8009a42:	2b02      	cmp	r3, #2
 8009a44:	d80d      	bhi.n	8009a62 <HAL_SAI_Init+0x6e>
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d002      	beq.n	8009a50 <HAL_SAI_Init+0x5c>
 8009a4a:	2b01      	cmp	r3, #1
 8009a4c:	d003      	beq.n	8009a56 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8009a4e:	e008      	b.n	8009a62 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8009a50:	2300      	movs	r3, #0
 8009a52:	61fb      	str	r3, [r7, #28]
      break;
 8009a54:	e006      	b.n	8009a64 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8009a56:	2310      	movs	r3, #16
 8009a58:	61fb      	str	r3, [r7, #28]
      break;
 8009a5a:	e003      	b.n	8009a64 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009a5c:	2320      	movs	r3, #32
 8009a5e:	61fb      	str	r3, [r7, #28]
      break;
 8009a60:	e000      	b.n	8009a64 <HAL_SAI_Init+0x70>
      break;
 8009a62:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	689b      	ldr	r3, [r3, #8]
 8009a68:	2b03      	cmp	r3, #3
 8009a6a:	d81e      	bhi.n	8009aaa <HAL_SAI_Init+0xb6>
 8009a6c:	a201      	add	r2, pc, #4	@ (adr r2, 8009a74 <HAL_SAI_Init+0x80>)
 8009a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a72:	bf00      	nop
 8009a74:	08009a85 	.word	0x08009a85
 8009a78:	08009a8b 	.word	0x08009a8b
 8009a7c:	08009a93 	.word	0x08009a93
 8009a80:	08009a9b 	.word	0x08009a9b
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8009a84:	2300      	movs	r3, #0
 8009a86:	617b      	str	r3, [r7, #20]
    }
    break;
 8009a88:	e010      	b.n	8009aac <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8009a8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a8e:	617b      	str	r3, [r7, #20]
    }
    break;
 8009a90:	e00c      	b.n	8009aac <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009a92:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009a96:	617b      	str	r3, [r7, #20]
    }
    break;
 8009a98:	e008      	b.n	8009aac <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009a9a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009a9e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009aa0:	69fb      	ldr	r3, [r7, #28]
 8009aa2:	f043 0301 	orr.w	r3, r3, #1
 8009aa6:	61fb      	str	r3, [r7, #28]
    }
    break;
 8009aa8:	e000      	b.n	8009aac <HAL_SAI_Init+0xb8>
    default:
      break;
 8009aaa:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a85      	ldr	r2, [pc, #532]	@ (8009cc8 <HAL_SAI_Init+0x2d4>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d004      	beq.n	8009ac0 <HAL_SAI_Init+0xcc>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4a84      	ldr	r2, [pc, #528]	@ (8009ccc <HAL_SAI_Init+0x2d8>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d103      	bne.n	8009ac8 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8009ac0:	4a83      	ldr	r2, [pc, #524]	@ (8009cd0 <HAL_SAI_Init+0x2dc>)
 8009ac2:	69fb      	ldr	r3, [r7, #28]
 8009ac4:	6013      	str	r3, [r2, #0]
 8009ac6:	e002      	b.n	8009ace <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8009ac8:	4a82      	ldr	r2, [pc, #520]	@ (8009cd4 <HAL_SAI_Init+0x2e0>)
 8009aca:	69fb      	ldr	r3, [r7, #28]
 8009acc:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	69db      	ldr	r3, [r3, #28]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d04c      	beq.n	8009b70 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4a7a      	ldr	r2, [pc, #488]	@ (8009cc8 <HAL_SAI_Init+0x2d4>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d004      	beq.n	8009aee <HAL_SAI_Init+0xfa>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	4a78      	ldr	r2, [pc, #480]	@ (8009ccc <HAL_SAI_Init+0x2d8>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d104      	bne.n	8009af8 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8009aee:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8009af2:	f7ff fa6b 	bl	8008fcc <HAL_RCCEx_GetPeriphCLKFreq>
 8009af6:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4a76      	ldr	r2, [pc, #472]	@ (8009cd8 <HAL_SAI_Init+0x2e4>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d004      	beq.n	8009b0c <HAL_SAI_Init+0x118>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4a75      	ldr	r2, [pc, #468]	@ (8009cdc <HAL_SAI_Init+0x2e8>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d104      	bne.n	8009b16 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8009b0c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8009b10:	f7ff fa5c 	bl	8008fcc <HAL_RCCEx_GetPeriphCLKFreq>
 8009b14:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8009b16:	693a      	ldr	r2, [r7, #16]
 8009b18:	4613      	mov	r3, r2
 8009b1a:	009b      	lsls	r3, r3, #2
 8009b1c:	4413      	add	r3, r2
 8009b1e:	005b      	lsls	r3, r3, #1
 8009b20:	461a      	mov	r2, r3
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	69db      	ldr	r3, [r3, #28]
 8009b26:	025b      	lsls	r3, r3, #9
 8009b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b2c:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	4a6b      	ldr	r2, [pc, #428]	@ (8009ce0 <HAL_SAI_Init+0x2ec>)
 8009b32:	fba2 2303 	umull	r2, r3, r2, r3
 8009b36:	08da      	lsrs	r2, r3, #3
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8009b3c:	68f9      	ldr	r1, [r7, #12]
 8009b3e:	4b68      	ldr	r3, [pc, #416]	@ (8009ce0 <HAL_SAI_Init+0x2ec>)
 8009b40:	fba3 2301 	umull	r2, r3, r3, r1
 8009b44:	08da      	lsrs	r2, r3, #3
 8009b46:	4613      	mov	r3, r2
 8009b48:	009b      	lsls	r3, r3, #2
 8009b4a:	4413      	add	r3, r2
 8009b4c:	005b      	lsls	r3, r3, #1
 8009b4e:	1aca      	subs	r2, r1, r3
 8009b50:	2a08      	cmp	r2, #8
 8009b52:	d904      	bls.n	8009b5e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6a1b      	ldr	r3, [r3, #32]
 8009b58:	1c5a      	adds	r2, r3, #1
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b62:	2b04      	cmp	r3, #4
 8009b64:	d104      	bne.n	8009b70 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6a1b      	ldr	r3, [r3, #32]
 8009b6a:	085a      	lsrs	r2, r3, #1
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d003      	beq.n	8009b80 <HAL_SAI_Init+0x18c>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	2b02      	cmp	r3, #2
 8009b7e:	d109      	bne.n	8009b94 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d101      	bne.n	8009b8c <HAL_SAI_Init+0x198>
 8009b88:	2300      	movs	r3, #0
 8009b8a:	e001      	b.n	8009b90 <HAL_SAI_Init+0x19c>
 8009b8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009b90:	61bb      	str	r3, [r7, #24]
 8009b92:	e008      	b.n	8009ba6 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d102      	bne.n	8009ba2 <HAL_SAI_Init+0x1ae>
 8009b9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009ba0:	e000      	b.n	8009ba4 <HAL_SAI_Init+0x1b0>
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	6819      	ldr	r1, [r3, #0]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681a      	ldr	r2, [r3, #0]
 8009bb0:	4b4c      	ldr	r3, [pc, #304]	@ (8009ce4 <HAL_SAI_Init+0x2f0>)
 8009bb2:	400b      	ands	r3, r1
 8009bb4:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	6819      	ldr	r1, [r3, #0]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	685a      	ldr	r2, [r3, #4]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bc4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009bca:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bd0:	431a      	orrs	r2, r3
 8009bd2:	69bb      	ldr	r3, [r7, #24]
 8009bd4:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 8009bde:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	691b      	ldr	r3, [r3, #16]
 8009be4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009bea:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6a1b      	ldr	r3, [r3, #32]
 8009bf0:	051b      	lsls	r3, r3, #20
 8009bf2:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	430a      	orrs	r2, r1
 8009bfa:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	6859      	ldr	r1, [r3, #4]
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	4b38      	ldr	r3, [pc, #224]	@ (8009ce8 <HAL_SAI_Init+0x2f4>)
 8009c08:	400b      	ands	r3, r1
 8009c0a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	6859      	ldr	r1, [r3, #4]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	699a      	ldr	r2, [r3, #24]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c1a:	431a      	orrs	r2, r3
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c20:	431a      	orrs	r2, r3
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	430a      	orrs	r2, r1
 8009c28:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	6899      	ldr	r1, [r3, #8]
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	4b2d      	ldr	r3, [pc, #180]	@ (8009cec <HAL_SAI_Init+0x2f8>)
 8009c36:	400b      	ands	r3, r1
 8009c38:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	6899      	ldr	r1, [r3, #8]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c44:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8009c4a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8009c50:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8009c56:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c5c:	3b01      	subs	r3, #1
 8009c5e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8009c60:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	430a      	orrs	r2, r1
 8009c68:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	68d9      	ldr	r1, [r3, #12]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681a      	ldr	r2, [r3, #0]
 8009c74:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8009c78:	400b      	ands	r3, r1
 8009c7a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	68d9      	ldr	r1, [r3, #12]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c8a:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c90:	041b      	lsls	r3, r3, #16
 8009c92:	431a      	orrs	r2, r3
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c98:	3b01      	subs	r3, #1
 8009c9a:	021b      	lsls	r3, r3, #8
 8009c9c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	430a      	orrs	r2, r1
 8009ca4:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8009cbe:	2300      	movs	r3, #0
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3720      	adds	r7, #32
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}
 8009cc8:	40015804 	.word	0x40015804
 8009ccc:	40015824 	.word	0x40015824
 8009cd0:	40015800 	.word	0x40015800
 8009cd4:	40015c00 	.word	0x40015c00
 8009cd8:	40015c04 	.word	0x40015c04
 8009cdc:	40015c24 	.word	0x40015c24
 8009ce0:	cccccccd 	.word	0xcccccccd
 8009ce4:	ff05c010 	.word	0xff05c010
 8009ce8:	ffff1ff0 	.word	0xffff1ff0
 8009cec:	fff88000 	.word	0xfff88000

08009cf0 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b086      	sub	sp, #24
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	60f8      	str	r0, [r7, #12]
 8009cf8:	60b9      	str	r1, [r7, #8]
 8009cfa:	4613      	mov	r3, r2
 8009cfc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8009cfe:	f7f9 fa31 	bl	8003164 <HAL_GetTick>
 8009d02:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d002      	beq.n	8009d10 <HAL_SAI_Transmit_DMA+0x20>
 8009d0a:	88fb      	ldrh	r3, [r7, #6]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d101      	bne.n	8009d14 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8009d10:	2301      	movs	r3, #1
 8009d12:	e093      	b.n	8009e3c <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8009d1a:	b2db      	uxtb	r3, r3
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	f040 808c 	bne.w	8009e3a <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	d101      	bne.n	8009d30 <HAL_SAI_Transmit_DMA+0x40>
 8009d2c:	2302      	movs	r3, #2
 8009d2e:	e085      	b.n	8009e3c <HAL_SAI_Transmit_DMA+0x14c>
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2201      	movs	r2, #1
 8009d34:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	68ba      	ldr	r2, [r7, #8]
 8009d3c:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	88fa      	ldrh	r2, [r7, #6]
 8009d42:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	88fa      	ldrh	r2, [r7, #6]
 8009d4a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2200      	movs	r2, #0
 8009d52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2212      	movs	r2, #18
 8009d5a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d62:	4a38      	ldr	r2, [pc, #224]	@ (8009e44 <HAL_SAI_Transmit_DMA+0x154>)
 8009d64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d6a:	4a37      	ldr	r2, [pc, #220]	@ (8009e48 <HAL_SAI_Transmit_DMA+0x158>)
 8009d6c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d72:	4a36      	ldr	r2, [pc, #216]	@ (8009e4c <HAL_SAI_Transmit_DMA+0x15c>)
 8009d74:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d86:	4619      	mov	r1, r3
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	331c      	adds	r3, #28
 8009d8e:	461a      	mov	r2, r3
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009d96:	f7f9 ffa5 	bl	8003ce4 <HAL_DMA_Start_IT>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d005      	beq.n	8009dac <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	2200      	movs	r2, #0
 8009da4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8009da8:	2301      	movs	r3, #1
 8009daa:	e047      	b.n	8009e3c <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009dac:	2100      	movs	r1, #0
 8009dae:	68f8      	ldr	r0, [r7, #12]
 8009db0:	f000 f8fa 	bl	8009fa8 <SAI_InterruptFlag>
 8009db4:	4601      	mov	r1, r0
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	691a      	ldr	r2, [r3, #16]
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	430a      	orrs	r2, r1
 8009dc2:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8009dd2:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8009dd4:	e015      	b.n	8009e02 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8009dd6:	f7f9 f9c5 	bl	8003164 <HAL_GetTick>
 8009dda:	4602      	mov	r2, r0
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	1ad3      	subs	r3, r2, r3
 8009de0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009de4:	d90d      	bls.n	8009e02 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8009dfe:	2303      	movs	r3, #3
 8009e00:	e01c      	b.n	8009e3c <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	695b      	ldr	r3, [r3, #20]
 8009e08:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d0e2      	beq.n	8009dd6 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d107      	bne.n	8009e2e <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	681a      	ldr	r2, [r3, #0]
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8009e2c:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2200      	movs	r2, #0
 8009e32:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8009e36:	2300      	movs	r3, #0
 8009e38:	e000      	b.n	8009e3c <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 8009e3a:	2302      	movs	r3, #2
  }
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3718      	adds	r7, #24
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}
 8009e44:	0800a0e5 	.word	0x0800a0e5
 8009e48:	0800a085 	.word	0x0800a085
 8009e4c:	0800a17d 	.word	0x0800a17d

08009e50 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	60f8      	str	r0, [r7, #12]
 8009e58:	60b9      	str	r1, [r7, #8]
 8009e5a:	4613      	mov	r3, r2
 8009e5c:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d002      	beq.n	8009e6a <HAL_SAI_Receive_DMA+0x1a>
 8009e64:	88fb      	ldrh	r3, [r7, #6]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d101      	bne.n	8009e6e <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	e074      	b.n	8009f58 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8009e74:	b2db      	uxtb	r3, r3
 8009e76:	2b01      	cmp	r3, #1
 8009e78:	d16d      	bne.n	8009f56 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8009e80:	2b01      	cmp	r3, #1
 8009e82:	d101      	bne.n	8009e88 <HAL_SAI_Receive_DMA+0x38>
 8009e84:	2302      	movs	r3, #2
 8009e86:	e067      	b.n	8009f58 <HAL_SAI_Receive_DMA+0x108>
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	68ba      	ldr	r2, [r7, #8]
 8009e94:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	88fa      	ldrh	r2, [r7, #6]
 8009e9a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	88fa      	ldrh	r2, [r7, #6]
 8009ea2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2222      	movs	r2, #34	@ 0x22
 8009eb2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009eba:	4a29      	ldr	r2, [pc, #164]	@ (8009f60 <HAL_SAI_Receive_DMA+0x110>)
 8009ebc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ec2:	4a28      	ldr	r2, [pc, #160]	@ (8009f64 <HAL_SAI_Receive_DMA+0x114>)
 8009ec4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009eca:	4a27      	ldr	r2, [pc, #156]	@ (8009f68 <HAL_SAI_Receive_DMA+0x118>)
 8009ecc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	331c      	adds	r3, #28
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009eee:	f7f9 fef9 	bl	8003ce4 <HAL_DMA_Start_IT>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d005      	beq.n	8009f04 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	2200      	movs	r2, #0
 8009efc:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8009f00:	2301      	movs	r3, #1
 8009f02:	e029      	b.n	8009f58 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009f04:	2100      	movs	r1, #0
 8009f06:	68f8      	ldr	r0, [r7, #12]
 8009f08:	f000 f84e 	bl	8009fa8 <SAI_InterruptFlag>
 8009f0c:	4601      	mov	r1, r0
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	691a      	ldr	r2, [r3, #16]
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	430a      	orrs	r2, r1
 8009f1a:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	681a      	ldr	r2, [r3, #0]
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8009f2a:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d107      	bne.n	8009f4a <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	681a      	ldr	r2, [r3, #0]
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8009f48:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8009f52:	2300      	movs	r3, #0
 8009f54:	e000      	b.n	8009f58 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8009f56:	2302      	movs	r3, #2
  }
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3710      	adds	r7, #16
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}
 8009f60:	0800a161 	.word	0x0800a161
 8009f64:	0800a101 	.word	0x0800a101
 8009f68:	0800a17d 	.word	0x0800a17d

08009f6c <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b083      	sub	sp, #12
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 8009f74:	bf00      	nop
 8009f76:	370c      	adds	r7, #12
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr

08009f80 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b083      	sub	sp, #12
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009f88:	bf00      	nop
 8009f8a:	370c      	adds	r7, #12
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr

08009f94 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b083      	sub	sp, #12
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8009f9c:	bf00      	nop
 8009f9e:	370c      	adds	r7, #12
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr

08009fa8 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b085      	sub	sp, #20
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d103      	bne.n	8009fc4 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	f043 0308 	orr.w	r3, r3, #8
 8009fc2:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fc8:	2b08      	cmp	r3, #8
 8009fca:	d10b      	bne.n	8009fe4 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8009fd0:	2b03      	cmp	r3, #3
 8009fd2:	d003      	beq.n	8009fdc <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	685b      	ldr	r3, [r3, #4]
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	d103      	bne.n	8009fe4 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f043 0310 	orr.w	r3, r3, #16
 8009fe2:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	2b03      	cmp	r3, #3
 8009fea:	d003      	beq.n	8009ff4 <SAI_InterruptFlag+0x4c>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	2b02      	cmp	r3, #2
 8009ff2:	d104      	bne.n	8009ffe <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009ffa:	60fb      	str	r3, [r7, #12]
 8009ffc:	e003      	b.n	800a006 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	f043 0304 	orr.w	r3, r3, #4
 800a004:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800a006:	68fb      	ldr	r3, [r7, #12]
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3714      	adds	r7, #20
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr

0800a014 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800a014:	b480      	push	{r7}
 800a016:	b085      	sub	sp, #20
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800a01c:	4b17      	ldr	r3, [pc, #92]	@ (800a07c <SAI_Disable+0x68>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4a17      	ldr	r2, [pc, #92]	@ (800a080 <SAI_Disable+0x6c>)
 800a022:	fba2 2303 	umull	r2, r3, r2, r3
 800a026:	0b1b      	lsrs	r3, r3, #12
 800a028:	009b      	lsls	r3, r3, #2
 800a02a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a02c:	2300      	movs	r3, #0
 800a02e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	681a      	ldr	r2, [r3, #0]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800a03e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	1e5a      	subs	r2, r3, #1
 800a044:	60fa      	str	r2, [r7, #12]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d10a      	bne.n	800a060 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a050:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800a05a:	2303      	movs	r3, #3
 800a05c:	72fb      	strb	r3, [r7, #11]
      break;
 800a05e:	e006      	b.n	800a06e <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d1e8      	bne.n	800a040 <SAI_Disable+0x2c>

  return status;
 800a06e:	7afb      	ldrb	r3, [r7, #11]
}
 800a070:	4618      	mov	r0, r3
 800a072:	3714      	adds	r7, #20
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr
 800a07c:	20000004 	.word	0x20000004
 800a080:	95cbec1b 	.word	0x95cbec1b

0800a084 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b084      	sub	sp, #16
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a090:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	69db      	ldr	r3, [r3, #28]
 800a096:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a09a:	d01c      	beq.n	800a0d6 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	681a      	ldr	r2, [r3, #0]
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800a0b2:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800a0b4:	2100      	movs	r1, #0
 800a0b6:	68f8      	ldr	r0, [r7, #12]
 800a0b8:	f7ff ff76 	bl	8009fa8 <SAI_InterruptFlag>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	43d9      	mvns	r1, r3
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	691a      	ldr	r2, [r3, #16]
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	400a      	ands	r2, r1
 800a0cc:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800a0d6:	68f8      	ldr	r0, [r7, #12]
 800a0d8:	f7ff ff48 	bl	8009f6c <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800a0dc:	bf00      	nop
 800a0de:	3710      	adds	r7, #16
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b084      	sub	sp, #16
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0f0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800a0f2:	68f8      	ldr	r0, [r7, #12]
 800a0f4:	f7ff ff44 	bl	8009f80 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800a0f8:	bf00      	nop
 800a0fa:	3710      	adds	r7, #16
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b084      	sub	sp, #16
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a10c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	69db      	ldr	r3, [r3, #28]
 800a112:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a116:	d01c      	beq.n	800a152 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	681a      	ldr	r2, [r3, #0]
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800a126:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2200      	movs	r2, #0
 800a12c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800a130:	2100      	movs	r1, #0
 800a132:	68f8      	ldr	r0, [r7, #12]
 800a134:	f7ff ff38 	bl	8009fa8 <SAI_InterruptFlag>
 800a138:	4603      	mov	r3, r0
 800a13a:	43d9      	mvns	r1, r3
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	691a      	ldr	r2, [r3, #16]
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	400a      	ands	r2, r1
 800a148:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	2201      	movs	r2, #1
 800a14e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800a152:	68f8      	ldr	r0, [r7, #12]
 800a154:	f7f6 fa26 	bl	80005a4 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800a158:	bf00      	nop
 800a15a:	3710      	adds	r7, #16
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a16c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800a16e:	68f8      	ldr	r0, [r7, #12]
 800a170:	f7f6 f9fa 	bl	8000568 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800a174:	bf00      	nop
 800a176:	3710      	adds	r7, #16
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b084      	sub	sp, #16
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a188:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a190:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a19e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1a0:	2b01      	cmp	r3, #1
 800a1a2:	d004      	beq.n	800a1ae <SAI_DMAError+0x32>
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a1a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	d112      	bne.n	800a1d4 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	681a      	ldr	r2, [r3, #0]
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800a1bc:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800a1be:	68f8      	ldr	r0, [r7, #12]
 800a1c0:	f7ff ff28 	bl	800a014 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800a1d4:	68f8      	ldr	r0, [r7, #12]
 800a1d6:	f7ff fedd 	bl	8009f94 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800a1da:	bf00      	nop
 800a1dc:	3710      	adds	r7, #16
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}

0800a1e2 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a1e2:	b580      	push	{r7, lr}
 800a1e4:	b082      	sub	sp, #8
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d101      	bne.n	800a1f4 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	e022      	b.n	800a23a <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a1fa:	b2db      	uxtb	r3, r3
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d105      	bne.n	800a20c <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2200      	movs	r2, #0
 800a204:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f7f8 f980 	bl	800250c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2203      	movs	r2, #3
 800a210:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f000 f815 	bl	800a244 <HAL_SD_InitCard>
 800a21a:	4603      	mov	r3, r0
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d001      	beq.n	800a224 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a220:	2301      	movs	r3, #1
 800a222:	e00a      	b.n	800a23a <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2200      	movs	r2, #0
 800a228:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2200      	movs	r2, #0
 800a22e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2201      	movs	r2, #1
 800a234:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a238:	2300      	movs	r3, #0
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3708      	adds	r7, #8
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
	...

0800a244 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a244:	b5b0      	push	{r4, r5, r7, lr}
 800a246:	b08e      	sub	sp, #56	@ 0x38
 800a248:	af04      	add	r7, sp, #16
 800a24a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a24c:	2300      	movs	r3, #0
 800a24e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800a250:	2300      	movs	r3, #0
 800a252:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a254:	2300      	movs	r3, #0
 800a256:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800a258:	2300      	movs	r3, #0
 800a25a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a25c:	2300      	movs	r3, #0
 800a25e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800a260:	2376      	movs	r3, #118	@ 0x76
 800a262:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681d      	ldr	r5, [r3, #0]
 800a268:	466c      	mov	r4, sp
 800a26a:	f107 0314 	add.w	r3, r7, #20
 800a26e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a272:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a276:	f107 0308 	add.w	r3, r7, #8
 800a27a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a27c:	4628      	mov	r0, r5
 800a27e:	f002 ffd1 	bl	800d224 <SDMMC_Init>
 800a282:	4603      	mov	r3, r0
 800a284:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 800a288:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d001      	beq.n	800a294 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800a290:	2301      	movs	r3, #1
 800a292:	e059      	b.n	800a348 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	685a      	ldr	r2, [r3, #4]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a2a2:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f002 fff4 	bl	800d296 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	685a      	ldr	r2, [r3, #4]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a2bc:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800a2be:	2002      	movs	r0, #2
 800a2c0:	f7f8 ff5c 	bl	800317c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f000 fe0f 	bl	800aee8 <SD_PowerON>
 800a2ca:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a2cc:	6a3b      	ldr	r3, [r7, #32]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d00b      	beq.n	800a2ea <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a2de:	6a3b      	ldr	r3, [r7, #32]
 800a2e0:	431a      	orrs	r2, r3
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	e02e      	b.n	800a348 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f000 fd2e 	bl	800ad4c <SD_InitCard>
 800a2f0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a2f2:	6a3b      	ldr	r3, [r7, #32]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d00b      	beq.n	800a310 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a304:	6a3b      	ldr	r3, [r7, #32]
 800a306:	431a      	orrs	r2, r3
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a30c:	2301      	movs	r3, #1
 800a30e:	e01b      	b.n	800a348 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a318:	4618      	mov	r0, r3
 800a31a:	f003 f84f 	bl	800d3bc <SDMMC_CmdBlockLength>
 800a31e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a320:	6a3b      	ldr	r3, [r7, #32]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d00f      	beq.n	800a346 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4a09      	ldr	r2, [pc, #36]	@ (800a350 <HAL_SD_InitCard+0x10c>)
 800a32c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a332:	6a3b      	ldr	r3, [r7, #32]
 800a334:	431a      	orrs	r2, r3
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2201      	movs	r2, #1
 800a33e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a342:	2301      	movs	r3, #1
 800a344:	e000      	b.n	800a348 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800a346:	2300      	movs	r3, #0
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3728      	adds	r7, #40	@ 0x28
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bdb0      	pop	{r4, r5, r7, pc}
 800a350:	004005ff 	.word	0x004005ff

0800a354 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b08c      	sub	sp, #48	@ 0x30
 800a358:	af00      	add	r7, sp, #0
 800a35a:	60f8      	str	r0, [r7, #12]
 800a35c:	60b9      	str	r1, [r7, #8]
 800a35e:	607a      	str	r2, [r7, #4]
 800a360:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d107      	bne.n	800a37c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a370:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a378:	2301      	movs	r3, #1
 800a37a:	e0c3      	b.n	800a504 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a382:	b2db      	uxtb	r3, r3
 800a384:	2b01      	cmp	r3, #1
 800a386:	f040 80bc 	bne.w	800a502 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2200      	movs	r2, #0
 800a38e:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a390:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	441a      	add	r2, r3
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d907      	bls.n	800a3ae <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3a2:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	e0aa      	b.n	800a504 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	2203      	movs	r2, #3
 800a3b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800a3cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3d2:	4a4e      	ldr	r2, [pc, #312]	@ (800a50c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800a3d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3da:	4a4d      	ldr	r2, [pc, #308]	@ (800a510 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800a3dc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3fe:	689a      	ldr	r2, [r3, #8]
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	430a      	orrs	r2, r1
 800a408:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	3380      	adds	r3, #128	@ 0x80
 800a414:	4619      	mov	r1, r3
 800a416:	68ba      	ldr	r2, [r7, #8]
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	025b      	lsls	r3, r3, #9
 800a41c:	089b      	lsrs	r3, r3, #2
 800a41e:	f7f9 fc61 	bl	8003ce4 <HAL_DMA_Start_IT>
 800a422:	4603      	mov	r3, r0
 800a424:	2b00      	cmp	r3, #0
 800a426:	d017      	beq.n	800a458 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800a436:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4a35      	ldr	r2, [pc, #212]	@ (800a514 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800a43e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a444:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2201      	movs	r2, #1
 800a450:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800a454:	2301      	movs	r3, #1
 800a456:	e055      	b.n	800a504 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f042 0208 	orr.w	r2, r2, #8
 800a466:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	d002      	beq.n	800a476 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800a470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a472:	025b      	lsls	r3, r3, #9
 800a474:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a476:	f04f 33ff 	mov.w	r3, #4294967295
 800a47a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	025b      	lsls	r3, r3, #9
 800a480:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a482:	2390      	movs	r3, #144	@ 0x90
 800a484:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a486:	2302      	movs	r3, #2
 800a488:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a48a:	2300      	movs	r3, #0
 800a48c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800a48e:	2301      	movs	r3, #1
 800a490:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f107 0210 	add.w	r2, r7, #16
 800a49a:	4611      	mov	r1, r2
 800a49c:	4618      	mov	r0, r3
 800a49e:	f002 ff61 	bl	800d364 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	d90a      	bls.n	800a4be <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2282      	movs	r2, #130	@ 0x82
 800a4ac:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f002 ffc5 	bl	800d444 <SDMMC_CmdReadMultiBlock>
 800a4ba:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800a4bc:	e009      	b.n	800a4d2 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2281      	movs	r2, #129	@ 0x81
 800a4c2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f002 ff98 	bl	800d400 <SDMMC_CmdReadSingleBlock>
 800a4d0:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800a4d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d012      	beq.n	800a4fe <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4a0d      	ldr	r2, [pc, #52]	@ (800a514 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800a4de:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a4e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4e6:	431a      	orrs	r2, r3
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	e002      	b.n	800a504 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800a4fe:	2300      	movs	r3, #0
 800a500:	e000      	b.n	800a504 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800a502:	2302      	movs	r3, #2
  }
}
 800a504:	4618      	mov	r0, r3
 800a506:	3730      	adds	r7, #48	@ 0x30
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}
 800a50c:	0800ac37 	.word	0x0800ac37
 800a510:	0800aca9 	.word	0x0800aca9
 800a514:	004005ff 	.word	0x004005ff

0800a518 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b08c      	sub	sp, #48	@ 0x30
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	60f8      	str	r0, [r7, #12]
 800a520:	60b9      	str	r1, [r7, #8]
 800a522:	607a      	str	r2, [r7, #4]
 800a524:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d107      	bne.n	800a540 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a534:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800a53c:	2301      	movs	r3, #1
 800a53e:	e0c6      	b.n	800a6ce <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a546:	b2db      	uxtb	r3, r3
 800a548:	2b01      	cmp	r3, #1
 800a54a:	f040 80bf 	bne.w	800a6cc <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2200      	movs	r2, #0
 800a552:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a554:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	441a      	add	r2, r3
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a55e:	429a      	cmp	r2, r3
 800a560:	d907      	bls.n	800a572 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a566:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800a56e:	2301      	movs	r3, #1
 800a570:	e0ad      	b.n	800a6ce <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2203      	movs	r2, #3
 800a576:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	2200      	movs	r2, #0
 800a580:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f042 021a 	orr.w	r2, r2, #26
 800a590:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a596:	4a50      	ldr	r2, [pc, #320]	@ (800a6d8 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800a598:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a59e:	4a4f      	ldr	r2, [pc, #316]	@ (800a6dc <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800a5a0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5ae:	2b01      	cmp	r3, #1
 800a5b0:	d002      	beq.n	800a5b8 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800a5b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5b4:	025b      	lsls	r3, r3, #9
 800a5b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	2b01      	cmp	r3, #1
 800a5bc:	d90a      	bls.n	800a5d4 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	22a0      	movs	r2, #160	@ 0xa0
 800a5c2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f002 ff7e 	bl	800d4cc <SDMMC_CmdWriteMultiBlock>
 800a5d0:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800a5d2:	e009      	b.n	800a5e8 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2290      	movs	r2, #144	@ 0x90
 800a5d8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f002 ff51 	bl	800d488 <SDMMC_CmdWriteSingleBlock>
 800a5e6:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a5e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d012      	beq.n	800a614 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4a3b      	ldr	r2, [pc, #236]	@ (800a6e0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a5f4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a5fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5fc:	431a      	orrs	r2, r3
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2201      	movs	r2, #1
 800a606:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2200      	movs	r2, #0
 800a60e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a610:	2301      	movs	r3, #1
 800a612:	e05c      	b.n	800a6ce <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f042 0208 	orr.w	r2, r2, #8
 800a622:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a628:	2240      	movs	r2, #64	@ 0x40
 800a62a:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a63c:	689a      	ldr	r2, [r3, #8]
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	430a      	orrs	r2, r1
 800a646:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800a64c:	68b9      	ldr	r1, [r7, #8]
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	3380      	adds	r3, #128	@ 0x80
 800a654:	461a      	mov	r2, r3
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	025b      	lsls	r3, r3, #9
 800a65a:	089b      	lsrs	r3, r3, #2
 800a65c:	f7f9 fb42 	bl	8003ce4 <HAL_DMA_Start_IT>
 800a660:	4603      	mov	r3, r0
 800a662:	2b00      	cmp	r3, #0
 800a664:	d01a      	beq.n	800a69c <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f022 021a 	bic.w	r2, r2, #26
 800a674:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4a19      	ldr	r2, [pc, #100]	@ (800a6e0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a67c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a682:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2201      	movs	r2, #1
 800a68e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2200      	movs	r2, #0
 800a696:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a698:	2301      	movs	r3, #1
 800a69a:	e018      	b.n	800a6ce <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a69c:	f04f 33ff 	mov.w	r3, #4294967295
 800a6a0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	025b      	lsls	r3, r3, #9
 800a6a6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a6a8:	2390      	movs	r3, #144	@ 0x90
 800a6aa:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f107 0210 	add.w	r2, r7, #16
 800a6c0:	4611      	mov	r1, r2
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f002 fe4e 	bl	800d364 <SDMMC_ConfigData>

      return HAL_OK;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	e000      	b.n	800a6ce <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800a6cc:	2302      	movs	r3, #2
  }
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3730      	adds	r7, #48	@ 0x30
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}
 800a6d6:	bf00      	nop
 800a6d8:	0800ac0d 	.word	0x0800ac0d
 800a6dc:	0800aca9 	.word	0x0800aca9
 800a6e0:	004005ff 	.word	0x004005ff

0800a6e4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b083      	sub	sp, #12
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a6ec:	bf00      	nop
 800a6ee:	370c      	adds	r7, #12
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f6:	4770      	bx	lr

0800a6f8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b083      	sub	sp, #12
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a706:	0f9b      	lsrs	r3, r3, #30
 800a708:	b2da      	uxtb	r2, r3
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a712:	0e9b      	lsrs	r3, r3, #26
 800a714:	b2db      	uxtb	r3, r3
 800a716:	f003 030f 	and.w	r3, r3, #15
 800a71a:	b2da      	uxtb	r2, r3
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a724:	0e1b      	lsrs	r3, r3, #24
 800a726:	b2db      	uxtb	r3, r3
 800a728:	f003 0303 	and.w	r3, r3, #3
 800a72c:	b2da      	uxtb	r2, r3
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a736:	0c1b      	lsrs	r3, r3, #16
 800a738:	b2da      	uxtb	r2, r3
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a742:	0a1b      	lsrs	r3, r3, #8
 800a744:	b2da      	uxtb	r2, r3
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a74e:	b2da      	uxtb	r2, r3
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a758:	0d1b      	lsrs	r3, r3, #20
 800a75a:	b29a      	uxth	r2, r3
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a764:	0c1b      	lsrs	r3, r3, #16
 800a766:	b2db      	uxtb	r3, r3
 800a768:	f003 030f 	and.w	r3, r3, #15
 800a76c:	b2da      	uxtb	r2, r3
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a776:	0bdb      	lsrs	r3, r3, #15
 800a778:	b2db      	uxtb	r3, r3
 800a77a:	f003 0301 	and.w	r3, r3, #1
 800a77e:	b2da      	uxtb	r2, r3
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a788:	0b9b      	lsrs	r3, r3, #14
 800a78a:	b2db      	uxtb	r3, r3
 800a78c:	f003 0301 	and.w	r3, r3, #1
 800a790:	b2da      	uxtb	r2, r3
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a79a:	0b5b      	lsrs	r3, r3, #13
 800a79c:	b2db      	uxtb	r3, r3
 800a79e:	f003 0301 	and.w	r3, r3, #1
 800a7a2:	b2da      	uxtb	r2, r3
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a7ac:	0b1b      	lsrs	r3, r3, #12
 800a7ae:	b2db      	uxtb	r3, r3
 800a7b0:	f003 0301 	and.w	r3, r3, #1
 800a7b4:	b2da      	uxtb	r2, r3
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d163      	bne.n	800a890 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a7cc:	009a      	lsls	r2, r3, #2
 800a7ce:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a7d2:	4013      	ands	r3, r2
 800a7d4:	687a      	ldr	r2, [r7, #4]
 800a7d6:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800a7d8:	0f92      	lsrs	r2, r2, #30
 800a7da:	431a      	orrs	r2, r3
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a7e4:	0edb      	lsrs	r3, r3, #27
 800a7e6:	b2db      	uxtb	r3, r3
 800a7e8:	f003 0307 	and.w	r3, r3, #7
 800a7ec:	b2da      	uxtb	r2, r3
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a7f6:	0e1b      	lsrs	r3, r3, #24
 800a7f8:	b2db      	uxtb	r3, r3
 800a7fa:	f003 0307 	and.w	r3, r3, #7
 800a7fe:	b2da      	uxtb	r2, r3
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a808:	0d5b      	lsrs	r3, r3, #21
 800a80a:	b2db      	uxtb	r3, r3
 800a80c:	f003 0307 	and.w	r3, r3, #7
 800a810:	b2da      	uxtb	r2, r3
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a81a:	0c9b      	lsrs	r3, r3, #18
 800a81c:	b2db      	uxtb	r3, r3
 800a81e:	f003 0307 	and.w	r3, r3, #7
 800a822:	b2da      	uxtb	r2, r3
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a82c:	0bdb      	lsrs	r3, r3, #15
 800a82e:	b2db      	uxtb	r3, r3
 800a830:	f003 0307 	and.w	r3, r3, #7
 800a834:	b2da      	uxtb	r2, r3
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	691b      	ldr	r3, [r3, #16]
 800a83e:	1c5a      	adds	r2, r3, #1
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	7e1b      	ldrb	r3, [r3, #24]
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	f003 0307 	and.w	r3, r3, #7
 800a84e:	3302      	adds	r3, #2
 800a850:	2201      	movs	r2, #1
 800a852:	fa02 f303 	lsl.w	r3, r2, r3
 800a856:	687a      	ldr	r2, [r7, #4]
 800a858:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800a85a:	fb03 f202 	mul.w	r2, r3, r2
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	7a1b      	ldrb	r3, [r3, #8]
 800a866:	b2db      	uxtb	r3, r3
 800a868:	f003 030f 	and.w	r3, r3, #15
 800a86c:	2201      	movs	r2, #1
 800a86e:	409a      	lsls	r2, r3
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a878:	687a      	ldr	r2, [r7, #4]
 800a87a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800a87c:	0a52      	lsrs	r2, r2, #9
 800a87e:	fb03 f202 	mul.w	r2, r3, r2
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a88c:	661a      	str	r2, [r3, #96]	@ 0x60
 800a88e:	e031      	b.n	800a8f4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a894:	2b01      	cmp	r3, #1
 800a896:	d11d      	bne.n	800a8d4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a89c:	041b      	lsls	r3, r3, #16
 800a89e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8a6:	0c1b      	lsrs	r3, r3, #16
 800a8a8:	431a      	orrs	r2, r3
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	691b      	ldr	r3, [r3, #16]
 800a8b2:	3301      	adds	r3, #1
 800a8b4:	029a      	lsls	r2, r3, #10
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a8c8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	661a      	str	r2, [r3, #96]	@ 0x60
 800a8d2:	e00f      	b.n	800a8f4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4a58      	ldr	r2, [pc, #352]	@ (800aa3c <HAL_SD_GetCardCSD+0x344>)
 800a8da:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8e0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	e09d      	b.n	800aa30 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a8f8:	0b9b      	lsrs	r3, r3, #14
 800a8fa:	b2db      	uxtb	r3, r3
 800a8fc:	f003 0301 	and.w	r3, r3, #1
 800a900:	b2da      	uxtb	r2, r3
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a90a:	09db      	lsrs	r3, r3, #7
 800a90c:	b2db      	uxtb	r3, r3
 800a90e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a912:	b2da      	uxtb	r2, r3
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a91c:	b2db      	uxtb	r3, r3
 800a91e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a922:	b2da      	uxtb	r2, r3
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a92c:	0fdb      	lsrs	r3, r3, #31
 800a92e:	b2da      	uxtb	r2, r3
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a938:	0f5b      	lsrs	r3, r3, #29
 800a93a:	b2db      	uxtb	r3, r3
 800a93c:	f003 0303 	and.w	r3, r3, #3
 800a940:	b2da      	uxtb	r2, r3
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a94a:	0e9b      	lsrs	r3, r3, #26
 800a94c:	b2db      	uxtb	r3, r3
 800a94e:	f003 0307 	and.w	r3, r3, #7
 800a952:	b2da      	uxtb	r2, r3
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a95c:	0d9b      	lsrs	r3, r3, #22
 800a95e:	b2db      	uxtb	r3, r3
 800a960:	f003 030f 	and.w	r3, r3, #15
 800a964:	b2da      	uxtb	r2, r3
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a96e:	0d5b      	lsrs	r3, r3, #21
 800a970:	b2db      	uxtb	r3, r3
 800a972:	f003 0301 	and.w	r3, r3, #1
 800a976:	b2da      	uxtb	r2, r3
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	2200      	movs	r2, #0
 800a982:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a98a:	0c1b      	lsrs	r3, r3, #16
 800a98c:	b2db      	uxtb	r3, r3
 800a98e:	f003 0301 	and.w	r3, r3, #1
 800a992:	b2da      	uxtb	r2, r3
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a99e:	0bdb      	lsrs	r3, r3, #15
 800a9a0:	b2db      	uxtb	r3, r3
 800a9a2:	f003 0301 	and.w	r3, r3, #1
 800a9a6:	b2da      	uxtb	r2, r3
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9b2:	0b9b      	lsrs	r3, r3, #14
 800a9b4:	b2db      	uxtb	r3, r3
 800a9b6:	f003 0301 	and.w	r3, r3, #1
 800a9ba:	b2da      	uxtb	r2, r3
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9c6:	0b5b      	lsrs	r3, r3, #13
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	f003 0301 	and.w	r3, r3, #1
 800a9ce:	b2da      	uxtb	r2, r3
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9da:	0b1b      	lsrs	r3, r3, #12
 800a9dc:	b2db      	uxtb	r3, r3
 800a9de:	f003 0301 	and.w	r3, r3, #1
 800a9e2:	b2da      	uxtb	r2, r3
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9ee:	0a9b      	lsrs	r3, r3, #10
 800a9f0:	b2db      	uxtb	r3, r3
 800a9f2:	f003 0303 	and.w	r3, r3, #3
 800a9f6:	b2da      	uxtb	r2, r3
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa02:	0a1b      	lsrs	r3, r3, #8
 800aa04:	b2db      	uxtb	r3, r3
 800aa06:	f003 0303 	and.w	r3, r3, #3
 800aa0a:	b2da      	uxtb	r2, r3
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa16:	085b      	lsrs	r3, r3, #1
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa1e:	b2da      	uxtb	r2, r3
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	2201      	movs	r2, #1
 800aa2a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800aa2e:	2300      	movs	r3, #0
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	370c      	adds	r7, #12
 800aa34:	46bd      	mov	sp, r7
 800aa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3a:	4770      	bx	lr
 800aa3c:	004005ff 	.word	0x004005ff

0800aa40 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b083      	sub	sp, #12
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800aa8a:	2300      	movs	r3, #0
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	370c      	adds	r7, #12
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	4770      	bx	lr

0800aa98 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800aa98:	b5b0      	push	{r4, r5, r7, lr}
 800aa9a:	b08e      	sub	sp, #56	@ 0x38
 800aa9c:	af04      	add	r7, sp, #16
 800aa9e:	6078      	str	r0, [r7, #4]
 800aaa0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2203      	movs	r2, #3
 800aaac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aab4:	2b03      	cmp	r3, #3
 800aab6:	d02e      	beq.n	800ab16 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aabe:	d106      	bne.n	800aace <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aac4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	639a      	str	r2, [r3, #56]	@ 0x38
 800aacc:	e029      	b.n	800ab22 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aad4:	d10a      	bne.n	800aaec <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f000 fabc 	bl	800b054 <SD_WideBus_Enable>
 800aadc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aae2:	6a3b      	ldr	r3, [r7, #32]
 800aae4:	431a      	orrs	r2, r3
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	639a      	str	r2, [r3, #56]	@ 0x38
 800aaea:	e01a      	b.n	800ab22 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d10a      	bne.n	800ab08 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f000 faf9 	bl	800b0ea <SD_WideBus_Disable>
 800aaf8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aafe:	6a3b      	ldr	r3, [r7, #32]
 800ab00:	431a      	orrs	r2, r3
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	639a      	str	r2, [r3, #56]	@ 0x38
 800ab06:	e00c      	b.n	800ab22 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab0c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	639a      	str	r2, [r3, #56]	@ 0x38
 800ab14:	e005      	b.n	800ab22 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab1a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d00b      	beq.n	800ab42 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	4a26      	ldr	r2, [pc, #152]	@ (800abc8 <HAL_SD_ConfigWideBusOperation+0x130>)
 800ab30:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2201      	movs	r2, #1
 800ab36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ab40:	e01f      	b.n	800ab82 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	685b      	ldr	r3, [r3, #4]
 800ab46:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	689b      	ldr	r3, [r3, #8]
 800ab4c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	68db      	ldr	r3, [r3, #12]
 800ab52:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	695b      	ldr	r3, [r3, #20]
 800ab5c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	699b      	ldr	r3, [r3, #24]
 800ab62:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681d      	ldr	r5, [r3, #0]
 800ab68:	466c      	mov	r4, sp
 800ab6a:	f107 0314 	add.w	r3, r7, #20
 800ab6e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ab72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ab76:	f107 0308 	add.w	r3, r7, #8
 800ab7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ab7c:	4628      	mov	r0, r5
 800ab7e:	f002 fb51 	bl	800d224 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f002 fc16 	bl	800d3bc <SDMMC_CmdBlockLength>
 800ab90:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab92:	6a3b      	ldr	r3, [r7, #32]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d00c      	beq.n	800abb2 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	4a0a      	ldr	r2, [pc, #40]	@ (800abc8 <HAL_SD_ConfigWideBusOperation+0x130>)
 800ab9e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aba4:	6a3b      	ldr	r3, [r7, #32]
 800aba6:	431a      	orrs	r2, r3
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800abac:	2301      	movs	r3, #1
 800abae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2201      	movs	r2, #1
 800abb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 800abba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3728      	adds	r7, #40	@ 0x28
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bdb0      	pop	{r4, r5, r7, pc}
 800abc6:	bf00      	nop
 800abc8:	004005ff 	.word	0x004005ff

0800abcc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b086      	sub	sp, #24
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800abd4:	2300      	movs	r3, #0
 800abd6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800abd8:	f107 030c 	add.w	r3, r7, #12
 800abdc:	4619      	mov	r1, r3
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f000 fa10 	bl	800b004 <SD_SendStatus>
 800abe4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d005      	beq.n	800abf8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	431a      	orrs	r2, r3
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	0a5b      	lsrs	r3, r3, #9
 800abfc:	f003 030f 	and.w	r3, r3, #15
 800ac00:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ac02:	693b      	ldr	r3, [r7, #16]
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3718      	adds	r7, #24
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b085      	sub	sp, #20
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac18:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ac28:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800ac2a:	bf00      	nop
 800ac2c:	3714      	adds	r7, #20
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr

0800ac36 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ac36:	b580      	push	{r7, lr}
 800ac38:	b084      	sub	sp, #16
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac42:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac48:	2b82      	cmp	r3, #130	@ 0x82
 800ac4a:	d111      	bne.n	800ac70 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	4618      	mov	r0, r3
 800ac52:	f002 fc5d 	bl	800d510 <SDMMC_CmdStopTransfer>
 800ac56:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d008      	beq.n	800ac70 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	431a      	orrs	r2, r3
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800ac6a:	68f8      	ldr	r0, [r7, #12]
 800ac6c:	f7ff fd3a 	bl	800a6e4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f022 0208 	bic.w	r2, r2, #8
 800ac7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f240 523a 	movw	r2, #1338	@ 0x53a
 800ac88:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2201      	movs	r2, #1
 800ac8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	2200      	movs	r2, #0
 800ac96:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800ac98:	68f8      	ldr	r0, [r7, #12]
 800ac9a:	f004 fa0b 	bl	800f0b4 <HAL_SD_RxCpltCallback>
#endif
}
 800ac9e:	bf00      	nop
 800aca0:	3710      	adds	r7, #16
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}
	...

0800aca8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b086      	sub	sp, #24
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acb4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f7f9 f9fe 	bl	80040b8 <HAL_DMA_GetError>
 800acbc:	4603      	mov	r3, r0
 800acbe:	2b02      	cmp	r3, #2
 800acc0:	d03e      	beq.n	800ad40 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acc8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acd0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d002      	beq.n	800acde <SD_DMAError+0x36>
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	2b01      	cmp	r3, #1
 800acdc:	d12d      	bne.n	800ad3a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	4a19      	ldr	r2, [pc, #100]	@ (800ad48 <SD_DMAError+0xa0>)
 800ace4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800acf4:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acfa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800ad02:	6978      	ldr	r0, [r7, #20]
 800ad04:	f7ff ff62 	bl	800abcc <HAL_SD_GetCardState>
 800ad08:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	2b06      	cmp	r3, #6
 800ad0e:	d002      	beq.n	800ad16 <SD_DMAError+0x6e>
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	2b05      	cmp	r3, #5
 800ad14:	d10a      	bne.n	800ad2c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f002 fbf8 	bl	800d510 <SDMMC_CmdStopTransfer>
 800ad20:	4602      	mov	r2, r0
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad26:	431a      	orrs	r2, r3
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	2201      	movs	r2, #1
 800ad30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	2200      	movs	r2, #0
 800ad38:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800ad3a:	6978      	ldr	r0, [r7, #20]
 800ad3c:	f7ff fcd2 	bl	800a6e4 <HAL_SD_ErrorCallback>
#endif
  }
}
 800ad40:	bf00      	nop
 800ad42:	3718      	adds	r7, #24
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}
 800ad48:	004005ff 	.word	0x004005ff

0800ad4c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ad4c:	b5b0      	push	{r4, r5, r7, lr}
 800ad4e:	b094      	sub	sp, #80	@ 0x50
 800ad50:	af04      	add	r7, sp, #16
 800ad52:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800ad54:	2301      	movs	r3, #1
 800ad56:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f002 faa8 	bl	800d2b2 <SDMMC_GetPowerState>
 800ad62:	4603      	mov	r3, r0
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d102      	bne.n	800ad6e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ad68:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800ad6c:	e0b8      	b.n	800aee0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad72:	2b03      	cmp	r3, #3
 800ad74:	d02f      	beq.n	800add6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f002 fcd3 	bl	800d726 <SDMMC_CmdSendCID>
 800ad80:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ad82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d001      	beq.n	800ad8c <SD_InitCard+0x40>
    {
      return errorstate;
 800ad88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad8a:	e0a9      	b.n	800aee0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	2100      	movs	r1, #0
 800ad92:	4618      	mov	r0, r3
 800ad94:	f002 fad3 	bl	800d33e <SDMMC_GetResponse>
 800ad98:	4602      	mov	r2, r0
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	2104      	movs	r1, #4
 800ada4:	4618      	mov	r0, r3
 800ada6:	f002 faca 	bl	800d33e <SDMMC_GetResponse>
 800adaa:	4602      	mov	r2, r0
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	2108      	movs	r1, #8
 800adb6:	4618      	mov	r0, r3
 800adb8:	f002 fac1 	bl	800d33e <SDMMC_GetResponse>
 800adbc:	4602      	mov	r2, r0
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	210c      	movs	r1, #12
 800adc8:	4618      	mov	r0, r3
 800adca:	f002 fab8 	bl	800d33e <SDMMC_GetResponse>
 800adce:	4602      	mov	r2, r0
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adda:	2b03      	cmp	r3, #3
 800addc:	d00d      	beq.n	800adfa <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f107 020e 	add.w	r2, r7, #14
 800ade6:	4611      	mov	r1, r2
 800ade8:	4618      	mov	r0, r3
 800adea:	f002 fcd9 	bl	800d7a0 <SDMMC_CmdSetRelAdd>
 800adee:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800adf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d001      	beq.n	800adfa <SD_InitCard+0xae>
    {
      return errorstate;
 800adf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adf8:	e072      	b.n	800aee0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adfe:	2b03      	cmp	r3, #3
 800ae00:	d036      	beq.n	800ae70 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ae02:	89fb      	ldrh	r3, [r7, #14]
 800ae04:	461a      	mov	r2, r3
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681a      	ldr	r2, [r3, #0]
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae12:	041b      	lsls	r3, r3, #16
 800ae14:	4619      	mov	r1, r3
 800ae16:	4610      	mov	r0, r2
 800ae18:	f002 fca3 	bl	800d762 <SDMMC_CmdSendCSD>
 800ae1c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d001      	beq.n	800ae28 <SD_InitCard+0xdc>
    {
      return errorstate;
 800ae24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae26:	e05b      	b.n	800aee0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	2100      	movs	r1, #0
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f002 fa85 	bl	800d33e <SDMMC_GetResponse>
 800ae34:	4602      	mov	r2, r0
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	2104      	movs	r1, #4
 800ae40:	4618      	mov	r0, r3
 800ae42:	f002 fa7c 	bl	800d33e <SDMMC_GetResponse>
 800ae46:	4602      	mov	r2, r0
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	2108      	movs	r1, #8
 800ae52:	4618      	mov	r0, r3
 800ae54:	f002 fa73 	bl	800d33e <SDMMC_GetResponse>
 800ae58:	4602      	mov	r2, r0
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	210c      	movs	r1, #12
 800ae64:	4618      	mov	r0, r3
 800ae66:	f002 fa6a 	bl	800d33e <SDMMC_GetResponse>
 800ae6a:	4602      	mov	r2, r0
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	2104      	movs	r1, #4
 800ae76:	4618      	mov	r0, r3
 800ae78:	f002 fa61 	bl	800d33e <SDMMC_GetResponse>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	0d1a      	lsrs	r2, r3, #20
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ae84:	f107 0310 	add.w	r3, r7, #16
 800ae88:	4619      	mov	r1, r3
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f7ff fc34 	bl	800a6f8 <HAL_SD_GetCardCSD>
 800ae90:	4603      	mov	r3, r0
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d002      	beq.n	800ae9c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae96:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ae9a:	e021      	b.n	800aee0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6819      	ldr	r1, [r3, #0]
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aea4:	041b      	lsls	r3, r3, #16
 800aea6:	2200      	movs	r2, #0
 800aea8:	461c      	mov	r4, r3
 800aeaa:	4615      	mov	r5, r2
 800aeac:	4622      	mov	r2, r4
 800aeae:	462b      	mov	r3, r5
 800aeb0:	4608      	mov	r0, r1
 800aeb2:	f002 fb4f 	bl	800d554 <SDMMC_CmdSelDesel>
 800aeb6:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800aeb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d001      	beq.n	800aec2 <SD_InitCard+0x176>
  {
    return errorstate;
 800aebe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aec0:	e00e      	b.n	800aee0 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681d      	ldr	r5, [r3, #0]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	466c      	mov	r4, sp
 800aeca:	f103 0210 	add.w	r2, r3, #16
 800aece:	ca07      	ldmia	r2, {r0, r1, r2}
 800aed0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800aed4:	3304      	adds	r3, #4
 800aed6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aed8:	4628      	mov	r0, r5
 800aeda:	f002 f9a3 	bl	800d224 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800aede:	2300      	movs	r3, #0
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3740      	adds	r7, #64	@ 0x40
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bdb0      	pop	{r4, r5, r7, pc}

0800aee8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b086      	sub	sp, #24
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aef0:	2300      	movs	r3, #0
 800aef2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800aef4:	2300      	movs	r3, #0
 800aef6:	617b      	str	r3, [r7, #20]
 800aef8:	2300      	movs	r3, #0
 800aefa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	4618      	mov	r0, r3
 800af02:	f002 fb4a 	bl	800d59a <SDMMC_CmdGoIdleState>
 800af06:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d001      	beq.n	800af12 <SD_PowerON+0x2a>
  {
    return errorstate;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	e072      	b.n	800aff8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4618      	mov	r0, r3
 800af18:	f002 fb5d 	bl	800d5d6 <SDMMC_CmdOperCond>
 800af1c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d00d      	beq.n	800af40 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2200      	movs	r2, #0
 800af28:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	4618      	mov	r0, r3
 800af30:	f002 fb33 	bl	800d59a <SDMMC_CmdGoIdleState>
 800af34:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d004      	beq.n	800af46 <SD_PowerON+0x5e>
    {
      return errorstate;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	e05b      	b.n	800aff8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2201      	movs	r2, #1
 800af44:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800af4a:	2b01      	cmp	r3, #1
 800af4c:	d137      	bne.n	800afbe <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	2100      	movs	r1, #0
 800af54:	4618      	mov	r0, r3
 800af56:	f002 fb5d 	bl	800d614 <SDMMC_CmdAppCommand>
 800af5a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d02d      	beq.n	800afbe <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800af62:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800af66:	e047      	b.n	800aff8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	2100      	movs	r1, #0
 800af6e:	4618      	mov	r0, r3
 800af70:	f002 fb50 	bl	800d614 <SDMMC_CmdAppCommand>
 800af74:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d001      	beq.n	800af80 <SD_PowerON+0x98>
    {
      return errorstate;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	e03b      	b.n	800aff8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	491e      	ldr	r1, [pc, #120]	@ (800b000 <SD_PowerON+0x118>)
 800af86:	4618      	mov	r0, r3
 800af88:	f002 fb66 	bl	800d658 <SDMMC_CmdAppOperCommand>
 800af8c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d002      	beq.n	800af9a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800af94:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800af98:	e02e      	b.n	800aff8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	2100      	movs	r1, #0
 800afa0:	4618      	mov	r0, r3
 800afa2:	f002 f9cc 	bl	800d33e <SDMMC_GetResponse>
 800afa6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	0fdb      	lsrs	r3, r3, #31
 800afac:	2b01      	cmp	r3, #1
 800afae:	d101      	bne.n	800afb4 <SD_PowerON+0xcc>
 800afb0:	2301      	movs	r3, #1
 800afb2:	e000      	b.n	800afb6 <SD_PowerON+0xce>
 800afb4:	2300      	movs	r3, #0
 800afb6:	613b      	str	r3, [r7, #16]

    count++;
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	3301      	adds	r3, #1
 800afbc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d802      	bhi.n	800afce <SD_PowerON+0xe6>
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d0cc      	beq.n	800af68 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800afd4:	4293      	cmp	r3, r2
 800afd6:	d902      	bls.n	800afde <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800afd8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800afdc:	e00c      	b.n	800aff8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d003      	beq.n	800aff0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2201      	movs	r2, #1
 800afec:	645a      	str	r2, [r3, #68]	@ 0x44
 800afee:	e002      	b.n	800aff6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2200      	movs	r2, #0
 800aff4:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800aff6:	2300      	movs	r3, #0
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3718      	adds	r7, #24
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}
 800b000:	c1100000 	.word	0xc1100000

0800b004 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d102      	bne.n	800b01a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b014:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b018:	e018      	b.n	800b04c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681a      	ldr	r2, [r3, #0]
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b022:	041b      	lsls	r3, r3, #16
 800b024:	4619      	mov	r1, r3
 800b026:	4610      	mov	r0, r2
 800b028:	f002 fbdb 	bl	800d7e2 <SDMMC_CmdSendStatus>
 800b02c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d001      	beq.n	800b038 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	e009      	b.n	800b04c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	2100      	movs	r1, #0
 800b03e:	4618      	mov	r0, r3
 800b040:	f002 f97d 	bl	800d33e <SDMMC_GetResponse>
 800b044:	4602      	mov	r2, r0
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b04a:	2300      	movs	r3, #0
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3710      	adds	r7, #16
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b086      	sub	sp, #24
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b05c:	2300      	movs	r3, #0
 800b05e:	60fb      	str	r3, [r7, #12]
 800b060:	2300      	movs	r3, #0
 800b062:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	2100      	movs	r1, #0
 800b06a:	4618      	mov	r0, r3
 800b06c:	f002 f967 	bl	800d33e <SDMMC_GetResponse>
 800b070:	4603      	mov	r3, r0
 800b072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b076:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b07a:	d102      	bne.n	800b082 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b07c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b080:	e02f      	b.n	800b0e2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b082:	f107 030c 	add.w	r3, r7, #12
 800b086:	4619      	mov	r1, r3
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f000 f879 	bl	800b180 <SD_FindSCR>
 800b08e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d001      	beq.n	800b09a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	e023      	b.n	800b0e2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d01c      	beq.n	800b0de <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681a      	ldr	r2, [r3, #0]
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b0ac:	041b      	lsls	r3, r3, #16
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	4610      	mov	r0, r2
 800b0b2:	f002 faaf 	bl	800d614 <SDMMC_CmdAppCommand>
 800b0b6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d001      	beq.n	800b0c2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	e00f      	b.n	800b0e2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	2102      	movs	r1, #2
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f002 fae9 	bl	800d6a0 <SDMMC_CmdBusWidth>
 800b0ce:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d001      	beq.n	800b0da <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	e003      	b.n	800b0e2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	e001      	b.n	800b0e2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b0de:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3718      	adds	r7, #24
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}

0800b0ea <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b0ea:	b580      	push	{r7, lr}
 800b0ec:	b086      	sub	sp, #24
 800b0ee:	af00      	add	r7, sp, #0
 800b0f0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	60fb      	str	r3, [r7, #12]
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	2100      	movs	r1, #0
 800b100:	4618      	mov	r0, r3
 800b102:	f002 f91c 	bl	800d33e <SDMMC_GetResponse>
 800b106:	4603      	mov	r3, r0
 800b108:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b10c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b110:	d102      	bne.n	800b118 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b112:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b116:	e02f      	b.n	800b178 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b118:	f107 030c 	add.w	r3, r7, #12
 800b11c:	4619      	mov	r1, r3
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f000 f82e 	bl	800b180 <SD_FindSCR>
 800b124:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d001      	beq.n	800b130 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	e023      	b.n	800b178 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b136:	2b00      	cmp	r3, #0
 800b138:	d01c      	beq.n	800b174 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681a      	ldr	r2, [r3, #0]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b142:	041b      	lsls	r3, r3, #16
 800b144:	4619      	mov	r1, r3
 800b146:	4610      	mov	r0, r2
 800b148:	f002 fa64 	bl	800d614 <SDMMC_CmdAppCommand>
 800b14c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d001      	beq.n	800b158 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	e00f      	b.n	800b178 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	2100      	movs	r1, #0
 800b15e:	4618      	mov	r0, r3
 800b160:	f002 fa9e 	bl	800d6a0 <SDMMC_CmdBusWidth>
 800b164:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d001      	beq.n	800b170 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	e003      	b.n	800b178 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b170:	2300      	movs	r3, #0
 800b172:	e001      	b.n	800b178 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b174:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3718      	adds	r7, #24
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}

0800b180 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b180:	b590      	push	{r4, r7, lr}
 800b182:	b08f      	sub	sp, #60	@ 0x3c
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b18a:	f7f7 ffeb 	bl	8003164 <HAL_GetTick>
 800b18e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800b190:	2300      	movs	r3, #0
 800b192:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800b194:	2300      	movs	r3, #0
 800b196:	60bb      	str	r3, [r7, #8]
 800b198:	2300      	movs	r3, #0
 800b19a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	2108      	movs	r1, #8
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f002 f908 	bl	800d3bc <SDMMC_CmdBlockLength>
 800b1ac:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b1ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d001      	beq.n	800b1b8 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b1b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1b6:	e0b2      	b.n	800b31e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681a      	ldr	r2, [r3, #0]
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1c0:	041b      	lsls	r3, r3, #16
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	4610      	mov	r0, r2
 800b1c6:	f002 fa25 	bl	800d614 <SDMMC_CmdAppCommand>
 800b1ca:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b1cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d001      	beq.n	800b1d6 <SD_FindSCR+0x56>
  {
    return errorstate;
 800b1d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1d4:	e0a3      	b.n	800b31e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b1d6:	f04f 33ff 	mov.w	r3, #4294967295
 800b1da:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b1dc:	2308      	movs	r3, #8
 800b1de:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b1e0:	2330      	movs	r3, #48	@ 0x30
 800b1e2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b1e4:	2302      	movs	r3, #2
 800b1e6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f107 0210 	add.w	r2, r7, #16
 800b1f8:	4611      	mov	r1, r2
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f002 f8b2 	bl	800d364 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	4618      	mov	r0, r3
 800b206:	f002 fa6d 	bl	800d6e4 <SDMMC_CmdSendSCR>
 800b20a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b20c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d02a      	beq.n	800b268 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800b212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b214:	e083      	b.n	800b31e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b21c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b220:	2b00      	cmp	r3, #0
 800b222:	d00f      	beq.n	800b244 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6819      	ldr	r1, [r3, #0]
 800b228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b22a:	009b      	lsls	r3, r3, #2
 800b22c:	f107 0208 	add.w	r2, r7, #8
 800b230:	18d4      	adds	r4, r2, r3
 800b232:	4608      	mov	r0, r1
 800b234:	f002 f822 	bl	800d27c <SDMMC_ReadFIFO>
 800b238:	4603      	mov	r3, r0
 800b23a:	6023      	str	r3, [r4, #0]
      index++;
 800b23c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b23e:	3301      	adds	r3, #1
 800b240:	637b      	str	r3, [r7, #52]	@ 0x34
 800b242:	e006      	b.n	800b252 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b24a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d012      	beq.n	800b278 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b252:	f7f7 ff87 	bl	8003164 <HAL_GetTick>
 800b256:	4602      	mov	r2, r0
 800b258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b25a:	1ad3      	subs	r3, r2, r3
 800b25c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b260:	d102      	bne.n	800b268 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b262:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b266:	e05a      	b.n	800b31e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b26e:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 800b272:	2b00      	cmp	r3, #0
 800b274:	d0cf      	beq.n	800b216 <SD_FindSCR+0x96>
 800b276:	e000      	b.n	800b27a <SD_FindSCR+0xfa>
      break;
 800b278:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b280:	f003 0308 	and.w	r3, r3, #8
 800b284:	2b00      	cmp	r3, #0
 800b286:	d005      	beq.n	800b294 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	2208      	movs	r2, #8
 800b28e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b290:	2308      	movs	r3, #8
 800b292:	e044      	b.n	800b31e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b29a:	f003 0302 	and.w	r3, r3, #2
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d005      	beq.n	800b2ae <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	2202      	movs	r2, #2
 800b2a8:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b2aa:	2302      	movs	r3, #2
 800b2ac:	e037      	b.n	800b31e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b2b4:	f003 0320 	and.w	r3, r3, #32
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d005      	beq.n	800b2c8 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	2220      	movs	r2, #32
 800b2c2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b2c4:	2320      	movs	r3, #32
 800b2c6:	e02a      	b.n	800b31e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f240 523a 	movw	r2, #1338	@ 0x53a
 800b2d0:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	061a      	lsls	r2, r3, #24
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	021b      	lsls	r3, r3, #8
 800b2da:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b2de:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	0a1b      	lsrs	r3, r3, #8
 800b2e4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b2e8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	0e1b      	lsrs	r3, r3, #24
 800b2ee:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b2f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2f2:	601a      	str	r2, [r3, #0]
    scr++;
 800b2f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2f6:	3304      	adds	r3, #4
 800b2f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	061a      	lsls	r2, r3, #24
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	021b      	lsls	r3, r3, #8
 800b302:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b306:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	0a1b      	lsrs	r3, r3, #8
 800b30c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b310:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	0e1b      	lsrs	r3, r3, #24
 800b316:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b31a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b31c:	2300      	movs	r3, #0
}
 800b31e:	4618      	mov	r0, r3
 800b320:	373c      	adds	r7, #60	@ 0x3c
 800b322:	46bd      	mov	sp, r7
 800b324:	bd90      	pop	{r4, r7, pc}

0800b326 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800b326:	b580      	push	{r7, lr}
 800b328:	b082      	sub	sp, #8
 800b32a:	af00      	add	r7, sp, #0
 800b32c:	6078      	str	r0, [r7, #4]
 800b32e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d101      	bne.n	800b33a <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800b336:	2301      	movs	r3, #1
 800b338:	e025      	b.n	800b386 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800b340:	b2db      	uxtb	r3, r3
 800b342:	2b00      	cmp	r3, #0
 800b344:	d106      	bne.n	800b354 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2200      	movs	r2, #0
 800b34a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f7f7 fcb8 	bl	8002cc4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2202      	movs	r2, #2
 800b358:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681a      	ldr	r2, [r3, #0]
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	3304      	adds	r3, #4
 800b364:	4619      	mov	r1, r3
 800b366:	4610      	mov	r0, r2
 800b368:	f001 fe96 	bl	800d098 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6818      	ldr	r0, [r3, #0]
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	461a      	mov	r2, r3
 800b376:	6839      	ldr	r1, [r7, #0]
 800b378:	f001 feea 	bl	800d150 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2201      	movs	r2, #1
 800b380:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800b384:	2300      	movs	r3, #0
}
 800b386:	4618      	mov	r0, r3
 800b388:	3708      	adds	r7, #8
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}
	...

0800b390 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b084      	sub	sp, #16
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d101      	bne.n	800b3a2 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800b39e:	2301      	movs	r3, #1
 800b3a0:	e04c      	b.n	800b43c <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b3a8:	b2db      	uxtb	r3, r3
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d106      	bne.n	800b3bc <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f7f7 f90a 	bl	80025d0 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2202      	movs	r2, #2
 800b3c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	681a      	ldr	r2, [r3, #0]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f022 0203 	bic.w	r2, r2, #3
 800b3d2:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800b3dc:	68fa      	ldr	r2, [r7, #12]
 800b3de:	4b19      	ldr	r3, [pc, #100]	@ (800b444 <HAL_SPDIFRX_Init+0xb4>)
 800b3e0:	4013      	ands	r3, r2
 800b3e2:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800b3ec:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800b3f2:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800b3f8:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800b3fe:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800b404:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800b40a:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800b410:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 800b416:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 800b41c:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800b41e:	68fa      	ldr	r2, [r7, #12]
 800b420:	4313      	orrs	r3, r2
 800b422:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	68fa      	ldr	r2, [r7, #12]
 800b42a:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2200      	movs	r2, #0
 800b430:	649a      	str	r2, [r3, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2201      	movs	r2, #1
 800b436:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 800b43a:	2300      	movs	r3, #0
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	3710      	adds	r7, #16
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}
 800b444:	fff88407 	.word	0xfff88407

0800b448 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b084      	sub	sp, #16
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d101      	bne.n	800b45a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b456:	2301      	movs	r3, #1
 800b458:	e09d      	b.n	800b596 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d108      	bne.n	800b474 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	685b      	ldr	r3, [r3, #4]
 800b466:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b46a:	d009      	beq.n	800b480 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2200      	movs	r2, #0
 800b470:	61da      	str	r2, [r3, #28]
 800b472:	e005      	b.n	800b480 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2200      	movs	r2, #0
 800b478:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2200      	movs	r2, #0
 800b47e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2200      	movs	r2, #0
 800b484:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800b48c:	b2db      	uxtb	r3, r3
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d106      	bne.n	800b4a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2200      	movs	r2, #0
 800b496:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f7f7 f8fc 	bl	8002698 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2202      	movs	r2, #2
 800b4a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	681a      	ldr	r2, [r3, #0]
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b4b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	68db      	ldr	r3, [r3, #12]
 800b4bc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800b4c0:	d902      	bls.n	800b4c8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	60fb      	str	r3, [r7, #12]
 800b4c6:	e002      	b.n	800b4ce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b4c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b4cc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	68db      	ldr	r3, [r3, #12]
 800b4d2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800b4d6:	d007      	beq.n	800b4e8 <HAL_SPI_Init+0xa0>
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	68db      	ldr	r3, [r3, #12]
 800b4dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800b4e0:	d002      	beq.n	800b4e8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	689b      	ldr	r3, [r3, #8]
 800b4f4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800b4f8:	431a      	orrs	r2, r3
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	691b      	ldr	r3, [r3, #16]
 800b4fe:	f003 0302 	and.w	r3, r3, #2
 800b502:	431a      	orrs	r2, r3
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	695b      	ldr	r3, [r3, #20]
 800b508:	f003 0301 	and.w	r3, r3, #1
 800b50c:	431a      	orrs	r2, r3
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	699b      	ldr	r3, [r3, #24]
 800b512:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b516:	431a      	orrs	r2, r3
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	69db      	ldr	r3, [r3, #28]
 800b51c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b520:	431a      	orrs	r2, r3
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6a1b      	ldr	r3, [r3, #32]
 800b526:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b52a:	ea42 0103 	orr.w	r1, r2, r3
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b532:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	430a      	orrs	r2, r1
 800b53c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	699b      	ldr	r3, [r3, #24]
 800b542:	0c1b      	lsrs	r3, r3, #16
 800b544:	f003 0204 	and.w	r2, r3, #4
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b54c:	f003 0310 	and.w	r3, r3, #16
 800b550:	431a      	orrs	r2, r3
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b556:	f003 0308 	and.w	r3, r3, #8
 800b55a:	431a      	orrs	r2, r3
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	68db      	ldr	r3, [r3, #12]
 800b560:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800b564:	ea42 0103 	orr.w	r1, r2, r3
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	430a      	orrs	r2, r1
 800b574:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	69da      	ldr	r2, [r3, #28]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b584:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	2200      	movs	r2, #0
 800b58a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2201      	movs	r2, #1
 800b590:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800b594:	2300      	movs	r3, #0
}
 800b596:	4618      	mov	r0, r3
 800b598:	3710      	adds	r7, #16
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}

0800b59e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b59e:	b580      	push	{r7, lr}
 800b5a0:	b082      	sub	sp, #8
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d101      	bne.n	800b5b0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	e049      	b.n	800b644 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b5b6:	b2db      	uxtb	r3, r3
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d106      	bne.n	800b5ca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2200      	movs	r2, #0
 800b5c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f7f7 f8c9 	bl	800275c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2202      	movs	r2, #2
 800b5ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681a      	ldr	r2, [r3, #0]
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	3304      	adds	r3, #4
 800b5da:	4619      	mov	r1, r3
 800b5dc:	4610      	mov	r0, r2
 800b5de:	f000 fc11 	bl	800be04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2201      	movs	r2, #1
 800b5e6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2201      	movs	r2, #1
 800b5ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2201      	movs	r2, #1
 800b5f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2201      	movs	r2, #1
 800b5fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2201      	movs	r2, #1
 800b606:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2201      	movs	r2, #1
 800b60e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2201      	movs	r2, #1
 800b616:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2201      	movs	r2, #1
 800b61e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2201      	movs	r2, #1
 800b626:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2201      	movs	r2, #1
 800b62e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2201      	movs	r2, #1
 800b636:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2201      	movs	r2, #1
 800b63e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b642:	2300      	movs	r3, #0
}
 800b644:	4618      	mov	r0, r3
 800b646:	3708      	adds	r7, #8
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}

0800b64c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b64c:	b480      	push	{r7}
 800b64e:	b085      	sub	sp, #20
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b65a:	b2db      	uxtb	r3, r3
 800b65c:	2b01      	cmp	r3, #1
 800b65e:	d001      	beq.n	800b664 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b660:	2301      	movs	r3, #1
 800b662:	e054      	b.n	800b70e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2202      	movs	r2, #2
 800b668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	68da      	ldr	r2, [r3, #12]
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f042 0201 	orr.w	r2, r2, #1
 800b67a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	4a26      	ldr	r2, [pc, #152]	@ (800b71c <HAL_TIM_Base_Start_IT+0xd0>)
 800b682:	4293      	cmp	r3, r2
 800b684:	d022      	beq.n	800b6cc <HAL_TIM_Base_Start_IT+0x80>
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b68e:	d01d      	beq.n	800b6cc <HAL_TIM_Base_Start_IT+0x80>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	4a22      	ldr	r2, [pc, #136]	@ (800b720 <HAL_TIM_Base_Start_IT+0xd4>)
 800b696:	4293      	cmp	r3, r2
 800b698:	d018      	beq.n	800b6cc <HAL_TIM_Base_Start_IT+0x80>
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	4a21      	ldr	r2, [pc, #132]	@ (800b724 <HAL_TIM_Base_Start_IT+0xd8>)
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	d013      	beq.n	800b6cc <HAL_TIM_Base_Start_IT+0x80>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	4a1f      	ldr	r2, [pc, #124]	@ (800b728 <HAL_TIM_Base_Start_IT+0xdc>)
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	d00e      	beq.n	800b6cc <HAL_TIM_Base_Start_IT+0x80>
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	4a1e      	ldr	r2, [pc, #120]	@ (800b72c <HAL_TIM_Base_Start_IT+0xe0>)
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d009      	beq.n	800b6cc <HAL_TIM_Base_Start_IT+0x80>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	4a1c      	ldr	r2, [pc, #112]	@ (800b730 <HAL_TIM_Base_Start_IT+0xe4>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d004      	beq.n	800b6cc <HAL_TIM_Base_Start_IT+0x80>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	4a1b      	ldr	r2, [pc, #108]	@ (800b734 <HAL_TIM_Base_Start_IT+0xe8>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d115      	bne.n	800b6f8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	689a      	ldr	r2, [r3, #8]
 800b6d2:	4b19      	ldr	r3, [pc, #100]	@ (800b738 <HAL_TIM_Base_Start_IT+0xec>)
 800b6d4:	4013      	ands	r3, r2
 800b6d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	2b06      	cmp	r3, #6
 800b6dc:	d015      	beq.n	800b70a <HAL_TIM_Base_Start_IT+0xbe>
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b6e4:	d011      	beq.n	800b70a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	681a      	ldr	r2, [r3, #0]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f042 0201 	orr.w	r2, r2, #1
 800b6f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6f6:	e008      	b.n	800b70a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	681a      	ldr	r2, [r3, #0]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f042 0201 	orr.w	r2, r2, #1
 800b706:	601a      	str	r2, [r3, #0]
 800b708:	e000      	b.n	800b70c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b70a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b70c:	2300      	movs	r3, #0
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3714      	adds	r7, #20
 800b712:	46bd      	mov	sp, r7
 800b714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b718:	4770      	bx	lr
 800b71a:	bf00      	nop
 800b71c:	40010000 	.word	0x40010000
 800b720:	40000400 	.word	0x40000400
 800b724:	40000800 	.word	0x40000800
 800b728:	40000c00 	.word	0x40000c00
 800b72c:	40010400 	.word	0x40010400
 800b730:	40014000 	.word	0x40014000
 800b734:	40001800 	.word	0x40001800
 800b738:	00010007 	.word	0x00010007

0800b73c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b082      	sub	sp, #8
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d101      	bne.n	800b74e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b74a:	2301      	movs	r3, #1
 800b74c:	e049      	b.n	800b7e2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b754:	b2db      	uxtb	r3, r3
 800b756:	2b00      	cmp	r3, #0
 800b758:	d106      	bne.n	800b768 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2200      	movs	r2, #0
 800b75e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f7f7 f868 	bl	8002838 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2202      	movs	r2, #2
 800b76c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681a      	ldr	r2, [r3, #0]
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	3304      	adds	r3, #4
 800b778:	4619      	mov	r1, r3
 800b77a:	4610      	mov	r0, r2
 800b77c:	f000 fb42 	bl	800be04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2201      	movs	r2, #1
 800b784:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2201      	movs	r2, #1
 800b78c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2201      	movs	r2, #1
 800b794:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2201      	movs	r2, #1
 800b79c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2201      	movs	r2, #1
 800b7a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2201      	movs	r2, #1
 800b7ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2201      	movs	r2, #1
 800b7c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2201      	movs	r2, #1
 800b7dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b7e0:	2300      	movs	r3, #0
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3708      	adds	r7, #8
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}

0800b7ea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b7ea:	b580      	push	{r7, lr}
 800b7ec:	b084      	sub	sp, #16
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	68db      	ldr	r3, [r3, #12]
 800b7f8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	691b      	ldr	r3, [r3, #16]
 800b800:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	f003 0302 	and.w	r3, r3, #2
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d020      	beq.n	800b84e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	f003 0302 	and.w	r3, r3, #2
 800b812:	2b00      	cmp	r3, #0
 800b814:	d01b      	beq.n	800b84e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f06f 0202 	mvn.w	r2, #2
 800b81e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2201      	movs	r2, #1
 800b824:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	699b      	ldr	r3, [r3, #24]
 800b82c:	f003 0303 	and.w	r3, r3, #3
 800b830:	2b00      	cmp	r3, #0
 800b832:	d003      	beq.n	800b83c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f000 fac7 	bl	800bdc8 <HAL_TIM_IC_CaptureCallback>
 800b83a:	e005      	b.n	800b848 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f000 fab9 	bl	800bdb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f000 faca 	bl	800bddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2200      	movs	r2, #0
 800b84c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	f003 0304 	and.w	r3, r3, #4
 800b854:	2b00      	cmp	r3, #0
 800b856:	d020      	beq.n	800b89a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	f003 0304 	and.w	r3, r3, #4
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d01b      	beq.n	800b89a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f06f 0204 	mvn.w	r2, #4
 800b86a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2202      	movs	r2, #2
 800b870:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	699b      	ldr	r3, [r3, #24]
 800b878:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d003      	beq.n	800b888 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f000 faa1 	bl	800bdc8 <HAL_TIM_IC_CaptureCallback>
 800b886:	e005      	b.n	800b894 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f000 fa93 	bl	800bdb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f000 faa4 	bl	800bddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2200      	movs	r2, #0
 800b898:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	f003 0308 	and.w	r3, r3, #8
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d020      	beq.n	800b8e6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	f003 0308 	and.w	r3, r3, #8
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d01b      	beq.n	800b8e6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f06f 0208 	mvn.w	r2, #8
 800b8b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2204      	movs	r2, #4
 800b8bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	69db      	ldr	r3, [r3, #28]
 800b8c4:	f003 0303 	and.w	r3, r3, #3
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d003      	beq.n	800b8d4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f000 fa7b 	bl	800bdc8 <HAL_TIM_IC_CaptureCallback>
 800b8d2:	e005      	b.n	800b8e0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f000 fa6d 	bl	800bdb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f000 fa7e 	bl	800bddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	f003 0310 	and.w	r3, r3, #16
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d020      	beq.n	800b932 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	f003 0310 	and.w	r3, r3, #16
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d01b      	beq.n	800b932 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	f06f 0210 	mvn.w	r2, #16
 800b902:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2208      	movs	r2, #8
 800b908:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	69db      	ldr	r3, [r3, #28]
 800b910:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b914:	2b00      	cmp	r3, #0
 800b916:	d003      	beq.n	800b920 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f000 fa55 	bl	800bdc8 <HAL_TIM_IC_CaptureCallback>
 800b91e:	e005      	b.n	800b92c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f000 fa47 	bl	800bdb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f000 fa58 	bl	800bddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2200      	movs	r2, #0
 800b930:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	f003 0301 	and.w	r3, r3, #1
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d00c      	beq.n	800b956 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	f003 0301 	and.w	r3, r3, #1
 800b942:	2b00      	cmp	r3, #0
 800b944:	d007      	beq.n	800b956 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f06f 0201 	mvn.w	r2, #1
 800b94e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f7f6 f977 	bl	8001c44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d104      	bne.n	800b96a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b966:	2b00      	cmp	r3, #0
 800b968:	d00c      	beq.n	800b984 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b970:	2b00      	cmp	r3, #0
 800b972:	d007      	beq.n	800b984 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b97c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f000 fefa 	bl	800c778 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d00c      	beq.n	800b9a8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b994:	2b00      	cmp	r3, #0
 800b996:	d007      	beq.n	800b9a8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b9a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f000 fef2 	bl	800c78c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d00c      	beq.n	800b9cc <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d007      	beq.n	800b9cc <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b9c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f000 fa12 	bl	800bdf0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	f003 0320 	and.w	r3, r3, #32
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d00c      	beq.n	800b9f0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	f003 0320 	and.w	r3, r3, #32
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d007      	beq.n	800b9f0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	f06f 0220 	mvn.w	r2, #32
 800b9e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f000 feba 	bl	800c764 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b9f0:	bf00      	nop
 800b9f2:	3710      	adds	r7, #16
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}

0800b9f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b086      	sub	sp, #24
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	60f8      	str	r0, [r7, #12]
 800ba00:	60b9      	str	r1, [r7, #8]
 800ba02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ba04:	2300      	movs	r3, #0
 800ba06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ba0e:	2b01      	cmp	r3, #1
 800ba10:	d101      	bne.n	800ba16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ba12:	2302      	movs	r3, #2
 800ba14:	e0ff      	b.n	800bc16 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	2201      	movs	r2, #1
 800ba1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2b14      	cmp	r3, #20
 800ba22:	f200 80f0 	bhi.w	800bc06 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ba26:	a201      	add	r2, pc, #4	@ (adr r2, 800ba2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ba28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba2c:	0800ba81 	.word	0x0800ba81
 800ba30:	0800bc07 	.word	0x0800bc07
 800ba34:	0800bc07 	.word	0x0800bc07
 800ba38:	0800bc07 	.word	0x0800bc07
 800ba3c:	0800bac1 	.word	0x0800bac1
 800ba40:	0800bc07 	.word	0x0800bc07
 800ba44:	0800bc07 	.word	0x0800bc07
 800ba48:	0800bc07 	.word	0x0800bc07
 800ba4c:	0800bb03 	.word	0x0800bb03
 800ba50:	0800bc07 	.word	0x0800bc07
 800ba54:	0800bc07 	.word	0x0800bc07
 800ba58:	0800bc07 	.word	0x0800bc07
 800ba5c:	0800bb43 	.word	0x0800bb43
 800ba60:	0800bc07 	.word	0x0800bc07
 800ba64:	0800bc07 	.word	0x0800bc07
 800ba68:	0800bc07 	.word	0x0800bc07
 800ba6c:	0800bb85 	.word	0x0800bb85
 800ba70:	0800bc07 	.word	0x0800bc07
 800ba74:	0800bc07 	.word	0x0800bc07
 800ba78:	0800bc07 	.word	0x0800bc07
 800ba7c:	0800bbc5 	.word	0x0800bbc5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	68b9      	ldr	r1, [r7, #8]
 800ba86:	4618      	mov	r0, r3
 800ba88:	f000 fa68 	bl	800bf5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	699a      	ldr	r2, [r3, #24]
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	f042 0208 	orr.w	r2, r2, #8
 800ba9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	699a      	ldr	r2, [r3, #24]
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f022 0204 	bic.w	r2, r2, #4
 800baaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	6999      	ldr	r1, [r3, #24]
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	691a      	ldr	r2, [r3, #16]
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	430a      	orrs	r2, r1
 800babc:	619a      	str	r2, [r3, #24]
      break;
 800babe:	e0a5      	b.n	800bc0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	68b9      	ldr	r1, [r7, #8]
 800bac6:	4618      	mov	r0, r3
 800bac8:	f000 faba 	bl	800c040 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	699a      	ldr	r2, [r3, #24]
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bada:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	699a      	ldr	r2, [r3, #24]
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800baea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	6999      	ldr	r1, [r3, #24]
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	691b      	ldr	r3, [r3, #16]
 800baf6:	021a      	lsls	r2, r3, #8
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	430a      	orrs	r2, r1
 800bafe:	619a      	str	r2, [r3, #24]
      break;
 800bb00:	e084      	b.n	800bc0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	68b9      	ldr	r1, [r7, #8]
 800bb08:	4618      	mov	r0, r3
 800bb0a:	f000 fb11 	bl	800c130 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	69da      	ldr	r2, [r3, #28]
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f042 0208 	orr.w	r2, r2, #8
 800bb1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	69da      	ldr	r2, [r3, #28]
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f022 0204 	bic.w	r2, r2, #4
 800bb2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	69d9      	ldr	r1, [r3, #28]
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	691a      	ldr	r2, [r3, #16]
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	430a      	orrs	r2, r1
 800bb3e:	61da      	str	r2, [r3, #28]
      break;
 800bb40:	e064      	b.n	800bc0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	68b9      	ldr	r1, [r7, #8]
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f000 fb67 	bl	800c21c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	69da      	ldr	r2, [r3, #28]
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bb5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	69da      	ldr	r2, [r3, #28]
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bb6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	69d9      	ldr	r1, [r3, #28]
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	691b      	ldr	r3, [r3, #16]
 800bb78:	021a      	lsls	r2, r3, #8
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	430a      	orrs	r2, r1
 800bb80:	61da      	str	r2, [r3, #28]
      break;
 800bb82:	e043      	b.n	800bc0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	68b9      	ldr	r1, [r7, #8]
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f000 fb9e 	bl	800c2cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	f042 0208 	orr.w	r2, r2, #8
 800bb9e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f022 0204 	bic.w	r2, r2, #4
 800bbae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	691a      	ldr	r2, [r3, #16]
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	430a      	orrs	r2, r1
 800bbc0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800bbc2:	e023      	b.n	800bc0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	68b9      	ldr	r1, [r7, #8]
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f000 fbd0 	bl	800c370 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bbde:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bbee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800bbf6:	68bb      	ldr	r3, [r7, #8]
 800bbf8:	691b      	ldr	r3, [r3, #16]
 800bbfa:	021a      	lsls	r2, r3, #8
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	430a      	orrs	r2, r1
 800bc02:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800bc04:	e002      	b.n	800bc0c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bc06:	2301      	movs	r3, #1
 800bc08:	75fb      	strb	r3, [r7, #23]
      break;
 800bc0a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bc14:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	3718      	adds	r7, #24
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}
 800bc1e:	bf00      	nop

0800bc20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b084      	sub	sp, #16
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
 800bc28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bc34:	2b01      	cmp	r3, #1
 800bc36:	d101      	bne.n	800bc3c <HAL_TIM_ConfigClockSource+0x1c>
 800bc38:	2302      	movs	r3, #2
 800bc3a:	e0b4      	b.n	800bda6 <HAL_TIM_ConfigClockSource+0x186>
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2201      	movs	r2, #1
 800bc40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2202      	movs	r2, #2
 800bc48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	689b      	ldr	r3, [r3, #8]
 800bc52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bc54:	68ba      	ldr	r2, [r7, #8]
 800bc56:	4b56      	ldr	r3, [pc, #344]	@ (800bdb0 <HAL_TIM_ConfigClockSource+0x190>)
 800bc58:	4013      	ands	r3, r2
 800bc5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bc62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	68ba      	ldr	r2, [r7, #8]
 800bc6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bc74:	d03e      	beq.n	800bcf4 <HAL_TIM_ConfigClockSource+0xd4>
 800bc76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bc7a:	f200 8087 	bhi.w	800bd8c <HAL_TIM_ConfigClockSource+0x16c>
 800bc7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc82:	f000 8086 	beq.w	800bd92 <HAL_TIM_ConfigClockSource+0x172>
 800bc86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc8a:	d87f      	bhi.n	800bd8c <HAL_TIM_ConfigClockSource+0x16c>
 800bc8c:	2b70      	cmp	r3, #112	@ 0x70
 800bc8e:	d01a      	beq.n	800bcc6 <HAL_TIM_ConfigClockSource+0xa6>
 800bc90:	2b70      	cmp	r3, #112	@ 0x70
 800bc92:	d87b      	bhi.n	800bd8c <HAL_TIM_ConfigClockSource+0x16c>
 800bc94:	2b60      	cmp	r3, #96	@ 0x60
 800bc96:	d050      	beq.n	800bd3a <HAL_TIM_ConfigClockSource+0x11a>
 800bc98:	2b60      	cmp	r3, #96	@ 0x60
 800bc9a:	d877      	bhi.n	800bd8c <HAL_TIM_ConfigClockSource+0x16c>
 800bc9c:	2b50      	cmp	r3, #80	@ 0x50
 800bc9e:	d03c      	beq.n	800bd1a <HAL_TIM_ConfigClockSource+0xfa>
 800bca0:	2b50      	cmp	r3, #80	@ 0x50
 800bca2:	d873      	bhi.n	800bd8c <HAL_TIM_ConfigClockSource+0x16c>
 800bca4:	2b40      	cmp	r3, #64	@ 0x40
 800bca6:	d058      	beq.n	800bd5a <HAL_TIM_ConfigClockSource+0x13a>
 800bca8:	2b40      	cmp	r3, #64	@ 0x40
 800bcaa:	d86f      	bhi.n	800bd8c <HAL_TIM_ConfigClockSource+0x16c>
 800bcac:	2b30      	cmp	r3, #48	@ 0x30
 800bcae:	d064      	beq.n	800bd7a <HAL_TIM_ConfigClockSource+0x15a>
 800bcb0:	2b30      	cmp	r3, #48	@ 0x30
 800bcb2:	d86b      	bhi.n	800bd8c <HAL_TIM_ConfigClockSource+0x16c>
 800bcb4:	2b20      	cmp	r3, #32
 800bcb6:	d060      	beq.n	800bd7a <HAL_TIM_ConfigClockSource+0x15a>
 800bcb8:	2b20      	cmp	r3, #32
 800bcba:	d867      	bhi.n	800bd8c <HAL_TIM_ConfigClockSource+0x16c>
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d05c      	beq.n	800bd7a <HAL_TIM_ConfigClockSource+0x15a>
 800bcc0:	2b10      	cmp	r3, #16
 800bcc2:	d05a      	beq.n	800bd7a <HAL_TIM_ConfigClockSource+0x15a>
 800bcc4:	e062      	b.n	800bd8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bcd6:	f000 fc19 	bl	800c50c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	689b      	ldr	r3, [r3, #8]
 800bce0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bce2:	68bb      	ldr	r3, [r7, #8]
 800bce4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800bce8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	68ba      	ldr	r2, [r7, #8]
 800bcf0:	609a      	str	r2, [r3, #8]
      break;
 800bcf2:	e04f      	b.n	800bd94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bd04:	f000 fc02 	bl	800c50c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	689a      	ldr	r2, [r3, #8]
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bd16:	609a      	str	r2, [r3, #8]
      break;
 800bd18:	e03c      	b.n	800bd94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd26:	461a      	mov	r2, r3
 800bd28:	f000 fb76 	bl	800c418 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	2150      	movs	r1, #80	@ 0x50
 800bd32:	4618      	mov	r0, r3
 800bd34:	f000 fbcf 	bl	800c4d6 <TIM_ITRx_SetConfig>
      break;
 800bd38:	e02c      	b.n	800bd94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bd46:	461a      	mov	r2, r3
 800bd48:	f000 fb95 	bl	800c476 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	2160      	movs	r1, #96	@ 0x60
 800bd52:	4618      	mov	r0, r3
 800bd54:	f000 fbbf 	bl	800c4d6 <TIM_ITRx_SetConfig>
      break;
 800bd58:	e01c      	b.n	800bd94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd66:	461a      	mov	r2, r3
 800bd68:	f000 fb56 	bl	800c418 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	2140      	movs	r1, #64	@ 0x40
 800bd72:	4618      	mov	r0, r3
 800bd74:	f000 fbaf 	bl	800c4d6 <TIM_ITRx_SetConfig>
      break;
 800bd78:	e00c      	b.n	800bd94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681a      	ldr	r2, [r3, #0]
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	4619      	mov	r1, r3
 800bd84:	4610      	mov	r0, r2
 800bd86:	f000 fba6 	bl	800c4d6 <TIM_ITRx_SetConfig>
      break;
 800bd8a:	e003      	b.n	800bd94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	73fb      	strb	r3, [r7, #15]
      break;
 800bd90:	e000      	b.n	800bd94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800bd92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2201      	movs	r2, #1
 800bd98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2200      	movs	r2, #0
 800bda0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bda4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	3710      	adds	r7, #16
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd80      	pop	{r7, pc}
 800bdae:	bf00      	nop
 800bdb0:	fffeff88 	.word	0xfffeff88

0800bdb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b083      	sub	sp, #12
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bdbc:	bf00      	nop
 800bdbe:	370c      	adds	r7, #12
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc6:	4770      	bx	lr

0800bdc8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b083      	sub	sp, #12
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bdd0:	bf00      	nop
 800bdd2:	370c      	adds	r7, #12
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdda:	4770      	bx	lr

0800bddc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bddc:	b480      	push	{r7}
 800bdde:	b083      	sub	sp, #12
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bde4:	bf00      	nop
 800bde6:	370c      	adds	r7, #12
 800bde8:	46bd      	mov	sp, r7
 800bdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdee:	4770      	bx	lr

0800bdf0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bdf0:	b480      	push	{r7}
 800bdf2:	b083      	sub	sp, #12
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bdf8:	bf00      	nop
 800bdfa:	370c      	adds	r7, #12
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be02:	4770      	bx	lr

0800be04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800be04:	b480      	push	{r7}
 800be06:	b085      	sub	sp, #20
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
 800be0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	4a46      	ldr	r2, [pc, #280]	@ (800bf30 <TIM_Base_SetConfig+0x12c>)
 800be18:	4293      	cmp	r3, r2
 800be1a:	d013      	beq.n	800be44 <TIM_Base_SetConfig+0x40>
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be22:	d00f      	beq.n	800be44 <TIM_Base_SetConfig+0x40>
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	4a43      	ldr	r2, [pc, #268]	@ (800bf34 <TIM_Base_SetConfig+0x130>)
 800be28:	4293      	cmp	r3, r2
 800be2a:	d00b      	beq.n	800be44 <TIM_Base_SetConfig+0x40>
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	4a42      	ldr	r2, [pc, #264]	@ (800bf38 <TIM_Base_SetConfig+0x134>)
 800be30:	4293      	cmp	r3, r2
 800be32:	d007      	beq.n	800be44 <TIM_Base_SetConfig+0x40>
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	4a41      	ldr	r2, [pc, #260]	@ (800bf3c <TIM_Base_SetConfig+0x138>)
 800be38:	4293      	cmp	r3, r2
 800be3a:	d003      	beq.n	800be44 <TIM_Base_SetConfig+0x40>
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	4a40      	ldr	r2, [pc, #256]	@ (800bf40 <TIM_Base_SetConfig+0x13c>)
 800be40:	4293      	cmp	r3, r2
 800be42:	d108      	bne.n	800be56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	685b      	ldr	r3, [r3, #4]
 800be50:	68fa      	ldr	r2, [r7, #12]
 800be52:	4313      	orrs	r3, r2
 800be54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	4a35      	ldr	r2, [pc, #212]	@ (800bf30 <TIM_Base_SetConfig+0x12c>)
 800be5a:	4293      	cmp	r3, r2
 800be5c:	d02b      	beq.n	800beb6 <TIM_Base_SetConfig+0xb2>
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be64:	d027      	beq.n	800beb6 <TIM_Base_SetConfig+0xb2>
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	4a32      	ldr	r2, [pc, #200]	@ (800bf34 <TIM_Base_SetConfig+0x130>)
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d023      	beq.n	800beb6 <TIM_Base_SetConfig+0xb2>
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	4a31      	ldr	r2, [pc, #196]	@ (800bf38 <TIM_Base_SetConfig+0x134>)
 800be72:	4293      	cmp	r3, r2
 800be74:	d01f      	beq.n	800beb6 <TIM_Base_SetConfig+0xb2>
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	4a30      	ldr	r2, [pc, #192]	@ (800bf3c <TIM_Base_SetConfig+0x138>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d01b      	beq.n	800beb6 <TIM_Base_SetConfig+0xb2>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	4a2f      	ldr	r2, [pc, #188]	@ (800bf40 <TIM_Base_SetConfig+0x13c>)
 800be82:	4293      	cmp	r3, r2
 800be84:	d017      	beq.n	800beb6 <TIM_Base_SetConfig+0xb2>
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	4a2e      	ldr	r2, [pc, #184]	@ (800bf44 <TIM_Base_SetConfig+0x140>)
 800be8a:	4293      	cmp	r3, r2
 800be8c:	d013      	beq.n	800beb6 <TIM_Base_SetConfig+0xb2>
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	4a2d      	ldr	r2, [pc, #180]	@ (800bf48 <TIM_Base_SetConfig+0x144>)
 800be92:	4293      	cmp	r3, r2
 800be94:	d00f      	beq.n	800beb6 <TIM_Base_SetConfig+0xb2>
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	4a2c      	ldr	r2, [pc, #176]	@ (800bf4c <TIM_Base_SetConfig+0x148>)
 800be9a:	4293      	cmp	r3, r2
 800be9c:	d00b      	beq.n	800beb6 <TIM_Base_SetConfig+0xb2>
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	4a2b      	ldr	r2, [pc, #172]	@ (800bf50 <TIM_Base_SetConfig+0x14c>)
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d007      	beq.n	800beb6 <TIM_Base_SetConfig+0xb2>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	4a2a      	ldr	r2, [pc, #168]	@ (800bf54 <TIM_Base_SetConfig+0x150>)
 800beaa:	4293      	cmp	r3, r2
 800beac:	d003      	beq.n	800beb6 <TIM_Base_SetConfig+0xb2>
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	4a29      	ldr	r2, [pc, #164]	@ (800bf58 <TIM_Base_SetConfig+0x154>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d108      	bne.n	800bec8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bebc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	68db      	ldr	r3, [r3, #12]
 800bec2:	68fa      	ldr	r2, [r7, #12]
 800bec4:	4313      	orrs	r3, r2
 800bec6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	695b      	ldr	r3, [r3, #20]
 800bed2:	4313      	orrs	r3, r2
 800bed4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	68fa      	ldr	r2, [r7, #12]
 800beda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	689a      	ldr	r2, [r3, #8]
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	681a      	ldr	r2, [r3, #0]
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	4a10      	ldr	r2, [pc, #64]	@ (800bf30 <TIM_Base_SetConfig+0x12c>)
 800bef0:	4293      	cmp	r3, r2
 800bef2:	d003      	beq.n	800befc <TIM_Base_SetConfig+0xf8>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	4a12      	ldr	r2, [pc, #72]	@ (800bf40 <TIM_Base_SetConfig+0x13c>)
 800bef8:	4293      	cmp	r3, r2
 800befa:	d103      	bne.n	800bf04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	691a      	ldr	r2, [r3, #16]
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2201      	movs	r2, #1
 800bf08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	691b      	ldr	r3, [r3, #16]
 800bf0e:	f003 0301 	and.w	r3, r3, #1
 800bf12:	2b01      	cmp	r3, #1
 800bf14:	d105      	bne.n	800bf22 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	691b      	ldr	r3, [r3, #16]
 800bf1a:	f023 0201 	bic.w	r2, r3, #1
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	611a      	str	r2, [r3, #16]
  }
}
 800bf22:	bf00      	nop
 800bf24:	3714      	adds	r7, #20
 800bf26:	46bd      	mov	sp, r7
 800bf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2c:	4770      	bx	lr
 800bf2e:	bf00      	nop
 800bf30:	40010000 	.word	0x40010000
 800bf34:	40000400 	.word	0x40000400
 800bf38:	40000800 	.word	0x40000800
 800bf3c:	40000c00 	.word	0x40000c00
 800bf40:	40010400 	.word	0x40010400
 800bf44:	40014000 	.word	0x40014000
 800bf48:	40014400 	.word	0x40014400
 800bf4c:	40014800 	.word	0x40014800
 800bf50:	40001800 	.word	0x40001800
 800bf54:	40001c00 	.word	0x40001c00
 800bf58:	40002000 	.word	0x40002000

0800bf5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b087      	sub	sp, #28
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
 800bf64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6a1b      	ldr	r3, [r3, #32]
 800bf6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6a1b      	ldr	r3, [r3, #32]
 800bf70:	f023 0201 	bic.w	r2, r3, #1
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	685b      	ldr	r3, [r3, #4]
 800bf7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	699b      	ldr	r3, [r3, #24]
 800bf82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bf84:	68fa      	ldr	r2, [r7, #12]
 800bf86:	4b2b      	ldr	r3, [pc, #172]	@ (800c034 <TIM_OC1_SetConfig+0xd8>)
 800bf88:	4013      	ands	r3, r2
 800bf8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	f023 0303 	bic.w	r3, r3, #3
 800bf92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	68fa      	ldr	r2, [r7, #12]
 800bf9a:	4313      	orrs	r3, r2
 800bf9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bf9e:	697b      	ldr	r3, [r7, #20]
 800bfa0:	f023 0302 	bic.w	r3, r3, #2
 800bfa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	689b      	ldr	r3, [r3, #8]
 800bfaa:	697a      	ldr	r2, [r7, #20]
 800bfac:	4313      	orrs	r3, r2
 800bfae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	4a21      	ldr	r2, [pc, #132]	@ (800c038 <TIM_OC1_SetConfig+0xdc>)
 800bfb4:	4293      	cmp	r3, r2
 800bfb6:	d003      	beq.n	800bfc0 <TIM_OC1_SetConfig+0x64>
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	4a20      	ldr	r2, [pc, #128]	@ (800c03c <TIM_OC1_SetConfig+0xe0>)
 800bfbc:	4293      	cmp	r3, r2
 800bfbe:	d10c      	bne.n	800bfda <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bfc0:	697b      	ldr	r3, [r7, #20]
 800bfc2:	f023 0308 	bic.w	r3, r3, #8
 800bfc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	68db      	ldr	r3, [r3, #12]
 800bfcc:	697a      	ldr	r2, [r7, #20]
 800bfce:	4313      	orrs	r3, r2
 800bfd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	f023 0304 	bic.w	r3, r3, #4
 800bfd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	4a16      	ldr	r2, [pc, #88]	@ (800c038 <TIM_OC1_SetConfig+0xdc>)
 800bfde:	4293      	cmp	r3, r2
 800bfe0:	d003      	beq.n	800bfea <TIM_OC1_SetConfig+0x8e>
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	4a15      	ldr	r2, [pc, #84]	@ (800c03c <TIM_OC1_SetConfig+0xe0>)
 800bfe6:	4293      	cmp	r3, r2
 800bfe8:	d111      	bne.n	800c00e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bfea:	693b      	ldr	r3, [r7, #16]
 800bfec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bff0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bff8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	695b      	ldr	r3, [r3, #20]
 800bffe:	693a      	ldr	r2, [r7, #16]
 800c000:	4313      	orrs	r3, r2
 800c002:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	699b      	ldr	r3, [r3, #24]
 800c008:	693a      	ldr	r2, [r7, #16]
 800c00a:	4313      	orrs	r3, r2
 800c00c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	693a      	ldr	r2, [r7, #16]
 800c012:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	68fa      	ldr	r2, [r7, #12]
 800c018:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	685a      	ldr	r2, [r3, #4]
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	697a      	ldr	r2, [r7, #20]
 800c026:	621a      	str	r2, [r3, #32]
}
 800c028:	bf00      	nop
 800c02a:	371c      	adds	r7, #28
 800c02c:	46bd      	mov	sp, r7
 800c02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c032:	4770      	bx	lr
 800c034:	fffeff8f 	.word	0xfffeff8f
 800c038:	40010000 	.word	0x40010000
 800c03c:	40010400 	.word	0x40010400

0800c040 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c040:	b480      	push	{r7}
 800c042:	b087      	sub	sp, #28
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
 800c048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6a1b      	ldr	r3, [r3, #32]
 800c04e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6a1b      	ldr	r3, [r3, #32]
 800c054:	f023 0210 	bic.w	r2, r3, #16
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	685b      	ldr	r3, [r3, #4]
 800c060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	699b      	ldr	r3, [r3, #24]
 800c066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c068:	68fa      	ldr	r2, [r7, #12]
 800c06a:	4b2e      	ldr	r3, [pc, #184]	@ (800c124 <TIM_OC2_SetConfig+0xe4>)
 800c06c:	4013      	ands	r3, r2
 800c06e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c076:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	021b      	lsls	r3, r3, #8
 800c07e:	68fa      	ldr	r2, [r7, #12]
 800c080:	4313      	orrs	r3, r2
 800c082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c084:	697b      	ldr	r3, [r7, #20]
 800c086:	f023 0320 	bic.w	r3, r3, #32
 800c08a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	689b      	ldr	r3, [r3, #8]
 800c090:	011b      	lsls	r3, r3, #4
 800c092:	697a      	ldr	r2, [r7, #20]
 800c094:	4313      	orrs	r3, r2
 800c096:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	4a23      	ldr	r2, [pc, #140]	@ (800c128 <TIM_OC2_SetConfig+0xe8>)
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d003      	beq.n	800c0a8 <TIM_OC2_SetConfig+0x68>
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	4a22      	ldr	r2, [pc, #136]	@ (800c12c <TIM_OC2_SetConfig+0xec>)
 800c0a4:	4293      	cmp	r3, r2
 800c0a6:	d10d      	bne.n	800c0c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c0a8:	697b      	ldr	r3, [r7, #20]
 800c0aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c0ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	68db      	ldr	r3, [r3, #12]
 800c0b4:	011b      	lsls	r3, r3, #4
 800c0b6:	697a      	ldr	r2, [r7, #20]
 800c0b8:	4313      	orrs	r3, r2
 800c0ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c0bc:	697b      	ldr	r3, [r7, #20]
 800c0be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c0c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	4a18      	ldr	r2, [pc, #96]	@ (800c128 <TIM_OC2_SetConfig+0xe8>)
 800c0c8:	4293      	cmp	r3, r2
 800c0ca:	d003      	beq.n	800c0d4 <TIM_OC2_SetConfig+0x94>
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	4a17      	ldr	r2, [pc, #92]	@ (800c12c <TIM_OC2_SetConfig+0xec>)
 800c0d0:	4293      	cmp	r3, r2
 800c0d2:	d113      	bne.n	800c0fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c0da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c0e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	695b      	ldr	r3, [r3, #20]
 800c0e8:	009b      	lsls	r3, r3, #2
 800c0ea:	693a      	ldr	r2, [r7, #16]
 800c0ec:	4313      	orrs	r3, r2
 800c0ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	699b      	ldr	r3, [r3, #24]
 800c0f4:	009b      	lsls	r3, r3, #2
 800c0f6:	693a      	ldr	r2, [r7, #16]
 800c0f8:	4313      	orrs	r3, r2
 800c0fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	693a      	ldr	r2, [r7, #16]
 800c100:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	68fa      	ldr	r2, [r7, #12]
 800c106:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	685a      	ldr	r2, [r3, #4]
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	697a      	ldr	r2, [r7, #20]
 800c114:	621a      	str	r2, [r3, #32]
}
 800c116:	bf00      	nop
 800c118:	371c      	adds	r7, #28
 800c11a:	46bd      	mov	sp, r7
 800c11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c120:	4770      	bx	lr
 800c122:	bf00      	nop
 800c124:	feff8fff 	.word	0xfeff8fff
 800c128:	40010000 	.word	0x40010000
 800c12c:	40010400 	.word	0x40010400

0800c130 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c130:	b480      	push	{r7}
 800c132:	b087      	sub	sp, #28
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
 800c138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	6a1b      	ldr	r3, [r3, #32]
 800c13e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	6a1b      	ldr	r3, [r3, #32]
 800c144:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	685b      	ldr	r3, [r3, #4]
 800c150:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	69db      	ldr	r3, [r3, #28]
 800c156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c158:	68fa      	ldr	r2, [r7, #12]
 800c15a:	4b2d      	ldr	r3, [pc, #180]	@ (800c210 <TIM_OC3_SetConfig+0xe0>)
 800c15c:	4013      	ands	r3, r2
 800c15e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	f023 0303 	bic.w	r3, r3, #3
 800c166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	68fa      	ldr	r2, [r7, #12]
 800c16e:	4313      	orrs	r3, r2
 800c170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c178:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	689b      	ldr	r3, [r3, #8]
 800c17e:	021b      	lsls	r3, r3, #8
 800c180:	697a      	ldr	r2, [r7, #20]
 800c182:	4313      	orrs	r3, r2
 800c184:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	4a22      	ldr	r2, [pc, #136]	@ (800c214 <TIM_OC3_SetConfig+0xe4>)
 800c18a:	4293      	cmp	r3, r2
 800c18c:	d003      	beq.n	800c196 <TIM_OC3_SetConfig+0x66>
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	4a21      	ldr	r2, [pc, #132]	@ (800c218 <TIM_OC3_SetConfig+0xe8>)
 800c192:	4293      	cmp	r3, r2
 800c194:	d10d      	bne.n	800c1b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c19c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	68db      	ldr	r3, [r3, #12]
 800c1a2:	021b      	lsls	r3, r3, #8
 800c1a4:	697a      	ldr	r2, [r7, #20]
 800c1a6:	4313      	orrs	r3, r2
 800c1a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c1b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	4a17      	ldr	r2, [pc, #92]	@ (800c214 <TIM_OC3_SetConfig+0xe4>)
 800c1b6:	4293      	cmp	r3, r2
 800c1b8:	d003      	beq.n	800c1c2 <TIM_OC3_SetConfig+0x92>
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	4a16      	ldr	r2, [pc, #88]	@ (800c218 <TIM_OC3_SetConfig+0xe8>)
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d113      	bne.n	800c1ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c1c2:	693b      	ldr	r3, [r7, #16]
 800c1c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c1c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c1ca:	693b      	ldr	r3, [r7, #16]
 800c1cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c1d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	695b      	ldr	r3, [r3, #20]
 800c1d6:	011b      	lsls	r3, r3, #4
 800c1d8:	693a      	ldr	r2, [r7, #16]
 800c1da:	4313      	orrs	r3, r2
 800c1dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	699b      	ldr	r3, [r3, #24]
 800c1e2:	011b      	lsls	r3, r3, #4
 800c1e4:	693a      	ldr	r2, [r7, #16]
 800c1e6:	4313      	orrs	r3, r2
 800c1e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	693a      	ldr	r2, [r7, #16]
 800c1ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	68fa      	ldr	r2, [r7, #12]
 800c1f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	685a      	ldr	r2, [r3, #4]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	697a      	ldr	r2, [r7, #20]
 800c202:	621a      	str	r2, [r3, #32]
}
 800c204:	bf00      	nop
 800c206:	371c      	adds	r7, #28
 800c208:	46bd      	mov	sp, r7
 800c20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20e:	4770      	bx	lr
 800c210:	fffeff8f 	.word	0xfffeff8f
 800c214:	40010000 	.word	0x40010000
 800c218:	40010400 	.word	0x40010400

0800c21c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c21c:	b480      	push	{r7}
 800c21e:	b087      	sub	sp, #28
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
 800c224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	6a1b      	ldr	r3, [r3, #32]
 800c22a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6a1b      	ldr	r3, [r3, #32]
 800c230:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	685b      	ldr	r3, [r3, #4]
 800c23c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	69db      	ldr	r3, [r3, #28]
 800c242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c244:	68fa      	ldr	r2, [r7, #12]
 800c246:	4b1e      	ldr	r3, [pc, #120]	@ (800c2c0 <TIM_OC4_SetConfig+0xa4>)
 800c248:	4013      	ands	r3, r2
 800c24a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c252:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	021b      	lsls	r3, r3, #8
 800c25a:	68fa      	ldr	r2, [r7, #12]
 800c25c:	4313      	orrs	r3, r2
 800c25e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c260:	693b      	ldr	r3, [r7, #16]
 800c262:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c266:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	689b      	ldr	r3, [r3, #8]
 800c26c:	031b      	lsls	r3, r3, #12
 800c26e:	693a      	ldr	r2, [r7, #16]
 800c270:	4313      	orrs	r3, r2
 800c272:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	4a13      	ldr	r2, [pc, #76]	@ (800c2c4 <TIM_OC4_SetConfig+0xa8>)
 800c278:	4293      	cmp	r3, r2
 800c27a:	d003      	beq.n	800c284 <TIM_OC4_SetConfig+0x68>
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	4a12      	ldr	r2, [pc, #72]	@ (800c2c8 <TIM_OC4_SetConfig+0xac>)
 800c280:	4293      	cmp	r3, r2
 800c282:	d109      	bne.n	800c298 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c284:	697b      	ldr	r3, [r7, #20]
 800c286:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c28a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	695b      	ldr	r3, [r3, #20]
 800c290:	019b      	lsls	r3, r3, #6
 800c292:	697a      	ldr	r2, [r7, #20]
 800c294:	4313      	orrs	r3, r2
 800c296:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	697a      	ldr	r2, [r7, #20]
 800c29c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	68fa      	ldr	r2, [r7, #12]
 800c2a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	685a      	ldr	r2, [r3, #4]
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	693a      	ldr	r2, [r7, #16]
 800c2b0:	621a      	str	r2, [r3, #32]
}
 800c2b2:	bf00      	nop
 800c2b4:	371c      	adds	r7, #28
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2bc:	4770      	bx	lr
 800c2be:	bf00      	nop
 800c2c0:	feff8fff 	.word	0xfeff8fff
 800c2c4:	40010000 	.word	0x40010000
 800c2c8:	40010400 	.word	0x40010400

0800c2cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	b087      	sub	sp, #28
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
 800c2d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6a1b      	ldr	r3, [r3, #32]
 800c2da:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	6a1b      	ldr	r3, [r3, #32]
 800c2e0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	685b      	ldr	r3, [r3, #4]
 800c2ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c2f4:	68fa      	ldr	r2, [r7, #12]
 800c2f6:	4b1b      	ldr	r3, [pc, #108]	@ (800c364 <TIM_OC5_SetConfig+0x98>)
 800c2f8:	4013      	ands	r3, r2
 800c2fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	68fa      	ldr	r2, [r7, #12]
 800c302:	4313      	orrs	r3, r2
 800c304:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c306:	693b      	ldr	r3, [r7, #16]
 800c308:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c30c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	689b      	ldr	r3, [r3, #8]
 800c312:	041b      	lsls	r3, r3, #16
 800c314:	693a      	ldr	r2, [r7, #16]
 800c316:	4313      	orrs	r3, r2
 800c318:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	4a12      	ldr	r2, [pc, #72]	@ (800c368 <TIM_OC5_SetConfig+0x9c>)
 800c31e:	4293      	cmp	r3, r2
 800c320:	d003      	beq.n	800c32a <TIM_OC5_SetConfig+0x5e>
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	4a11      	ldr	r2, [pc, #68]	@ (800c36c <TIM_OC5_SetConfig+0xa0>)
 800c326:	4293      	cmp	r3, r2
 800c328:	d109      	bne.n	800c33e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c330:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	695b      	ldr	r3, [r3, #20]
 800c336:	021b      	lsls	r3, r3, #8
 800c338:	697a      	ldr	r2, [r7, #20]
 800c33a:	4313      	orrs	r3, r2
 800c33c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	697a      	ldr	r2, [r7, #20]
 800c342:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	68fa      	ldr	r2, [r7, #12]
 800c348:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	685a      	ldr	r2, [r3, #4]
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	693a      	ldr	r2, [r7, #16]
 800c356:	621a      	str	r2, [r3, #32]
}
 800c358:	bf00      	nop
 800c35a:	371c      	adds	r7, #28
 800c35c:	46bd      	mov	sp, r7
 800c35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c362:	4770      	bx	lr
 800c364:	fffeff8f 	.word	0xfffeff8f
 800c368:	40010000 	.word	0x40010000
 800c36c:	40010400 	.word	0x40010400

0800c370 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c370:	b480      	push	{r7}
 800c372:	b087      	sub	sp, #28
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
 800c378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6a1b      	ldr	r3, [r3, #32]
 800c37e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6a1b      	ldr	r3, [r3, #32]
 800c384:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	685b      	ldr	r3, [r3, #4]
 800c390:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c398:	68fa      	ldr	r2, [r7, #12]
 800c39a:	4b1c      	ldr	r3, [pc, #112]	@ (800c40c <TIM_OC6_SetConfig+0x9c>)
 800c39c:	4013      	ands	r3, r2
 800c39e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	021b      	lsls	r3, r3, #8
 800c3a6:	68fa      	ldr	r2, [r7, #12]
 800c3a8:	4313      	orrs	r3, r2
 800c3aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c3ac:	693b      	ldr	r3, [r7, #16]
 800c3ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c3b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	689b      	ldr	r3, [r3, #8]
 800c3b8:	051b      	lsls	r3, r3, #20
 800c3ba:	693a      	ldr	r2, [r7, #16]
 800c3bc:	4313      	orrs	r3, r2
 800c3be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	4a13      	ldr	r2, [pc, #76]	@ (800c410 <TIM_OC6_SetConfig+0xa0>)
 800c3c4:	4293      	cmp	r3, r2
 800c3c6:	d003      	beq.n	800c3d0 <TIM_OC6_SetConfig+0x60>
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	4a12      	ldr	r2, [pc, #72]	@ (800c414 <TIM_OC6_SetConfig+0xa4>)
 800c3cc:	4293      	cmp	r3, r2
 800c3ce:	d109      	bne.n	800c3e4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c3d0:	697b      	ldr	r3, [r7, #20]
 800c3d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c3d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	695b      	ldr	r3, [r3, #20]
 800c3dc:	029b      	lsls	r3, r3, #10
 800c3de:	697a      	ldr	r2, [r7, #20]
 800c3e0:	4313      	orrs	r3, r2
 800c3e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	697a      	ldr	r2, [r7, #20]
 800c3e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	68fa      	ldr	r2, [r7, #12]
 800c3ee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	685a      	ldr	r2, [r3, #4]
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	693a      	ldr	r2, [r7, #16]
 800c3fc:	621a      	str	r2, [r3, #32]
}
 800c3fe:	bf00      	nop
 800c400:	371c      	adds	r7, #28
 800c402:	46bd      	mov	sp, r7
 800c404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c408:	4770      	bx	lr
 800c40a:	bf00      	nop
 800c40c:	feff8fff 	.word	0xfeff8fff
 800c410:	40010000 	.word	0x40010000
 800c414:	40010400 	.word	0x40010400

0800c418 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c418:	b480      	push	{r7}
 800c41a:	b087      	sub	sp, #28
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	60f8      	str	r0, [r7, #12]
 800c420:	60b9      	str	r1, [r7, #8]
 800c422:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	6a1b      	ldr	r3, [r3, #32]
 800c428:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	6a1b      	ldr	r3, [r3, #32]
 800c42e:	f023 0201 	bic.w	r2, r3, #1
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	699b      	ldr	r3, [r3, #24]
 800c43a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c442:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	011b      	lsls	r3, r3, #4
 800c448:	693a      	ldr	r2, [r7, #16]
 800c44a:	4313      	orrs	r3, r2
 800c44c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	f023 030a 	bic.w	r3, r3, #10
 800c454:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c456:	697a      	ldr	r2, [r7, #20]
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	4313      	orrs	r3, r2
 800c45c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	693a      	ldr	r2, [r7, #16]
 800c462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	697a      	ldr	r2, [r7, #20]
 800c468:	621a      	str	r2, [r3, #32]
}
 800c46a:	bf00      	nop
 800c46c:	371c      	adds	r7, #28
 800c46e:	46bd      	mov	sp, r7
 800c470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c474:	4770      	bx	lr

0800c476 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c476:	b480      	push	{r7}
 800c478:	b087      	sub	sp, #28
 800c47a:	af00      	add	r7, sp, #0
 800c47c:	60f8      	str	r0, [r7, #12]
 800c47e:	60b9      	str	r1, [r7, #8]
 800c480:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	6a1b      	ldr	r3, [r3, #32]
 800c486:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	6a1b      	ldr	r3, [r3, #32]
 800c48c:	f023 0210 	bic.w	r2, r3, #16
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	699b      	ldr	r3, [r3, #24]
 800c498:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c49a:	693b      	ldr	r3, [r7, #16]
 800c49c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c4a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	031b      	lsls	r3, r3, #12
 800c4a6:	693a      	ldr	r2, [r7, #16]
 800c4a8:	4313      	orrs	r3, r2
 800c4aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c4ac:	697b      	ldr	r3, [r7, #20]
 800c4ae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c4b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	011b      	lsls	r3, r3, #4
 800c4b8:	697a      	ldr	r2, [r7, #20]
 800c4ba:	4313      	orrs	r3, r2
 800c4bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	693a      	ldr	r2, [r7, #16]
 800c4c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	697a      	ldr	r2, [r7, #20]
 800c4c8:	621a      	str	r2, [r3, #32]
}
 800c4ca:	bf00      	nop
 800c4cc:	371c      	adds	r7, #28
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d4:	4770      	bx	lr

0800c4d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c4d6:	b480      	push	{r7}
 800c4d8:	b085      	sub	sp, #20
 800c4da:	af00      	add	r7, sp, #0
 800c4dc:	6078      	str	r0, [r7, #4]
 800c4de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	689b      	ldr	r3, [r3, #8]
 800c4e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c4ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c4ee:	683a      	ldr	r2, [r7, #0]
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	4313      	orrs	r3, r2
 800c4f4:	f043 0307 	orr.w	r3, r3, #7
 800c4f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	68fa      	ldr	r2, [r7, #12]
 800c4fe:	609a      	str	r2, [r3, #8]
}
 800c500:	bf00      	nop
 800c502:	3714      	adds	r7, #20
 800c504:	46bd      	mov	sp, r7
 800c506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50a:	4770      	bx	lr

0800c50c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c50c:	b480      	push	{r7}
 800c50e:	b087      	sub	sp, #28
 800c510:	af00      	add	r7, sp, #0
 800c512:	60f8      	str	r0, [r7, #12]
 800c514:	60b9      	str	r1, [r7, #8]
 800c516:	607a      	str	r2, [r7, #4]
 800c518:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	689b      	ldr	r3, [r3, #8]
 800c51e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c520:	697b      	ldr	r3, [r7, #20]
 800c522:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c526:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	021a      	lsls	r2, r3, #8
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	431a      	orrs	r2, r3
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	4313      	orrs	r3, r2
 800c534:	697a      	ldr	r2, [r7, #20]
 800c536:	4313      	orrs	r3, r2
 800c538:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	697a      	ldr	r2, [r7, #20]
 800c53e:	609a      	str	r2, [r3, #8]
}
 800c540:	bf00      	nop
 800c542:	371c      	adds	r7, #28
 800c544:	46bd      	mov	sp, r7
 800c546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54a:	4770      	bx	lr

0800c54c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c54c:	b480      	push	{r7}
 800c54e:	b085      	sub	sp, #20
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
 800c554:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c55c:	2b01      	cmp	r3, #1
 800c55e:	d101      	bne.n	800c564 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c560:	2302      	movs	r3, #2
 800c562:	e06d      	b.n	800c640 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2201      	movs	r2, #1
 800c568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2202      	movs	r2, #2
 800c570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	685b      	ldr	r3, [r3, #4]
 800c57a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	689b      	ldr	r3, [r3, #8]
 800c582:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	4a30      	ldr	r2, [pc, #192]	@ (800c64c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c58a:	4293      	cmp	r3, r2
 800c58c:	d004      	beq.n	800c598 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	4a2f      	ldr	r2, [pc, #188]	@ (800c650 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c594:	4293      	cmp	r3, r2
 800c596:	d108      	bne.n	800c5aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c59e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	685b      	ldr	r3, [r3, #4]
 800c5a4:	68fa      	ldr	r2, [r7, #12]
 800c5a6:	4313      	orrs	r3, r2
 800c5a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c5b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	68fa      	ldr	r2, [r7, #12]
 800c5b8:	4313      	orrs	r3, r2
 800c5ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	68fa      	ldr	r2, [r7, #12]
 800c5c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	4a20      	ldr	r2, [pc, #128]	@ (800c64c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	d022      	beq.n	800c614 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c5d6:	d01d      	beq.n	800c614 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	4a1d      	ldr	r2, [pc, #116]	@ (800c654 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c5de:	4293      	cmp	r3, r2
 800c5e0:	d018      	beq.n	800c614 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	4a1c      	ldr	r2, [pc, #112]	@ (800c658 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c5e8:	4293      	cmp	r3, r2
 800c5ea:	d013      	beq.n	800c614 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	4a1a      	ldr	r2, [pc, #104]	@ (800c65c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c5f2:	4293      	cmp	r3, r2
 800c5f4:	d00e      	beq.n	800c614 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	4a15      	ldr	r2, [pc, #84]	@ (800c650 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c5fc:	4293      	cmp	r3, r2
 800c5fe:	d009      	beq.n	800c614 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	4a16      	ldr	r2, [pc, #88]	@ (800c660 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c606:	4293      	cmp	r3, r2
 800c608:	d004      	beq.n	800c614 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	4a15      	ldr	r2, [pc, #84]	@ (800c664 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c610:	4293      	cmp	r3, r2
 800c612:	d10c      	bne.n	800c62e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c614:	68bb      	ldr	r3, [r7, #8]
 800c616:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c61a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	689b      	ldr	r3, [r3, #8]
 800c620:	68ba      	ldr	r2, [r7, #8]
 800c622:	4313      	orrs	r3, r2
 800c624:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	68ba      	ldr	r2, [r7, #8]
 800c62c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2201      	movs	r2, #1
 800c632:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2200      	movs	r2, #0
 800c63a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c63e:	2300      	movs	r3, #0
}
 800c640:	4618      	mov	r0, r3
 800c642:	3714      	adds	r7, #20
 800c644:	46bd      	mov	sp, r7
 800c646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64a:	4770      	bx	lr
 800c64c:	40010000 	.word	0x40010000
 800c650:	40010400 	.word	0x40010400
 800c654:	40000400 	.word	0x40000400
 800c658:	40000800 	.word	0x40000800
 800c65c:	40000c00 	.word	0x40000c00
 800c660:	40014000 	.word	0x40014000
 800c664:	40001800 	.word	0x40001800

0800c668 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c668:	b480      	push	{r7}
 800c66a:	b085      	sub	sp, #20
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
 800c670:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c672:	2300      	movs	r3, #0
 800c674:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c67c:	2b01      	cmp	r3, #1
 800c67e:	d101      	bne.n	800c684 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c680:	2302      	movs	r3, #2
 800c682:	e065      	b.n	800c750 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2201      	movs	r2, #1
 800c688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	68db      	ldr	r3, [r3, #12]
 800c696:	4313      	orrs	r3, r2
 800c698:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	689b      	ldr	r3, [r3, #8]
 800c6a4:	4313      	orrs	r3, r2
 800c6a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	685b      	ldr	r3, [r3, #4]
 800c6b2:	4313      	orrs	r3, r2
 800c6b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	4313      	orrs	r3, r2
 800c6c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	691b      	ldr	r3, [r3, #16]
 800c6ce:	4313      	orrs	r3, r2
 800c6d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	695b      	ldr	r3, [r3, #20]
 800c6dc:	4313      	orrs	r3, r2
 800c6de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6ea:	4313      	orrs	r3, r2
 800c6ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	699b      	ldr	r3, [r3, #24]
 800c6f8:	041b      	lsls	r3, r3, #16
 800c6fa:	4313      	orrs	r3, r2
 800c6fc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	4a16      	ldr	r2, [pc, #88]	@ (800c75c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c704:	4293      	cmp	r3, r2
 800c706:	d004      	beq.n	800c712 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	4a14      	ldr	r2, [pc, #80]	@ (800c760 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c70e:	4293      	cmp	r3, r2
 800c710:	d115      	bne.n	800c73e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c71c:	051b      	lsls	r3, r3, #20
 800c71e:	4313      	orrs	r3, r2
 800c720:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	69db      	ldr	r3, [r3, #28]
 800c72c:	4313      	orrs	r3, r2
 800c72e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	6a1b      	ldr	r3, [r3, #32]
 800c73a:	4313      	orrs	r3, r2
 800c73c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	68fa      	ldr	r2, [r7, #12]
 800c744:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2200      	movs	r2, #0
 800c74a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c74e:	2300      	movs	r3, #0
}
 800c750:	4618      	mov	r0, r3
 800c752:	3714      	adds	r7, #20
 800c754:	46bd      	mov	sp, r7
 800c756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75a:	4770      	bx	lr
 800c75c:	40010000 	.word	0x40010000
 800c760:	40010400 	.word	0x40010400

0800c764 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c764:	b480      	push	{r7}
 800c766:	b083      	sub	sp, #12
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c76c:	bf00      	nop
 800c76e:	370c      	adds	r7, #12
 800c770:	46bd      	mov	sp, r7
 800c772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c776:	4770      	bx	lr

0800c778 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c778:	b480      	push	{r7}
 800c77a:	b083      	sub	sp, #12
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c780:	bf00      	nop
 800c782:	370c      	adds	r7, #12
 800c784:	46bd      	mov	sp, r7
 800c786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78a:	4770      	bx	lr

0800c78c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c78c:	b480      	push	{r7}
 800c78e:	b083      	sub	sp, #12
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c794:	bf00      	nop
 800c796:	370c      	adds	r7, #12
 800c798:	46bd      	mov	sp, r7
 800c79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79e:	4770      	bx	lr

0800c7a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b082      	sub	sp, #8
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d101      	bne.n	800c7b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	e040      	b.n	800c834 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d106      	bne.n	800c7c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2200      	movs	r2, #0
 800c7be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f7f6 f926 	bl	8002a14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2224      	movs	r2, #36	@ 0x24
 800c7cc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	681a      	ldr	r2, [r3, #0]
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	f022 0201 	bic.w	r2, r2, #1
 800c7dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d002      	beq.n	800c7ec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f000 fa8c 	bl	800cd04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	f000 f825 	bl	800c83c <UART_SetConfig>
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	2b01      	cmp	r3, #1
 800c7f6:	d101      	bne.n	800c7fc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800c7f8:	2301      	movs	r3, #1
 800c7fa:	e01b      	b.n	800c834 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	685a      	ldr	r2, [r3, #4]
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c80a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	689a      	ldr	r2, [r3, #8]
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c81a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	681a      	ldr	r2, [r3, #0]
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f042 0201 	orr.w	r2, r2, #1
 800c82a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f000 fb0b 	bl	800ce48 <UART_CheckIdleState>
 800c832:	4603      	mov	r3, r0
}
 800c834:	4618      	mov	r0, r3
 800c836:	3708      	adds	r7, #8
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}

0800c83c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b088      	sub	sp, #32
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c844:	2300      	movs	r3, #0
 800c846:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	689a      	ldr	r2, [r3, #8]
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	691b      	ldr	r3, [r3, #16]
 800c850:	431a      	orrs	r2, r3
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	695b      	ldr	r3, [r3, #20]
 800c856:	431a      	orrs	r2, r3
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	69db      	ldr	r3, [r3, #28]
 800c85c:	4313      	orrs	r3, r2
 800c85e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	681a      	ldr	r2, [r3, #0]
 800c866:	4ba6      	ldr	r3, [pc, #664]	@ (800cb00 <UART_SetConfig+0x2c4>)
 800c868:	4013      	ands	r3, r2
 800c86a:	687a      	ldr	r2, [r7, #4]
 800c86c:	6812      	ldr	r2, [r2, #0]
 800c86e:	6979      	ldr	r1, [r7, #20]
 800c870:	430b      	orrs	r3, r1
 800c872:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	685b      	ldr	r3, [r3, #4]
 800c87a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	68da      	ldr	r2, [r3, #12]
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	430a      	orrs	r2, r1
 800c888:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	699b      	ldr	r3, [r3, #24]
 800c88e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	6a1b      	ldr	r3, [r3, #32]
 800c894:	697a      	ldr	r2, [r7, #20]
 800c896:	4313      	orrs	r3, r2
 800c898:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	689b      	ldr	r3, [r3, #8]
 800c8a0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	697a      	ldr	r2, [r7, #20]
 800c8aa:	430a      	orrs	r2, r1
 800c8ac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	4a94      	ldr	r2, [pc, #592]	@ (800cb04 <UART_SetConfig+0x2c8>)
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	d120      	bne.n	800c8fa <UART_SetConfig+0xbe>
 800c8b8:	4b93      	ldr	r3, [pc, #588]	@ (800cb08 <UART_SetConfig+0x2cc>)
 800c8ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c8be:	f003 0303 	and.w	r3, r3, #3
 800c8c2:	2b03      	cmp	r3, #3
 800c8c4:	d816      	bhi.n	800c8f4 <UART_SetConfig+0xb8>
 800c8c6:	a201      	add	r2, pc, #4	@ (adr r2, 800c8cc <UART_SetConfig+0x90>)
 800c8c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8cc:	0800c8dd 	.word	0x0800c8dd
 800c8d0:	0800c8e9 	.word	0x0800c8e9
 800c8d4:	0800c8e3 	.word	0x0800c8e3
 800c8d8:	0800c8ef 	.word	0x0800c8ef
 800c8dc:	2301      	movs	r3, #1
 800c8de:	77fb      	strb	r3, [r7, #31]
 800c8e0:	e150      	b.n	800cb84 <UART_SetConfig+0x348>
 800c8e2:	2302      	movs	r3, #2
 800c8e4:	77fb      	strb	r3, [r7, #31]
 800c8e6:	e14d      	b.n	800cb84 <UART_SetConfig+0x348>
 800c8e8:	2304      	movs	r3, #4
 800c8ea:	77fb      	strb	r3, [r7, #31]
 800c8ec:	e14a      	b.n	800cb84 <UART_SetConfig+0x348>
 800c8ee:	2308      	movs	r3, #8
 800c8f0:	77fb      	strb	r3, [r7, #31]
 800c8f2:	e147      	b.n	800cb84 <UART_SetConfig+0x348>
 800c8f4:	2310      	movs	r3, #16
 800c8f6:	77fb      	strb	r3, [r7, #31]
 800c8f8:	e144      	b.n	800cb84 <UART_SetConfig+0x348>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	4a83      	ldr	r2, [pc, #524]	@ (800cb0c <UART_SetConfig+0x2d0>)
 800c900:	4293      	cmp	r3, r2
 800c902:	d132      	bne.n	800c96a <UART_SetConfig+0x12e>
 800c904:	4b80      	ldr	r3, [pc, #512]	@ (800cb08 <UART_SetConfig+0x2cc>)
 800c906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c90a:	f003 030c 	and.w	r3, r3, #12
 800c90e:	2b0c      	cmp	r3, #12
 800c910:	d828      	bhi.n	800c964 <UART_SetConfig+0x128>
 800c912:	a201      	add	r2, pc, #4	@ (adr r2, 800c918 <UART_SetConfig+0xdc>)
 800c914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c918:	0800c94d 	.word	0x0800c94d
 800c91c:	0800c965 	.word	0x0800c965
 800c920:	0800c965 	.word	0x0800c965
 800c924:	0800c965 	.word	0x0800c965
 800c928:	0800c959 	.word	0x0800c959
 800c92c:	0800c965 	.word	0x0800c965
 800c930:	0800c965 	.word	0x0800c965
 800c934:	0800c965 	.word	0x0800c965
 800c938:	0800c953 	.word	0x0800c953
 800c93c:	0800c965 	.word	0x0800c965
 800c940:	0800c965 	.word	0x0800c965
 800c944:	0800c965 	.word	0x0800c965
 800c948:	0800c95f 	.word	0x0800c95f
 800c94c:	2300      	movs	r3, #0
 800c94e:	77fb      	strb	r3, [r7, #31]
 800c950:	e118      	b.n	800cb84 <UART_SetConfig+0x348>
 800c952:	2302      	movs	r3, #2
 800c954:	77fb      	strb	r3, [r7, #31]
 800c956:	e115      	b.n	800cb84 <UART_SetConfig+0x348>
 800c958:	2304      	movs	r3, #4
 800c95a:	77fb      	strb	r3, [r7, #31]
 800c95c:	e112      	b.n	800cb84 <UART_SetConfig+0x348>
 800c95e:	2308      	movs	r3, #8
 800c960:	77fb      	strb	r3, [r7, #31]
 800c962:	e10f      	b.n	800cb84 <UART_SetConfig+0x348>
 800c964:	2310      	movs	r3, #16
 800c966:	77fb      	strb	r3, [r7, #31]
 800c968:	e10c      	b.n	800cb84 <UART_SetConfig+0x348>
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	4a68      	ldr	r2, [pc, #416]	@ (800cb10 <UART_SetConfig+0x2d4>)
 800c970:	4293      	cmp	r3, r2
 800c972:	d120      	bne.n	800c9b6 <UART_SetConfig+0x17a>
 800c974:	4b64      	ldr	r3, [pc, #400]	@ (800cb08 <UART_SetConfig+0x2cc>)
 800c976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c97a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c97e:	2b30      	cmp	r3, #48	@ 0x30
 800c980:	d013      	beq.n	800c9aa <UART_SetConfig+0x16e>
 800c982:	2b30      	cmp	r3, #48	@ 0x30
 800c984:	d814      	bhi.n	800c9b0 <UART_SetConfig+0x174>
 800c986:	2b20      	cmp	r3, #32
 800c988:	d009      	beq.n	800c99e <UART_SetConfig+0x162>
 800c98a:	2b20      	cmp	r3, #32
 800c98c:	d810      	bhi.n	800c9b0 <UART_SetConfig+0x174>
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d002      	beq.n	800c998 <UART_SetConfig+0x15c>
 800c992:	2b10      	cmp	r3, #16
 800c994:	d006      	beq.n	800c9a4 <UART_SetConfig+0x168>
 800c996:	e00b      	b.n	800c9b0 <UART_SetConfig+0x174>
 800c998:	2300      	movs	r3, #0
 800c99a:	77fb      	strb	r3, [r7, #31]
 800c99c:	e0f2      	b.n	800cb84 <UART_SetConfig+0x348>
 800c99e:	2302      	movs	r3, #2
 800c9a0:	77fb      	strb	r3, [r7, #31]
 800c9a2:	e0ef      	b.n	800cb84 <UART_SetConfig+0x348>
 800c9a4:	2304      	movs	r3, #4
 800c9a6:	77fb      	strb	r3, [r7, #31]
 800c9a8:	e0ec      	b.n	800cb84 <UART_SetConfig+0x348>
 800c9aa:	2308      	movs	r3, #8
 800c9ac:	77fb      	strb	r3, [r7, #31]
 800c9ae:	e0e9      	b.n	800cb84 <UART_SetConfig+0x348>
 800c9b0:	2310      	movs	r3, #16
 800c9b2:	77fb      	strb	r3, [r7, #31]
 800c9b4:	e0e6      	b.n	800cb84 <UART_SetConfig+0x348>
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	4a56      	ldr	r2, [pc, #344]	@ (800cb14 <UART_SetConfig+0x2d8>)
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	d120      	bne.n	800ca02 <UART_SetConfig+0x1c6>
 800c9c0:	4b51      	ldr	r3, [pc, #324]	@ (800cb08 <UART_SetConfig+0x2cc>)
 800c9c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c9c6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c9ca:	2bc0      	cmp	r3, #192	@ 0xc0
 800c9cc:	d013      	beq.n	800c9f6 <UART_SetConfig+0x1ba>
 800c9ce:	2bc0      	cmp	r3, #192	@ 0xc0
 800c9d0:	d814      	bhi.n	800c9fc <UART_SetConfig+0x1c0>
 800c9d2:	2b80      	cmp	r3, #128	@ 0x80
 800c9d4:	d009      	beq.n	800c9ea <UART_SetConfig+0x1ae>
 800c9d6:	2b80      	cmp	r3, #128	@ 0x80
 800c9d8:	d810      	bhi.n	800c9fc <UART_SetConfig+0x1c0>
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d002      	beq.n	800c9e4 <UART_SetConfig+0x1a8>
 800c9de:	2b40      	cmp	r3, #64	@ 0x40
 800c9e0:	d006      	beq.n	800c9f0 <UART_SetConfig+0x1b4>
 800c9e2:	e00b      	b.n	800c9fc <UART_SetConfig+0x1c0>
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	77fb      	strb	r3, [r7, #31]
 800c9e8:	e0cc      	b.n	800cb84 <UART_SetConfig+0x348>
 800c9ea:	2302      	movs	r3, #2
 800c9ec:	77fb      	strb	r3, [r7, #31]
 800c9ee:	e0c9      	b.n	800cb84 <UART_SetConfig+0x348>
 800c9f0:	2304      	movs	r3, #4
 800c9f2:	77fb      	strb	r3, [r7, #31]
 800c9f4:	e0c6      	b.n	800cb84 <UART_SetConfig+0x348>
 800c9f6:	2308      	movs	r3, #8
 800c9f8:	77fb      	strb	r3, [r7, #31]
 800c9fa:	e0c3      	b.n	800cb84 <UART_SetConfig+0x348>
 800c9fc:	2310      	movs	r3, #16
 800c9fe:	77fb      	strb	r3, [r7, #31]
 800ca00:	e0c0      	b.n	800cb84 <UART_SetConfig+0x348>
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	4a44      	ldr	r2, [pc, #272]	@ (800cb18 <UART_SetConfig+0x2dc>)
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	d125      	bne.n	800ca58 <UART_SetConfig+0x21c>
 800ca0c:	4b3e      	ldr	r3, [pc, #248]	@ (800cb08 <UART_SetConfig+0x2cc>)
 800ca0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ca16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ca1a:	d017      	beq.n	800ca4c <UART_SetConfig+0x210>
 800ca1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ca20:	d817      	bhi.n	800ca52 <UART_SetConfig+0x216>
 800ca22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ca26:	d00b      	beq.n	800ca40 <UART_SetConfig+0x204>
 800ca28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ca2c:	d811      	bhi.n	800ca52 <UART_SetConfig+0x216>
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d003      	beq.n	800ca3a <UART_SetConfig+0x1fe>
 800ca32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ca36:	d006      	beq.n	800ca46 <UART_SetConfig+0x20a>
 800ca38:	e00b      	b.n	800ca52 <UART_SetConfig+0x216>
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	77fb      	strb	r3, [r7, #31]
 800ca3e:	e0a1      	b.n	800cb84 <UART_SetConfig+0x348>
 800ca40:	2302      	movs	r3, #2
 800ca42:	77fb      	strb	r3, [r7, #31]
 800ca44:	e09e      	b.n	800cb84 <UART_SetConfig+0x348>
 800ca46:	2304      	movs	r3, #4
 800ca48:	77fb      	strb	r3, [r7, #31]
 800ca4a:	e09b      	b.n	800cb84 <UART_SetConfig+0x348>
 800ca4c:	2308      	movs	r3, #8
 800ca4e:	77fb      	strb	r3, [r7, #31]
 800ca50:	e098      	b.n	800cb84 <UART_SetConfig+0x348>
 800ca52:	2310      	movs	r3, #16
 800ca54:	77fb      	strb	r3, [r7, #31]
 800ca56:	e095      	b.n	800cb84 <UART_SetConfig+0x348>
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	4a2f      	ldr	r2, [pc, #188]	@ (800cb1c <UART_SetConfig+0x2e0>)
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	d125      	bne.n	800caae <UART_SetConfig+0x272>
 800ca62:	4b29      	ldr	r3, [pc, #164]	@ (800cb08 <UART_SetConfig+0x2cc>)
 800ca64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca68:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ca6c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ca70:	d017      	beq.n	800caa2 <UART_SetConfig+0x266>
 800ca72:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ca76:	d817      	bhi.n	800caa8 <UART_SetConfig+0x26c>
 800ca78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ca7c:	d00b      	beq.n	800ca96 <UART_SetConfig+0x25a>
 800ca7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ca82:	d811      	bhi.n	800caa8 <UART_SetConfig+0x26c>
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d003      	beq.n	800ca90 <UART_SetConfig+0x254>
 800ca88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ca8c:	d006      	beq.n	800ca9c <UART_SetConfig+0x260>
 800ca8e:	e00b      	b.n	800caa8 <UART_SetConfig+0x26c>
 800ca90:	2301      	movs	r3, #1
 800ca92:	77fb      	strb	r3, [r7, #31]
 800ca94:	e076      	b.n	800cb84 <UART_SetConfig+0x348>
 800ca96:	2302      	movs	r3, #2
 800ca98:	77fb      	strb	r3, [r7, #31]
 800ca9a:	e073      	b.n	800cb84 <UART_SetConfig+0x348>
 800ca9c:	2304      	movs	r3, #4
 800ca9e:	77fb      	strb	r3, [r7, #31]
 800caa0:	e070      	b.n	800cb84 <UART_SetConfig+0x348>
 800caa2:	2308      	movs	r3, #8
 800caa4:	77fb      	strb	r3, [r7, #31]
 800caa6:	e06d      	b.n	800cb84 <UART_SetConfig+0x348>
 800caa8:	2310      	movs	r3, #16
 800caaa:	77fb      	strb	r3, [r7, #31]
 800caac:	e06a      	b.n	800cb84 <UART_SetConfig+0x348>
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	4a1b      	ldr	r2, [pc, #108]	@ (800cb20 <UART_SetConfig+0x2e4>)
 800cab4:	4293      	cmp	r3, r2
 800cab6:	d138      	bne.n	800cb2a <UART_SetConfig+0x2ee>
 800cab8:	4b13      	ldr	r3, [pc, #76]	@ (800cb08 <UART_SetConfig+0x2cc>)
 800caba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cabe:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800cac2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cac6:	d017      	beq.n	800caf8 <UART_SetConfig+0x2bc>
 800cac8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cacc:	d82a      	bhi.n	800cb24 <UART_SetConfig+0x2e8>
 800cace:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cad2:	d00b      	beq.n	800caec <UART_SetConfig+0x2b0>
 800cad4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cad8:	d824      	bhi.n	800cb24 <UART_SetConfig+0x2e8>
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d003      	beq.n	800cae6 <UART_SetConfig+0x2aa>
 800cade:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cae2:	d006      	beq.n	800caf2 <UART_SetConfig+0x2b6>
 800cae4:	e01e      	b.n	800cb24 <UART_SetConfig+0x2e8>
 800cae6:	2300      	movs	r3, #0
 800cae8:	77fb      	strb	r3, [r7, #31]
 800caea:	e04b      	b.n	800cb84 <UART_SetConfig+0x348>
 800caec:	2302      	movs	r3, #2
 800caee:	77fb      	strb	r3, [r7, #31]
 800caf0:	e048      	b.n	800cb84 <UART_SetConfig+0x348>
 800caf2:	2304      	movs	r3, #4
 800caf4:	77fb      	strb	r3, [r7, #31]
 800caf6:	e045      	b.n	800cb84 <UART_SetConfig+0x348>
 800caf8:	2308      	movs	r3, #8
 800cafa:	77fb      	strb	r3, [r7, #31]
 800cafc:	e042      	b.n	800cb84 <UART_SetConfig+0x348>
 800cafe:	bf00      	nop
 800cb00:	efff69f3 	.word	0xefff69f3
 800cb04:	40011000 	.word	0x40011000
 800cb08:	40023800 	.word	0x40023800
 800cb0c:	40004400 	.word	0x40004400
 800cb10:	40004800 	.word	0x40004800
 800cb14:	40004c00 	.word	0x40004c00
 800cb18:	40005000 	.word	0x40005000
 800cb1c:	40011400 	.word	0x40011400
 800cb20:	40007800 	.word	0x40007800
 800cb24:	2310      	movs	r3, #16
 800cb26:	77fb      	strb	r3, [r7, #31]
 800cb28:	e02c      	b.n	800cb84 <UART_SetConfig+0x348>
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	4a72      	ldr	r2, [pc, #456]	@ (800ccf8 <UART_SetConfig+0x4bc>)
 800cb30:	4293      	cmp	r3, r2
 800cb32:	d125      	bne.n	800cb80 <UART_SetConfig+0x344>
 800cb34:	4b71      	ldr	r3, [pc, #452]	@ (800ccfc <UART_SetConfig+0x4c0>)
 800cb36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb3a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800cb3e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800cb42:	d017      	beq.n	800cb74 <UART_SetConfig+0x338>
 800cb44:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800cb48:	d817      	bhi.n	800cb7a <UART_SetConfig+0x33e>
 800cb4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cb4e:	d00b      	beq.n	800cb68 <UART_SetConfig+0x32c>
 800cb50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cb54:	d811      	bhi.n	800cb7a <UART_SetConfig+0x33e>
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d003      	beq.n	800cb62 <UART_SetConfig+0x326>
 800cb5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cb5e:	d006      	beq.n	800cb6e <UART_SetConfig+0x332>
 800cb60:	e00b      	b.n	800cb7a <UART_SetConfig+0x33e>
 800cb62:	2300      	movs	r3, #0
 800cb64:	77fb      	strb	r3, [r7, #31]
 800cb66:	e00d      	b.n	800cb84 <UART_SetConfig+0x348>
 800cb68:	2302      	movs	r3, #2
 800cb6a:	77fb      	strb	r3, [r7, #31]
 800cb6c:	e00a      	b.n	800cb84 <UART_SetConfig+0x348>
 800cb6e:	2304      	movs	r3, #4
 800cb70:	77fb      	strb	r3, [r7, #31]
 800cb72:	e007      	b.n	800cb84 <UART_SetConfig+0x348>
 800cb74:	2308      	movs	r3, #8
 800cb76:	77fb      	strb	r3, [r7, #31]
 800cb78:	e004      	b.n	800cb84 <UART_SetConfig+0x348>
 800cb7a:	2310      	movs	r3, #16
 800cb7c:	77fb      	strb	r3, [r7, #31]
 800cb7e:	e001      	b.n	800cb84 <UART_SetConfig+0x348>
 800cb80:	2310      	movs	r3, #16
 800cb82:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	69db      	ldr	r3, [r3, #28]
 800cb88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cb8c:	d15b      	bne.n	800cc46 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800cb8e:	7ffb      	ldrb	r3, [r7, #31]
 800cb90:	2b08      	cmp	r3, #8
 800cb92:	d828      	bhi.n	800cbe6 <UART_SetConfig+0x3aa>
 800cb94:	a201      	add	r2, pc, #4	@ (adr r2, 800cb9c <UART_SetConfig+0x360>)
 800cb96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb9a:	bf00      	nop
 800cb9c:	0800cbc1 	.word	0x0800cbc1
 800cba0:	0800cbc9 	.word	0x0800cbc9
 800cba4:	0800cbd1 	.word	0x0800cbd1
 800cba8:	0800cbe7 	.word	0x0800cbe7
 800cbac:	0800cbd7 	.word	0x0800cbd7
 800cbb0:	0800cbe7 	.word	0x0800cbe7
 800cbb4:	0800cbe7 	.word	0x0800cbe7
 800cbb8:	0800cbe7 	.word	0x0800cbe7
 800cbbc:	0800cbdf 	.word	0x0800cbdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cbc0:	f7fb fdba 	bl	8008738 <HAL_RCC_GetPCLK1Freq>
 800cbc4:	61b8      	str	r0, [r7, #24]
        break;
 800cbc6:	e013      	b.n	800cbf0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cbc8:	f7fb fdca 	bl	8008760 <HAL_RCC_GetPCLK2Freq>
 800cbcc:	61b8      	str	r0, [r7, #24]
        break;
 800cbce:	e00f      	b.n	800cbf0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cbd0:	4b4b      	ldr	r3, [pc, #300]	@ (800cd00 <UART_SetConfig+0x4c4>)
 800cbd2:	61bb      	str	r3, [r7, #24]
        break;
 800cbd4:	e00c      	b.n	800cbf0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cbd6:	f7fb fcdd 	bl	8008594 <HAL_RCC_GetSysClockFreq>
 800cbda:	61b8      	str	r0, [r7, #24]
        break;
 800cbdc:	e008      	b.n	800cbf0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cbde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cbe2:	61bb      	str	r3, [r7, #24]
        break;
 800cbe4:	e004      	b.n	800cbf0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800cbea:	2301      	movs	r3, #1
 800cbec:	77bb      	strb	r3, [r7, #30]
        break;
 800cbee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cbf0:	69bb      	ldr	r3, [r7, #24]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d074      	beq.n	800cce0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800cbf6:	69bb      	ldr	r3, [r7, #24]
 800cbf8:	005a      	lsls	r2, r3, #1
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	685b      	ldr	r3, [r3, #4]
 800cbfe:	085b      	lsrs	r3, r3, #1
 800cc00:	441a      	add	r2, r3
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	685b      	ldr	r3, [r3, #4]
 800cc06:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc0a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cc0c:	693b      	ldr	r3, [r7, #16]
 800cc0e:	2b0f      	cmp	r3, #15
 800cc10:	d916      	bls.n	800cc40 <UART_SetConfig+0x404>
 800cc12:	693b      	ldr	r3, [r7, #16]
 800cc14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cc18:	d212      	bcs.n	800cc40 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cc1a:	693b      	ldr	r3, [r7, #16]
 800cc1c:	b29b      	uxth	r3, r3
 800cc1e:	f023 030f 	bic.w	r3, r3, #15
 800cc22:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cc24:	693b      	ldr	r3, [r7, #16]
 800cc26:	085b      	lsrs	r3, r3, #1
 800cc28:	b29b      	uxth	r3, r3
 800cc2a:	f003 0307 	and.w	r3, r3, #7
 800cc2e:	b29a      	uxth	r2, r3
 800cc30:	89fb      	ldrh	r3, [r7, #14]
 800cc32:	4313      	orrs	r3, r2
 800cc34:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	89fa      	ldrh	r2, [r7, #14]
 800cc3c:	60da      	str	r2, [r3, #12]
 800cc3e:	e04f      	b.n	800cce0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800cc40:	2301      	movs	r3, #1
 800cc42:	77bb      	strb	r3, [r7, #30]
 800cc44:	e04c      	b.n	800cce0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cc46:	7ffb      	ldrb	r3, [r7, #31]
 800cc48:	2b08      	cmp	r3, #8
 800cc4a:	d828      	bhi.n	800cc9e <UART_SetConfig+0x462>
 800cc4c:	a201      	add	r2, pc, #4	@ (adr r2, 800cc54 <UART_SetConfig+0x418>)
 800cc4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc52:	bf00      	nop
 800cc54:	0800cc79 	.word	0x0800cc79
 800cc58:	0800cc81 	.word	0x0800cc81
 800cc5c:	0800cc89 	.word	0x0800cc89
 800cc60:	0800cc9f 	.word	0x0800cc9f
 800cc64:	0800cc8f 	.word	0x0800cc8f
 800cc68:	0800cc9f 	.word	0x0800cc9f
 800cc6c:	0800cc9f 	.word	0x0800cc9f
 800cc70:	0800cc9f 	.word	0x0800cc9f
 800cc74:	0800cc97 	.word	0x0800cc97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cc78:	f7fb fd5e 	bl	8008738 <HAL_RCC_GetPCLK1Freq>
 800cc7c:	61b8      	str	r0, [r7, #24]
        break;
 800cc7e:	e013      	b.n	800cca8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cc80:	f7fb fd6e 	bl	8008760 <HAL_RCC_GetPCLK2Freq>
 800cc84:	61b8      	str	r0, [r7, #24]
        break;
 800cc86:	e00f      	b.n	800cca8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cc88:	4b1d      	ldr	r3, [pc, #116]	@ (800cd00 <UART_SetConfig+0x4c4>)
 800cc8a:	61bb      	str	r3, [r7, #24]
        break;
 800cc8c:	e00c      	b.n	800cca8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cc8e:	f7fb fc81 	bl	8008594 <HAL_RCC_GetSysClockFreq>
 800cc92:	61b8      	str	r0, [r7, #24]
        break;
 800cc94:	e008      	b.n	800cca8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cc96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cc9a:	61bb      	str	r3, [r7, #24]
        break;
 800cc9c:	e004      	b.n	800cca8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800cca2:	2301      	movs	r3, #1
 800cca4:	77bb      	strb	r3, [r7, #30]
        break;
 800cca6:	bf00      	nop
    }

    if (pclk != 0U)
 800cca8:	69bb      	ldr	r3, [r7, #24]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d018      	beq.n	800cce0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	685b      	ldr	r3, [r3, #4]
 800ccb2:	085a      	lsrs	r2, r3, #1
 800ccb4:	69bb      	ldr	r3, [r7, #24]
 800ccb6:	441a      	add	r2, r3
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	685b      	ldr	r3, [r3, #4]
 800ccbc:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccc0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ccc2:	693b      	ldr	r3, [r7, #16]
 800ccc4:	2b0f      	cmp	r3, #15
 800ccc6:	d909      	bls.n	800ccdc <UART_SetConfig+0x4a0>
 800ccc8:	693b      	ldr	r3, [r7, #16]
 800ccca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ccce:	d205      	bcs.n	800ccdc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ccd0:	693b      	ldr	r3, [r7, #16]
 800ccd2:	b29a      	uxth	r2, r3
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	60da      	str	r2, [r3, #12]
 800ccda:	e001      	b.n	800cce0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ccdc:	2301      	movs	r3, #1
 800ccde:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2200      	movs	r2, #0
 800cce4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2200      	movs	r2, #0
 800ccea:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800ccec:	7fbb      	ldrb	r3, [r7, #30]
}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	3720      	adds	r7, #32
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}
 800ccf6:	bf00      	nop
 800ccf8:	40007c00 	.word	0x40007c00
 800ccfc:	40023800 	.word	0x40023800
 800cd00:	00f42400 	.word	0x00f42400

0800cd04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cd04:	b480      	push	{r7}
 800cd06:	b083      	sub	sp, #12
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd10:	f003 0308 	and.w	r3, r3, #8
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d00a      	beq.n	800cd2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	685b      	ldr	r3, [r3, #4]
 800cd1e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	430a      	orrs	r2, r1
 800cd2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd32:	f003 0301 	and.w	r3, r3, #1
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d00a      	beq.n	800cd50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	685b      	ldr	r3, [r3, #4]
 800cd40:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	430a      	orrs	r2, r1
 800cd4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd54:	f003 0302 	and.w	r3, r3, #2
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d00a      	beq.n	800cd72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	685b      	ldr	r3, [r3, #4]
 800cd62:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	430a      	orrs	r2, r1
 800cd70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd76:	f003 0304 	and.w	r3, r3, #4
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d00a      	beq.n	800cd94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	685b      	ldr	r3, [r3, #4]
 800cd84:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	430a      	orrs	r2, r1
 800cd92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd98:	f003 0310 	and.w	r3, r3, #16
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d00a      	beq.n	800cdb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	689b      	ldr	r3, [r3, #8]
 800cda6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	430a      	orrs	r2, r1
 800cdb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdba:	f003 0320 	and.w	r3, r3, #32
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d00a      	beq.n	800cdd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	689b      	ldr	r3, [r3, #8]
 800cdc8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	430a      	orrs	r2, r1
 800cdd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d01a      	beq.n	800ce1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	685b      	ldr	r3, [r3, #4]
 800cdea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	430a      	orrs	r2, r1
 800cdf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ce02:	d10a      	bne.n	800ce1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	685b      	ldr	r3, [r3, #4]
 800ce0a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	430a      	orrs	r2, r1
 800ce18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d00a      	beq.n	800ce3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	685b      	ldr	r3, [r3, #4]
 800ce2c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	430a      	orrs	r2, r1
 800ce3a:	605a      	str	r2, [r3, #4]
  }
}
 800ce3c:	bf00      	nop
 800ce3e:	370c      	adds	r7, #12
 800ce40:	46bd      	mov	sp, r7
 800ce42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce46:	4770      	bx	lr

0800ce48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b08c      	sub	sp, #48	@ 0x30
 800ce4c:	af02      	add	r7, sp, #8
 800ce4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2200      	movs	r2, #0
 800ce54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ce58:	f7f6 f984 	bl	8003164 <HAL_GetTick>
 800ce5c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	f003 0308 	and.w	r3, r3, #8
 800ce68:	2b08      	cmp	r3, #8
 800ce6a:	d12e      	bne.n	800ceca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ce6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ce70:	9300      	str	r3, [sp, #0]
 800ce72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce74:	2200      	movs	r2, #0
 800ce76:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ce7a:	6878      	ldr	r0, [r7, #4]
 800ce7c:	f000 f83b 	bl	800cef6 <UART_WaitOnFlagUntilTimeout>
 800ce80:	4603      	mov	r3, r0
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d021      	beq.n	800ceca <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce8c:	693b      	ldr	r3, [r7, #16]
 800ce8e:	e853 3f00 	ldrex	r3, [r3]
 800ce92:	60fb      	str	r3, [r7, #12]
   return(result);
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ce9a:	623b      	str	r3, [r7, #32]
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	461a      	mov	r2, r3
 800cea2:	6a3b      	ldr	r3, [r7, #32]
 800cea4:	61fb      	str	r3, [r7, #28]
 800cea6:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cea8:	69b9      	ldr	r1, [r7, #24]
 800ceaa:	69fa      	ldr	r2, [r7, #28]
 800ceac:	e841 2300 	strex	r3, r2, [r1]
 800ceb0:	617b      	str	r3, [r7, #20]
   return(result);
 800ceb2:	697b      	ldr	r3, [r7, #20]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d1e6      	bne.n	800ce86 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2220      	movs	r2, #32
 800cebc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2200      	movs	r2, #0
 800cec2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cec6:	2303      	movs	r3, #3
 800cec8:	e011      	b.n	800ceee <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2220      	movs	r2, #32
 800cece:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2220      	movs	r2, #32
 800ced4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2200      	movs	r2, #0
 800cedc:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2200      	movs	r2, #0
 800cee2:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	2200      	movs	r2, #0
 800cee8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800ceec:	2300      	movs	r3, #0
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	3728      	adds	r7, #40	@ 0x28
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}

0800cef6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cef6:	b580      	push	{r7, lr}
 800cef8:	b084      	sub	sp, #16
 800cefa:	af00      	add	r7, sp, #0
 800cefc:	60f8      	str	r0, [r7, #12]
 800cefe:	60b9      	str	r1, [r7, #8]
 800cf00:	603b      	str	r3, [r7, #0]
 800cf02:	4613      	mov	r3, r2
 800cf04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf06:	e04f      	b.n	800cfa8 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cf08:	69bb      	ldr	r3, [r7, #24]
 800cf0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf0e:	d04b      	beq.n	800cfa8 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf10:	f7f6 f928 	bl	8003164 <HAL_GetTick>
 800cf14:	4602      	mov	r2, r0
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	1ad3      	subs	r3, r2, r3
 800cf1a:	69ba      	ldr	r2, [r7, #24]
 800cf1c:	429a      	cmp	r2, r3
 800cf1e:	d302      	bcc.n	800cf26 <UART_WaitOnFlagUntilTimeout+0x30>
 800cf20:	69bb      	ldr	r3, [r7, #24]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d101      	bne.n	800cf2a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cf26:	2303      	movs	r3, #3
 800cf28:	e04e      	b.n	800cfc8 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	f003 0304 	and.w	r3, r3, #4
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d037      	beq.n	800cfa8 <UART_WaitOnFlagUntilTimeout+0xb2>
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	2b80      	cmp	r3, #128	@ 0x80
 800cf3c:	d034      	beq.n	800cfa8 <UART_WaitOnFlagUntilTimeout+0xb2>
 800cf3e:	68bb      	ldr	r3, [r7, #8]
 800cf40:	2b40      	cmp	r3, #64	@ 0x40
 800cf42:	d031      	beq.n	800cfa8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	69db      	ldr	r3, [r3, #28]
 800cf4a:	f003 0308 	and.w	r3, r3, #8
 800cf4e:	2b08      	cmp	r3, #8
 800cf50:	d110      	bne.n	800cf74 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	2208      	movs	r2, #8
 800cf58:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cf5a:	68f8      	ldr	r0, [r7, #12]
 800cf5c:	f000 f838 	bl	800cfd0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	2208      	movs	r2, #8
 800cf64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800cf70:	2301      	movs	r3, #1
 800cf72:	e029      	b.n	800cfc8 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	69db      	ldr	r3, [r3, #28]
 800cf7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cf7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cf82:	d111      	bne.n	800cfa8 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cf8c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cf8e:	68f8      	ldr	r0, [r7, #12]
 800cf90:	f000 f81e 	bl	800cfd0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	2220      	movs	r2, #32
 800cf98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800cfa4:	2303      	movs	r3, #3
 800cfa6:	e00f      	b.n	800cfc8 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	69da      	ldr	r2, [r3, #28]
 800cfae:	68bb      	ldr	r3, [r7, #8]
 800cfb0:	4013      	ands	r3, r2
 800cfb2:	68ba      	ldr	r2, [r7, #8]
 800cfb4:	429a      	cmp	r2, r3
 800cfb6:	bf0c      	ite	eq
 800cfb8:	2301      	moveq	r3, #1
 800cfba:	2300      	movne	r3, #0
 800cfbc:	b2db      	uxtb	r3, r3
 800cfbe:	461a      	mov	r2, r3
 800cfc0:	79fb      	ldrb	r3, [r7, #7]
 800cfc2:	429a      	cmp	r2, r3
 800cfc4:	d0a0      	beq.n	800cf08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cfc6:	2300      	movs	r3, #0
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	3710      	adds	r7, #16
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}

0800cfd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cfd0:	b480      	push	{r7}
 800cfd2:	b095      	sub	sp, #84	@ 0x54
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfe0:	e853 3f00 	ldrex	r3, [r3]
 800cfe4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cfe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfe8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cfec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	461a      	mov	r2, r3
 800cff4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cff6:	643b      	str	r3, [r7, #64]	@ 0x40
 800cff8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cffa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cffc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cffe:	e841 2300 	strex	r3, r2, [r1]
 800d002:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d006:	2b00      	cmp	r3, #0
 800d008:	d1e6      	bne.n	800cfd8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	3308      	adds	r3, #8
 800d010:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d012:	6a3b      	ldr	r3, [r7, #32]
 800d014:	e853 3f00 	ldrex	r3, [r3]
 800d018:	61fb      	str	r3, [r7, #28]
   return(result);
 800d01a:	69fb      	ldr	r3, [r7, #28]
 800d01c:	f023 0301 	bic.w	r3, r3, #1
 800d020:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	3308      	adds	r3, #8
 800d028:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d02a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d02c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d02e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d030:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d032:	e841 2300 	strex	r3, r2, [r1]
 800d036:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d1e5      	bne.n	800d00a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d042:	2b01      	cmp	r3, #1
 800d044:	d118      	bne.n	800d078 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	e853 3f00 	ldrex	r3, [r3]
 800d052:	60bb      	str	r3, [r7, #8]
   return(result);
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	f023 0310 	bic.w	r3, r3, #16
 800d05a:	647b      	str	r3, [r7, #68]	@ 0x44
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	461a      	mov	r2, r3
 800d062:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d064:	61bb      	str	r3, [r7, #24]
 800d066:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d068:	6979      	ldr	r1, [r7, #20]
 800d06a:	69ba      	ldr	r2, [r7, #24]
 800d06c:	e841 2300 	strex	r3, r2, [r1]
 800d070:	613b      	str	r3, [r7, #16]
   return(result);
 800d072:	693b      	ldr	r3, [r7, #16]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d1e6      	bne.n	800d046 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2220      	movs	r2, #32
 800d07c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2200      	movs	r2, #0
 800d084:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2200      	movs	r2, #0
 800d08a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800d08c:	bf00      	nop
 800d08e:	3754      	adds	r7, #84	@ 0x54
 800d090:	46bd      	mov	sp, r7
 800d092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d096:	4770      	bx	lr

0800d098 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800d098:	b480      	push	{r7}
 800d09a:	b083      	sub	sp, #12
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
 800d0a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d121      	bne.n	800d0ee <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681a      	ldr	r2, [r3, #0]
 800d0ae:	4b27      	ldr	r3, [pc, #156]	@ (800d14c <FMC_SDRAM_Init+0xb4>)
 800d0b0:	4013      	ands	r3, r2
 800d0b2:	683a      	ldr	r2, [r7, #0]
 800d0b4:	6851      	ldr	r1, [r2, #4]
 800d0b6:	683a      	ldr	r2, [r7, #0]
 800d0b8:	6892      	ldr	r2, [r2, #8]
 800d0ba:	4311      	orrs	r1, r2
 800d0bc:	683a      	ldr	r2, [r7, #0]
 800d0be:	68d2      	ldr	r2, [r2, #12]
 800d0c0:	4311      	orrs	r1, r2
 800d0c2:	683a      	ldr	r2, [r7, #0]
 800d0c4:	6912      	ldr	r2, [r2, #16]
 800d0c6:	4311      	orrs	r1, r2
 800d0c8:	683a      	ldr	r2, [r7, #0]
 800d0ca:	6952      	ldr	r2, [r2, #20]
 800d0cc:	4311      	orrs	r1, r2
 800d0ce:	683a      	ldr	r2, [r7, #0]
 800d0d0:	6992      	ldr	r2, [r2, #24]
 800d0d2:	4311      	orrs	r1, r2
 800d0d4:	683a      	ldr	r2, [r7, #0]
 800d0d6:	69d2      	ldr	r2, [r2, #28]
 800d0d8:	4311      	orrs	r1, r2
 800d0da:	683a      	ldr	r2, [r7, #0]
 800d0dc:	6a12      	ldr	r2, [r2, #32]
 800d0de:	4311      	orrs	r1, r2
 800d0e0:	683a      	ldr	r2, [r7, #0]
 800d0e2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800d0e4:	430a      	orrs	r2, r1
 800d0e6:	431a      	orrs	r2, r3
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	601a      	str	r2, [r3, #0]
 800d0ec:	e026      	b.n	800d13c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	69d9      	ldr	r1, [r3, #28]
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	6a1b      	ldr	r3, [r3, #32]
 800d0fe:	4319      	orrs	r1, r3
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d104:	430b      	orrs	r3, r1
 800d106:	431a      	orrs	r2, r3
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	685a      	ldr	r2, [r3, #4]
 800d110:	4b0e      	ldr	r3, [pc, #56]	@ (800d14c <FMC_SDRAM_Init+0xb4>)
 800d112:	4013      	ands	r3, r2
 800d114:	683a      	ldr	r2, [r7, #0]
 800d116:	6851      	ldr	r1, [r2, #4]
 800d118:	683a      	ldr	r2, [r7, #0]
 800d11a:	6892      	ldr	r2, [r2, #8]
 800d11c:	4311      	orrs	r1, r2
 800d11e:	683a      	ldr	r2, [r7, #0]
 800d120:	68d2      	ldr	r2, [r2, #12]
 800d122:	4311      	orrs	r1, r2
 800d124:	683a      	ldr	r2, [r7, #0]
 800d126:	6912      	ldr	r2, [r2, #16]
 800d128:	4311      	orrs	r1, r2
 800d12a:	683a      	ldr	r2, [r7, #0]
 800d12c:	6952      	ldr	r2, [r2, #20]
 800d12e:	4311      	orrs	r1, r2
 800d130:	683a      	ldr	r2, [r7, #0]
 800d132:	6992      	ldr	r2, [r2, #24]
 800d134:	430a      	orrs	r2, r1
 800d136:	431a      	orrs	r2, r3
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800d13c:	2300      	movs	r3, #0
}
 800d13e:	4618      	mov	r0, r3
 800d140:	370c      	adds	r7, #12
 800d142:	46bd      	mov	sp, r7
 800d144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d148:	4770      	bx	lr
 800d14a:	bf00      	nop
 800d14c:	ffff8000 	.word	0xffff8000

0800d150 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800d150:	b480      	push	{r7}
 800d152:	b085      	sub	sp, #20
 800d154:	af00      	add	r7, sp, #0
 800d156:	60f8      	str	r0, [r7, #12]
 800d158:	60b9      	str	r1, [r7, #8]
 800d15a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d128      	bne.n	800d1b4 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	689b      	ldr	r3, [r3, #8]
 800d166:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	1e59      	subs	r1, r3, #1
 800d170:	68bb      	ldr	r3, [r7, #8]
 800d172:	685b      	ldr	r3, [r3, #4]
 800d174:	3b01      	subs	r3, #1
 800d176:	011b      	lsls	r3, r3, #4
 800d178:	4319      	orrs	r1, r3
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	689b      	ldr	r3, [r3, #8]
 800d17e:	3b01      	subs	r3, #1
 800d180:	021b      	lsls	r3, r3, #8
 800d182:	4319      	orrs	r1, r3
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	68db      	ldr	r3, [r3, #12]
 800d188:	3b01      	subs	r3, #1
 800d18a:	031b      	lsls	r3, r3, #12
 800d18c:	4319      	orrs	r1, r3
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	691b      	ldr	r3, [r3, #16]
 800d192:	3b01      	subs	r3, #1
 800d194:	041b      	lsls	r3, r3, #16
 800d196:	4319      	orrs	r1, r3
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	695b      	ldr	r3, [r3, #20]
 800d19c:	3b01      	subs	r3, #1
 800d19e:	051b      	lsls	r3, r3, #20
 800d1a0:	4319      	orrs	r1, r3
 800d1a2:	68bb      	ldr	r3, [r7, #8]
 800d1a4:	699b      	ldr	r3, [r3, #24]
 800d1a6:	3b01      	subs	r3, #1
 800d1a8:	061b      	lsls	r3, r3, #24
 800d1aa:	430b      	orrs	r3, r1
 800d1ac:	431a      	orrs	r2, r3
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	609a      	str	r2, [r3, #8]
 800d1b2:	e02d      	b.n	800d210 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	689a      	ldr	r2, [r3, #8]
 800d1b8:	4b19      	ldr	r3, [pc, #100]	@ (800d220 <FMC_SDRAM_Timing_Init+0xd0>)
 800d1ba:	4013      	ands	r3, r2
 800d1bc:	68ba      	ldr	r2, [r7, #8]
 800d1be:	68d2      	ldr	r2, [r2, #12]
 800d1c0:	3a01      	subs	r2, #1
 800d1c2:	0311      	lsls	r1, r2, #12
 800d1c4:	68ba      	ldr	r2, [r7, #8]
 800d1c6:	6952      	ldr	r2, [r2, #20]
 800d1c8:	3a01      	subs	r2, #1
 800d1ca:	0512      	lsls	r2, r2, #20
 800d1cc:	430a      	orrs	r2, r1
 800d1ce:	431a      	orrs	r2, r3
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	68db      	ldr	r3, [r3, #12]
 800d1d8:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	1e59      	subs	r1, r3, #1
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	685b      	ldr	r3, [r3, #4]
 800d1e6:	3b01      	subs	r3, #1
 800d1e8:	011b      	lsls	r3, r3, #4
 800d1ea:	4319      	orrs	r1, r3
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	689b      	ldr	r3, [r3, #8]
 800d1f0:	3b01      	subs	r3, #1
 800d1f2:	021b      	lsls	r3, r3, #8
 800d1f4:	4319      	orrs	r1, r3
 800d1f6:	68bb      	ldr	r3, [r7, #8]
 800d1f8:	691b      	ldr	r3, [r3, #16]
 800d1fa:	3b01      	subs	r3, #1
 800d1fc:	041b      	lsls	r3, r3, #16
 800d1fe:	4319      	orrs	r1, r3
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	699b      	ldr	r3, [r3, #24]
 800d204:	3b01      	subs	r3, #1
 800d206:	061b      	lsls	r3, r3, #24
 800d208:	430b      	orrs	r3, r1
 800d20a:	431a      	orrs	r2, r3
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800d210:	2300      	movs	r3, #0
}
 800d212:	4618      	mov	r0, r3
 800d214:	3714      	adds	r7, #20
 800d216:	46bd      	mov	sp, r7
 800d218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21c:	4770      	bx	lr
 800d21e:	bf00      	nop
 800d220:	ff0f0fff 	.word	0xff0f0fff

0800d224 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d224:	b084      	sub	sp, #16
 800d226:	b480      	push	{r7}
 800d228:	b085      	sub	sp, #20
 800d22a:	af00      	add	r7, sp, #0
 800d22c:	6078      	str	r0, [r7, #4]
 800d22e:	f107 001c 	add.w	r0, r7, #28
 800d232:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d236:	2300      	movs	r3, #0
 800d238:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d23a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d23c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d23e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800d242:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800d246:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800d24a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d24c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800d24e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d250:	68fa      	ldr	r2, [r7, #12]
 800d252:	4313      	orrs	r3, r2
 800d254:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	685a      	ldr	r2, [r3, #4]
 800d25a:	4b07      	ldr	r3, [pc, #28]	@ (800d278 <SDMMC_Init+0x54>)
 800d25c:	4013      	ands	r3, r2
 800d25e:	68fa      	ldr	r2, [r7, #12]
 800d260:	431a      	orrs	r2, r3
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d266:	2300      	movs	r3, #0
}
 800d268:	4618      	mov	r0, r3
 800d26a:	3714      	adds	r7, #20
 800d26c:	46bd      	mov	sp, r7
 800d26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d272:	b004      	add	sp, #16
 800d274:	4770      	bx	lr
 800d276:	bf00      	nop
 800d278:	ffff8100 	.word	0xffff8100

0800d27c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d27c:	b480      	push	{r7}
 800d27e:	b083      	sub	sp, #12
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800d28a:	4618      	mov	r0, r3
 800d28c:	370c      	adds	r7, #12
 800d28e:	46bd      	mov	sp, r7
 800d290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d294:	4770      	bx	lr

0800d296 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800d296:	b480      	push	{r7}
 800d298:	b083      	sub	sp, #12
 800d29a:	af00      	add	r7, sp, #0
 800d29c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	2203      	movs	r2, #3
 800d2a2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d2a4:	2300      	movs	r3, #0
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	370c      	adds	r7, #12
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b0:	4770      	bx	lr

0800d2b2 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800d2b2:	b480      	push	{r7}
 800d2b4:	b083      	sub	sp, #12
 800d2b6:	af00      	add	r7, sp, #0
 800d2b8:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	f003 0303 	and.w	r3, r3, #3
}
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	370c      	adds	r7, #12
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2cc:	4770      	bx	lr
	...

0800d2d0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d2d0:	b480      	push	{r7}
 800d2d2:	b085      	sub	sp, #20
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
 800d2d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d2da:	2300      	movs	r3, #0
 800d2dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	681a      	ldr	r2, [r3, #0]
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d2ee:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d2f4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d2fa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d2fc:	68fa      	ldr	r2, [r7, #12]
 800d2fe:	4313      	orrs	r3, r2
 800d300:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	68da      	ldr	r2, [r3, #12]
 800d306:	4b06      	ldr	r3, [pc, #24]	@ (800d320 <SDMMC_SendCommand+0x50>)
 800d308:	4013      	ands	r3, r2
 800d30a:	68fa      	ldr	r2, [r7, #12]
 800d30c:	431a      	orrs	r2, r3
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800d312:	2300      	movs	r3, #0
}
 800d314:	4618      	mov	r0, r3
 800d316:	3714      	adds	r7, #20
 800d318:	46bd      	mov	sp, r7
 800d31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31e:	4770      	bx	lr
 800d320:	fffff000 	.word	0xfffff000

0800d324 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d324:	b480      	push	{r7}
 800d326:	b083      	sub	sp, #12
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	691b      	ldr	r3, [r3, #16]
 800d330:	b2db      	uxtb	r3, r3
}
 800d332:	4618      	mov	r0, r3
 800d334:	370c      	adds	r7, #12
 800d336:	46bd      	mov	sp, r7
 800d338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33c:	4770      	bx	lr

0800d33e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d33e:	b480      	push	{r7}
 800d340:	b085      	sub	sp, #20
 800d342:	af00      	add	r7, sp, #0
 800d344:	6078      	str	r0, [r7, #4]
 800d346:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	3314      	adds	r3, #20
 800d34c:	461a      	mov	r2, r3
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	4413      	add	r3, r2
 800d352:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	681b      	ldr	r3, [r3, #0]
}  
 800d358:	4618      	mov	r0, r3
 800d35a:	3714      	adds	r7, #20
 800d35c:	46bd      	mov	sp, r7
 800d35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d362:	4770      	bx	lr

0800d364 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800d364:	b480      	push	{r7}
 800d366:	b085      	sub	sp, #20
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
 800d36c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d36e:	2300      	movs	r3, #0
 800d370:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	681a      	ldr	r2, [r3, #0]
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	685a      	ldr	r2, [r3, #4]
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d38a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d390:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d396:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d398:	68fa      	ldr	r2, [r7, #12]
 800d39a:	4313      	orrs	r3, r2
 800d39c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3a2:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	431a      	orrs	r2, r3
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800d3ae:	2300      	movs	r3, #0

}
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	3714      	adds	r7, #20
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ba:	4770      	bx	lr

0800d3bc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b088      	sub	sp, #32
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
 800d3c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d3ca:	2310      	movs	r3, #16
 800d3cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d3ce:	2340      	movs	r3, #64	@ 0x40
 800d3d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d3d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d3da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d3dc:	f107 0308 	add.w	r3, r7, #8
 800d3e0:	4619      	mov	r1, r3
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	f7ff ff74 	bl	800d2d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800d3e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d3ec:	2110      	movs	r1, #16
 800d3ee:	6878      	ldr	r0, [r7, #4]
 800d3f0:	f000 fa1a 	bl	800d828 <SDMMC_GetCmdResp1>
 800d3f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d3f6:	69fb      	ldr	r3, [r7, #28]
}
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	3720      	adds	r7, #32
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bd80      	pop	{r7, pc}

0800d400 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b088      	sub	sp, #32
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
 800d408:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d40e:	2311      	movs	r3, #17
 800d410:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d412:	2340      	movs	r3, #64	@ 0x40
 800d414:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d416:	2300      	movs	r3, #0
 800d418:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d41a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d41e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d420:	f107 0308 	add.w	r3, r7, #8
 800d424:	4619      	mov	r1, r3
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	f7ff ff52 	bl	800d2d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d42c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d430:	2111      	movs	r1, #17
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f000 f9f8 	bl	800d828 <SDMMC_GetCmdResp1>
 800d438:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d43a:	69fb      	ldr	r3, [r7, #28]
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	3720      	adds	r7, #32
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}

0800d444 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b088      	sub	sp, #32
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
 800d44c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d452:	2312      	movs	r3, #18
 800d454:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d456:	2340      	movs	r3, #64	@ 0x40
 800d458:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d45a:	2300      	movs	r3, #0
 800d45c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d45e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d462:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d464:	f107 0308 	add.w	r3, r7, #8
 800d468:	4619      	mov	r1, r3
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	f7ff ff30 	bl	800d2d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d470:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d474:	2112      	movs	r1, #18
 800d476:	6878      	ldr	r0, [r7, #4]
 800d478:	f000 f9d6 	bl	800d828 <SDMMC_GetCmdResp1>
 800d47c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d47e:	69fb      	ldr	r3, [r7, #28]
}
 800d480:	4618      	mov	r0, r3
 800d482:	3720      	adds	r7, #32
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}

0800d488 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b088      	sub	sp, #32
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
 800d490:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d496:	2318      	movs	r3, #24
 800d498:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d49a:	2340      	movs	r3, #64	@ 0x40
 800d49c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d4a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d4a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d4a8:	f107 0308 	add.w	r3, r7, #8
 800d4ac:	4619      	mov	r1, r3
 800d4ae:	6878      	ldr	r0, [r7, #4]
 800d4b0:	f7ff ff0e 	bl	800d2d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d4b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d4b8:	2118      	movs	r1, #24
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	f000 f9b4 	bl	800d828 <SDMMC_GetCmdResp1>
 800d4c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d4c2:	69fb      	ldr	r3, [r7, #28]
}
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	3720      	adds	r7, #32
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}

0800d4cc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b088      	sub	sp, #32
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
 800d4d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d4da:	2319      	movs	r3, #25
 800d4dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d4de:	2340      	movs	r3, #64	@ 0x40
 800d4e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d4e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d4ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d4ec:	f107 0308 	add.w	r3, r7, #8
 800d4f0:	4619      	mov	r1, r3
 800d4f2:	6878      	ldr	r0, [r7, #4]
 800d4f4:	f7ff feec 	bl	800d2d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d4f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d4fc:	2119      	movs	r1, #25
 800d4fe:	6878      	ldr	r0, [r7, #4]
 800d500:	f000 f992 	bl	800d828 <SDMMC_GetCmdResp1>
 800d504:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d506:	69fb      	ldr	r3, [r7, #28]
}
 800d508:	4618      	mov	r0, r3
 800d50a:	3720      	adds	r7, #32
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd80      	pop	{r7, pc}

0800d510 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b088      	sub	sp, #32
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d518:	2300      	movs	r3, #0
 800d51a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d51c:	230c      	movs	r3, #12
 800d51e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d520:	2340      	movs	r3, #64	@ 0x40
 800d522:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d524:	2300      	movs	r3, #0
 800d526:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d528:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d52c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d52e:	f107 0308 	add.w	r3, r7, #8
 800d532:	4619      	mov	r1, r3
 800d534:	6878      	ldr	r0, [r7, #4]
 800d536:	f7ff fecb 	bl	800d2d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800d53a:	4a05      	ldr	r2, [pc, #20]	@ (800d550 <SDMMC_CmdStopTransfer+0x40>)
 800d53c:	210c      	movs	r1, #12
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f000 f972 	bl	800d828 <SDMMC_GetCmdResp1>
 800d544:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d546:	69fb      	ldr	r3, [r7, #28]
}
 800d548:	4618      	mov	r0, r3
 800d54a:	3720      	adds	r7, #32
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bd80      	pop	{r7, pc}
 800d550:	05f5e100 	.word	0x05f5e100

0800d554 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b08a      	sub	sp, #40	@ 0x28
 800d558:	af00      	add	r7, sp, #0
 800d55a:	60f8      	str	r0, [r7, #12]
 800d55c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d564:	2307      	movs	r3, #7
 800d566:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d568:	2340      	movs	r3, #64	@ 0x40
 800d56a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d56c:	2300      	movs	r3, #0
 800d56e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d570:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d574:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d576:	f107 0310 	add.w	r3, r7, #16
 800d57a:	4619      	mov	r1, r3
 800d57c:	68f8      	ldr	r0, [r7, #12]
 800d57e:	f7ff fea7 	bl	800d2d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800d582:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d586:	2107      	movs	r1, #7
 800d588:	68f8      	ldr	r0, [r7, #12]
 800d58a:	f000 f94d 	bl	800d828 <SDMMC_GetCmdResp1>
 800d58e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800d590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d592:	4618      	mov	r0, r3
 800d594:	3728      	adds	r7, #40	@ 0x28
 800d596:	46bd      	mov	sp, r7
 800d598:	bd80      	pop	{r7, pc}

0800d59a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800d59a:	b580      	push	{r7, lr}
 800d59c:	b088      	sub	sp, #32
 800d59e:	af00      	add	r7, sp, #0
 800d5a0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d5b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d5b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d5b8:	f107 0308 	add.w	r3, r7, #8
 800d5bc:	4619      	mov	r1, r3
 800d5be:	6878      	ldr	r0, [r7, #4]
 800d5c0:	f7ff fe86 	bl	800d2d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800d5c4:	6878      	ldr	r0, [r7, #4]
 800d5c6:	f000 fb67 	bl	800dc98 <SDMMC_GetCmdError>
 800d5ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d5cc:	69fb      	ldr	r3, [r7, #28]
}
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	3720      	adds	r7, #32
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd80      	pop	{r7, pc}

0800d5d6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800d5d6:	b580      	push	{r7, lr}
 800d5d8:	b088      	sub	sp, #32
 800d5da:	af00      	add	r7, sp, #0
 800d5dc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d5de:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800d5e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d5e4:	2308      	movs	r3, #8
 800d5e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d5e8:	2340      	movs	r3, #64	@ 0x40
 800d5ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d5f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d5f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d5f6:	f107 0308 	add.w	r3, r7, #8
 800d5fa:	4619      	mov	r1, r3
 800d5fc:	6878      	ldr	r0, [r7, #4]
 800d5fe:	f7ff fe67 	bl	800d2d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f000 fafa 	bl	800dbfc <SDMMC_GetCmdResp7>
 800d608:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d60a:	69fb      	ldr	r3, [r7, #28]
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	3720      	adds	r7, #32
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}

0800d614 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b088      	sub	sp, #32
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
 800d61c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d61e:	683b      	ldr	r3, [r7, #0]
 800d620:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d622:	2337      	movs	r3, #55	@ 0x37
 800d624:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d626:	2340      	movs	r3, #64	@ 0x40
 800d628:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d62a:	2300      	movs	r3, #0
 800d62c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d62e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d632:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d634:	f107 0308 	add.w	r3, r7, #8
 800d638:	4619      	mov	r1, r3
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f7ff fe48 	bl	800d2d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800d640:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d644:	2137      	movs	r1, #55	@ 0x37
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	f000 f8ee 	bl	800d828 <SDMMC_GetCmdResp1>
 800d64c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d64e:	69fb      	ldr	r3, [r7, #28]
}
 800d650:	4618      	mov	r0, r3
 800d652:	3720      	adds	r7, #32
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}

0800d658 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b088      	sub	sp, #32
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
 800d660:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800d662:	683a      	ldr	r2, [r7, #0]
 800d664:	4b0d      	ldr	r3, [pc, #52]	@ (800d69c <SDMMC_CmdAppOperCommand+0x44>)
 800d666:	4313      	orrs	r3, r2
 800d668:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d66a:	2329      	movs	r3, #41	@ 0x29
 800d66c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d66e:	2340      	movs	r3, #64	@ 0x40
 800d670:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d672:	2300      	movs	r3, #0
 800d674:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d676:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d67a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d67c:	f107 0308 	add.w	r3, r7, #8
 800d680:	4619      	mov	r1, r3
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f7ff fe24 	bl	800d2d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800d688:	6878      	ldr	r0, [r7, #4]
 800d68a:	f000 fa03 	bl	800da94 <SDMMC_GetCmdResp3>
 800d68e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d690:	69fb      	ldr	r3, [r7, #28]
}
 800d692:	4618      	mov	r0, r3
 800d694:	3720      	adds	r7, #32
 800d696:	46bd      	mov	sp, r7
 800d698:	bd80      	pop	{r7, pc}
 800d69a:	bf00      	nop
 800d69c:	80100000 	.word	0x80100000

0800d6a0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b088      	sub	sp, #32
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
 800d6a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d6ae:	2306      	movs	r3, #6
 800d6b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d6b2:	2340      	movs	r3, #64	@ 0x40
 800d6b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d6ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d6be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d6c0:	f107 0308 	add.w	r3, r7, #8
 800d6c4:	4619      	mov	r1, r3
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	f7ff fe02 	bl	800d2d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800d6cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d6d0:	2106      	movs	r1, #6
 800d6d2:	6878      	ldr	r0, [r7, #4]
 800d6d4:	f000 f8a8 	bl	800d828 <SDMMC_GetCmdResp1>
 800d6d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6da:	69fb      	ldr	r3, [r7, #28]
}
 800d6dc:	4618      	mov	r0, r3
 800d6de:	3720      	adds	r7, #32
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	bd80      	pop	{r7, pc}

0800d6e4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b088      	sub	sp, #32
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d6f0:	2333      	movs	r3, #51	@ 0x33
 800d6f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d6f4:	2340      	movs	r3, #64	@ 0x40
 800d6f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d6fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d700:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d702:	f107 0308 	add.w	r3, r7, #8
 800d706:	4619      	mov	r1, r3
 800d708:	6878      	ldr	r0, [r7, #4]
 800d70a:	f7ff fde1 	bl	800d2d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800d70e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d712:	2133      	movs	r1, #51	@ 0x33
 800d714:	6878      	ldr	r0, [r7, #4]
 800d716:	f000 f887 	bl	800d828 <SDMMC_GetCmdResp1>
 800d71a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d71c:	69fb      	ldr	r3, [r7, #28]
}
 800d71e:	4618      	mov	r0, r3
 800d720:	3720      	adds	r7, #32
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}

0800d726 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800d726:	b580      	push	{r7, lr}
 800d728:	b088      	sub	sp, #32
 800d72a:	af00      	add	r7, sp, #0
 800d72c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d72e:	2300      	movs	r3, #0
 800d730:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d732:	2302      	movs	r3, #2
 800d734:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d736:	23c0      	movs	r3, #192	@ 0xc0
 800d738:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d73a:	2300      	movs	r3, #0
 800d73c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d73e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d742:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d744:	f107 0308 	add.w	r3, r7, #8
 800d748:	4619      	mov	r1, r3
 800d74a:	6878      	ldr	r0, [r7, #4]
 800d74c:	f7ff fdc0 	bl	800d2d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	f000 f957 	bl	800da04 <SDMMC_GetCmdResp2>
 800d756:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d758:	69fb      	ldr	r3, [r7, #28]
}
 800d75a:	4618      	mov	r0, r3
 800d75c:	3720      	adds	r7, #32
 800d75e:	46bd      	mov	sp, r7
 800d760:	bd80      	pop	{r7, pc}

0800d762 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d762:	b580      	push	{r7, lr}
 800d764:	b088      	sub	sp, #32
 800d766:	af00      	add	r7, sp, #0
 800d768:	6078      	str	r0, [r7, #4]
 800d76a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d770:	2309      	movs	r3, #9
 800d772:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d774:	23c0      	movs	r3, #192	@ 0xc0
 800d776:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d778:	2300      	movs	r3, #0
 800d77a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d77c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d780:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d782:	f107 0308 	add.w	r3, r7, #8
 800d786:	4619      	mov	r1, r3
 800d788:	6878      	ldr	r0, [r7, #4]
 800d78a:	f7ff fda1 	bl	800d2d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f000 f938 	bl	800da04 <SDMMC_GetCmdResp2>
 800d794:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d796:	69fb      	ldr	r3, [r7, #28]
}
 800d798:	4618      	mov	r0, r3
 800d79a:	3720      	adds	r7, #32
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}

0800d7a0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b088      	sub	sp, #32
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
 800d7a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d7ae:	2303      	movs	r3, #3
 800d7b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d7b2:	2340      	movs	r3, #64	@ 0x40
 800d7b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d7ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d7be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d7c0:	f107 0308 	add.w	r3, r7, #8
 800d7c4:	4619      	mov	r1, r3
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f7ff fd82 	bl	800d2d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d7cc:	683a      	ldr	r2, [r7, #0]
 800d7ce:	2103      	movs	r1, #3
 800d7d0:	6878      	ldr	r0, [r7, #4]
 800d7d2:	f000 f99d 	bl	800db10 <SDMMC_GetCmdResp6>
 800d7d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7d8:	69fb      	ldr	r3, [r7, #28]
}
 800d7da:	4618      	mov	r0, r3
 800d7dc:	3720      	adds	r7, #32
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}

0800d7e2 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d7e2:	b580      	push	{r7, lr}
 800d7e4:	b088      	sub	sp, #32
 800d7e6:	af00      	add	r7, sp, #0
 800d7e8:	6078      	str	r0, [r7, #4]
 800d7ea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d7f0:	230d      	movs	r3, #13
 800d7f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d7f4:	2340      	movs	r3, #64	@ 0x40
 800d7f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d7fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d800:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d802:	f107 0308 	add.w	r3, r7, #8
 800d806:	4619      	mov	r1, r3
 800d808:	6878      	ldr	r0, [r7, #4]
 800d80a:	f7ff fd61 	bl	800d2d0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d80e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d812:	210d      	movs	r1, #13
 800d814:	6878      	ldr	r0, [r7, #4]
 800d816:	f000 f807 	bl	800d828 <SDMMC_GetCmdResp1>
 800d81a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d81c:	69fb      	ldr	r3, [r7, #28]
}
 800d81e:	4618      	mov	r0, r3
 800d820:	3720      	adds	r7, #32
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}
	...

0800d828 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b088      	sub	sp, #32
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	60f8      	str	r0, [r7, #12]
 800d830:	460b      	mov	r3, r1
 800d832:	607a      	str	r2, [r7, #4]
 800d834:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d836:	4b70      	ldr	r3, [pc, #448]	@ (800d9f8 <SDMMC_GetCmdResp1+0x1d0>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	4a70      	ldr	r2, [pc, #448]	@ (800d9fc <SDMMC_GetCmdResp1+0x1d4>)
 800d83c:	fba2 2303 	umull	r2, r3, r2, r3
 800d840:	0a5a      	lsrs	r2, r3, #9
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	fb02 f303 	mul.w	r3, r2, r3
 800d848:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d84a:	69fb      	ldr	r3, [r7, #28]
 800d84c:	1e5a      	subs	r2, r3, #1
 800d84e:	61fa      	str	r2, [r7, #28]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d102      	bne.n	800d85a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d854:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d858:	e0c9      	b.n	800d9ee <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d85e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d860:	69bb      	ldr	r3, [r7, #24]
 800d862:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d866:	2b00      	cmp	r3, #0
 800d868:	d0ef      	beq.n	800d84a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d86a:	69bb      	ldr	r3, [r7, #24]
 800d86c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d870:	2b00      	cmp	r3, #0
 800d872:	d1ea      	bne.n	800d84a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d878:	f003 0304 	and.w	r3, r3, #4
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d004      	beq.n	800d88a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	2204      	movs	r2, #4
 800d884:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d886:	2304      	movs	r3, #4
 800d888:	e0b1      	b.n	800d9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d88e:	f003 0301 	and.w	r3, r3, #1
 800d892:	2b00      	cmp	r3, #0
 800d894:	d004      	beq.n	800d8a0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	2201      	movs	r2, #1
 800d89a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d89c:	2301      	movs	r3, #1
 800d89e:	e0a6      	b.n	800d9ee <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	22c5      	movs	r2, #197	@ 0xc5
 800d8a4:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d8a6:	68f8      	ldr	r0, [r7, #12]
 800d8a8:	f7ff fd3c 	bl	800d324 <SDMMC_GetCommandResponse>
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	461a      	mov	r2, r3
 800d8b0:	7afb      	ldrb	r3, [r7, #11]
 800d8b2:	4293      	cmp	r3, r2
 800d8b4:	d001      	beq.n	800d8ba <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	e099      	b.n	800d9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d8ba:	2100      	movs	r1, #0
 800d8bc:	68f8      	ldr	r0, [r7, #12]
 800d8be:	f7ff fd3e 	bl	800d33e <SDMMC_GetResponse>
 800d8c2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d8c4:	697a      	ldr	r2, [r7, #20]
 800d8c6:	4b4e      	ldr	r3, [pc, #312]	@ (800da00 <SDMMC_GetCmdResp1+0x1d8>)
 800d8c8:	4013      	ands	r3, r2
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d101      	bne.n	800d8d2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	e08d      	b.n	800d9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d8d2:	697b      	ldr	r3, [r7, #20]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	da02      	bge.n	800d8de <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d8d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d8dc:	e087      	b.n	800d9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d8de:	697b      	ldr	r3, [r7, #20]
 800d8e0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d001      	beq.n	800d8ec <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d8e8:	2340      	movs	r3, #64	@ 0x40
 800d8ea:	e080      	b.n	800d9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d8ec:	697b      	ldr	r3, [r7, #20]
 800d8ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d001      	beq.n	800d8fa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d8f6:	2380      	movs	r3, #128	@ 0x80
 800d8f8:	e079      	b.n	800d9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d8fa:	697b      	ldr	r3, [r7, #20]
 800d8fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d900:	2b00      	cmp	r3, #0
 800d902:	d002      	beq.n	800d90a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d904:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d908:	e071      	b.n	800d9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d90a:	697b      	ldr	r3, [r7, #20]
 800d90c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d910:	2b00      	cmp	r3, #0
 800d912:	d002      	beq.n	800d91a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d914:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d918:	e069      	b.n	800d9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d91a:	697b      	ldr	r3, [r7, #20]
 800d91c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d920:	2b00      	cmp	r3, #0
 800d922:	d002      	beq.n	800d92a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d924:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d928:	e061      	b.n	800d9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d92a:	697b      	ldr	r3, [r7, #20]
 800d92c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d930:	2b00      	cmp	r3, #0
 800d932:	d002      	beq.n	800d93a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d934:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d938:	e059      	b.n	800d9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d940:	2b00      	cmp	r3, #0
 800d942:	d002      	beq.n	800d94a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d944:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d948:	e051      	b.n	800d9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d950:	2b00      	cmp	r3, #0
 800d952:	d002      	beq.n	800d95a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d954:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d958:	e049      	b.n	800d9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d95a:	697b      	ldr	r3, [r7, #20]
 800d95c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d960:	2b00      	cmp	r3, #0
 800d962:	d002      	beq.n	800d96a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d964:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d968:	e041      	b.n	800d9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d96a:	697b      	ldr	r3, [r7, #20]
 800d96c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d970:	2b00      	cmp	r3, #0
 800d972:	d002      	beq.n	800d97a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d974:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d978:	e039      	b.n	800d9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d97a:	697b      	ldr	r3, [r7, #20]
 800d97c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d980:	2b00      	cmp	r3, #0
 800d982:	d002      	beq.n	800d98a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d984:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800d988:	e031      	b.n	800d9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d98a:	697b      	ldr	r3, [r7, #20]
 800d98c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d990:	2b00      	cmp	r3, #0
 800d992:	d002      	beq.n	800d99a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d994:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800d998:	e029      	b.n	800d9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d99a:	697b      	ldr	r3, [r7, #20]
 800d99c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d002      	beq.n	800d9aa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d9a4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d9a8:	e021      	b.n	800d9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d9aa:	697b      	ldr	r3, [r7, #20]
 800d9ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d002      	beq.n	800d9ba <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d9b4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800d9b8:	e019      	b.n	800d9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d9ba:	697b      	ldr	r3, [r7, #20]
 800d9bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d002      	beq.n	800d9ca <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d9c4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800d9c8:	e011      	b.n	800d9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d9ca:	697b      	ldr	r3, [r7, #20]
 800d9cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d002      	beq.n	800d9da <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d9d4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800d9d8:	e009      	b.n	800d9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d9da:	697b      	ldr	r3, [r7, #20]
 800d9dc:	f003 0308 	and.w	r3, r3, #8
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d002      	beq.n	800d9ea <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d9e4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800d9e8:	e001      	b.n	800d9ee <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d9ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	3720      	adds	r7, #32
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}
 800d9f6:	bf00      	nop
 800d9f8:	20000004 	.word	0x20000004
 800d9fc:	10624dd3 	.word	0x10624dd3
 800da00:	fdffe008 	.word	0xfdffe008

0800da04 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800da04:	b480      	push	{r7}
 800da06:	b085      	sub	sp, #20
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800da0c:	4b1f      	ldr	r3, [pc, #124]	@ (800da8c <SDMMC_GetCmdResp2+0x88>)
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	4a1f      	ldr	r2, [pc, #124]	@ (800da90 <SDMMC_GetCmdResp2+0x8c>)
 800da12:	fba2 2303 	umull	r2, r3, r2, r3
 800da16:	0a5b      	lsrs	r3, r3, #9
 800da18:	f241 3288 	movw	r2, #5000	@ 0x1388
 800da1c:	fb02 f303 	mul.w	r3, r2, r3
 800da20:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	1e5a      	subs	r2, r3, #1
 800da26:	60fa      	str	r2, [r7, #12]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d102      	bne.n	800da32 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800da2c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800da30:	e026      	b.n	800da80 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da36:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800da38:	68bb      	ldr	r3, [r7, #8]
 800da3a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d0ef      	beq.n	800da22 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d1ea      	bne.n	800da22 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da50:	f003 0304 	and.w	r3, r3, #4
 800da54:	2b00      	cmp	r3, #0
 800da56:	d004      	beq.n	800da62 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2204      	movs	r2, #4
 800da5c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800da5e:	2304      	movs	r3, #4
 800da60:	e00e      	b.n	800da80 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da66:	f003 0301 	and.w	r3, r3, #1
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d004      	beq.n	800da78 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	2201      	movs	r2, #1
 800da72:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800da74:	2301      	movs	r3, #1
 800da76:	e003      	b.n	800da80 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	22c5      	movs	r2, #197	@ 0xc5
 800da7c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800da7e:	2300      	movs	r3, #0
}
 800da80:	4618      	mov	r0, r3
 800da82:	3714      	adds	r7, #20
 800da84:	46bd      	mov	sp, r7
 800da86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8a:	4770      	bx	lr
 800da8c:	20000004 	.word	0x20000004
 800da90:	10624dd3 	.word	0x10624dd3

0800da94 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800da94:	b480      	push	{r7}
 800da96:	b085      	sub	sp, #20
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800da9c:	4b1a      	ldr	r3, [pc, #104]	@ (800db08 <SDMMC_GetCmdResp3+0x74>)
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	4a1a      	ldr	r2, [pc, #104]	@ (800db0c <SDMMC_GetCmdResp3+0x78>)
 800daa2:	fba2 2303 	umull	r2, r3, r2, r3
 800daa6:	0a5b      	lsrs	r3, r3, #9
 800daa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800daac:	fb02 f303 	mul.w	r3, r2, r3
 800dab0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	1e5a      	subs	r2, r3, #1
 800dab6:	60fa      	str	r2, [r7, #12]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d102      	bne.n	800dac2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dabc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dac0:	e01b      	b.n	800dafa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dac6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dac8:	68bb      	ldr	r3, [r7, #8]
 800daca:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d0ef      	beq.n	800dab2 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800dad2:	68bb      	ldr	r3, [r7, #8]
 800dad4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d1ea      	bne.n	800dab2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dae0:	f003 0304 	and.w	r3, r3, #4
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d004      	beq.n	800daf2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2204      	movs	r2, #4
 800daec:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800daee:	2304      	movs	r3, #4
 800daf0:	e003      	b.n	800dafa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	22c5      	movs	r2, #197	@ 0xc5
 800daf6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800daf8:	2300      	movs	r3, #0
}
 800dafa:	4618      	mov	r0, r3
 800dafc:	3714      	adds	r7, #20
 800dafe:	46bd      	mov	sp, r7
 800db00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db04:	4770      	bx	lr
 800db06:	bf00      	nop
 800db08:	20000004 	.word	0x20000004
 800db0c:	10624dd3 	.word	0x10624dd3

0800db10 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b088      	sub	sp, #32
 800db14:	af00      	add	r7, sp, #0
 800db16:	60f8      	str	r0, [r7, #12]
 800db18:	460b      	mov	r3, r1
 800db1a:	607a      	str	r2, [r7, #4]
 800db1c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800db1e:	4b35      	ldr	r3, [pc, #212]	@ (800dbf4 <SDMMC_GetCmdResp6+0xe4>)
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	4a35      	ldr	r2, [pc, #212]	@ (800dbf8 <SDMMC_GetCmdResp6+0xe8>)
 800db24:	fba2 2303 	umull	r2, r3, r2, r3
 800db28:	0a5b      	lsrs	r3, r3, #9
 800db2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800db2e:	fb02 f303 	mul.w	r3, r2, r3
 800db32:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800db34:	69fb      	ldr	r3, [r7, #28]
 800db36:	1e5a      	subs	r2, r3, #1
 800db38:	61fa      	str	r2, [r7, #28]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d102      	bne.n	800db44 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800db3e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800db42:	e052      	b.n	800dbea <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db48:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800db4a:	69bb      	ldr	r3, [r7, #24]
 800db4c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800db50:	2b00      	cmp	r3, #0
 800db52:	d0ef      	beq.n	800db34 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800db54:	69bb      	ldr	r3, [r7, #24]
 800db56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d1ea      	bne.n	800db34 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db62:	f003 0304 	and.w	r3, r3, #4
 800db66:	2b00      	cmp	r3, #0
 800db68:	d004      	beq.n	800db74 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	2204      	movs	r2, #4
 800db6e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800db70:	2304      	movs	r3, #4
 800db72:	e03a      	b.n	800dbea <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db78:	f003 0301 	and.w	r3, r3, #1
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d004      	beq.n	800db8a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	2201      	movs	r2, #1
 800db84:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800db86:	2301      	movs	r3, #1
 800db88:	e02f      	b.n	800dbea <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800db8a:	68f8      	ldr	r0, [r7, #12]
 800db8c:	f7ff fbca 	bl	800d324 <SDMMC_GetCommandResponse>
 800db90:	4603      	mov	r3, r0
 800db92:	461a      	mov	r2, r3
 800db94:	7afb      	ldrb	r3, [r7, #11]
 800db96:	4293      	cmp	r3, r2
 800db98:	d001      	beq.n	800db9e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800db9a:	2301      	movs	r3, #1
 800db9c:	e025      	b.n	800dbea <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	22c5      	movs	r2, #197	@ 0xc5
 800dba2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800dba4:	2100      	movs	r1, #0
 800dba6:	68f8      	ldr	r0, [r7, #12]
 800dba8:	f7ff fbc9 	bl	800d33e <SDMMC_GetResponse>
 800dbac:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800dbae:	697b      	ldr	r3, [r7, #20]
 800dbb0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d106      	bne.n	800dbc6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	0c1b      	lsrs	r3, r3, #16
 800dbbc:	b29a      	uxth	r2, r3
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	e011      	b.n	800dbea <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800dbc6:	697b      	ldr	r3, [r7, #20]
 800dbc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d002      	beq.n	800dbd6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dbd0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800dbd4:	e009      	b.n	800dbea <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800dbd6:	697b      	ldr	r3, [r7, #20]
 800dbd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d002      	beq.n	800dbe6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dbe0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dbe4:	e001      	b.n	800dbea <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800dbe6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800dbea:	4618      	mov	r0, r3
 800dbec:	3720      	adds	r7, #32
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}
 800dbf2:	bf00      	nop
 800dbf4:	20000004 	.word	0x20000004
 800dbf8:	10624dd3 	.word	0x10624dd3

0800dbfc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800dbfc:	b480      	push	{r7}
 800dbfe:	b085      	sub	sp, #20
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dc04:	4b22      	ldr	r3, [pc, #136]	@ (800dc90 <SDMMC_GetCmdResp7+0x94>)
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	4a22      	ldr	r2, [pc, #136]	@ (800dc94 <SDMMC_GetCmdResp7+0x98>)
 800dc0a:	fba2 2303 	umull	r2, r3, r2, r3
 800dc0e:	0a5b      	lsrs	r3, r3, #9
 800dc10:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dc14:	fb02 f303 	mul.w	r3, r2, r3
 800dc18:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	1e5a      	subs	r2, r3, #1
 800dc1e:	60fa      	str	r2, [r7, #12]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d102      	bne.n	800dc2a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dc24:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dc28:	e02c      	b.n	800dc84 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc2e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d0ef      	beq.n	800dc1a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800dc3a:	68bb      	ldr	r3, [r7, #8]
 800dc3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d1ea      	bne.n	800dc1a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc48:	f003 0304 	and.w	r3, r3, #4
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d004      	beq.n	800dc5a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2204      	movs	r2, #4
 800dc54:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dc56:	2304      	movs	r3, #4
 800dc58:	e014      	b.n	800dc84 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc5e:	f003 0301 	and.w	r3, r3, #1
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d004      	beq.n	800dc70 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2201      	movs	r2, #1
 800dc6a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dc6c:	2301      	movs	r3, #1
 800dc6e:	e009      	b.n	800dc84 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d002      	beq.n	800dc82 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	2240      	movs	r2, #64	@ 0x40
 800dc80:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800dc82:	2300      	movs	r3, #0
  
}
 800dc84:	4618      	mov	r0, r3
 800dc86:	3714      	adds	r7, #20
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8e:	4770      	bx	lr
 800dc90:	20000004 	.word	0x20000004
 800dc94:	10624dd3 	.word	0x10624dd3

0800dc98 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800dc98:	b480      	push	{r7}
 800dc9a:	b085      	sub	sp, #20
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dca0:	4b11      	ldr	r3, [pc, #68]	@ (800dce8 <SDMMC_GetCmdError+0x50>)
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	4a11      	ldr	r2, [pc, #68]	@ (800dcec <SDMMC_GetCmdError+0x54>)
 800dca6:	fba2 2303 	umull	r2, r3, r2, r3
 800dcaa:	0a5b      	lsrs	r3, r3, #9
 800dcac:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dcb0:	fb02 f303 	mul.w	r3, r2, r3
 800dcb4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	1e5a      	subs	r2, r3, #1
 800dcba:	60fa      	str	r2, [r7, #12]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d102      	bne.n	800dcc6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dcc0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dcc4:	e009      	b.n	800dcda <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dcca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d0f1      	beq.n	800dcb6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	22c5      	movs	r2, #197	@ 0xc5
 800dcd6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800dcd8:	2300      	movs	r3, #0
}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	3714      	adds	r7, #20
 800dcde:	46bd      	mov	sp, r7
 800dce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce4:	4770      	bx	lr
 800dce6:	bf00      	nop
 800dce8:	20000004 	.word	0x20000004
 800dcec:	10624dd3 	.word	0x10624dd3

0800dcf0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dcf0:	b084      	sub	sp, #16
 800dcf2:	b580      	push	{r7, lr}
 800dcf4:	b084      	sub	sp, #16
 800dcf6:	af00      	add	r7, sp, #0
 800dcf8:	6078      	str	r0, [r7, #4]
 800dcfa:	f107 001c 	add.w	r0, r7, #28
 800dcfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dd02:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800dd06:	2b01      	cmp	r3, #1
 800dd08:	d121      	bne.n	800dd4e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd0e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	68da      	ldr	r2, [r3, #12]
 800dd1a:	4b21      	ldr	r3, [pc, #132]	@ (800dda0 <USB_CoreInit+0xb0>)
 800dd1c:	4013      	ands	r3, r2
 800dd1e:	687a      	ldr	r2, [r7, #4]
 800dd20:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	68db      	ldr	r3, [r3, #12]
 800dd26:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800dd2e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800dd32:	2b01      	cmp	r3, #1
 800dd34:	d105      	bne.n	800dd42 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	68db      	ldr	r3, [r3, #12]
 800dd3a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800dd42:	6878      	ldr	r0, [r7, #4]
 800dd44:	f000 f9d4 	bl	800e0f0 <USB_CoreReset>
 800dd48:	4603      	mov	r3, r0
 800dd4a:	73fb      	strb	r3, [r7, #15]
 800dd4c:	e010      	b.n	800dd70 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	68db      	ldr	r3, [r3, #12]
 800dd52:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800dd5a:	6878      	ldr	r0, [r7, #4]
 800dd5c:	f000 f9c8 	bl	800e0f0 <USB_CoreReset>
 800dd60:	4603      	mov	r3, r0
 800dd62:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd68:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800dd70:	7fbb      	ldrb	r3, [r7, #30]
 800dd72:	2b01      	cmp	r3, #1
 800dd74:	d10b      	bne.n	800dd8e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	689b      	ldr	r3, [r3, #8]
 800dd7a:	f043 0206 	orr.w	r2, r3, #6
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	689b      	ldr	r3, [r3, #8]
 800dd86:	f043 0220 	orr.w	r2, r3, #32
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800dd8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd90:	4618      	mov	r0, r3
 800dd92:	3710      	adds	r7, #16
 800dd94:	46bd      	mov	sp, r7
 800dd96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dd9a:	b004      	add	sp, #16
 800dd9c:	4770      	bx	lr
 800dd9e:	bf00      	nop
 800dda0:	ffbdffbf 	.word	0xffbdffbf

0800dda4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800dda4:	b480      	push	{r7}
 800dda6:	b083      	sub	sp, #12
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	689b      	ldr	r3, [r3, #8]
 800ddb0:	f043 0201 	orr.w	r2, r3, #1
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ddb8:	2300      	movs	r3, #0
}
 800ddba:	4618      	mov	r0, r3
 800ddbc:	370c      	adds	r7, #12
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc4:	4770      	bx	lr

0800ddc6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ddc6:	b480      	push	{r7}
 800ddc8:	b083      	sub	sp, #12
 800ddca:	af00      	add	r7, sp, #0
 800ddcc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	689b      	ldr	r3, [r3, #8]
 800ddd2:	f023 0201 	bic.w	r2, r3, #1
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ddda:	2300      	movs	r3, #0
}
 800dddc:	4618      	mov	r0, r3
 800ddde:	370c      	adds	r7, #12
 800dde0:	46bd      	mov	sp, r7
 800dde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde6:	4770      	bx	lr

0800dde8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b084      	sub	sp, #16
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
 800ddf0:	460b      	mov	r3, r1
 800ddf2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	68db      	ldr	r3, [r3, #12]
 800ddfc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800de04:	78fb      	ldrb	r3, [r7, #3]
 800de06:	2b01      	cmp	r3, #1
 800de08:	d115      	bne.n	800de36 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	68db      	ldr	r3, [r3, #12]
 800de0e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800de16:	200a      	movs	r0, #10
 800de18:	f7f5 f9b0 	bl	800317c <HAL_Delay>
      ms += 10U;
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	330a      	adds	r3, #10
 800de20:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800de22:	6878      	ldr	r0, [r7, #4]
 800de24:	f000 f956 	bl	800e0d4 <USB_GetMode>
 800de28:	4603      	mov	r3, r0
 800de2a:	2b01      	cmp	r3, #1
 800de2c:	d01e      	beq.n	800de6c <USB_SetCurrentMode+0x84>
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	2bc7      	cmp	r3, #199	@ 0xc7
 800de32:	d9f0      	bls.n	800de16 <USB_SetCurrentMode+0x2e>
 800de34:	e01a      	b.n	800de6c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800de36:	78fb      	ldrb	r3, [r7, #3]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d115      	bne.n	800de68 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	68db      	ldr	r3, [r3, #12]
 800de40:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800de48:	200a      	movs	r0, #10
 800de4a:	f7f5 f997 	bl	800317c <HAL_Delay>
      ms += 10U;
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	330a      	adds	r3, #10
 800de52:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800de54:	6878      	ldr	r0, [r7, #4]
 800de56:	f000 f93d 	bl	800e0d4 <USB_GetMode>
 800de5a:	4603      	mov	r3, r0
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d005      	beq.n	800de6c <USB_SetCurrentMode+0x84>
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	2bc7      	cmp	r3, #199	@ 0xc7
 800de64:	d9f0      	bls.n	800de48 <USB_SetCurrentMode+0x60>
 800de66:	e001      	b.n	800de6c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800de68:	2301      	movs	r3, #1
 800de6a:	e005      	b.n	800de78 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	2bc8      	cmp	r3, #200	@ 0xc8
 800de70:	d101      	bne.n	800de76 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800de72:	2301      	movs	r3, #1
 800de74:	e000      	b.n	800de78 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800de76:	2300      	movs	r3, #0
}
 800de78:	4618      	mov	r0, r3
 800de7a:	3710      	adds	r7, #16
 800de7c:	46bd      	mov	sp, r7
 800de7e:	bd80      	pop	{r7, pc}

0800de80 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800de80:	b480      	push	{r7}
 800de82:	b085      	sub	sp, #20
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
 800de88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800de8a:	2300      	movs	r3, #0
 800de8c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	3301      	adds	r3, #1
 800de92:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800de9a:	d901      	bls.n	800dea0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800de9c:	2303      	movs	r3, #3
 800de9e:	e01b      	b.n	800ded8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	691b      	ldr	r3, [r3, #16]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	daf2      	bge.n	800de8e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800dea8:	2300      	movs	r3, #0
 800deaa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	019b      	lsls	r3, r3, #6
 800deb0:	f043 0220 	orr.w	r2, r3, #32
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	3301      	adds	r3, #1
 800debc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dec4:	d901      	bls.n	800deca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800dec6:	2303      	movs	r3, #3
 800dec8:	e006      	b.n	800ded8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	691b      	ldr	r3, [r3, #16]
 800dece:	f003 0320 	and.w	r3, r3, #32
 800ded2:	2b20      	cmp	r3, #32
 800ded4:	d0f0      	beq.n	800deb8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ded6:	2300      	movs	r3, #0
}
 800ded8:	4618      	mov	r0, r3
 800deda:	3714      	adds	r7, #20
 800dedc:	46bd      	mov	sp, r7
 800dede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee2:	4770      	bx	lr

0800dee4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800dee4:	b480      	push	{r7}
 800dee6:	b085      	sub	sp, #20
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800deec:	2300      	movs	r3, #0
 800deee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	3301      	adds	r3, #1
 800def4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800defc:	d901      	bls.n	800df02 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800defe:	2303      	movs	r3, #3
 800df00:	e018      	b.n	800df34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	691b      	ldr	r3, [r3, #16]
 800df06:	2b00      	cmp	r3, #0
 800df08:	daf2      	bge.n	800def0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800df0a:	2300      	movs	r3, #0
 800df0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	2210      	movs	r2, #16
 800df12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	3301      	adds	r3, #1
 800df18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800df20:	d901      	bls.n	800df26 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800df22:	2303      	movs	r3, #3
 800df24:	e006      	b.n	800df34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	691b      	ldr	r3, [r3, #16]
 800df2a:	f003 0310 	and.w	r3, r3, #16
 800df2e:	2b10      	cmp	r3, #16
 800df30:	d0f0      	beq.n	800df14 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800df32:	2300      	movs	r3, #0
}
 800df34:	4618      	mov	r0, r3
 800df36:	3714      	adds	r7, #20
 800df38:	46bd      	mov	sp, r7
 800df3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3e:	4770      	bx	lr

0800df40 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800df40:	b480      	push	{r7}
 800df42:	b089      	sub	sp, #36	@ 0x24
 800df44:	af00      	add	r7, sp, #0
 800df46:	60f8      	str	r0, [r7, #12]
 800df48:	60b9      	str	r1, [r7, #8]
 800df4a:	4611      	mov	r1, r2
 800df4c:	461a      	mov	r2, r3
 800df4e:	460b      	mov	r3, r1
 800df50:	71fb      	strb	r3, [r7, #7]
 800df52:	4613      	mov	r3, r2
 800df54:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800df5e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800df62:	2b00      	cmp	r3, #0
 800df64:	d123      	bne.n	800dfae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800df66:	88bb      	ldrh	r3, [r7, #4]
 800df68:	3303      	adds	r3, #3
 800df6a:	089b      	lsrs	r3, r3, #2
 800df6c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800df6e:	2300      	movs	r3, #0
 800df70:	61bb      	str	r3, [r7, #24]
 800df72:	e018      	b.n	800dfa6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800df74:	79fb      	ldrb	r3, [r7, #7]
 800df76:	031a      	lsls	r2, r3, #12
 800df78:	697b      	ldr	r3, [r7, #20]
 800df7a:	4413      	add	r3, r2
 800df7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800df80:	461a      	mov	r2, r3
 800df82:	69fb      	ldr	r3, [r7, #28]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	6013      	str	r3, [r2, #0]
      pSrc++;
 800df88:	69fb      	ldr	r3, [r7, #28]
 800df8a:	3301      	adds	r3, #1
 800df8c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800df8e:	69fb      	ldr	r3, [r7, #28]
 800df90:	3301      	adds	r3, #1
 800df92:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800df94:	69fb      	ldr	r3, [r7, #28]
 800df96:	3301      	adds	r3, #1
 800df98:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800df9a:	69fb      	ldr	r3, [r7, #28]
 800df9c:	3301      	adds	r3, #1
 800df9e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800dfa0:	69bb      	ldr	r3, [r7, #24]
 800dfa2:	3301      	adds	r3, #1
 800dfa4:	61bb      	str	r3, [r7, #24]
 800dfa6:	69ba      	ldr	r2, [r7, #24]
 800dfa8:	693b      	ldr	r3, [r7, #16]
 800dfaa:	429a      	cmp	r2, r3
 800dfac:	d3e2      	bcc.n	800df74 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800dfae:	2300      	movs	r3, #0
}
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	3724      	adds	r7, #36	@ 0x24
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfba:	4770      	bx	lr

0800dfbc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800dfbc:	b480      	push	{r7}
 800dfbe:	b08b      	sub	sp, #44	@ 0x2c
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	60f8      	str	r0, [r7, #12]
 800dfc4:	60b9      	str	r1, [r7, #8]
 800dfc6:	4613      	mov	r3, r2
 800dfc8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800dfce:	68bb      	ldr	r3, [r7, #8]
 800dfd0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800dfd2:	88fb      	ldrh	r3, [r7, #6]
 800dfd4:	089b      	lsrs	r3, r3, #2
 800dfd6:	b29b      	uxth	r3, r3
 800dfd8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800dfda:	88fb      	ldrh	r3, [r7, #6]
 800dfdc:	f003 0303 	and.w	r3, r3, #3
 800dfe0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	623b      	str	r3, [r7, #32]
 800dfe6:	e014      	b.n	800e012 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800dfe8:	69bb      	ldr	r3, [r7, #24]
 800dfea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800dfee:	681a      	ldr	r2, [r3, #0]
 800dff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dff2:	601a      	str	r2, [r3, #0]
    pDest++;
 800dff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dff6:	3301      	adds	r3, #1
 800dff8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800dffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dffc:	3301      	adds	r3, #1
 800dffe:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e002:	3301      	adds	r3, #1
 800e004:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800e006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e008:	3301      	adds	r3, #1
 800e00a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800e00c:	6a3b      	ldr	r3, [r7, #32]
 800e00e:	3301      	adds	r3, #1
 800e010:	623b      	str	r3, [r7, #32]
 800e012:	6a3a      	ldr	r2, [r7, #32]
 800e014:	697b      	ldr	r3, [r7, #20]
 800e016:	429a      	cmp	r2, r3
 800e018:	d3e6      	bcc.n	800dfe8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e01a:	8bfb      	ldrh	r3, [r7, #30]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d01e      	beq.n	800e05e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e020:	2300      	movs	r3, #0
 800e022:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e024:	69bb      	ldr	r3, [r7, #24]
 800e026:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e02a:	461a      	mov	r2, r3
 800e02c:	f107 0310 	add.w	r3, r7, #16
 800e030:	6812      	ldr	r2, [r2, #0]
 800e032:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e034:	693a      	ldr	r2, [r7, #16]
 800e036:	6a3b      	ldr	r3, [r7, #32]
 800e038:	b2db      	uxtb	r3, r3
 800e03a:	00db      	lsls	r3, r3, #3
 800e03c:	fa22 f303 	lsr.w	r3, r2, r3
 800e040:	b2da      	uxtb	r2, r3
 800e042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e044:	701a      	strb	r2, [r3, #0]
      i++;
 800e046:	6a3b      	ldr	r3, [r7, #32]
 800e048:	3301      	adds	r3, #1
 800e04a:	623b      	str	r3, [r7, #32]
      pDest++;
 800e04c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e04e:	3301      	adds	r3, #1
 800e050:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800e052:	8bfb      	ldrh	r3, [r7, #30]
 800e054:	3b01      	subs	r3, #1
 800e056:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e058:	8bfb      	ldrh	r3, [r7, #30]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d1ea      	bne.n	800e034 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e05e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e060:	4618      	mov	r0, r3
 800e062:	372c      	adds	r7, #44	@ 0x2c
 800e064:	46bd      	mov	sp, r7
 800e066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06a:	4770      	bx	lr

0800e06c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800e06c:	b480      	push	{r7}
 800e06e:	b085      	sub	sp, #20
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	695b      	ldr	r3, [r3, #20]
 800e078:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	699b      	ldr	r3, [r3, #24]
 800e07e:	68fa      	ldr	r2, [r7, #12]
 800e080:	4013      	ands	r3, r2
 800e082:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e084:	68fb      	ldr	r3, [r7, #12]
}
 800e086:	4618      	mov	r0, r3
 800e088:	3714      	adds	r7, #20
 800e08a:	46bd      	mov	sp, r7
 800e08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e090:	4770      	bx	lr

0800e092 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800e092:	b480      	push	{r7}
 800e094:	b085      	sub	sp, #20
 800e096:	af00      	add	r7, sp, #0
 800e098:	6078      	str	r0, [r7, #4]
 800e09a:	460b      	mov	r3, r1
 800e09c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800e0a2:	78fb      	ldrb	r3, [r7, #3]
 800e0a4:	015a      	lsls	r2, r3, #5
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	4413      	add	r3, r2
 800e0aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e0ae:	689b      	ldr	r3, [r3, #8]
 800e0b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800e0b2:	78fb      	ldrb	r3, [r7, #3]
 800e0b4:	015a      	lsls	r2, r3, #5
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	4413      	add	r3, r2
 800e0ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e0be:	68db      	ldr	r3, [r3, #12]
 800e0c0:	68ba      	ldr	r2, [r7, #8]
 800e0c2:	4013      	ands	r3, r2
 800e0c4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e0c6:	68bb      	ldr	r3, [r7, #8]
}
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	3714      	adds	r7, #20
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d2:	4770      	bx	lr

0800e0d4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800e0d4:	b480      	push	{r7}
 800e0d6:	b083      	sub	sp, #12
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	695b      	ldr	r3, [r3, #20]
 800e0e0:	f003 0301 	and.w	r3, r3, #1
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	370c      	adds	r7, #12
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ee:	4770      	bx	lr

0800e0f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e0f0:	b480      	push	{r7}
 800e0f2:	b085      	sub	sp, #20
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	3301      	adds	r3, #1
 800e100:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e108:	d901      	bls.n	800e10e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e10a:	2303      	movs	r3, #3
 800e10c:	e01b      	b.n	800e146 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	691b      	ldr	r3, [r3, #16]
 800e112:	2b00      	cmp	r3, #0
 800e114:	daf2      	bge.n	800e0fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e116:	2300      	movs	r3, #0
 800e118:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	691b      	ldr	r3, [r3, #16]
 800e11e:	f043 0201 	orr.w	r2, r3, #1
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	3301      	adds	r3, #1
 800e12a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e132:	d901      	bls.n	800e138 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e134:	2303      	movs	r3, #3
 800e136:	e006      	b.n	800e146 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	691b      	ldr	r3, [r3, #16]
 800e13c:	f003 0301 	and.w	r3, r3, #1
 800e140:	2b01      	cmp	r3, #1
 800e142:	d0f0      	beq.n	800e126 <USB_CoreReset+0x36>

  return HAL_OK;
 800e144:	2300      	movs	r3, #0
}
 800e146:	4618      	mov	r0, r3
 800e148:	3714      	adds	r7, #20
 800e14a:	46bd      	mov	sp, r7
 800e14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e150:	4770      	bx	lr
	...

0800e154 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e154:	b084      	sub	sp, #16
 800e156:	b580      	push	{r7, lr}
 800e158:	b086      	sub	sp, #24
 800e15a:	af00      	add	r7, sp, #0
 800e15c:	6078      	str	r0, [r7, #4]
 800e15e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800e162:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e166:	2300      	movs	r3, #0
 800e168:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e174:	461a      	mov	r2, r3
 800e176:	2300      	movs	r3, #0
 800e178:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e17e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	68db      	ldr	r3, [r3, #12]
 800e18a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d119      	bne.n	800e1c6 <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800e192:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e196:	2b01      	cmp	r3, #1
 800e198:	d10a      	bne.n	800e1b0 <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	68fa      	ldr	r2, [r7, #12]
 800e1a4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e1a8:	f043 0304 	orr.w	r3, r3, #4
 800e1ac:	6013      	str	r3, [r2, #0]
 800e1ae:	e014      	b.n	800e1da <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	68fa      	ldr	r2, [r7, #12]
 800e1ba:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e1be:	f023 0304 	bic.w	r3, r3, #4
 800e1c2:	6013      	str	r3, [r2, #0]
 800e1c4:	e009      	b.n	800e1da <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	68fa      	ldr	r2, [r7, #12]
 800e1d0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e1d4:	f023 0304 	bic.w	r3, r3, #4
 800e1d8:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e1da:	2110      	movs	r1, #16
 800e1dc:	6878      	ldr	r0, [r7, #4]
 800e1de:	f7ff fe4f 	bl	800de80 <USB_FlushTxFifo>
 800e1e2:	4603      	mov	r3, r0
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d001      	beq.n	800e1ec <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 800e1e8:	2301      	movs	r3, #1
 800e1ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e1ec:	6878      	ldr	r0, [r7, #4]
 800e1ee:	f7ff fe79 	bl	800dee4 <USB_FlushRxFifo>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d001      	beq.n	800e1fc <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 800e1f8:	2301      	movs	r3, #1
 800e1fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	613b      	str	r3, [r7, #16]
 800e200:	e015      	b.n	800e22e <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800e202:	693b      	ldr	r3, [r7, #16]
 800e204:	015a      	lsls	r2, r3, #5
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	4413      	add	r3, r2
 800e20a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e20e:	461a      	mov	r2, r3
 800e210:	f04f 33ff 	mov.w	r3, #4294967295
 800e214:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800e216:	693b      	ldr	r3, [r7, #16]
 800e218:	015a      	lsls	r2, r3, #5
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	4413      	add	r3, r2
 800e21e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e222:	461a      	mov	r2, r3
 800e224:	2300      	movs	r3, #0
 800e226:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800e228:	693b      	ldr	r3, [r7, #16]
 800e22a:	3301      	adds	r3, #1
 800e22c:	613b      	str	r3, [r7, #16]
 800e22e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800e232:	461a      	mov	r2, r3
 800e234:	693b      	ldr	r3, [r7, #16]
 800e236:	4293      	cmp	r3, r2
 800e238:	d3e3      	bcc.n	800e202 <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	2200      	movs	r2, #0
 800e23e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	f04f 32ff 	mov.w	r2, #4294967295
 800e246:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	4a18      	ldr	r2, [pc, #96]	@ (800e2ac <USB_HostInit+0x158>)
 800e24c:	4293      	cmp	r3, r2
 800e24e:	d10b      	bne.n	800e268 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e256:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	4a15      	ldr	r2, [pc, #84]	@ (800e2b0 <USB_HostInit+0x15c>)
 800e25c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	4a14      	ldr	r2, [pc, #80]	@ (800e2b4 <USB_HostInit+0x160>)
 800e262:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800e266:	e009      	b.n	800e27c <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2280      	movs	r2, #128	@ 0x80
 800e26c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	4a11      	ldr	r2, [pc, #68]	@ (800e2b8 <USB_HostInit+0x164>)
 800e272:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	4a11      	ldr	r2, [pc, #68]	@ (800e2bc <USB_HostInit+0x168>)
 800e278:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e27c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e280:	2b00      	cmp	r3, #0
 800e282:	d105      	bne.n	800e290 <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	699b      	ldr	r3, [r3, #24]
 800e288:	f043 0210 	orr.w	r2, r3, #16
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	699a      	ldr	r2, [r3, #24]
 800e294:	4b0a      	ldr	r3, [pc, #40]	@ (800e2c0 <USB_HostInit+0x16c>)
 800e296:	4313      	orrs	r3, r2
 800e298:	687a      	ldr	r2, [r7, #4]
 800e29a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800e29c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e29e:	4618      	mov	r0, r3
 800e2a0:	3718      	adds	r7, #24
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e2a8:	b004      	add	sp, #16
 800e2aa:	4770      	bx	lr
 800e2ac:	40040000 	.word	0x40040000
 800e2b0:	01000200 	.word	0x01000200
 800e2b4:	00e00300 	.word	0x00e00300
 800e2b8:	00600080 	.word	0x00600080
 800e2bc:	004000e0 	.word	0x004000e0
 800e2c0:	a3200008 	.word	0xa3200008

0800e2c4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800e2c4:	b480      	push	{r7}
 800e2c6:	b085      	sub	sp, #20
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
 800e2cc:	460b      	mov	r3, r1
 800e2ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	68fa      	ldr	r2, [r7, #12]
 800e2de:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800e2e2:	f023 0303 	bic.w	r3, r3, #3
 800e2e6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e2ee:	681a      	ldr	r2, [r3, #0]
 800e2f0:	78fb      	ldrb	r3, [r7, #3]
 800e2f2:	f003 0303 	and.w	r3, r3, #3
 800e2f6:	68f9      	ldr	r1, [r7, #12]
 800e2f8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800e2fc:	4313      	orrs	r3, r2
 800e2fe:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800e300:	78fb      	ldrb	r3, [r7, #3]
 800e302:	2b01      	cmp	r3, #1
 800e304:	d107      	bne.n	800e316 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e30c:	461a      	mov	r2, r3
 800e30e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800e312:	6053      	str	r3, [r2, #4]
 800e314:	e00c      	b.n	800e330 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800e316:	78fb      	ldrb	r3, [r7, #3]
 800e318:	2b02      	cmp	r3, #2
 800e31a:	d107      	bne.n	800e32c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e322:	461a      	mov	r2, r3
 800e324:	f241 7370 	movw	r3, #6000	@ 0x1770
 800e328:	6053      	str	r3, [r2, #4]
 800e32a:	e001      	b.n	800e330 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800e32c:	2301      	movs	r3, #1
 800e32e:	e000      	b.n	800e332 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800e330:	2300      	movs	r3, #0
}
 800e332:	4618      	mov	r0, r3
 800e334:	3714      	adds	r7, #20
 800e336:	46bd      	mov	sp, r7
 800e338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33c:	4770      	bx	lr

0800e33e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800e33e:	b580      	push	{r7, lr}
 800e340:	b084      	sub	sp, #16
 800e342:	af00      	add	r7, sp, #0
 800e344:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800e34a:	2300      	movs	r3, #0
 800e34c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800e358:	68bb      	ldr	r3, [r7, #8]
 800e35a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800e35e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800e360:	68bb      	ldr	r3, [r7, #8]
 800e362:	68fa      	ldr	r2, [r7, #12]
 800e364:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800e368:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e36c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800e36e:	2064      	movs	r0, #100	@ 0x64
 800e370:	f7f4 ff04 	bl	800317c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800e374:	68bb      	ldr	r3, [r7, #8]
 800e376:	68fa      	ldr	r2, [r7, #12]
 800e378:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800e37c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e380:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800e382:	200a      	movs	r0, #10
 800e384:	f7f4 fefa 	bl	800317c <HAL_Delay>

  return HAL_OK;
 800e388:	2300      	movs	r3, #0
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	3710      	adds	r7, #16
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}

0800e392 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800e392:	b480      	push	{r7}
 800e394:	b085      	sub	sp, #20
 800e396:	af00      	add	r7, sp, #0
 800e398:	6078      	str	r0, [r7, #4]
 800e39a:	460b      	mov	r3, r1
 800e39c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800e3b0:	68bb      	ldr	r3, [r7, #8]
 800e3b2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800e3b6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800e3b8:	68bb      	ldr	r3, [r7, #8]
 800e3ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d109      	bne.n	800e3d6 <USB_DriveVbus+0x44>
 800e3c2:	78fb      	ldrb	r3, [r7, #3]
 800e3c4:	2b01      	cmp	r3, #1
 800e3c6:	d106      	bne.n	800e3d6 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800e3c8:	68bb      	ldr	r3, [r7, #8]
 800e3ca:	68fa      	ldr	r2, [r7, #12]
 800e3cc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800e3d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800e3d4:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800e3d6:	68bb      	ldr	r3, [r7, #8]
 800e3d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800e3dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e3e0:	d109      	bne.n	800e3f6 <USB_DriveVbus+0x64>
 800e3e2:	78fb      	ldrb	r3, [r7, #3]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d106      	bne.n	800e3f6 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800e3e8:	68bb      	ldr	r3, [r7, #8]
 800e3ea:	68fa      	ldr	r2, [r7, #12]
 800e3ec:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800e3f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e3f4:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800e3f6:	2300      	movs	r3, #0
}
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	3714      	adds	r7, #20
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e402:	4770      	bx	lr

0800e404 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800e404:	b480      	push	{r7}
 800e406:	b085      	sub	sp, #20
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800e410:	2300      	movs	r3, #0
 800e412:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800e41e:	68bb      	ldr	r3, [r7, #8]
 800e420:	0c5b      	lsrs	r3, r3, #17
 800e422:	f003 0303 	and.w	r3, r3, #3
}
 800e426:	4618      	mov	r0, r3
 800e428:	3714      	adds	r7, #20
 800e42a:	46bd      	mov	sp, r7
 800e42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e430:	4770      	bx	lr

0800e432 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800e432:	b480      	push	{r7}
 800e434:	b085      	sub	sp, #20
 800e436:	af00      	add	r7, sp, #0
 800e438:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e444:	689b      	ldr	r3, [r3, #8]
 800e446:	b29b      	uxth	r3, r3
}
 800e448:	4618      	mov	r0, r3
 800e44a:	3714      	adds	r7, #20
 800e44c:	46bd      	mov	sp, r7
 800e44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e452:	4770      	bx	lr

0800e454 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b088      	sub	sp, #32
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
 800e45c:	4608      	mov	r0, r1
 800e45e:	4611      	mov	r1, r2
 800e460:	461a      	mov	r2, r3
 800e462:	4603      	mov	r3, r0
 800e464:	70fb      	strb	r3, [r7, #3]
 800e466:	460b      	mov	r3, r1
 800e468:	70bb      	strb	r3, [r7, #2]
 800e46a:	4613      	mov	r3, r2
 800e46c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800e46e:	2300      	movs	r3, #0
 800e470:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800e476:	78fb      	ldrb	r3, [r7, #3]
 800e478:	015a      	lsls	r2, r3, #5
 800e47a:	693b      	ldr	r3, [r7, #16]
 800e47c:	4413      	add	r3, r2
 800e47e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e482:	461a      	mov	r2, r3
 800e484:	f04f 33ff 	mov.w	r3, #4294967295
 800e488:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800e48a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e48e:	2b03      	cmp	r3, #3
 800e490:	d87c      	bhi.n	800e58c <USB_HC_Init+0x138>
 800e492:	a201      	add	r2, pc, #4	@ (adr r2, 800e498 <USB_HC_Init+0x44>)
 800e494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e498:	0800e4a9 	.word	0x0800e4a9
 800e49c:	0800e54f 	.word	0x0800e54f
 800e4a0:	0800e4a9 	.word	0x0800e4a9
 800e4a4:	0800e511 	.word	0x0800e511
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800e4a8:	78fb      	ldrb	r3, [r7, #3]
 800e4aa:	015a      	lsls	r2, r3, #5
 800e4ac:	693b      	ldr	r3, [r7, #16]
 800e4ae:	4413      	add	r3, r2
 800e4b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e4b4:	461a      	mov	r2, r3
 800e4b6:	f240 439d 	movw	r3, #1181	@ 0x49d
 800e4ba:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800e4bc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	da10      	bge.n	800e4e6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800e4c4:	78fb      	ldrb	r3, [r7, #3]
 800e4c6:	015a      	lsls	r2, r3, #5
 800e4c8:	693b      	ldr	r3, [r7, #16]
 800e4ca:	4413      	add	r3, r2
 800e4cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e4d0:	68db      	ldr	r3, [r3, #12]
 800e4d2:	78fa      	ldrb	r2, [r7, #3]
 800e4d4:	0151      	lsls	r1, r2, #5
 800e4d6:	693a      	ldr	r2, [r7, #16]
 800e4d8:	440a      	add	r2, r1
 800e4da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e4de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e4e2:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800e4e4:	e055      	b.n	800e592 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	4a6f      	ldr	r2, [pc, #444]	@ (800e6a8 <USB_HC_Init+0x254>)
 800e4ea:	4293      	cmp	r3, r2
 800e4ec:	d151      	bne.n	800e592 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800e4ee:	78fb      	ldrb	r3, [r7, #3]
 800e4f0:	015a      	lsls	r2, r3, #5
 800e4f2:	693b      	ldr	r3, [r7, #16]
 800e4f4:	4413      	add	r3, r2
 800e4f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e4fa:	68db      	ldr	r3, [r3, #12]
 800e4fc:	78fa      	ldrb	r2, [r7, #3]
 800e4fe:	0151      	lsls	r1, r2, #5
 800e500:	693a      	ldr	r2, [r7, #16]
 800e502:	440a      	add	r2, r1
 800e504:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e508:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800e50c:	60d3      	str	r3, [r2, #12]
      break;
 800e50e:	e040      	b.n	800e592 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800e510:	78fb      	ldrb	r3, [r7, #3]
 800e512:	015a      	lsls	r2, r3, #5
 800e514:	693b      	ldr	r3, [r7, #16]
 800e516:	4413      	add	r3, r2
 800e518:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e51c:	461a      	mov	r2, r3
 800e51e:	f240 639d 	movw	r3, #1693	@ 0x69d
 800e522:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800e524:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	da34      	bge.n	800e596 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800e52c:	78fb      	ldrb	r3, [r7, #3]
 800e52e:	015a      	lsls	r2, r3, #5
 800e530:	693b      	ldr	r3, [r7, #16]
 800e532:	4413      	add	r3, r2
 800e534:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e538:	68db      	ldr	r3, [r3, #12]
 800e53a:	78fa      	ldrb	r2, [r7, #3]
 800e53c:	0151      	lsls	r1, r2, #5
 800e53e:	693a      	ldr	r2, [r7, #16]
 800e540:	440a      	add	r2, r1
 800e542:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e546:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e54a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800e54c:	e023      	b.n	800e596 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800e54e:	78fb      	ldrb	r3, [r7, #3]
 800e550:	015a      	lsls	r2, r3, #5
 800e552:	693b      	ldr	r3, [r7, #16]
 800e554:	4413      	add	r3, r2
 800e556:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e55a:	461a      	mov	r2, r3
 800e55c:	f240 2325 	movw	r3, #549	@ 0x225
 800e560:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800e562:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e566:	2b00      	cmp	r3, #0
 800e568:	da17      	bge.n	800e59a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800e56a:	78fb      	ldrb	r3, [r7, #3]
 800e56c:	015a      	lsls	r2, r3, #5
 800e56e:	693b      	ldr	r3, [r7, #16]
 800e570:	4413      	add	r3, r2
 800e572:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e576:	68db      	ldr	r3, [r3, #12]
 800e578:	78fa      	ldrb	r2, [r7, #3]
 800e57a:	0151      	lsls	r1, r2, #5
 800e57c:	693a      	ldr	r2, [r7, #16]
 800e57e:	440a      	add	r2, r1
 800e580:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e584:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800e588:	60d3      	str	r3, [r2, #12]
      }
      break;
 800e58a:	e006      	b.n	800e59a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800e58c:	2301      	movs	r3, #1
 800e58e:	77fb      	strb	r3, [r7, #31]
      break;
 800e590:	e004      	b.n	800e59c <USB_HC_Init+0x148>
      break;
 800e592:	bf00      	nop
 800e594:	e002      	b.n	800e59c <USB_HC_Init+0x148>
      break;
 800e596:	bf00      	nop
 800e598:	e000      	b.n	800e59c <USB_HC_Init+0x148>
      break;
 800e59a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800e59c:	78fb      	ldrb	r3, [r7, #3]
 800e59e:	015a      	lsls	r2, r3, #5
 800e5a0:	693b      	ldr	r3, [r7, #16]
 800e5a2:	4413      	add	r3, r2
 800e5a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e5a8:	461a      	mov	r2, r3
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800e5ae:	78fb      	ldrb	r3, [r7, #3]
 800e5b0:	015a      	lsls	r2, r3, #5
 800e5b2:	693b      	ldr	r3, [r7, #16]
 800e5b4:	4413      	add	r3, r2
 800e5b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e5ba:	68db      	ldr	r3, [r3, #12]
 800e5bc:	78fa      	ldrb	r2, [r7, #3]
 800e5be:	0151      	lsls	r1, r2, #5
 800e5c0:	693a      	ldr	r2, [r7, #16]
 800e5c2:	440a      	add	r2, r1
 800e5c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e5c8:	f043 0302 	orr.w	r3, r3, #2
 800e5cc:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800e5ce:	693b      	ldr	r3, [r7, #16]
 800e5d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e5d4:	699a      	ldr	r2, [r3, #24]
 800e5d6:	78fb      	ldrb	r3, [r7, #3]
 800e5d8:	f003 030f 	and.w	r3, r3, #15
 800e5dc:	2101      	movs	r1, #1
 800e5de:	fa01 f303 	lsl.w	r3, r1, r3
 800e5e2:	6939      	ldr	r1, [r7, #16]
 800e5e4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800e5e8:	4313      	orrs	r3, r2
 800e5ea:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	699b      	ldr	r3, [r3, #24]
 800e5f0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800e5f8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	da03      	bge.n	800e608 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800e600:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e604:	61bb      	str	r3, [r7, #24]
 800e606:	e001      	b.n	800e60c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800e608:	2300      	movs	r3, #0
 800e60a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800e60c:	6878      	ldr	r0, [r7, #4]
 800e60e:	f7ff fef9 	bl	800e404 <USB_GetHostSpeed>
 800e612:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800e614:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e618:	2b02      	cmp	r3, #2
 800e61a:	d106      	bne.n	800e62a <USB_HC_Init+0x1d6>
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	2b02      	cmp	r3, #2
 800e620:	d003      	beq.n	800e62a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800e622:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800e626:	617b      	str	r3, [r7, #20]
 800e628:	e001      	b.n	800e62e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800e62a:	2300      	movs	r3, #0
 800e62c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800e62e:	787b      	ldrb	r3, [r7, #1]
 800e630:	059b      	lsls	r3, r3, #22
 800e632:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800e636:	78bb      	ldrb	r3, [r7, #2]
 800e638:	02db      	lsls	r3, r3, #11
 800e63a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800e63e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800e640:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e644:	049b      	lsls	r3, r3, #18
 800e646:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800e64a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800e64c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800e64e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800e652:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800e654:	69bb      	ldr	r3, [r7, #24]
 800e656:	431a      	orrs	r2, r3
 800e658:	697b      	ldr	r3, [r7, #20]
 800e65a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800e65c:	78fa      	ldrb	r2, [r7, #3]
 800e65e:	0151      	lsls	r1, r2, #5
 800e660:	693a      	ldr	r2, [r7, #16]
 800e662:	440a      	add	r2, r1
 800e664:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800e668:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800e66c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800e66e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e672:	2b03      	cmp	r3, #3
 800e674:	d003      	beq.n	800e67e <USB_HC_Init+0x22a>
 800e676:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e67a:	2b01      	cmp	r3, #1
 800e67c:	d10f      	bne.n	800e69e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800e67e:	78fb      	ldrb	r3, [r7, #3]
 800e680:	015a      	lsls	r2, r3, #5
 800e682:	693b      	ldr	r3, [r7, #16]
 800e684:	4413      	add	r3, r2
 800e686:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	78fa      	ldrb	r2, [r7, #3]
 800e68e:	0151      	lsls	r1, r2, #5
 800e690:	693a      	ldr	r2, [r7, #16]
 800e692:	440a      	add	r2, r1
 800e694:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e698:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e69c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800e69e:	7ffb      	ldrb	r3, [r7, #31]
}
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	3720      	adds	r7, #32
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	bd80      	pop	{r7, pc}
 800e6a8:	40040000 	.word	0x40040000

0800e6ac <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b08c      	sub	sp, #48	@ 0x30
 800e6b0:	af02      	add	r7, sp, #8
 800e6b2:	60f8      	str	r0, [r7, #12]
 800e6b4:	60b9      	str	r1, [r7, #8]
 800e6b6:	4613      	mov	r3, r2
 800e6b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800e6be:	68bb      	ldr	r3, [r7, #8]
 800e6c0:	785b      	ldrb	r3, [r3, #1]
 800e6c2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800e6c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e6c8:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	4a5d      	ldr	r2, [pc, #372]	@ (800e844 <USB_HC_StartXfer+0x198>)
 800e6ce:	4293      	cmp	r3, r2
 800e6d0:	d12f      	bne.n	800e732 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800e6d2:	79fb      	ldrb	r3, [r7, #7]
 800e6d4:	2b01      	cmp	r3, #1
 800e6d6:	d11c      	bne.n	800e712 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800e6d8:	68bb      	ldr	r3, [r7, #8]
 800e6da:	7c9b      	ldrb	r3, [r3, #18]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d003      	beq.n	800e6e8 <USB_HC_StartXfer+0x3c>
 800e6e0:	68bb      	ldr	r3, [r7, #8]
 800e6e2:	7c9b      	ldrb	r3, [r3, #18]
 800e6e4:	2b02      	cmp	r3, #2
 800e6e6:	d124      	bne.n	800e732 <USB_HC_StartXfer+0x86>
 800e6e8:	68bb      	ldr	r3, [r7, #8]
 800e6ea:	799b      	ldrb	r3, [r3, #6]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d120      	bne.n	800e732 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800e6f0:	69fb      	ldr	r3, [r7, #28]
 800e6f2:	015a      	lsls	r2, r3, #5
 800e6f4:	6a3b      	ldr	r3, [r7, #32]
 800e6f6:	4413      	add	r3, r2
 800e6f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e6fc:	68db      	ldr	r3, [r3, #12]
 800e6fe:	69fa      	ldr	r2, [r7, #28]
 800e700:	0151      	lsls	r1, r2, #5
 800e702:	6a3a      	ldr	r2, [r7, #32]
 800e704:	440a      	add	r2, r1
 800e706:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e70a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e70e:	60d3      	str	r3, [r2, #12]
 800e710:	e00f      	b.n	800e732 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800e712:	68bb      	ldr	r3, [r7, #8]
 800e714:	791b      	ldrb	r3, [r3, #4]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d10b      	bne.n	800e732 <USB_HC_StartXfer+0x86>
 800e71a:	68bb      	ldr	r3, [r7, #8]
 800e71c:	795b      	ldrb	r3, [r3, #5]
 800e71e:	2b01      	cmp	r3, #1
 800e720:	d107      	bne.n	800e732 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800e722:	68bb      	ldr	r3, [r7, #8]
 800e724:	785b      	ldrb	r3, [r3, #1]
 800e726:	4619      	mov	r1, r3
 800e728:	68f8      	ldr	r0, [r7, #12]
 800e72a:	f000 fb6b 	bl	800ee04 <USB_DoPing>
        return HAL_OK;
 800e72e:	2300      	movs	r3, #0
 800e730:	e232      	b.n	800eb98 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800e732:	68bb      	ldr	r3, [r7, #8]
 800e734:	799b      	ldrb	r3, [r3, #6]
 800e736:	2b01      	cmp	r3, #1
 800e738:	d158      	bne.n	800e7ec <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800e73a:	2301      	movs	r3, #1
 800e73c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800e73e:	68bb      	ldr	r3, [r7, #8]
 800e740:	78db      	ldrb	r3, [r3, #3]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d007      	beq.n	800e756 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800e746:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e748:	68ba      	ldr	r2, [r7, #8]
 800e74a:	8a92      	ldrh	r2, [r2, #20]
 800e74c:	fb03 f202 	mul.w	r2, r3, r2
 800e750:	68bb      	ldr	r3, [r7, #8]
 800e752:	61da      	str	r2, [r3, #28]
 800e754:	e07c      	b.n	800e850 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800e756:	68bb      	ldr	r3, [r7, #8]
 800e758:	7c9b      	ldrb	r3, [r3, #18]
 800e75a:	2b01      	cmp	r3, #1
 800e75c:	d130      	bne.n	800e7c0 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800e75e:	68bb      	ldr	r3, [r7, #8]
 800e760:	6a1b      	ldr	r3, [r3, #32]
 800e762:	2bbc      	cmp	r3, #188	@ 0xbc
 800e764:	d918      	bls.n	800e798 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800e766:	68bb      	ldr	r3, [r7, #8]
 800e768:	8a9b      	ldrh	r3, [r3, #20]
 800e76a:	461a      	mov	r2, r3
 800e76c:	68bb      	ldr	r3, [r7, #8]
 800e76e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	69da      	ldr	r2, [r3, #28]
 800e774:	68bb      	ldr	r3, [r7, #8]
 800e776:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800e778:	68bb      	ldr	r3, [r7, #8]
 800e77a:	68db      	ldr	r3, [r3, #12]
 800e77c:	2b01      	cmp	r3, #1
 800e77e:	d003      	beq.n	800e788 <USB_HC_StartXfer+0xdc>
 800e780:	68bb      	ldr	r3, [r7, #8]
 800e782:	68db      	ldr	r3, [r3, #12]
 800e784:	2b02      	cmp	r3, #2
 800e786:	d103      	bne.n	800e790 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800e788:	68bb      	ldr	r3, [r7, #8]
 800e78a:	2202      	movs	r2, #2
 800e78c:	60da      	str	r2, [r3, #12]
 800e78e:	e05f      	b.n	800e850 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800e790:	68bb      	ldr	r3, [r7, #8]
 800e792:	2201      	movs	r2, #1
 800e794:	60da      	str	r2, [r3, #12]
 800e796:	e05b      	b.n	800e850 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800e798:	68bb      	ldr	r3, [r7, #8]
 800e79a:	6a1a      	ldr	r2, [r3, #32]
 800e79c:	68bb      	ldr	r3, [r7, #8]
 800e79e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800e7a0:	68bb      	ldr	r3, [r7, #8]
 800e7a2:	68db      	ldr	r3, [r3, #12]
 800e7a4:	2b01      	cmp	r3, #1
 800e7a6:	d007      	beq.n	800e7b8 <USB_HC_StartXfer+0x10c>
 800e7a8:	68bb      	ldr	r3, [r7, #8]
 800e7aa:	68db      	ldr	r3, [r3, #12]
 800e7ac:	2b02      	cmp	r3, #2
 800e7ae:	d003      	beq.n	800e7b8 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800e7b0:	68bb      	ldr	r3, [r7, #8]
 800e7b2:	2204      	movs	r2, #4
 800e7b4:	60da      	str	r2, [r3, #12]
 800e7b6:	e04b      	b.n	800e850 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800e7b8:	68bb      	ldr	r3, [r7, #8]
 800e7ba:	2203      	movs	r2, #3
 800e7bc:	60da      	str	r2, [r3, #12]
 800e7be:	e047      	b.n	800e850 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800e7c0:	79fb      	ldrb	r3, [r7, #7]
 800e7c2:	2b01      	cmp	r3, #1
 800e7c4:	d10d      	bne.n	800e7e2 <USB_HC_StartXfer+0x136>
 800e7c6:	68bb      	ldr	r3, [r7, #8]
 800e7c8:	6a1b      	ldr	r3, [r3, #32]
 800e7ca:	68ba      	ldr	r2, [r7, #8]
 800e7cc:	8a92      	ldrh	r2, [r2, #20]
 800e7ce:	4293      	cmp	r3, r2
 800e7d0:	d907      	bls.n	800e7e2 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800e7d2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e7d4:	68ba      	ldr	r2, [r7, #8]
 800e7d6:	8a92      	ldrh	r2, [r2, #20]
 800e7d8:	fb03 f202 	mul.w	r2, r3, r2
 800e7dc:	68bb      	ldr	r3, [r7, #8]
 800e7de:	61da      	str	r2, [r3, #28]
 800e7e0:	e036      	b.n	800e850 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800e7e2:	68bb      	ldr	r3, [r7, #8]
 800e7e4:	6a1a      	ldr	r2, [r3, #32]
 800e7e6:	68bb      	ldr	r3, [r7, #8]
 800e7e8:	61da      	str	r2, [r3, #28]
 800e7ea:	e031      	b.n	800e850 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800e7ec:	68bb      	ldr	r3, [r7, #8]
 800e7ee:	6a1b      	ldr	r3, [r3, #32]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d018      	beq.n	800e826 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800e7f4:	68bb      	ldr	r3, [r7, #8]
 800e7f6:	6a1b      	ldr	r3, [r3, #32]
 800e7f8:	68ba      	ldr	r2, [r7, #8]
 800e7fa:	8a92      	ldrh	r2, [r2, #20]
 800e7fc:	4413      	add	r3, r2
 800e7fe:	3b01      	subs	r3, #1
 800e800:	68ba      	ldr	r2, [r7, #8]
 800e802:	8a92      	ldrh	r2, [r2, #20]
 800e804:	fbb3 f3f2 	udiv	r3, r3, r2
 800e808:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800e80a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800e80c:	8b7b      	ldrh	r3, [r7, #26]
 800e80e:	429a      	cmp	r2, r3
 800e810:	d90b      	bls.n	800e82a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800e812:	8b7b      	ldrh	r3, [r7, #26]
 800e814:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800e816:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e818:	68ba      	ldr	r2, [r7, #8]
 800e81a:	8a92      	ldrh	r2, [r2, #20]
 800e81c:	fb03 f202 	mul.w	r2, r3, r2
 800e820:	68bb      	ldr	r3, [r7, #8]
 800e822:	61da      	str	r2, [r3, #28]
 800e824:	e001      	b.n	800e82a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800e826:	2301      	movs	r3, #1
 800e828:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800e82a:	68bb      	ldr	r3, [r7, #8]
 800e82c:	78db      	ldrb	r3, [r3, #3]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d00a      	beq.n	800e848 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800e832:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e834:	68ba      	ldr	r2, [r7, #8]
 800e836:	8a92      	ldrh	r2, [r2, #20]
 800e838:	fb03 f202 	mul.w	r2, r3, r2
 800e83c:	68bb      	ldr	r3, [r7, #8]
 800e83e:	61da      	str	r2, [r3, #28]
 800e840:	e006      	b.n	800e850 <USB_HC_StartXfer+0x1a4>
 800e842:	bf00      	nop
 800e844:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800e848:	68bb      	ldr	r3, [r7, #8]
 800e84a:	6a1a      	ldr	r2, [r3, #32]
 800e84c:	68bb      	ldr	r3, [r7, #8]
 800e84e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e850:	68bb      	ldr	r3, [r7, #8]
 800e852:	69db      	ldr	r3, [r3, #28]
 800e854:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e858:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e85a:	04d9      	lsls	r1, r3, #19
 800e85c:	4ba3      	ldr	r3, [pc, #652]	@ (800eaec <USB_HC_StartXfer+0x440>)
 800e85e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e860:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800e862:	68bb      	ldr	r3, [r7, #8]
 800e864:	7d9b      	ldrb	r3, [r3, #22]
 800e866:	075b      	lsls	r3, r3, #29
 800e868:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e86c:	69f9      	ldr	r1, [r7, #28]
 800e86e:	0148      	lsls	r0, r1, #5
 800e870:	6a39      	ldr	r1, [r7, #32]
 800e872:	4401      	add	r1, r0
 800e874:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e878:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e87a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800e87c:	79fb      	ldrb	r3, [r7, #7]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d009      	beq.n	800e896 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800e882:	68bb      	ldr	r3, [r7, #8]
 800e884:	6999      	ldr	r1, [r3, #24]
 800e886:	69fb      	ldr	r3, [r7, #28]
 800e888:	015a      	lsls	r2, r3, #5
 800e88a:	6a3b      	ldr	r3, [r7, #32]
 800e88c:	4413      	add	r3, r2
 800e88e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e892:	460a      	mov	r2, r1
 800e894:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800e896:	6a3b      	ldr	r3, [r7, #32]
 800e898:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e89c:	689b      	ldr	r3, [r3, #8]
 800e89e:	f003 0301 	and.w	r3, r3, #1
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	bf0c      	ite	eq
 800e8a6:	2301      	moveq	r3, #1
 800e8a8:	2300      	movne	r3, #0
 800e8aa:	b2db      	uxtb	r3, r3
 800e8ac:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800e8ae:	69fb      	ldr	r3, [r7, #28]
 800e8b0:	015a      	lsls	r2, r3, #5
 800e8b2:	6a3b      	ldr	r3, [r7, #32]
 800e8b4:	4413      	add	r3, r2
 800e8b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	69fa      	ldr	r2, [r7, #28]
 800e8be:	0151      	lsls	r1, r2, #5
 800e8c0:	6a3a      	ldr	r2, [r7, #32]
 800e8c2:	440a      	add	r2, r1
 800e8c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e8c8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e8cc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800e8ce:	69fb      	ldr	r3, [r7, #28]
 800e8d0:	015a      	lsls	r2, r3, #5
 800e8d2:	6a3b      	ldr	r3, [r7, #32]
 800e8d4:	4413      	add	r3, r2
 800e8d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e8da:	681a      	ldr	r2, [r3, #0]
 800e8dc:	7e7b      	ldrb	r3, [r7, #25]
 800e8de:	075b      	lsls	r3, r3, #29
 800e8e0:	69f9      	ldr	r1, [r7, #28]
 800e8e2:	0148      	lsls	r0, r1, #5
 800e8e4:	6a39      	ldr	r1, [r7, #32]
 800e8e6:	4401      	add	r1, r0
 800e8e8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800e8ec:	4313      	orrs	r3, r2
 800e8ee:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800e8f0:	68bb      	ldr	r3, [r7, #8]
 800e8f2:	799b      	ldrb	r3, [r3, #6]
 800e8f4:	2b01      	cmp	r3, #1
 800e8f6:	f040 80c3 	bne.w	800ea80 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800e8fa:	68bb      	ldr	r3, [r7, #8]
 800e8fc:	7c5b      	ldrb	r3, [r3, #17]
 800e8fe:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800e900:	68ba      	ldr	r2, [r7, #8]
 800e902:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800e904:	4313      	orrs	r3, r2
 800e906:	69fa      	ldr	r2, [r7, #28]
 800e908:	0151      	lsls	r1, r2, #5
 800e90a:	6a3a      	ldr	r2, [r7, #32]
 800e90c:	440a      	add	r2, r1
 800e90e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800e912:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800e916:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800e918:	69fb      	ldr	r3, [r7, #28]
 800e91a:	015a      	lsls	r2, r3, #5
 800e91c:	6a3b      	ldr	r3, [r7, #32]
 800e91e:	4413      	add	r3, r2
 800e920:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e924:	68db      	ldr	r3, [r3, #12]
 800e926:	69fa      	ldr	r2, [r7, #28]
 800e928:	0151      	lsls	r1, r2, #5
 800e92a:	6a3a      	ldr	r2, [r7, #32]
 800e92c:	440a      	add	r2, r1
 800e92e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e932:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800e936:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800e938:	68bb      	ldr	r3, [r7, #8]
 800e93a:	79db      	ldrb	r3, [r3, #7]
 800e93c:	2b01      	cmp	r3, #1
 800e93e:	d123      	bne.n	800e988 <USB_HC_StartXfer+0x2dc>
 800e940:	68bb      	ldr	r3, [r7, #8]
 800e942:	78db      	ldrb	r3, [r3, #3]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d11f      	bne.n	800e988 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800e948:	69fb      	ldr	r3, [r7, #28]
 800e94a:	015a      	lsls	r2, r3, #5
 800e94c:	6a3b      	ldr	r3, [r7, #32]
 800e94e:	4413      	add	r3, r2
 800e950:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e954:	685b      	ldr	r3, [r3, #4]
 800e956:	69fa      	ldr	r2, [r7, #28]
 800e958:	0151      	lsls	r1, r2, #5
 800e95a:	6a3a      	ldr	r2, [r7, #32]
 800e95c:	440a      	add	r2, r1
 800e95e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e962:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e966:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800e968:	69fb      	ldr	r3, [r7, #28]
 800e96a:	015a      	lsls	r2, r3, #5
 800e96c:	6a3b      	ldr	r3, [r7, #32]
 800e96e:	4413      	add	r3, r2
 800e970:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e974:	68db      	ldr	r3, [r3, #12]
 800e976:	69fa      	ldr	r2, [r7, #28]
 800e978:	0151      	lsls	r1, r2, #5
 800e97a:	6a3a      	ldr	r2, [r7, #32]
 800e97c:	440a      	add	r2, r1
 800e97e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e982:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e986:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800e988:	68bb      	ldr	r3, [r7, #8]
 800e98a:	7c9b      	ldrb	r3, [r3, #18]
 800e98c:	2b01      	cmp	r3, #1
 800e98e:	d003      	beq.n	800e998 <USB_HC_StartXfer+0x2ec>
 800e990:	68bb      	ldr	r3, [r7, #8]
 800e992:	7c9b      	ldrb	r3, [r3, #18]
 800e994:	2b03      	cmp	r3, #3
 800e996:	d117      	bne.n	800e9c8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800e998:	68bb      	ldr	r3, [r7, #8]
 800e99a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800e99c:	2b01      	cmp	r3, #1
 800e99e:	d113      	bne.n	800e9c8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800e9a0:	68bb      	ldr	r3, [r7, #8]
 800e9a2:	78db      	ldrb	r3, [r3, #3]
 800e9a4:	2b01      	cmp	r3, #1
 800e9a6:	d10f      	bne.n	800e9c8 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800e9a8:	69fb      	ldr	r3, [r7, #28]
 800e9aa:	015a      	lsls	r2, r3, #5
 800e9ac:	6a3b      	ldr	r3, [r7, #32]
 800e9ae:	4413      	add	r3, r2
 800e9b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e9b4:	685b      	ldr	r3, [r3, #4]
 800e9b6:	69fa      	ldr	r2, [r7, #28]
 800e9b8:	0151      	lsls	r1, r2, #5
 800e9ba:	6a3a      	ldr	r2, [r7, #32]
 800e9bc:	440a      	add	r2, r1
 800e9be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e9c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e9c6:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800e9c8:	68bb      	ldr	r3, [r7, #8]
 800e9ca:	7c9b      	ldrb	r3, [r3, #18]
 800e9cc:	2b01      	cmp	r3, #1
 800e9ce:	d162      	bne.n	800ea96 <USB_HC_StartXfer+0x3ea>
 800e9d0:	68bb      	ldr	r3, [r7, #8]
 800e9d2:	78db      	ldrb	r3, [r3, #3]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d15e      	bne.n	800ea96 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800e9d8:	68bb      	ldr	r3, [r7, #8]
 800e9da:	68db      	ldr	r3, [r3, #12]
 800e9dc:	3b01      	subs	r3, #1
 800e9de:	2b03      	cmp	r3, #3
 800e9e0:	d858      	bhi.n	800ea94 <USB_HC_StartXfer+0x3e8>
 800e9e2:	a201      	add	r2, pc, #4	@ (adr r2, 800e9e8 <USB_HC_StartXfer+0x33c>)
 800e9e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9e8:	0800e9f9 	.word	0x0800e9f9
 800e9ec:	0800ea1b 	.word	0x0800ea1b
 800e9f0:	0800ea3d 	.word	0x0800ea3d
 800e9f4:	0800ea5f 	.word	0x0800ea5f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800e9f8:	69fb      	ldr	r3, [r7, #28]
 800e9fa:	015a      	lsls	r2, r3, #5
 800e9fc:	6a3b      	ldr	r3, [r7, #32]
 800e9fe:	4413      	add	r3, r2
 800ea00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ea04:	685b      	ldr	r3, [r3, #4]
 800ea06:	69fa      	ldr	r2, [r7, #28]
 800ea08:	0151      	lsls	r1, r2, #5
 800ea0a:	6a3a      	ldr	r2, [r7, #32]
 800ea0c:	440a      	add	r2, r1
 800ea0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ea12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ea16:	6053      	str	r3, [r2, #4]
          break;
 800ea18:	e03d      	b.n	800ea96 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800ea1a:	69fb      	ldr	r3, [r7, #28]
 800ea1c:	015a      	lsls	r2, r3, #5
 800ea1e:	6a3b      	ldr	r3, [r7, #32]
 800ea20:	4413      	add	r3, r2
 800ea22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ea26:	685b      	ldr	r3, [r3, #4]
 800ea28:	69fa      	ldr	r2, [r7, #28]
 800ea2a:	0151      	lsls	r1, r2, #5
 800ea2c:	6a3a      	ldr	r2, [r7, #32]
 800ea2e:	440a      	add	r2, r1
 800ea30:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ea34:	f043 030e 	orr.w	r3, r3, #14
 800ea38:	6053      	str	r3, [r2, #4]
          break;
 800ea3a:	e02c      	b.n	800ea96 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800ea3c:	69fb      	ldr	r3, [r7, #28]
 800ea3e:	015a      	lsls	r2, r3, #5
 800ea40:	6a3b      	ldr	r3, [r7, #32]
 800ea42:	4413      	add	r3, r2
 800ea44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ea48:	685b      	ldr	r3, [r3, #4]
 800ea4a:	69fa      	ldr	r2, [r7, #28]
 800ea4c:	0151      	lsls	r1, r2, #5
 800ea4e:	6a3a      	ldr	r2, [r7, #32]
 800ea50:	440a      	add	r2, r1
 800ea52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ea56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ea5a:	6053      	str	r3, [r2, #4]
          break;
 800ea5c:	e01b      	b.n	800ea96 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800ea5e:	69fb      	ldr	r3, [r7, #28]
 800ea60:	015a      	lsls	r2, r3, #5
 800ea62:	6a3b      	ldr	r3, [r7, #32]
 800ea64:	4413      	add	r3, r2
 800ea66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ea6a:	685b      	ldr	r3, [r3, #4]
 800ea6c:	69fa      	ldr	r2, [r7, #28]
 800ea6e:	0151      	lsls	r1, r2, #5
 800ea70:	6a3a      	ldr	r2, [r7, #32]
 800ea72:	440a      	add	r2, r1
 800ea74:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ea78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ea7c:	6053      	str	r3, [r2, #4]
          break;
 800ea7e:	e00a      	b.n	800ea96 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800ea80:	69fb      	ldr	r3, [r7, #28]
 800ea82:	015a      	lsls	r2, r3, #5
 800ea84:	6a3b      	ldr	r3, [r7, #32]
 800ea86:	4413      	add	r3, r2
 800ea88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ea8c:	461a      	mov	r2, r3
 800ea8e:	2300      	movs	r3, #0
 800ea90:	6053      	str	r3, [r2, #4]
 800ea92:	e000      	b.n	800ea96 <USB_HC_StartXfer+0x3ea>
          break;
 800ea94:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800ea96:	69fb      	ldr	r3, [r7, #28]
 800ea98:	015a      	lsls	r2, r3, #5
 800ea9a:	6a3b      	ldr	r3, [r7, #32]
 800ea9c:	4413      	add	r3, r2
 800ea9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800eaa6:	693b      	ldr	r3, [r7, #16]
 800eaa8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800eaac:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800eaae:	68bb      	ldr	r3, [r7, #8]
 800eab0:	78db      	ldrb	r3, [r3, #3]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d004      	beq.n	800eac0 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800eab6:	693b      	ldr	r3, [r7, #16]
 800eab8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800eabc:	613b      	str	r3, [r7, #16]
 800eabe:	e003      	b.n	800eac8 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800eac0:	693b      	ldr	r3, [r7, #16]
 800eac2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800eac6:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800eac8:	693b      	ldr	r3, [r7, #16]
 800eaca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800eace:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800ead0:	69fb      	ldr	r3, [r7, #28]
 800ead2:	015a      	lsls	r2, r3, #5
 800ead4:	6a3b      	ldr	r3, [r7, #32]
 800ead6:	4413      	add	r3, r2
 800ead8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eadc:	461a      	mov	r2, r3
 800eade:	693b      	ldr	r3, [r7, #16]
 800eae0:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800eae2:	79fb      	ldrb	r3, [r7, #7]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d003      	beq.n	800eaf0 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800eae8:	2300      	movs	r3, #0
 800eaea:	e055      	b.n	800eb98 <USB_HC_StartXfer+0x4ec>
 800eaec:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800eaf0:	68bb      	ldr	r3, [r7, #8]
 800eaf2:	78db      	ldrb	r3, [r3, #3]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d14e      	bne.n	800eb96 <USB_HC_StartXfer+0x4ea>
 800eaf8:	68bb      	ldr	r3, [r7, #8]
 800eafa:	6a1b      	ldr	r3, [r3, #32]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d04a      	beq.n	800eb96 <USB_HC_StartXfer+0x4ea>
 800eb00:	68bb      	ldr	r3, [r7, #8]
 800eb02:	79db      	ldrb	r3, [r3, #7]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d146      	bne.n	800eb96 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800eb08:	68bb      	ldr	r3, [r7, #8]
 800eb0a:	7c9b      	ldrb	r3, [r3, #18]
 800eb0c:	2b03      	cmp	r3, #3
 800eb0e:	d831      	bhi.n	800eb74 <USB_HC_StartXfer+0x4c8>
 800eb10:	a201      	add	r2, pc, #4	@ (adr r2, 800eb18 <USB_HC_StartXfer+0x46c>)
 800eb12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb16:	bf00      	nop
 800eb18:	0800eb29 	.word	0x0800eb29
 800eb1c:	0800eb4d 	.word	0x0800eb4d
 800eb20:	0800eb29 	.word	0x0800eb29
 800eb24:	0800eb4d 	.word	0x0800eb4d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800eb28:	68bb      	ldr	r3, [r7, #8]
 800eb2a:	6a1b      	ldr	r3, [r3, #32]
 800eb2c:	3303      	adds	r3, #3
 800eb2e:	089b      	lsrs	r3, r3, #2
 800eb30:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800eb32:	8afa      	ldrh	r2, [r7, #22]
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb38:	b29b      	uxth	r3, r3
 800eb3a:	429a      	cmp	r2, r3
 800eb3c:	d91c      	bls.n	800eb78 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	699b      	ldr	r3, [r3, #24]
 800eb42:	f043 0220 	orr.w	r2, r3, #32
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	619a      	str	r2, [r3, #24]
        }
        break;
 800eb4a:	e015      	b.n	800eb78 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800eb4c:	68bb      	ldr	r3, [r7, #8]
 800eb4e:	6a1b      	ldr	r3, [r3, #32]
 800eb50:	3303      	adds	r3, #3
 800eb52:	089b      	lsrs	r3, r3, #2
 800eb54:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800eb56:	8afa      	ldrh	r2, [r7, #22]
 800eb58:	6a3b      	ldr	r3, [r7, #32]
 800eb5a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800eb5e:	691b      	ldr	r3, [r3, #16]
 800eb60:	b29b      	uxth	r3, r3
 800eb62:	429a      	cmp	r2, r3
 800eb64:	d90a      	bls.n	800eb7c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	699b      	ldr	r3, [r3, #24]
 800eb6a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	619a      	str	r2, [r3, #24]
        }
        break;
 800eb72:	e003      	b.n	800eb7c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800eb74:	bf00      	nop
 800eb76:	e002      	b.n	800eb7e <USB_HC_StartXfer+0x4d2>
        break;
 800eb78:	bf00      	nop
 800eb7a:	e000      	b.n	800eb7e <USB_HC_StartXfer+0x4d2>
        break;
 800eb7c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	6999      	ldr	r1, [r3, #24]
 800eb82:	68bb      	ldr	r3, [r7, #8]
 800eb84:	785a      	ldrb	r2, [r3, #1]
 800eb86:	68bb      	ldr	r3, [r7, #8]
 800eb88:	6a1b      	ldr	r3, [r3, #32]
 800eb8a:	b29b      	uxth	r3, r3
 800eb8c:	2000      	movs	r0, #0
 800eb8e:	9000      	str	r0, [sp, #0]
 800eb90:	68f8      	ldr	r0, [r7, #12]
 800eb92:	f7ff f9d5 	bl	800df40 <USB_WritePacket>
  }

  return HAL_OK;
 800eb96:	2300      	movs	r3, #0
}
 800eb98:	4618      	mov	r0, r3
 800eb9a:	3728      	adds	r7, #40	@ 0x28
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	bd80      	pop	{r7, pc}

0800eba0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800eba0:	b480      	push	{r7}
 800eba2:	b085      	sub	sp, #20
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ebb2:	695b      	ldr	r3, [r3, #20]
 800ebb4:	b29b      	uxth	r3, r3
}
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	3714      	adds	r7, #20
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc0:	4770      	bx	lr

0800ebc2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800ebc2:	b480      	push	{r7}
 800ebc4:	b089      	sub	sp, #36	@ 0x24
 800ebc6:	af00      	add	r7, sp, #0
 800ebc8:	6078      	str	r0, [r7, #4]
 800ebca:	460b      	mov	r3, r1
 800ebcc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800ebd2:	78fb      	ldrb	r3, [r7, #3]
 800ebd4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800ebda:	69bb      	ldr	r3, [r7, #24]
 800ebdc:	015a      	lsls	r2, r3, #5
 800ebde:	69fb      	ldr	r3, [r7, #28]
 800ebe0:	4413      	add	r3, r2
 800ebe2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	0c9b      	lsrs	r3, r3, #18
 800ebea:	f003 0303 	and.w	r3, r3, #3
 800ebee:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800ebf0:	69bb      	ldr	r3, [r7, #24]
 800ebf2:	015a      	lsls	r2, r3, #5
 800ebf4:	69fb      	ldr	r3, [r7, #28]
 800ebf6:	4413      	add	r3, r2
 800ebf8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	0fdb      	lsrs	r3, r3, #31
 800ec00:	f003 0301 	and.w	r3, r3, #1
 800ec04:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800ec06:	69bb      	ldr	r3, [r7, #24]
 800ec08:	015a      	lsls	r2, r3, #5
 800ec0a:	69fb      	ldr	r3, [r7, #28]
 800ec0c:	4413      	add	r3, r2
 800ec0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ec12:	685b      	ldr	r3, [r3, #4]
 800ec14:	0fdb      	lsrs	r3, r3, #31
 800ec16:	f003 0301 	and.w	r3, r3, #1
 800ec1a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	689b      	ldr	r3, [r3, #8]
 800ec20:	f003 0320 	and.w	r3, r3, #32
 800ec24:	2b20      	cmp	r3, #32
 800ec26:	d10d      	bne.n	800ec44 <USB_HC_Halt+0x82>
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d10a      	bne.n	800ec44 <USB_HC_Halt+0x82>
 800ec2e:	693b      	ldr	r3, [r7, #16]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d005      	beq.n	800ec40 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800ec34:	697b      	ldr	r3, [r7, #20]
 800ec36:	2b01      	cmp	r3, #1
 800ec38:	d002      	beq.n	800ec40 <USB_HC_Halt+0x7e>
 800ec3a:	697b      	ldr	r3, [r7, #20]
 800ec3c:	2b03      	cmp	r3, #3
 800ec3e:	d101      	bne.n	800ec44 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800ec40:	2300      	movs	r3, #0
 800ec42:	e0d8      	b.n	800edf6 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800ec44:	697b      	ldr	r3, [r7, #20]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d002      	beq.n	800ec50 <USB_HC_Halt+0x8e>
 800ec4a:	697b      	ldr	r3, [r7, #20]
 800ec4c:	2b02      	cmp	r3, #2
 800ec4e:	d173      	bne.n	800ed38 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ec50:	69bb      	ldr	r3, [r7, #24]
 800ec52:	015a      	lsls	r2, r3, #5
 800ec54:	69fb      	ldr	r3, [r7, #28]
 800ec56:	4413      	add	r3, r2
 800ec58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	69ba      	ldr	r2, [r7, #24]
 800ec60:	0151      	lsls	r1, r2, #5
 800ec62:	69fa      	ldr	r2, [r7, #28]
 800ec64:	440a      	add	r2, r1
 800ec66:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ec6a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ec6e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	689b      	ldr	r3, [r3, #8]
 800ec74:	f003 0320 	and.w	r3, r3, #32
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d14a      	bne.n	800ed12 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec80:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d133      	bne.n	800ecf0 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ec88:	69bb      	ldr	r3, [r7, #24]
 800ec8a:	015a      	lsls	r2, r3, #5
 800ec8c:	69fb      	ldr	r3, [r7, #28]
 800ec8e:	4413      	add	r3, r2
 800ec90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	69ba      	ldr	r2, [r7, #24]
 800ec98:	0151      	lsls	r1, r2, #5
 800ec9a:	69fa      	ldr	r2, [r7, #28]
 800ec9c:	440a      	add	r2, r1
 800ec9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800eca2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800eca6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800eca8:	69bb      	ldr	r3, [r7, #24]
 800ecaa:	015a      	lsls	r2, r3, #5
 800ecac:	69fb      	ldr	r3, [r7, #28]
 800ecae:	4413      	add	r3, r2
 800ecb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	69ba      	ldr	r2, [r7, #24]
 800ecb8:	0151      	lsls	r1, r2, #5
 800ecba:	69fa      	ldr	r2, [r7, #28]
 800ecbc:	440a      	add	r2, r1
 800ecbe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ecc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ecc6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800ecc8:	68bb      	ldr	r3, [r7, #8]
 800ecca:	3301      	adds	r3, #1
 800eccc:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800ecce:	68bb      	ldr	r3, [r7, #8]
 800ecd0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ecd4:	d82e      	bhi.n	800ed34 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ecd6:	69bb      	ldr	r3, [r7, #24]
 800ecd8:	015a      	lsls	r2, r3, #5
 800ecda:	69fb      	ldr	r3, [r7, #28]
 800ecdc:	4413      	add	r3, r2
 800ecde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ece8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ecec:	d0ec      	beq.n	800ecc8 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ecee:	e081      	b.n	800edf4 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ecf0:	69bb      	ldr	r3, [r7, #24]
 800ecf2:	015a      	lsls	r2, r3, #5
 800ecf4:	69fb      	ldr	r3, [r7, #28]
 800ecf6:	4413      	add	r3, r2
 800ecf8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	69ba      	ldr	r2, [r7, #24]
 800ed00:	0151      	lsls	r1, r2, #5
 800ed02:	69fa      	ldr	r2, [r7, #28]
 800ed04:	440a      	add	r2, r1
 800ed06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ed0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ed0e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ed10:	e070      	b.n	800edf4 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ed12:	69bb      	ldr	r3, [r7, #24]
 800ed14:	015a      	lsls	r2, r3, #5
 800ed16:	69fb      	ldr	r3, [r7, #28]
 800ed18:	4413      	add	r3, r2
 800ed1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	69ba      	ldr	r2, [r7, #24]
 800ed22:	0151      	lsls	r1, r2, #5
 800ed24:	69fa      	ldr	r2, [r7, #28]
 800ed26:	440a      	add	r2, r1
 800ed28:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ed2c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ed30:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ed32:	e05f      	b.n	800edf4 <USB_HC_Halt+0x232>
            break;
 800ed34:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ed36:	e05d      	b.n	800edf4 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ed38:	69bb      	ldr	r3, [r7, #24]
 800ed3a:	015a      	lsls	r2, r3, #5
 800ed3c:	69fb      	ldr	r3, [r7, #28]
 800ed3e:	4413      	add	r3, r2
 800ed40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	69ba      	ldr	r2, [r7, #24]
 800ed48:	0151      	lsls	r1, r2, #5
 800ed4a:	69fa      	ldr	r2, [r7, #28]
 800ed4c:	440a      	add	r2, r1
 800ed4e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ed52:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ed56:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800ed58:	69fb      	ldr	r3, [r7, #28]
 800ed5a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ed5e:	691b      	ldr	r3, [r3, #16]
 800ed60:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d133      	bne.n	800edd0 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ed68:	69bb      	ldr	r3, [r7, #24]
 800ed6a:	015a      	lsls	r2, r3, #5
 800ed6c:	69fb      	ldr	r3, [r7, #28]
 800ed6e:	4413      	add	r3, r2
 800ed70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	69ba      	ldr	r2, [r7, #24]
 800ed78:	0151      	lsls	r1, r2, #5
 800ed7a:	69fa      	ldr	r2, [r7, #28]
 800ed7c:	440a      	add	r2, r1
 800ed7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ed82:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ed86:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ed88:	69bb      	ldr	r3, [r7, #24]
 800ed8a:	015a      	lsls	r2, r3, #5
 800ed8c:	69fb      	ldr	r3, [r7, #28]
 800ed8e:	4413      	add	r3, r2
 800ed90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	69ba      	ldr	r2, [r7, #24]
 800ed98:	0151      	lsls	r1, r2, #5
 800ed9a:	69fa      	ldr	r2, [r7, #28]
 800ed9c:	440a      	add	r2, r1
 800ed9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800eda2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800eda6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800eda8:	68bb      	ldr	r3, [r7, #8]
 800edaa:	3301      	adds	r3, #1
 800edac:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800edae:	68bb      	ldr	r3, [r7, #8]
 800edb0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800edb4:	d81d      	bhi.n	800edf2 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800edb6:	69bb      	ldr	r3, [r7, #24]
 800edb8:	015a      	lsls	r2, r3, #5
 800edba:	69fb      	ldr	r3, [r7, #28]
 800edbc:	4413      	add	r3, r2
 800edbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800edc8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800edcc:	d0ec      	beq.n	800eda8 <USB_HC_Halt+0x1e6>
 800edce:	e011      	b.n	800edf4 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800edd0:	69bb      	ldr	r3, [r7, #24]
 800edd2:	015a      	lsls	r2, r3, #5
 800edd4:	69fb      	ldr	r3, [r7, #28]
 800edd6:	4413      	add	r3, r2
 800edd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	69ba      	ldr	r2, [r7, #24]
 800ede0:	0151      	lsls	r1, r2, #5
 800ede2:	69fa      	ldr	r2, [r7, #28]
 800ede4:	440a      	add	r2, r1
 800ede6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800edea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800edee:	6013      	str	r3, [r2, #0]
 800edf0:	e000      	b.n	800edf4 <USB_HC_Halt+0x232>
          break;
 800edf2:	bf00      	nop
    }
  }

  return HAL_OK;
 800edf4:	2300      	movs	r3, #0
}
 800edf6:	4618      	mov	r0, r3
 800edf8:	3724      	adds	r7, #36	@ 0x24
 800edfa:	46bd      	mov	sp, r7
 800edfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee00:	4770      	bx	lr
	...

0800ee04 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800ee04:	b480      	push	{r7}
 800ee06:	b087      	sub	sp, #28
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
 800ee0c:	460b      	mov	r3, r1
 800ee0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800ee14:	78fb      	ldrb	r3, [r7, #3]
 800ee16:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800ee18:	2301      	movs	r3, #1
 800ee1a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	04da      	lsls	r2, r3, #19
 800ee20:	4b15      	ldr	r3, [pc, #84]	@ (800ee78 <USB_DoPing+0x74>)
 800ee22:	4013      	ands	r3, r2
 800ee24:	693a      	ldr	r2, [r7, #16]
 800ee26:	0151      	lsls	r1, r2, #5
 800ee28:	697a      	ldr	r2, [r7, #20]
 800ee2a:	440a      	add	r2, r1
 800ee2c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ee30:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ee34:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800ee36:	693b      	ldr	r3, [r7, #16]
 800ee38:	015a      	lsls	r2, r3, #5
 800ee3a:	697b      	ldr	r3, [r7, #20]
 800ee3c:	4413      	add	r3, r2
 800ee3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ee46:	68bb      	ldr	r3, [r7, #8]
 800ee48:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ee4c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ee4e:	68bb      	ldr	r3, [r7, #8]
 800ee50:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ee54:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800ee56:	693b      	ldr	r3, [r7, #16]
 800ee58:	015a      	lsls	r2, r3, #5
 800ee5a:	697b      	ldr	r3, [r7, #20]
 800ee5c:	4413      	add	r3, r2
 800ee5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ee62:	461a      	mov	r2, r3
 800ee64:	68bb      	ldr	r3, [r7, #8]
 800ee66:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800ee68:	2300      	movs	r3, #0
}
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	371c      	adds	r7, #28
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee74:	4770      	bx	lr
 800ee76:	bf00      	nop
 800ee78:	1ff80000 	.word	0x1ff80000

0800ee7c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b088      	sub	sp, #32
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800ee84:	2300      	movs	r3, #0
 800ee86:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800ee90:	6878      	ldr	r0, [r7, #4]
 800ee92:	f7fe ff98 	bl	800ddc6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ee96:	2110      	movs	r1, #16
 800ee98:	6878      	ldr	r0, [r7, #4]
 800ee9a:	f7fe fff1 	bl	800de80 <USB_FlushTxFifo>
 800ee9e:	4603      	mov	r3, r0
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d001      	beq.n	800eea8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800eea4:	2301      	movs	r3, #1
 800eea6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800eea8:	6878      	ldr	r0, [r7, #4]
 800eeaa:	f7ff f81b 	bl	800dee4 <USB_FlushRxFifo>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d001      	beq.n	800eeb8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800eeb4:	2301      	movs	r3, #1
 800eeb6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800eeb8:	2300      	movs	r3, #0
 800eeba:	61bb      	str	r3, [r7, #24]
 800eebc:	e01f      	b.n	800eefe <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800eebe:	69bb      	ldr	r3, [r7, #24]
 800eec0:	015a      	lsls	r2, r3, #5
 800eec2:	697b      	ldr	r3, [r7, #20]
 800eec4:	4413      	add	r3, r2
 800eec6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800eece:	693b      	ldr	r3, [r7, #16]
 800eed0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800eed4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800eed6:	693b      	ldr	r3, [r7, #16]
 800eed8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800eedc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800eede:	693b      	ldr	r3, [r7, #16]
 800eee0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800eee4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800eee6:	69bb      	ldr	r3, [r7, #24]
 800eee8:	015a      	lsls	r2, r3, #5
 800eeea:	697b      	ldr	r3, [r7, #20]
 800eeec:	4413      	add	r3, r2
 800eeee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800eef2:	461a      	mov	r2, r3
 800eef4:	693b      	ldr	r3, [r7, #16]
 800eef6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800eef8:	69bb      	ldr	r3, [r7, #24]
 800eefa:	3301      	adds	r3, #1
 800eefc:	61bb      	str	r3, [r7, #24]
 800eefe:	69bb      	ldr	r3, [r7, #24]
 800ef00:	2b0f      	cmp	r3, #15
 800ef02:	d9dc      	bls.n	800eebe <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800ef04:	2300      	movs	r3, #0
 800ef06:	61bb      	str	r3, [r7, #24]
 800ef08:	e034      	b.n	800ef74 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800ef0a:	69bb      	ldr	r3, [r7, #24]
 800ef0c:	015a      	lsls	r2, r3, #5
 800ef0e:	697b      	ldr	r3, [r7, #20]
 800ef10:	4413      	add	r3, r2
 800ef12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800ef1a:	693b      	ldr	r3, [r7, #16]
 800ef1c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ef20:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800ef22:	693b      	ldr	r3, [r7, #16]
 800ef24:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ef28:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ef2a:	693b      	ldr	r3, [r7, #16]
 800ef2c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ef30:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800ef32:	69bb      	ldr	r3, [r7, #24]
 800ef34:	015a      	lsls	r2, r3, #5
 800ef36:	697b      	ldr	r3, [r7, #20]
 800ef38:	4413      	add	r3, r2
 800ef3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ef3e:	461a      	mov	r2, r3
 800ef40:	693b      	ldr	r3, [r7, #16]
 800ef42:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	3301      	adds	r3, #1
 800ef48:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ef50:	d80c      	bhi.n	800ef6c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ef52:	69bb      	ldr	r3, [r7, #24]
 800ef54:	015a      	lsls	r2, r3, #5
 800ef56:	697b      	ldr	r3, [r7, #20]
 800ef58:	4413      	add	r3, r2
 800ef5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ef64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ef68:	d0ec      	beq.n	800ef44 <USB_StopHost+0xc8>
 800ef6a:	e000      	b.n	800ef6e <USB_StopHost+0xf2>
        break;
 800ef6c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800ef6e:	69bb      	ldr	r3, [r7, #24]
 800ef70:	3301      	adds	r3, #1
 800ef72:	61bb      	str	r3, [r7, #24]
 800ef74:	69bb      	ldr	r3, [r7, #24]
 800ef76:	2b0f      	cmp	r3, #15
 800ef78:	d9c7      	bls.n	800ef0a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800ef7a:	697b      	ldr	r3, [r7, #20]
 800ef7c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ef80:	461a      	mov	r2, r3
 800ef82:	f04f 33ff 	mov.w	r3, #4294967295
 800ef86:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	f04f 32ff 	mov.w	r2, #4294967295
 800ef8e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800ef90:	6878      	ldr	r0, [r7, #4]
 800ef92:	f7fe ff07 	bl	800dda4 <USB_EnableGlobalInt>

  return ret;
 800ef96:	7ffb      	ldrb	r3, [r7, #31]
}
 800ef98:	4618      	mov	r0, r3
 800ef9a:	3720      	adds	r7, #32
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	bd80      	pop	{r7, pc}

0800efa0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800efa4:	4904      	ldr	r1, [pc, #16]	@ (800efb8 <MX_FATFS_Init+0x18>)
 800efa6:	4805      	ldr	r0, [pc, #20]	@ (800efbc <MX_FATFS_Init+0x1c>)
 800efa8:	f002 fd74 	bl	8011a94 <FATFS_LinkDriver>
 800efac:	4603      	mov	r3, r0
 800efae:	461a      	mov	r2, r3
 800efb0:	4b03      	ldr	r3, [pc, #12]	@ (800efc0 <MX_FATFS_Init+0x20>)
 800efb2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800efb4:	bf00      	nop
 800efb6:	bd80      	pop	{r7, pc}
 800efb8:	200010b0 	.word	0x200010b0
 800efbc:	08014b98 	.word	0x08014b98
 800efc0:	200010ac 	.word	0x200010ac

0800efc4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b082      	sub	sp, #8
 800efc8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800efca:	2300      	movs	r3, #0
 800efcc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800efce:	f000 f87b 	bl	800f0c8 <BSP_SD_IsDetected>
 800efd2:	4603      	mov	r3, r0
 800efd4:	2b01      	cmp	r3, #1
 800efd6:	d001      	beq.n	800efdc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800efd8:	2302      	movs	r3, #2
 800efda:	e012      	b.n	800f002 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800efdc:	480b      	ldr	r0, [pc, #44]	@ (800f00c <BSP_SD_Init+0x48>)
 800efde:	f7fb f900 	bl	800a1e2 <HAL_SD_Init>
 800efe2:	4603      	mov	r3, r0
 800efe4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800efe6:	79fb      	ldrb	r3, [r7, #7]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d109      	bne.n	800f000 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800efec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800eff0:	4806      	ldr	r0, [pc, #24]	@ (800f00c <BSP_SD_Init+0x48>)
 800eff2:	f7fb fd51 	bl	800aa98 <HAL_SD_ConfigWideBusOperation>
 800eff6:	4603      	mov	r3, r0
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d001      	beq.n	800f000 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800effc:	2301      	movs	r3, #1
 800effe:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800f000:	79fb      	ldrb	r3, [r7, #7]
}
 800f002:	4618      	mov	r0, r3
 800f004:	3708      	adds	r7, #8
 800f006:	46bd      	mov	sp, r7
 800f008:	bd80      	pop	{r7, pc}
 800f00a:	bf00      	nop
 800f00c:	200009ec 	.word	0x200009ec

0800f010 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b086      	sub	sp, #24
 800f014:	af00      	add	r7, sp, #0
 800f016:	60f8      	str	r0, [r7, #12]
 800f018:	60b9      	str	r1, [r7, #8]
 800f01a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800f01c:	2300      	movs	r3, #0
 800f01e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	68ba      	ldr	r2, [r7, #8]
 800f024:	68f9      	ldr	r1, [r7, #12]
 800f026:	4806      	ldr	r0, [pc, #24]	@ (800f040 <BSP_SD_ReadBlocks_DMA+0x30>)
 800f028:	f7fb f994 	bl	800a354 <HAL_SD_ReadBlocks_DMA>
 800f02c:	4603      	mov	r3, r0
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d001      	beq.n	800f036 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800f032:	2301      	movs	r3, #1
 800f034:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f036:	7dfb      	ldrb	r3, [r7, #23]
}
 800f038:	4618      	mov	r0, r3
 800f03a:	3718      	adds	r7, #24
 800f03c:	46bd      	mov	sp, r7
 800f03e:	bd80      	pop	{r7, pc}
 800f040:	200009ec 	.word	0x200009ec

0800f044 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b086      	sub	sp, #24
 800f048:	af00      	add	r7, sp, #0
 800f04a:	60f8      	str	r0, [r7, #12]
 800f04c:	60b9      	str	r1, [r7, #8]
 800f04e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800f050:	2300      	movs	r3, #0
 800f052:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	68ba      	ldr	r2, [r7, #8]
 800f058:	68f9      	ldr	r1, [r7, #12]
 800f05a:	4806      	ldr	r0, [pc, #24]	@ (800f074 <BSP_SD_WriteBlocks_DMA+0x30>)
 800f05c:	f7fb fa5c 	bl	800a518 <HAL_SD_WriteBlocks_DMA>
 800f060:	4603      	mov	r3, r0
 800f062:	2b00      	cmp	r3, #0
 800f064:	d001      	beq.n	800f06a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800f066:	2301      	movs	r3, #1
 800f068:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f06a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f06c:	4618      	mov	r0, r3
 800f06e:	3718      	adds	r7, #24
 800f070:	46bd      	mov	sp, r7
 800f072:	bd80      	pop	{r7, pc}
 800f074:	200009ec 	.word	0x200009ec

0800f078 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800f078:	b580      	push	{r7, lr}
 800f07a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800f07c:	4805      	ldr	r0, [pc, #20]	@ (800f094 <BSP_SD_GetCardState+0x1c>)
 800f07e:	f7fb fda5 	bl	800abcc <HAL_SD_GetCardState>
 800f082:	4603      	mov	r3, r0
 800f084:	2b04      	cmp	r3, #4
 800f086:	bf14      	ite	ne
 800f088:	2301      	movne	r3, #1
 800f08a:	2300      	moveq	r3, #0
 800f08c:	b2db      	uxtb	r3, r3
}
 800f08e:	4618      	mov	r0, r3
 800f090:	bd80      	pop	{r7, pc}
 800f092:	bf00      	nop
 800f094:	200009ec 	.word	0x200009ec

0800f098 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	b082      	sub	sp, #8
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800f0a0:	6879      	ldr	r1, [r7, #4]
 800f0a2:	4803      	ldr	r0, [pc, #12]	@ (800f0b0 <BSP_SD_GetCardInfo+0x18>)
 800f0a4:	f7fb fccc 	bl	800aa40 <HAL_SD_GetCardInfo>
}
 800f0a8:	bf00      	nop
 800f0aa:	3708      	adds	r7, #8
 800f0ac:	46bd      	mov	sp, r7
 800f0ae:	bd80      	pop	{r7, pc}
 800f0b0:	200009ec 	.word	0x200009ec

0800f0b4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b082      	sub	sp, #8
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800f0bc:	f000 f9b2 	bl	800f424 <BSP_SD_ReadCpltCallback>
}
 800f0c0:	bf00      	nop
 800f0c2:	3708      	adds	r7, #8
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd80      	pop	{r7, pc}

0800f0c8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b082      	sub	sp, #8
 800f0cc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800f0ce:	2301      	movs	r3, #1
 800f0d0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800f0d2:	f000 f80b 	bl	800f0ec <BSP_PlatformIsDetected>
 800f0d6:	4603      	mov	r3, r0
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d101      	bne.n	800f0e0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800f0dc:	2300      	movs	r3, #0
 800f0de:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800f0e0:	79fb      	ldrb	r3, [r7, #7]
 800f0e2:	b2db      	uxtb	r3, r3
}
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	3708      	adds	r7, #8
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	bd80      	pop	{r7, pc}

0800f0ec <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b082      	sub	sp, #8
 800f0f0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800f0f2:	2301      	movs	r3, #1
 800f0f4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800f0f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800f0fa:	4806      	ldr	r0, [pc, #24]	@ (800f114 <BSP_PlatformIsDetected+0x28>)
 800f0fc:	f7f5 ffae 	bl	800505c <HAL_GPIO_ReadPin>
 800f100:	4603      	mov	r3, r0
 800f102:	2b00      	cmp	r3, #0
 800f104:	d001      	beq.n	800f10a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800f106:	2300      	movs	r3, #0
 800f108:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800f10a:	79fb      	ldrb	r3, [r7, #7]
}
 800f10c:	4618      	mov	r0, r3
 800f10e:	3708      	adds	r7, #8
 800f110:	46bd      	mov	sp, r7
 800f112:	bd80      	pop	{r7, pc}
 800f114:	40020800 	.word	0x40020800

0800f118 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b084      	sub	sp, #16
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800f120:	f002 fd04 	bl	8011b2c <osKernelSysTick>
 800f124:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800f126:	e006      	b.n	800f136 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f128:	f7ff ffa6 	bl	800f078 <BSP_SD_GetCardState>
 800f12c:	4603      	mov	r3, r0
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d101      	bne.n	800f136 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800f132:	2300      	movs	r3, #0
 800f134:	e009      	b.n	800f14a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800f136:	f002 fcf9 	bl	8011b2c <osKernelSysTick>
 800f13a:	4602      	mov	r2, r0
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	1ad3      	subs	r3, r2, r3
 800f140:	687a      	ldr	r2, [r7, #4]
 800f142:	429a      	cmp	r2, r3
 800f144:	d8f0      	bhi.n	800f128 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800f146:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f14a:	4618      	mov	r0, r3
 800f14c:	3710      	adds	r7, #16
 800f14e:	46bd      	mov	sp, r7
 800f150:	bd80      	pop	{r7, pc}
	...

0800f154 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b082      	sub	sp, #8
 800f158:	af00      	add	r7, sp, #0
 800f15a:	4603      	mov	r3, r0
 800f15c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800f15e:	4b0b      	ldr	r3, [pc, #44]	@ (800f18c <SD_CheckStatus+0x38>)
 800f160:	2201      	movs	r2, #1
 800f162:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f164:	f7ff ff88 	bl	800f078 <BSP_SD_GetCardState>
 800f168:	4603      	mov	r3, r0
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d107      	bne.n	800f17e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800f16e:	4b07      	ldr	r3, [pc, #28]	@ (800f18c <SD_CheckStatus+0x38>)
 800f170:	781b      	ldrb	r3, [r3, #0]
 800f172:	b2db      	uxtb	r3, r3
 800f174:	f023 0301 	bic.w	r3, r3, #1
 800f178:	b2da      	uxtb	r2, r3
 800f17a:	4b04      	ldr	r3, [pc, #16]	@ (800f18c <SD_CheckStatus+0x38>)
 800f17c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800f17e:	4b03      	ldr	r3, [pc, #12]	@ (800f18c <SD_CheckStatus+0x38>)
 800f180:	781b      	ldrb	r3, [r3, #0]
 800f182:	b2db      	uxtb	r3, r3
}
 800f184:	4618      	mov	r0, r3
 800f186:	3708      	adds	r7, #8
 800f188:	46bd      	mov	sp, r7
 800f18a:	bd80      	pop	{r7, pc}
 800f18c:	2000000d 	.word	0x2000000d

0800f190 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800f190:	b590      	push	{r4, r7, lr}
 800f192:	b087      	sub	sp, #28
 800f194:	af00      	add	r7, sp, #0
 800f196:	4603      	mov	r3, r0
 800f198:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800f19a:	4b20      	ldr	r3, [pc, #128]	@ (800f21c <SD_initialize+0x8c>)
 800f19c:	2201      	movs	r2, #1
 800f19e:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800f1a0:	f002 fcb8 	bl	8011b14 <osKernelRunning>
 800f1a4:	4603      	mov	r3, r0
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d030      	beq.n	800f20c <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800f1aa:	f7ff ff0b 	bl	800efc4 <BSP_SD_Init>
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d107      	bne.n	800f1c4 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800f1b4:	79fb      	ldrb	r3, [r7, #7]
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	f7ff ffcc 	bl	800f154 <SD_CheckStatus>
 800f1bc:	4603      	mov	r3, r0
 800f1be:	461a      	mov	r2, r3
 800f1c0:	4b16      	ldr	r3, [pc, #88]	@ (800f21c <SD_initialize+0x8c>)
 800f1c2:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800f1c4:	4b15      	ldr	r3, [pc, #84]	@ (800f21c <SD_initialize+0x8c>)
 800f1c6:	781b      	ldrb	r3, [r3, #0]
 800f1c8:	b2db      	uxtb	r3, r3
 800f1ca:	2b01      	cmp	r3, #1
 800f1cc:	d01e      	beq.n	800f20c <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800f1ce:	4b14      	ldr	r3, [pc, #80]	@ (800f220 <SD_initialize+0x90>)
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d10e      	bne.n	800f1f4 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800f1d6:	4b13      	ldr	r3, [pc, #76]	@ (800f224 <SD_initialize+0x94>)
 800f1d8:	f107 0408 	add.w	r4, r7, #8
 800f1dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f1de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800f1e2:	f107 0308 	add.w	r3, r7, #8
 800f1e6:	2100      	movs	r1, #0
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	f002 fd0f 	bl	8011c0c <osMessageCreate>
 800f1ee:	4603      	mov	r3, r0
 800f1f0:	4a0b      	ldr	r2, [pc, #44]	@ (800f220 <SD_initialize+0x90>)
 800f1f2:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800f1f4:	4b0a      	ldr	r3, [pc, #40]	@ (800f220 <SD_initialize+0x90>)
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d107      	bne.n	800f20c <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800f1fc:	4b07      	ldr	r3, [pc, #28]	@ (800f21c <SD_initialize+0x8c>)
 800f1fe:	781b      	ldrb	r3, [r3, #0]
 800f200:	b2db      	uxtb	r3, r3
 800f202:	f043 0301 	orr.w	r3, r3, #1
 800f206:	b2da      	uxtb	r2, r3
 800f208:	4b04      	ldr	r3, [pc, #16]	@ (800f21c <SD_initialize+0x8c>)
 800f20a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800f20c:	4b03      	ldr	r3, [pc, #12]	@ (800f21c <SD_initialize+0x8c>)
 800f20e:	781b      	ldrb	r3, [r3, #0]
 800f210:	b2db      	uxtb	r3, r3
}
 800f212:	4618      	mov	r0, r3
 800f214:	371c      	adds	r7, #28
 800f216:	46bd      	mov	sp, r7
 800f218:	bd90      	pop	{r4, r7, pc}
 800f21a:	bf00      	nop
 800f21c:	2000000d 	.word	0x2000000d
 800f220:	200010b4 	.word	0x200010b4
 800f224:	08014b24 	.word	0x08014b24

0800f228 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b082      	sub	sp, #8
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	4603      	mov	r3, r0
 800f230:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800f232:	79fb      	ldrb	r3, [r7, #7]
 800f234:	4618      	mov	r0, r3
 800f236:	f7ff ff8d 	bl	800f154 <SD_CheckStatus>
 800f23a:	4603      	mov	r3, r0
}
 800f23c:	4618      	mov	r0, r3
 800f23e:	3708      	adds	r7, #8
 800f240:	46bd      	mov	sp, r7
 800f242:	bd80      	pop	{r7, pc}

0800f244 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f244:	b580      	push	{r7, lr}
 800f246:	b08a      	sub	sp, #40	@ 0x28
 800f248:	af00      	add	r7, sp, #0
 800f24a:	60b9      	str	r1, [r7, #8]
 800f24c:	607a      	str	r2, [r7, #4]
 800f24e:	603b      	str	r3, [r7, #0]
 800f250:	4603      	mov	r3, r0
 800f252:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800f254:	2301      	movs	r3, #1
 800f256:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f25a:	f247 5030 	movw	r0, #30000	@ 0x7530
 800f25e:	f7ff ff5b 	bl	800f118 <SD_CheckStatusWithTimeout>
 800f262:	4603      	mov	r3, r0
 800f264:	2b00      	cmp	r3, #0
 800f266:	da02      	bge.n	800f26e <SD_read+0x2a>
  {
    return res;
 800f268:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f26c:	e032      	b.n	800f2d4 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800f26e:	683a      	ldr	r2, [r7, #0]
 800f270:	6879      	ldr	r1, [r7, #4]
 800f272:	68b8      	ldr	r0, [r7, #8]
 800f274:	f7ff fecc 	bl	800f010 <BSP_SD_ReadBlocks_DMA>
 800f278:	4603      	mov	r3, r0
 800f27a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 800f27e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f282:	2b00      	cmp	r3, #0
 800f284:	d124      	bne.n	800f2d0 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800f286:	4b15      	ldr	r3, [pc, #84]	@ (800f2dc <SD_read+0x98>)
 800f288:	6819      	ldr	r1, [r3, #0]
 800f28a:	f107 0314 	add.w	r3, r7, #20
 800f28e:	f247 5230 	movw	r2, #30000	@ 0x7530
 800f292:	4618      	mov	r0, r3
 800f294:	f002 fd22 	bl	8011cdc <osMessageGet>

    if (event.status == osEventMessage)
 800f298:	697b      	ldr	r3, [r7, #20]
 800f29a:	2b10      	cmp	r3, #16
 800f29c:	d118      	bne.n	800f2d0 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800f29e:	69bb      	ldr	r3, [r7, #24]
 800f2a0:	2b01      	cmp	r3, #1
 800f2a2:	d115      	bne.n	800f2d0 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800f2a4:	f002 fc42 	bl	8011b2c <osKernelSysTick>
 800f2a8:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800f2aa:	e008      	b.n	800f2be <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f2ac:	f7ff fee4 	bl	800f078 <BSP_SD_GetCardState>
 800f2b0:	4603      	mov	r3, r0
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d103      	bne.n	800f2be <SD_read+0x7a>
              {
                res = RES_OK;
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800f2bc:	e008      	b.n	800f2d0 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800f2be:	f002 fc35 	bl	8011b2c <osKernelSysTick>
 800f2c2:	4602      	mov	r2, r0
 800f2c4:	6a3b      	ldr	r3, [r7, #32]
 800f2c6:	1ad3      	subs	r3, r2, r3
 800f2c8:	f247 522f 	movw	r2, #29999	@ 0x752f
 800f2cc:	4293      	cmp	r3, r2
 800f2ce:	d9ed      	bls.n	800f2ac <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800f2d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	3728      	adds	r7, #40	@ 0x28
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	bd80      	pop	{r7, pc}
 800f2dc:	200010b4 	.word	0x200010b4

0800f2e0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b08a      	sub	sp, #40	@ 0x28
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	60b9      	str	r1, [r7, #8]
 800f2e8:	607a      	str	r2, [r7, #4]
 800f2ea:	603b      	str	r3, [r7, #0]
 800f2ec:	4603      	mov	r3, r0
 800f2ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f2f0:	2301      	movs	r3, #1
 800f2f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f2f6:	f247 5030 	movw	r0, #30000	@ 0x7530
 800f2fa:	f7ff ff0d 	bl	800f118 <SD_CheckStatusWithTimeout>
 800f2fe:	4603      	mov	r3, r0
 800f300:	2b00      	cmp	r3, #0
 800f302:	da02      	bge.n	800f30a <SD_write+0x2a>
  {
    return res;
 800f304:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f308:	e02e      	b.n	800f368 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800f30a:	683a      	ldr	r2, [r7, #0]
 800f30c:	6879      	ldr	r1, [r7, #4]
 800f30e:	68b8      	ldr	r0, [r7, #8]
 800f310:	f7ff fe98 	bl	800f044 <BSP_SD_WriteBlocks_DMA>
 800f314:	4603      	mov	r3, r0
 800f316:	2b00      	cmp	r3, #0
 800f318:	d124      	bne.n	800f364 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800f31a:	4b15      	ldr	r3, [pc, #84]	@ (800f370 <SD_write+0x90>)
 800f31c:	6819      	ldr	r1, [r3, #0]
 800f31e:	f107 0314 	add.w	r3, r7, #20
 800f322:	f247 5230 	movw	r2, #30000	@ 0x7530
 800f326:	4618      	mov	r0, r3
 800f328:	f002 fcd8 	bl	8011cdc <osMessageGet>

    if (event.status == osEventMessage)
 800f32c:	697b      	ldr	r3, [r7, #20]
 800f32e:	2b10      	cmp	r3, #16
 800f330:	d118      	bne.n	800f364 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800f332:	69bb      	ldr	r3, [r7, #24]
 800f334:	2b02      	cmp	r3, #2
 800f336:	d115      	bne.n	800f364 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800f338:	f002 fbf8 	bl	8011b2c <osKernelSysTick>
 800f33c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800f33e:	e008      	b.n	800f352 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f340:	f7ff fe9a 	bl	800f078 <BSP_SD_GetCardState>
 800f344:	4603      	mov	r3, r0
 800f346:	2b00      	cmp	r3, #0
 800f348:	d103      	bne.n	800f352 <SD_write+0x72>
          {
            res = RES_OK;
 800f34a:	2300      	movs	r3, #0
 800f34c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800f350:	e008      	b.n	800f364 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800f352:	f002 fbeb 	bl	8011b2c <osKernelSysTick>
 800f356:	4602      	mov	r2, r0
 800f358:	6a3b      	ldr	r3, [r7, #32]
 800f35a:	1ad3      	subs	r3, r2, r3
 800f35c:	f247 522f 	movw	r2, #29999	@ 0x752f
 800f360:	4293      	cmp	r3, r2
 800f362:	d9ed      	bls.n	800f340 <SD_write+0x60>
    }

  }
#endif

  return res;
 800f364:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800f368:	4618      	mov	r0, r3
 800f36a:	3728      	adds	r7, #40	@ 0x28
 800f36c:	46bd      	mov	sp, r7
 800f36e:	bd80      	pop	{r7, pc}
 800f370:	200010b4 	.word	0x200010b4

0800f374 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f374:	b580      	push	{r7, lr}
 800f376:	b08c      	sub	sp, #48	@ 0x30
 800f378:	af00      	add	r7, sp, #0
 800f37a:	4603      	mov	r3, r0
 800f37c:	603a      	str	r2, [r7, #0]
 800f37e:	71fb      	strb	r3, [r7, #7]
 800f380:	460b      	mov	r3, r1
 800f382:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f384:	2301      	movs	r3, #1
 800f386:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f38a:	4b25      	ldr	r3, [pc, #148]	@ (800f420 <SD_ioctl+0xac>)
 800f38c:	781b      	ldrb	r3, [r3, #0]
 800f38e:	b2db      	uxtb	r3, r3
 800f390:	f003 0301 	and.w	r3, r3, #1
 800f394:	2b00      	cmp	r3, #0
 800f396:	d001      	beq.n	800f39c <SD_ioctl+0x28>
 800f398:	2303      	movs	r3, #3
 800f39a:	e03c      	b.n	800f416 <SD_ioctl+0xa2>

  switch (cmd)
 800f39c:	79bb      	ldrb	r3, [r7, #6]
 800f39e:	2b03      	cmp	r3, #3
 800f3a0:	d834      	bhi.n	800f40c <SD_ioctl+0x98>
 800f3a2:	a201      	add	r2, pc, #4	@ (adr r2, 800f3a8 <SD_ioctl+0x34>)
 800f3a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3a8:	0800f3b9 	.word	0x0800f3b9
 800f3ac:	0800f3c1 	.word	0x0800f3c1
 800f3b0:	0800f3d9 	.word	0x0800f3d9
 800f3b4:	0800f3f3 	.word	0x0800f3f3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f3be:	e028      	b.n	800f412 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f3c0:	f107 030c 	add.w	r3, r7, #12
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	f7ff fe67 	bl	800f098 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f3ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f3d6:	e01c      	b.n	800f412 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f3d8:	f107 030c 	add.w	r3, r7, #12
 800f3dc:	4618      	mov	r0, r3
 800f3de:	f7ff fe5b 	bl	800f098 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f3e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3e4:	b29a      	uxth	r2, r3
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f3f0:	e00f      	b.n	800f412 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f3f2:	f107 030c 	add.w	r3, r7, #12
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	f7ff fe4e 	bl	800f098 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f3fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3fe:	0a5a      	lsrs	r2, r3, #9
 800f400:	683b      	ldr	r3, [r7, #0]
 800f402:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f404:	2300      	movs	r3, #0
 800f406:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f40a:	e002      	b.n	800f412 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f40c:	2304      	movs	r3, #4
 800f40e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800f412:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800f416:	4618      	mov	r0, r3
 800f418:	3730      	adds	r7, #48	@ 0x30
 800f41a:	46bd      	mov	sp, r7
 800f41c:	bd80      	pop	{r7, pc}
 800f41e:	bf00      	nop
 800f420:	2000000d 	.word	0x2000000d

0800f424 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800f424:	b580      	push	{r7, lr}
 800f426:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800f428:	4b04      	ldr	r3, [pc, #16]	@ (800f43c <BSP_SD_ReadCpltCallback+0x18>)
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	2200      	movs	r2, #0
 800f42e:	2101      	movs	r1, #1
 800f430:	4618      	mov	r0, r3
 800f432:	f002 fc13 	bl	8011c5c <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 800f436:	bf00      	nop
 800f438:	bd80      	pop	{r7, pc}
 800f43a:	bf00      	nop
 800f43c:	200010b4 	.word	0x200010b4

0800f440 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800f440:	b590      	push	{r4, r7, lr}
 800f442:	b089      	sub	sp, #36	@ 0x24
 800f444:	af04      	add	r7, sp, #16
 800f446:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800f448:	2301      	movs	r3, #1
 800f44a:	2202      	movs	r2, #2
 800f44c:	2102      	movs	r1, #2
 800f44e:	6878      	ldr	r0, [r7, #4]
 800f450:	f000 fcd7 	bl	800fe02 <USBH_FindInterface>
 800f454:	4603      	mov	r3, r0
 800f456:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800f458:	7bfb      	ldrb	r3, [r7, #15]
 800f45a:	2bff      	cmp	r3, #255	@ 0xff
 800f45c:	d002      	beq.n	800f464 <USBH_CDC_InterfaceInit+0x24>
 800f45e:	7bfb      	ldrb	r3, [r7, #15]
 800f460:	2b01      	cmp	r3, #1
 800f462:	d901      	bls.n	800f468 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800f464:	2302      	movs	r3, #2
 800f466:	e13d      	b.n	800f6e4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800f468:	7bfb      	ldrb	r3, [r7, #15]
 800f46a:	4619      	mov	r1, r3
 800f46c:	6878      	ldr	r0, [r7, #4]
 800f46e:	f000 fcac 	bl	800fdca <USBH_SelectInterface>
 800f472:	4603      	mov	r3, r0
 800f474:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800f476:	7bbb      	ldrb	r3, [r7, #14]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d001      	beq.n	800f480 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800f47c:	2302      	movs	r3, #2
 800f47e:	e131      	b.n	800f6e4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800f486:	2050      	movs	r0, #80	@ 0x50
 800f488:	f005 f97c 	bl	8014784 <malloc>
 800f48c:	4603      	mov	r3, r0
 800f48e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f496:	69db      	ldr	r3, [r3, #28]
 800f498:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800f49a:	68bb      	ldr	r3, [r7, #8]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d101      	bne.n	800f4a4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800f4a0:	2302      	movs	r3, #2
 800f4a2:	e11f      	b.n	800f6e4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800f4a4:	2250      	movs	r2, #80	@ 0x50
 800f4a6:	2100      	movs	r1, #0
 800f4a8:	68b8      	ldr	r0, [r7, #8]
 800f4aa:	f005 fa29 	bl	8014900 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800f4ae:	7bfb      	ldrb	r3, [r7, #15]
 800f4b0:	687a      	ldr	r2, [r7, #4]
 800f4b2:	211a      	movs	r1, #26
 800f4b4:	fb01 f303 	mul.w	r3, r1, r3
 800f4b8:	4413      	add	r3, r2
 800f4ba:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800f4be:	781b      	ldrb	r3, [r3, #0]
 800f4c0:	b25b      	sxtb	r3, r3
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	da15      	bge.n	800f4f2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800f4c6:	7bfb      	ldrb	r3, [r7, #15]
 800f4c8:	687a      	ldr	r2, [r7, #4]
 800f4ca:	211a      	movs	r1, #26
 800f4cc:	fb01 f303 	mul.w	r3, r1, r3
 800f4d0:	4413      	add	r3, r2
 800f4d2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800f4d6:	781a      	ldrb	r2, [r3, #0]
 800f4d8:	68bb      	ldr	r3, [r7, #8]
 800f4da:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f4dc:	7bfb      	ldrb	r3, [r7, #15]
 800f4de:	687a      	ldr	r2, [r7, #4]
 800f4e0:	211a      	movs	r1, #26
 800f4e2:	fb01 f303 	mul.w	r3, r1, r3
 800f4e6:	4413      	add	r3, r2
 800f4e8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800f4ec:	881a      	ldrh	r2, [r3, #0]
 800f4ee:	68bb      	ldr	r3, [r7, #8]
 800f4f0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800f4f2:	68bb      	ldr	r3, [r7, #8]
 800f4f4:	785b      	ldrb	r3, [r3, #1]
 800f4f6:	4619      	mov	r1, r3
 800f4f8:	6878      	ldr	r0, [r7, #4]
 800f4fa:	f002 fa1c 	bl	8011936 <USBH_AllocPipe>
 800f4fe:	4603      	mov	r3, r0
 800f500:	461a      	mov	r2, r3
 800f502:	68bb      	ldr	r3, [r7, #8]
 800f504:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800f506:	68bb      	ldr	r3, [r7, #8]
 800f508:	7819      	ldrb	r1, [r3, #0]
 800f50a:	68bb      	ldr	r3, [r7, #8]
 800f50c:	7858      	ldrb	r0, [r3, #1]
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800f51a:	68ba      	ldr	r2, [r7, #8]
 800f51c:	8952      	ldrh	r2, [r2, #10]
 800f51e:	9202      	str	r2, [sp, #8]
 800f520:	2203      	movs	r2, #3
 800f522:	9201      	str	r2, [sp, #4]
 800f524:	9300      	str	r3, [sp, #0]
 800f526:	4623      	mov	r3, r4
 800f528:	4602      	mov	r2, r0
 800f52a:	6878      	ldr	r0, [r7, #4]
 800f52c:	f002 f9d4 	bl	80118d8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800f530:	68bb      	ldr	r3, [r7, #8]
 800f532:	781b      	ldrb	r3, [r3, #0]
 800f534:	2200      	movs	r2, #0
 800f536:	4619      	mov	r1, r3
 800f538:	6878      	ldr	r0, [r7, #4]
 800f53a:	f005 f89d 	bl	8014678 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800f53e:	2300      	movs	r3, #0
 800f540:	2200      	movs	r2, #0
 800f542:	210a      	movs	r1, #10
 800f544:	6878      	ldr	r0, [r7, #4]
 800f546:	f000 fc5c 	bl	800fe02 <USBH_FindInterface>
 800f54a:	4603      	mov	r3, r0
 800f54c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800f54e:	7bfb      	ldrb	r3, [r7, #15]
 800f550:	2bff      	cmp	r3, #255	@ 0xff
 800f552:	d002      	beq.n	800f55a <USBH_CDC_InterfaceInit+0x11a>
 800f554:	7bfb      	ldrb	r3, [r7, #15]
 800f556:	2b01      	cmp	r3, #1
 800f558:	d901      	bls.n	800f55e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800f55a:	2302      	movs	r3, #2
 800f55c:	e0c2      	b.n	800f6e4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800f55e:	7bfb      	ldrb	r3, [r7, #15]
 800f560:	687a      	ldr	r2, [r7, #4]
 800f562:	211a      	movs	r1, #26
 800f564:	fb01 f303 	mul.w	r3, r1, r3
 800f568:	4413      	add	r3, r2
 800f56a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800f56e:	781b      	ldrb	r3, [r3, #0]
 800f570:	b25b      	sxtb	r3, r3
 800f572:	2b00      	cmp	r3, #0
 800f574:	da16      	bge.n	800f5a4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800f576:	7bfb      	ldrb	r3, [r7, #15]
 800f578:	687a      	ldr	r2, [r7, #4]
 800f57a:	211a      	movs	r1, #26
 800f57c:	fb01 f303 	mul.w	r3, r1, r3
 800f580:	4413      	add	r3, r2
 800f582:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800f586:	781a      	ldrb	r2, [r3, #0]
 800f588:	68bb      	ldr	r3, [r7, #8]
 800f58a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f58c:	7bfb      	ldrb	r3, [r7, #15]
 800f58e:	687a      	ldr	r2, [r7, #4]
 800f590:	211a      	movs	r1, #26
 800f592:	fb01 f303 	mul.w	r3, r1, r3
 800f596:	4413      	add	r3, r2
 800f598:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800f59c:	881a      	ldrh	r2, [r3, #0]
 800f59e:	68bb      	ldr	r3, [r7, #8]
 800f5a0:	835a      	strh	r2, [r3, #26]
 800f5a2:	e015      	b.n	800f5d0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800f5a4:	7bfb      	ldrb	r3, [r7, #15]
 800f5a6:	687a      	ldr	r2, [r7, #4]
 800f5a8:	211a      	movs	r1, #26
 800f5aa:	fb01 f303 	mul.w	r3, r1, r3
 800f5ae:	4413      	add	r3, r2
 800f5b0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800f5b4:	781a      	ldrb	r2, [r3, #0]
 800f5b6:	68bb      	ldr	r3, [r7, #8]
 800f5b8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f5ba:	7bfb      	ldrb	r3, [r7, #15]
 800f5bc:	687a      	ldr	r2, [r7, #4]
 800f5be:	211a      	movs	r1, #26
 800f5c0:	fb01 f303 	mul.w	r3, r1, r3
 800f5c4:	4413      	add	r3, r2
 800f5c6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800f5ca:	881a      	ldrh	r2, [r3, #0]
 800f5cc:	68bb      	ldr	r3, [r7, #8]
 800f5ce:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800f5d0:	7bfb      	ldrb	r3, [r7, #15]
 800f5d2:	687a      	ldr	r2, [r7, #4]
 800f5d4:	211a      	movs	r1, #26
 800f5d6:	fb01 f303 	mul.w	r3, r1, r3
 800f5da:	4413      	add	r3, r2
 800f5dc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800f5e0:	781b      	ldrb	r3, [r3, #0]
 800f5e2:	b25b      	sxtb	r3, r3
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	da16      	bge.n	800f616 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800f5e8:	7bfb      	ldrb	r3, [r7, #15]
 800f5ea:	687a      	ldr	r2, [r7, #4]
 800f5ec:	211a      	movs	r1, #26
 800f5ee:	fb01 f303 	mul.w	r3, r1, r3
 800f5f2:	4413      	add	r3, r2
 800f5f4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800f5f8:	781a      	ldrb	r2, [r3, #0]
 800f5fa:	68bb      	ldr	r3, [r7, #8]
 800f5fc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800f5fe:	7bfb      	ldrb	r3, [r7, #15]
 800f600:	687a      	ldr	r2, [r7, #4]
 800f602:	211a      	movs	r1, #26
 800f604:	fb01 f303 	mul.w	r3, r1, r3
 800f608:	4413      	add	r3, r2
 800f60a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800f60e:	881a      	ldrh	r2, [r3, #0]
 800f610:	68bb      	ldr	r3, [r7, #8]
 800f612:	835a      	strh	r2, [r3, #26]
 800f614:	e015      	b.n	800f642 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800f616:	7bfb      	ldrb	r3, [r7, #15]
 800f618:	687a      	ldr	r2, [r7, #4]
 800f61a:	211a      	movs	r1, #26
 800f61c:	fb01 f303 	mul.w	r3, r1, r3
 800f620:	4413      	add	r3, r2
 800f622:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800f626:	781a      	ldrb	r2, [r3, #0]
 800f628:	68bb      	ldr	r3, [r7, #8]
 800f62a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800f62c:	7bfb      	ldrb	r3, [r7, #15]
 800f62e:	687a      	ldr	r2, [r7, #4]
 800f630:	211a      	movs	r1, #26
 800f632:	fb01 f303 	mul.w	r3, r1, r3
 800f636:	4413      	add	r3, r2
 800f638:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800f63c:	881a      	ldrh	r2, [r3, #0]
 800f63e:	68bb      	ldr	r3, [r7, #8]
 800f640:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800f642:	68bb      	ldr	r3, [r7, #8]
 800f644:	7b9b      	ldrb	r3, [r3, #14]
 800f646:	4619      	mov	r1, r3
 800f648:	6878      	ldr	r0, [r7, #4]
 800f64a:	f002 f974 	bl	8011936 <USBH_AllocPipe>
 800f64e:	4603      	mov	r3, r0
 800f650:	461a      	mov	r2, r3
 800f652:	68bb      	ldr	r3, [r7, #8]
 800f654:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800f656:	68bb      	ldr	r3, [r7, #8]
 800f658:	7bdb      	ldrb	r3, [r3, #15]
 800f65a:	4619      	mov	r1, r3
 800f65c:	6878      	ldr	r0, [r7, #4]
 800f65e:	f002 f96a 	bl	8011936 <USBH_AllocPipe>
 800f662:	4603      	mov	r3, r0
 800f664:	461a      	mov	r2, r3
 800f666:	68bb      	ldr	r3, [r7, #8]
 800f668:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800f66a:	68bb      	ldr	r3, [r7, #8]
 800f66c:	7b59      	ldrb	r1, [r3, #13]
 800f66e:	68bb      	ldr	r3, [r7, #8]
 800f670:	7b98      	ldrb	r0, [r3, #14]
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800f67e:	68ba      	ldr	r2, [r7, #8]
 800f680:	8b12      	ldrh	r2, [r2, #24]
 800f682:	9202      	str	r2, [sp, #8]
 800f684:	2202      	movs	r2, #2
 800f686:	9201      	str	r2, [sp, #4]
 800f688:	9300      	str	r3, [sp, #0]
 800f68a:	4623      	mov	r3, r4
 800f68c:	4602      	mov	r2, r0
 800f68e:	6878      	ldr	r0, [r7, #4]
 800f690:	f002 f922 	bl	80118d8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800f694:	68bb      	ldr	r3, [r7, #8]
 800f696:	7b19      	ldrb	r1, [r3, #12]
 800f698:	68bb      	ldr	r3, [r7, #8]
 800f69a:	7bd8      	ldrb	r0, [r3, #15]
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800f6a8:	68ba      	ldr	r2, [r7, #8]
 800f6aa:	8b52      	ldrh	r2, [r2, #26]
 800f6ac:	9202      	str	r2, [sp, #8]
 800f6ae:	2202      	movs	r2, #2
 800f6b0:	9201      	str	r2, [sp, #4]
 800f6b2:	9300      	str	r3, [sp, #0]
 800f6b4:	4623      	mov	r3, r4
 800f6b6:	4602      	mov	r2, r0
 800f6b8:	6878      	ldr	r0, [r7, #4]
 800f6ba:	f002 f90d 	bl	80118d8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800f6be:	68bb      	ldr	r3, [r7, #8]
 800f6c0:	2200      	movs	r2, #0
 800f6c2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800f6c6:	68bb      	ldr	r3, [r7, #8]
 800f6c8:	7b5b      	ldrb	r3, [r3, #13]
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	4619      	mov	r1, r3
 800f6ce:	6878      	ldr	r0, [r7, #4]
 800f6d0:	f004 ffd2 	bl	8014678 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800f6d4:	68bb      	ldr	r3, [r7, #8]
 800f6d6:	7b1b      	ldrb	r3, [r3, #12]
 800f6d8:	2200      	movs	r2, #0
 800f6da:	4619      	mov	r1, r3
 800f6dc:	6878      	ldr	r0, [r7, #4]
 800f6de:	f004 ffcb 	bl	8014678 <USBH_LL_SetToggle>

  return USBH_OK;
 800f6e2:	2300      	movs	r3, #0
}
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	3714      	adds	r7, #20
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	bd90      	pop	{r4, r7, pc}

0800f6ec <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b084      	sub	sp, #16
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f6fa:	69db      	ldr	r3, [r3, #28]
 800f6fc:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	781b      	ldrb	r3, [r3, #0]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d00e      	beq.n	800f724 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	781b      	ldrb	r3, [r3, #0]
 800f70a:	4619      	mov	r1, r3
 800f70c:	6878      	ldr	r0, [r7, #4]
 800f70e:	f002 f902 	bl	8011916 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	781b      	ldrb	r3, [r3, #0]
 800f716:	4619      	mov	r1, r3
 800f718:	6878      	ldr	r0, [r7, #4]
 800f71a:	f002 f92d 	bl	8011978 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	2200      	movs	r2, #0
 800f722:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	7b1b      	ldrb	r3, [r3, #12]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d00e      	beq.n	800f74a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	7b1b      	ldrb	r3, [r3, #12]
 800f730:	4619      	mov	r1, r3
 800f732:	6878      	ldr	r0, [r7, #4]
 800f734:	f002 f8ef 	bl	8011916 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	7b1b      	ldrb	r3, [r3, #12]
 800f73c:	4619      	mov	r1, r3
 800f73e:	6878      	ldr	r0, [r7, #4]
 800f740:	f002 f91a 	bl	8011978 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	2200      	movs	r2, #0
 800f748:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	7b5b      	ldrb	r3, [r3, #13]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d00e      	beq.n	800f770 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	7b5b      	ldrb	r3, [r3, #13]
 800f756:	4619      	mov	r1, r3
 800f758:	6878      	ldr	r0, [r7, #4]
 800f75a:	f002 f8dc 	bl	8011916 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	7b5b      	ldrb	r3, [r3, #13]
 800f762:	4619      	mov	r1, r3
 800f764:	6878      	ldr	r0, [r7, #4]
 800f766:	f002 f907 	bl	8011978 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	2200      	movs	r2, #0
 800f76e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f776:	69db      	ldr	r3, [r3, #28]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d00b      	beq.n	800f794 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f782:	69db      	ldr	r3, [r3, #28]
 800f784:	4618      	mov	r0, r3
 800f786:	f005 f805 	bl	8014794 <free>
    phost->pActiveClass->pData = 0U;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f790:	2200      	movs	r2, #0
 800f792:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800f794:	2300      	movs	r3, #0
}
 800f796:	4618      	mov	r0, r3
 800f798:	3710      	adds	r7, #16
 800f79a:	46bd      	mov	sp, r7
 800f79c:	bd80      	pop	{r7, pc}

0800f79e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800f79e:	b580      	push	{r7, lr}
 800f7a0:	b084      	sub	sp, #16
 800f7a2:	af00      	add	r7, sp, #0
 800f7a4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f7ac:	69db      	ldr	r3, [r3, #28]
 800f7ae:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	3340      	adds	r3, #64	@ 0x40
 800f7b4:	4619      	mov	r1, r3
 800f7b6:	6878      	ldr	r0, [r7, #4]
 800f7b8:	f000 f8b1 	bl	800f91e <GetLineCoding>
 800f7bc:	4603      	mov	r3, r0
 800f7be:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800f7c0:	7afb      	ldrb	r3, [r7, #11]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d105      	bne.n	800f7d2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f7cc:	2102      	movs	r1, #2
 800f7ce:	6878      	ldr	r0, [r7, #4]
 800f7d0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800f7d2:	7afb      	ldrb	r3, [r7, #11]
}
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	3710      	adds	r7, #16
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	bd80      	pop	{r7, pc}

0800f7dc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b084      	sub	sp, #16
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800f7e4:	2301      	movs	r3, #1
 800f7e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f7f2:	69db      	ldr	r3, [r3, #28]
 800f7f4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800f7f6:	68bb      	ldr	r3, [r7, #8]
 800f7f8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800f7fc:	2b04      	cmp	r3, #4
 800f7fe:	d877      	bhi.n	800f8f0 <USBH_CDC_Process+0x114>
 800f800:	a201      	add	r2, pc, #4	@ (adr r2, 800f808 <USBH_CDC_Process+0x2c>)
 800f802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f806:	bf00      	nop
 800f808:	0800f81d 	.word	0x0800f81d
 800f80c:	0800f823 	.word	0x0800f823
 800f810:	0800f853 	.word	0x0800f853
 800f814:	0800f8c7 	.word	0x0800f8c7
 800f818:	0800f8d5 	.word	0x0800f8d5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800f81c:	2300      	movs	r3, #0
 800f81e:	73fb      	strb	r3, [r7, #15]
      break;
 800f820:	e06d      	b.n	800f8fe <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800f822:	68bb      	ldr	r3, [r7, #8]
 800f824:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f826:	4619      	mov	r1, r3
 800f828:	6878      	ldr	r0, [r7, #4]
 800f82a:	f000 f897 	bl	800f95c <SetLineCoding>
 800f82e:	4603      	mov	r3, r0
 800f830:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800f832:	7bbb      	ldrb	r3, [r7, #14]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d104      	bne.n	800f842 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800f838:	68bb      	ldr	r3, [r7, #8]
 800f83a:	2202      	movs	r2, #2
 800f83c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800f840:	e058      	b.n	800f8f4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800f842:	7bbb      	ldrb	r3, [r7, #14]
 800f844:	2b01      	cmp	r3, #1
 800f846:	d055      	beq.n	800f8f4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800f848:	68bb      	ldr	r3, [r7, #8]
 800f84a:	2204      	movs	r2, #4
 800f84c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800f850:	e050      	b.n	800f8f4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800f852:	68bb      	ldr	r3, [r7, #8]
 800f854:	3340      	adds	r3, #64	@ 0x40
 800f856:	4619      	mov	r1, r3
 800f858:	6878      	ldr	r0, [r7, #4]
 800f85a:	f000 f860 	bl	800f91e <GetLineCoding>
 800f85e:	4603      	mov	r3, r0
 800f860:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800f862:	7bbb      	ldrb	r3, [r7, #14]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d126      	bne.n	800f8b6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800f868:	68bb      	ldr	r3, [r7, #8]
 800f86a:	2200      	movs	r2, #0
 800f86c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800f870:	68bb      	ldr	r3, [r7, #8]
 800f872:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800f876:	68bb      	ldr	r3, [r7, #8]
 800f878:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f87a:	791b      	ldrb	r3, [r3, #4]
 800f87c:	429a      	cmp	r2, r3
 800f87e:	d13b      	bne.n	800f8f8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800f880:	68bb      	ldr	r3, [r7, #8]
 800f882:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800f886:	68bb      	ldr	r3, [r7, #8]
 800f888:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f88a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800f88c:	429a      	cmp	r2, r3
 800f88e:	d133      	bne.n	800f8f8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800f890:	68bb      	ldr	r3, [r7, #8]
 800f892:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800f896:	68bb      	ldr	r3, [r7, #8]
 800f898:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f89a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800f89c:	429a      	cmp	r2, r3
 800f89e:	d12b      	bne.n	800f8f8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800f8a0:	68bb      	ldr	r3, [r7, #8]
 800f8a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f8a4:	68bb      	ldr	r3, [r7, #8]
 800f8a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f8a8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800f8aa:	429a      	cmp	r2, r3
 800f8ac:	d124      	bne.n	800f8f8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800f8ae:	6878      	ldr	r0, [r7, #4]
 800f8b0:	f000 f982 	bl	800fbb8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800f8b4:	e020      	b.n	800f8f8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800f8b6:	7bbb      	ldrb	r3, [r7, #14]
 800f8b8:	2b01      	cmp	r3, #1
 800f8ba:	d01d      	beq.n	800f8f8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800f8bc:	68bb      	ldr	r3, [r7, #8]
 800f8be:	2204      	movs	r2, #4
 800f8c0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800f8c4:	e018      	b.n	800f8f8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800f8c6:	6878      	ldr	r0, [r7, #4]
 800f8c8:	f000 f867 	bl	800f99a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800f8cc:	6878      	ldr	r0, [r7, #4]
 800f8ce:	f000 f8f6 	bl	800fabe <CDC_ProcessReception>
      break;
 800f8d2:	e014      	b.n	800f8fe <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800f8d4:	2100      	movs	r1, #0
 800f8d6:	6878      	ldr	r0, [r7, #4]
 800f8d8:	f001 f988 	bl	8010bec <USBH_ClrFeature>
 800f8dc:	4603      	mov	r3, r0
 800f8de:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800f8e0:	7bbb      	ldrb	r3, [r7, #14]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d10a      	bne.n	800f8fc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800f8e6:	68bb      	ldr	r3, [r7, #8]
 800f8e8:	2200      	movs	r2, #0
 800f8ea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800f8ee:	e005      	b.n	800f8fc <USBH_CDC_Process+0x120>

    default:
      break;
 800f8f0:	bf00      	nop
 800f8f2:	e004      	b.n	800f8fe <USBH_CDC_Process+0x122>
      break;
 800f8f4:	bf00      	nop
 800f8f6:	e002      	b.n	800f8fe <USBH_CDC_Process+0x122>
      break;
 800f8f8:	bf00      	nop
 800f8fa:	e000      	b.n	800f8fe <USBH_CDC_Process+0x122>
      break;
 800f8fc:	bf00      	nop

  }

  return status;
 800f8fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800f900:	4618      	mov	r0, r3
 800f902:	3710      	adds	r7, #16
 800f904:	46bd      	mov	sp, r7
 800f906:	bd80      	pop	{r7, pc}

0800f908 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800f908:	b480      	push	{r7}
 800f90a:	b083      	sub	sp, #12
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800f910:	2300      	movs	r3, #0
}
 800f912:	4618      	mov	r0, r3
 800f914:	370c      	adds	r7, #12
 800f916:	46bd      	mov	sp, r7
 800f918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91c:	4770      	bx	lr

0800f91e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800f91e:	b580      	push	{r7, lr}
 800f920:	b082      	sub	sp, #8
 800f922:	af00      	add	r7, sp, #0
 800f924:	6078      	str	r0, [r7, #4]
 800f926:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	22a1      	movs	r2, #161	@ 0xa1
 800f92c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	2221      	movs	r2, #33	@ 0x21
 800f932:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	2200      	movs	r2, #0
 800f938:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	2200      	movs	r2, #0
 800f93e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	2207      	movs	r2, #7
 800f944:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800f946:	683b      	ldr	r3, [r7, #0]
 800f948:	2207      	movs	r2, #7
 800f94a:	4619      	mov	r1, r3
 800f94c:	6878      	ldr	r0, [r7, #4]
 800f94e:	f001 fc82 	bl	8011256 <USBH_CtlReq>
 800f952:	4603      	mov	r3, r0
}
 800f954:	4618      	mov	r0, r3
 800f956:	3708      	adds	r7, #8
 800f958:	46bd      	mov	sp, r7
 800f95a:	bd80      	pop	{r7, pc}

0800f95c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b082      	sub	sp, #8
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
 800f964:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	2221      	movs	r2, #33	@ 0x21
 800f96a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	2220      	movs	r2, #32
 800f970:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	2200      	movs	r2, #0
 800f976:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	2200      	movs	r2, #0
 800f97c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	2207      	movs	r2, #7
 800f982:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800f984:	683b      	ldr	r3, [r7, #0]
 800f986:	2207      	movs	r2, #7
 800f988:	4619      	mov	r1, r3
 800f98a:	6878      	ldr	r0, [r7, #4]
 800f98c:	f001 fc63 	bl	8011256 <USBH_CtlReq>
 800f990:	4603      	mov	r3, r0
}
 800f992:	4618      	mov	r0, r3
 800f994:	3708      	adds	r7, #8
 800f996:	46bd      	mov	sp, r7
 800f998:	bd80      	pop	{r7, pc}

0800f99a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800f99a:	b580      	push	{r7, lr}
 800f99c:	b086      	sub	sp, #24
 800f99e:	af02      	add	r7, sp, #8
 800f9a0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f9a8:	69db      	ldr	r3, [r3, #28]
 800f9aa:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800f9b6:	2b01      	cmp	r3, #1
 800f9b8:	d002      	beq.n	800f9c0 <CDC_ProcessTransmission+0x26>
 800f9ba:	2b02      	cmp	r3, #2
 800f9bc:	d023      	beq.n	800fa06 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800f9be:	e07a      	b.n	800fab6 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9c4:	68fa      	ldr	r2, [r7, #12]
 800f9c6:	8b12      	ldrh	r2, [r2, #24]
 800f9c8:	4293      	cmp	r3, r2
 800f9ca:	d90b      	bls.n	800f9e4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	69d9      	ldr	r1, [r3, #28]
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	8b1a      	ldrh	r2, [r3, #24]
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	7b5b      	ldrb	r3, [r3, #13]
 800f9d8:	2001      	movs	r0, #1
 800f9da:	9000      	str	r0, [sp, #0]
 800f9dc:	6878      	ldr	r0, [r7, #4]
 800f9de:	f001 ff38 	bl	8011852 <USBH_BulkSendData>
 800f9e2:	e00b      	b.n	800f9fc <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800f9ec:	b29a      	uxth	r2, r3
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	7b5b      	ldrb	r3, [r3, #13]
 800f9f2:	2001      	movs	r0, #1
 800f9f4:	9000      	str	r0, [sp, #0]
 800f9f6:	6878      	ldr	r0, [r7, #4]
 800f9f8:	f001 ff2b 	bl	8011852 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	2202      	movs	r2, #2
 800fa00:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800fa04:	e057      	b.n	800fab6 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	7b5b      	ldrb	r3, [r3, #13]
 800fa0a:	4619      	mov	r1, r3
 800fa0c:	6878      	ldr	r0, [r7, #4]
 800fa0e:	f004 fe09 	bl	8014624 <USBH_LL_GetURBState>
 800fa12:	4603      	mov	r3, r0
 800fa14:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800fa16:	7afb      	ldrb	r3, [r7, #11]
 800fa18:	2b01      	cmp	r3, #1
 800fa1a:	d136      	bne.n	800fa8a <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa20:	68fa      	ldr	r2, [r7, #12]
 800fa22:	8b12      	ldrh	r2, [r2, #24]
 800fa24:	4293      	cmp	r3, r2
 800fa26:	d90e      	bls.n	800fa46 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa2c:	68fa      	ldr	r2, [r7, #12]
 800fa2e:	8b12      	ldrh	r2, [r2, #24]
 800fa30:	1a9a      	subs	r2, r3, r2
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	69db      	ldr	r3, [r3, #28]
 800fa3a:	68fa      	ldr	r2, [r7, #12]
 800fa3c:	8b12      	ldrh	r2, [r2, #24]
 800fa3e:	441a      	add	r2, r3
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	61da      	str	r2, [r3, #28]
 800fa44:	e002      	b.n	800fa4c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	2200      	movs	r2, #0
 800fa4a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d004      	beq.n	800fa5e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	2201      	movs	r2, #1
 800fa58:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 800fa5c:	e006      	b.n	800fa6c <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	2200      	movs	r2, #0
 800fa62:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800fa66:	6878      	ldr	r0, [r7, #4]
 800fa68:	f000 f892 	bl	800fb90 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	2204      	movs	r2, #4
 800fa70:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800fa80:	2200      	movs	r2, #0
 800fa82:	4619      	mov	r1, r3
 800fa84:	f002 f8ea 	bl	8011c5c <osMessagePut>
      break;
 800fa88:	e014      	b.n	800fab4 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800fa8a:	7afb      	ldrb	r3, [r7, #11]
 800fa8c:	2b02      	cmp	r3, #2
 800fa8e:	d111      	bne.n	800fab4 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	2201      	movs	r2, #1
 800fa94:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	2204      	movs	r2, #4
 800fa9c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800faac:	2200      	movs	r2, #0
 800faae:	4619      	mov	r1, r3
 800fab0:	f002 f8d4 	bl	8011c5c <osMessagePut>
      break;
 800fab4:	bf00      	nop
  }
}
 800fab6:	bf00      	nop
 800fab8:	3710      	adds	r7, #16
 800faba:	46bd      	mov	sp, r7
 800fabc:	bd80      	pop	{r7, pc}

0800fabe <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800fabe:	b580      	push	{r7, lr}
 800fac0:	b086      	sub	sp, #24
 800fac2:	af00      	add	r7, sp, #0
 800fac4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800facc:	69db      	ldr	r3, [r3, #28]
 800face:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800fad0:	2300      	movs	r3, #0
 800fad2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800fad4:	697b      	ldr	r3, [r7, #20]
 800fad6:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800fada:	2b03      	cmp	r3, #3
 800fadc:	d002      	beq.n	800fae4 <CDC_ProcessReception+0x26>
 800fade:	2b04      	cmp	r3, #4
 800fae0:	d00e      	beq.n	800fb00 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800fae2:	e051      	b.n	800fb88 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 800fae4:	697b      	ldr	r3, [r7, #20]
 800fae6:	6a19      	ldr	r1, [r3, #32]
 800fae8:	697b      	ldr	r3, [r7, #20]
 800faea:	8b5a      	ldrh	r2, [r3, #26]
 800faec:	697b      	ldr	r3, [r7, #20]
 800faee:	7b1b      	ldrb	r3, [r3, #12]
 800faf0:	6878      	ldr	r0, [r7, #4]
 800faf2:	f001 fed3 	bl	801189c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800faf6:	697b      	ldr	r3, [r7, #20]
 800faf8:	2204      	movs	r2, #4
 800fafa:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800fafe:	e043      	b.n	800fb88 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800fb00:	697b      	ldr	r3, [r7, #20]
 800fb02:	7b1b      	ldrb	r3, [r3, #12]
 800fb04:	4619      	mov	r1, r3
 800fb06:	6878      	ldr	r0, [r7, #4]
 800fb08:	f004 fd8c 	bl	8014624 <USBH_LL_GetURBState>
 800fb0c:	4603      	mov	r3, r0
 800fb0e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800fb10:	7cfb      	ldrb	r3, [r7, #19]
 800fb12:	2b01      	cmp	r3, #1
 800fb14:	d137      	bne.n	800fb86 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800fb16:	697b      	ldr	r3, [r7, #20]
 800fb18:	7b1b      	ldrb	r3, [r3, #12]
 800fb1a:	4619      	mov	r1, r3
 800fb1c:	6878      	ldr	r0, [r7, #4]
 800fb1e:	f004 fcef 	bl	8014500 <USBH_LL_GetLastXferSize>
 800fb22:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800fb24:	697b      	ldr	r3, [r7, #20]
 800fb26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb28:	68fa      	ldr	r2, [r7, #12]
 800fb2a:	429a      	cmp	r2, r3
 800fb2c:	d016      	beq.n	800fb5c <CDC_ProcessReception+0x9e>
 800fb2e:	697b      	ldr	r3, [r7, #20]
 800fb30:	8b5b      	ldrh	r3, [r3, #26]
 800fb32:	461a      	mov	r2, r3
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	4293      	cmp	r3, r2
 800fb38:	d110      	bne.n	800fb5c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800fb3a:	697b      	ldr	r3, [r7, #20]
 800fb3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	1ad2      	subs	r2, r2, r3
 800fb42:	697b      	ldr	r3, [r7, #20]
 800fb44:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800fb46:	697b      	ldr	r3, [r7, #20]
 800fb48:	6a1a      	ldr	r2, [r3, #32]
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	441a      	add	r2, r3
 800fb4e:	697b      	ldr	r3, [r7, #20]
 800fb50:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800fb52:	697b      	ldr	r3, [r7, #20]
 800fb54:	2203      	movs	r2, #3
 800fb56:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 800fb5a:	e006      	b.n	800fb6a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800fb5c:	697b      	ldr	r3, [r7, #20]
 800fb5e:	2200      	movs	r2, #0
 800fb60:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800fb64:	6878      	ldr	r0, [r7, #4]
 800fb66:	f000 f81d 	bl	800fba4 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	2204      	movs	r2, #4
 800fb6e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800fb7e:	2200      	movs	r2, #0
 800fb80:	4619      	mov	r1, r3
 800fb82:	f002 f86b 	bl	8011c5c <osMessagePut>
      break;
 800fb86:	bf00      	nop
  }
}
 800fb88:	bf00      	nop
 800fb8a:	3718      	adds	r7, #24
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	bd80      	pop	{r7, pc}

0800fb90 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800fb90:	b480      	push	{r7}
 800fb92:	b083      	sub	sp, #12
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800fb98:	bf00      	nop
 800fb9a:	370c      	adds	r7, #12
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba2:	4770      	bx	lr

0800fba4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800fba4:	b480      	push	{r7}
 800fba6:	b083      	sub	sp, #12
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800fbac:	bf00      	nop
 800fbae:	370c      	adds	r7, #12
 800fbb0:	46bd      	mov	sp, r7
 800fbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb6:	4770      	bx	lr

0800fbb8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800fbb8:	b480      	push	{r7}
 800fbba:	b083      	sub	sp, #12
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800fbc0:	bf00      	nop
 800fbc2:	370c      	adds	r7, #12
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbca:	4770      	bx	lr

0800fbcc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800fbcc:	b5b0      	push	{r4, r5, r7, lr}
 800fbce:	b090      	sub	sp, #64	@ 0x40
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	60f8      	str	r0, [r7, #12]
 800fbd4:	60b9      	str	r1, [r7, #8]
 800fbd6:	4613      	mov	r3, r2
 800fbd8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d101      	bne.n	800fbe4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800fbe0:	2302      	movs	r3, #2
 800fbe2:	e04d      	b.n	800fc80 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	79fa      	ldrb	r2, [r7, #7]
 800fbe8:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	2200      	movs	r2, #0
 800fbf0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800fbfc:	68f8      	ldr	r0, [r7, #12]
 800fbfe:	f000 f847 	bl	800fc90 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	2200      	movs	r2, #0
 800fc06:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	2200      	movs	r2, #0
 800fc0e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	2200      	movs	r2, #0
 800fc16:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	2200      	movs	r2, #0
 800fc1e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800fc22:	68bb      	ldr	r3, [r7, #8]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d003      	beq.n	800fc30 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	68ba      	ldr	r2, [r7, #8]
 800fc2c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800fc30:	4b15      	ldr	r3, [pc, #84]	@ (800fc88 <USBH_Init+0xbc>)
 800fc32:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 800fc36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fc38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800fc3c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800fc40:	2100      	movs	r1, #0
 800fc42:	4618      	mov	r0, r3
 800fc44:	f001 ffe2 	bl	8011c0c <osMessageCreate>
 800fc48:	4602      	mov	r2, r0
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800fc50:	4b0e      	ldr	r3, [pc, #56]	@ (800fc8c <USBH_Init+0xc0>)
 800fc52:	f107 0414 	add.w	r4, r7, #20
 800fc56:	461d      	mov	r5, r3
 800fc58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fc5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fc5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fc60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800fc64:	f107 0314 	add.w	r3, r7, #20
 800fc68:	68f9      	ldr	r1, [r7, #12]
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	f001 ff6e 	bl	8011b4c <osThreadCreate>
 800fc70:	4602      	mov	r2, r0
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800fc78:	68f8      	ldr	r0, [r7, #12]
 800fc7a:	f004 fb8d 	bl	8014398 <USBH_LL_Init>

  return USBH_OK;
 800fc7e:	2300      	movs	r3, #0
}
 800fc80:	4618      	mov	r0, r3
 800fc82:	3740      	adds	r7, #64	@ 0x40
 800fc84:	46bd      	mov	sp, r7
 800fc86:	bdb0      	pop	{r4, r5, r7, pc}
 800fc88:	08014b38 	.word	0x08014b38
 800fc8c:	08014b54 	.word	0x08014b54

0800fc90 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b084      	sub	sp, #16
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800fc98:	2300      	movs	r3, #0
 800fc9a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	60fb      	str	r3, [r7, #12]
 800fca0:	e009      	b.n	800fcb6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800fca2:	687a      	ldr	r2, [r7, #4]
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	33e0      	adds	r3, #224	@ 0xe0
 800fca8:	009b      	lsls	r3, r3, #2
 800fcaa:	4413      	add	r3, r2
 800fcac:	2200      	movs	r2, #0
 800fcae:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	3301      	adds	r3, #1
 800fcb4:	60fb      	str	r3, [r7, #12]
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	2b0f      	cmp	r3, #15
 800fcba:	d9f2      	bls.n	800fca2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	60fb      	str	r3, [r7, #12]
 800fcc0:	e009      	b.n	800fcd6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800fcc2:	687a      	ldr	r2, [r7, #4]
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	4413      	add	r3, r2
 800fcc8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800fccc:	2200      	movs	r2, #0
 800fcce:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	3301      	adds	r3, #1
 800fcd4:	60fb      	str	r3, [r7, #12]
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fcdc:	d3f1      	bcc.n	800fcc2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	2200      	movs	r2, #0
 800fce2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	2200      	movs	r2, #0
 800fce8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	2201      	movs	r2, #1
 800fcee:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	2200      	movs	r2, #0
 800fcf4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	2201      	movs	r2, #1
 800fcfc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	2240      	movs	r2, #64	@ 0x40
 800fd02:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	2200      	movs	r2, #0
 800fd08:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	2200      	movs	r2, #0
 800fd0e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	2201      	movs	r2, #1
 800fd16:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	2200      	movs	r2, #0
 800fd26:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	331c      	adds	r3, #28
 800fd2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800fd32:	2100      	movs	r1, #0
 800fd34:	4618      	mov	r0, r3
 800fd36:	f004 fde3 	bl	8014900 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800fd40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fd44:	2100      	movs	r1, #0
 800fd46:	4618      	mov	r0, r3
 800fd48:	f004 fdda 	bl	8014900 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800fd52:	2212      	movs	r2, #18
 800fd54:	2100      	movs	r1, #0
 800fd56:	4618      	mov	r0, r3
 800fd58:	f004 fdd2 	bl	8014900 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800fd62:	223e      	movs	r2, #62	@ 0x3e
 800fd64:	2100      	movs	r1, #0
 800fd66:	4618      	mov	r0, r3
 800fd68:	f004 fdca 	bl	8014900 <memset>

  return USBH_OK;
 800fd6c:	2300      	movs	r3, #0
}
 800fd6e:	4618      	mov	r0, r3
 800fd70:	3710      	adds	r7, #16
 800fd72:	46bd      	mov	sp, r7
 800fd74:	bd80      	pop	{r7, pc}

0800fd76 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800fd76:	b480      	push	{r7}
 800fd78:	b085      	sub	sp, #20
 800fd7a:	af00      	add	r7, sp, #0
 800fd7c:	6078      	str	r0, [r7, #4]
 800fd7e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800fd80:	2300      	movs	r3, #0
 800fd82:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800fd84:	683b      	ldr	r3, [r7, #0]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d016      	beq.n	800fdb8 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d10e      	bne.n	800fdb2 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800fd9a:	1c59      	adds	r1, r3, #1
 800fd9c:	687a      	ldr	r2, [r7, #4]
 800fd9e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800fda2:	687a      	ldr	r2, [r7, #4]
 800fda4:	33de      	adds	r3, #222	@ 0xde
 800fda6:	6839      	ldr	r1, [r7, #0]
 800fda8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800fdac:	2300      	movs	r3, #0
 800fdae:	73fb      	strb	r3, [r7, #15]
 800fdb0:	e004      	b.n	800fdbc <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800fdb2:	2302      	movs	r3, #2
 800fdb4:	73fb      	strb	r3, [r7, #15]
 800fdb6:	e001      	b.n	800fdbc <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800fdb8:	2302      	movs	r3, #2
 800fdba:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800fdbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	3714      	adds	r7, #20
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc8:	4770      	bx	lr

0800fdca <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800fdca:	b480      	push	{r7}
 800fdcc:	b085      	sub	sp, #20
 800fdce:	af00      	add	r7, sp, #0
 800fdd0:	6078      	str	r0, [r7, #4]
 800fdd2:	460b      	mov	r3, r1
 800fdd4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800fde0:	78fa      	ldrb	r2, [r7, #3]
 800fde2:	429a      	cmp	r2, r3
 800fde4:	d204      	bcs.n	800fdf0 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	78fa      	ldrb	r2, [r7, #3]
 800fdea:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800fdee:	e001      	b.n	800fdf4 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800fdf0:	2302      	movs	r3, #2
 800fdf2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800fdf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	3714      	adds	r7, #20
 800fdfa:	46bd      	mov	sp, r7
 800fdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe00:	4770      	bx	lr

0800fe02 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800fe02:	b480      	push	{r7}
 800fe04:	b087      	sub	sp, #28
 800fe06:	af00      	add	r7, sp, #0
 800fe08:	6078      	str	r0, [r7, #4]
 800fe0a:	4608      	mov	r0, r1
 800fe0c:	4611      	mov	r1, r2
 800fe0e:	461a      	mov	r2, r3
 800fe10:	4603      	mov	r3, r0
 800fe12:	70fb      	strb	r3, [r7, #3]
 800fe14:	460b      	mov	r3, r1
 800fe16:	70bb      	strb	r3, [r7, #2]
 800fe18:	4613      	mov	r3, r2
 800fe1a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800fe20:	2300      	movs	r3, #0
 800fe22:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800fe2a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800fe2c:	e025      	b.n	800fe7a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800fe2e:	7dfb      	ldrb	r3, [r7, #23]
 800fe30:	221a      	movs	r2, #26
 800fe32:	fb02 f303 	mul.w	r3, r2, r3
 800fe36:	3308      	adds	r3, #8
 800fe38:	68fa      	ldr	r2, [r7, #12]
 800fe3a:	4413      	add	r3, r2
 800fe3c:	3302      	adds	r3, #2
 800fe3e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800fe40:	693b      	ldr	r3, [r7, #16]
 800fe42:	795b      	ldrb	r3, [r3, #5]
 800fe44:	78fa      	ldrb	r2, [r7, #3]
 800fe46:	429a      	cmp	r2, r3
 800fe48:	d002      	beq.n	800fe50 <USBH_FindInterface+0x4e>
 800fe4a:	78fb      	ldrb	r3, [r7, #3]
 800fe4c:	2bff      	cmp	r3, #255	@ 0xff
 800fe4e:	d111      	bne.n	800fe74 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800fe50:	693b      	ldr	r3, [r7, #16]
 800fe52:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800fe54:	78ba      	ldrb	r2, [r7, #2]
 800fe56:	429a      	cmp	r2, r3
 800fe58:	d002      	beq.n	800fe60 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800fe5a:	78bb      	ldrb	r3, [r7, #2]
 800fe5c:	2bff      	cmp	r3, #255	@ 0xff
 800fe5e:	d109      	bne.n	800fe74 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800fe60:	693b      	ldr	r3, [r7, #16]
 800fe62:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800fe64:	787a      	ldrb	r2, [r7, #1]
 800fe66:	429a      	cmp	r2, r3
 800fe68:	d002      	beq.n	800fe70 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800fe6a:	787b      	ldrb	r3, [r7, #1]
 800fe6c:	2bff      	cmp	r3, #255	@ 0xff
 800fe6e:	d101      	bne.n	800fe74 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800fe70:	7dfb      	ldrb	r3, [r7, #23]
 800fe72:	e006      	b.n	800fe82 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800fe74:	7dfb      	ldrb	r3, [r7, #23]
 800fe76:	3301      	adds	r3, #1
 800fe78:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800fe7a:	7dfb      	ldrb	r3, [r7, #23]
 800fe7c:	2b01      	cmp	r3, #1
 800fe7e:	d9d6      	bls.n	800fe2e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800fe80:	23ff      	movs	r3, #255	@ 0xff
}
 800fe82:	4618      	mov	r0, r3
 800fe84:	371c      	adds	r7, #28
 800fe86:	46bd      	mov	sp, r7
 800fe88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8c:	4770      	bx	lr

0800fe8e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800fe8e:	b580      	push	{r7, lr}
 800fe90:	b082      	sub	sp, #8
 800fe92:	af00      	add	r7, sp, #0
 800fe94:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800fe96:	6878      	ldr	r0, [r7, #4]
 800fe98:	f004 faba 	bl	8014410 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800fe9c:	2101      	movs	r1, #1
 800fe9e:	6878      	ldr	r0, [r7, #4]
 800fea0:	f004 fbd3 	bl	801464a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800fea4:	2300      	movs	r3, #0
}
 800fea6:	4618      	mov	r0, r3
 800fea8:	3708      	adds	r7, #8
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd80      	pop	{r7, pc}
	...

0800feb0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b088      	sub	sp, #32
 800feb4:	af04      	add	r7, sp, #16
 800feb6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800feb8:	2302      	movs	r3, #2
 800feba:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800febc:	2300      	movs	r3, #0
 800febe:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800fec6:	b2db      	uxtb	r3, r3
 800fec8:	2b01      	cmp	r3, #1
 800feca:	d102      	bne.n	800fed2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	2203      	movs	r2, #3
 800fed0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	781b      	ldrb	r3, [r3, #0]
 800fed6:	b2db      	uxtb	r3, r3
 800fed8:	2b0b      	cmp	r3, #11
 800feda:	f200 8244 	bhi.w	8010366 <USBH_Process+0x4b6>
 800fede:	a201      	add	r2, pc, #4	@ (adr r2, 800fee4 <USBH_Process+0x34>)
 800fee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fee4:	0800ff15 	.word	0x0800ff15
 800fee8:	0800ff63 	.word	0x0800ff63
 800feec:	0800ffe7 	.word	0x0800ffe7
 800fef0:	080102e5 	.word	0x080102e5
 800fef4:	08010367 	.word	0x08010367
 800fef8:	080100a3 	.word	0x080100a3
 800fefc:	0801026f 	.word	0x0801026f
 800ff00:	080100f5 	.word	0x080100f5
 800ff04:	08010131 	.word	0x08010131
 800ff08:	08010169 	.word	0x08010169
 800ff0c:	080101c7 	.word	0x080101c7
 800ff10:	080102cd 	.word	0x080102cd
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800ff1a:	b2db      	uxtb	r3, r3
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	f000 8224 	beq.w	801036a <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	2201      	movs	r2, #1
 800ff26:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800ff28:	20c8      	movs	r0, #200	@ 0xc8
 800ff2a:	f004 fbd8 	bl	80146de <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800ff2e:	6878      	ldr	r0, [r7, #4]
 800ff30:	f004 facb 	bl	80144ca <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	2200      	movs	r2, #0
 800ff38:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	2200      	movs	r2, #0
 800ff40:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	2201      	movs	r2, #1
 800ff48:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800ff58:	2200      	movs	r2, #0
 800ff5a:	4619      	mov	r1, r3
 800ff5c:	f001 fe7e 	bl	8011c5c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ff60:	e203      	b.n	801036a <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800ff68:	2b01      	cmp	r3, #1
 800ff6a:	d107      	bne.n	800ff7c <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	2200      	movs	r2, #0
 800ff70:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	2202      	movs	r2, #2
 800ff78:	701a      	strb	r2, [r3, #0]
 800ff7a:	e025      	b.n	800ffc8 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800ff82:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ff86:	d914      	bls.n	800ffb2 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800ff8e:	3301      	adds	r3, #1
 800ff90:	b2da      	uxtb	r2, r3
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800ff9e:	2b03      	cmp	r3, #3
 800ffa0:	d903      	bls.n	800ffaa <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	220d      	movs	r2, #13
 800ffa6:	701a      	strb	r2, [r3, #0]
 800ffa8:	e00e      	b.n	800ffc8 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	2200      	movs	r2, #0
 800ffae:	701a      	strb	r2, [r3, #0]
 800ffb0:	e00a      	b.n	800ffc8 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800ffb8:	f103 020a 	add.w	r2, r3, #10
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800ffc2:	200a      	movs	r0, #10
 800ffc4:	f004 fb8b 	bl	80146de <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	2201      	movs	r2, #1
 800ffcc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800ffdc:	2200      	movs	r2, #0
 800ffde:	4619      	mov	r1, r3
 800ffe0:	f001 fe3c 	bl	8011c5c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ffe4:	e1c8      	b.n	8010378 <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d005      	beq.n	800fffc <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800fff6:	2104      	movs	r1, #4
 800fff8:	6878      	ldr	r0, [r7, #4]
 800fffa:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800fffc:	2064      	movs	r0, #100	@ 0x64
 800fffe:	f004 fb6e 	bl	80146de <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8010002:	6878      	ldr	r0, [r7, #4]
 8010004:	f004 fa3a 	bl	801447c <USBH_LL_GetSpeed>
 8010008:	4603      	mov	r3, r0
 801000a:	461a      	mov	r2, r3
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	2205      	movs	r2, #5
 8010016:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8010018:	2100      	movs	r1, #0
 801001a:	6878      	ldr	r0, [r7, #4]
 801001c:	f001 fc8b 	bl	8011936 <USBH_AllocPipe>
 8010020:	4603      	mov	r3, r0
 8010022:	461a      	mov	r2, r3
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8010028:	2180      	movs	r1, #128	@ 0x80
 801002a:	6878      	ldr	r0, [r7, #4]
 801002c:	f001 fc83 	bl	8011936 <USBH_AllocPipe>
 8010030:	4603      	mov	r3, r0
 8010032:	461a      	mov	r2, r3
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	7919      	ldrb	r1, [r3, #4]
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8010048:	687a      	ldr	r2, [r7, #4]
 801004a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 801004c:	9202      	str	r2, [sp, #8]
 801004e:	2200      	movs	r2, #0
 8010050:	9201      	str	r2, [sp, #4]
 8010052:	9300      	str	r3, [sp, #0]
 8010054:	4603      	mov	r3, r0
 8010056:	2280      	movs	r2, #128	@ 0x80
 8010058:	6878      	ldr	r0, [r7, #4]
 801005a:	f001 fc3d 	bl	80118d8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	7959      	ldrb	r1, [r3, #5]
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 801006e:	687a      	ldr	r2, [r7, #4]
 8010070:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8010072:	9202      	str	r2, [sp, #8]
 8010074:	2200      	movs	r2, #0
 8010076:	9201      	str	r2, [sp, #4]
 8010078:	9300      	str	r3, [sp, #0]
 801007a:	4603      	mov	r3, r0
 801007c:	2200      	movs	r2, #0
 801007e:	6878      	ldr	r0, [r7, #4]
 8010080:	f001 fc2a 	bl	80118d8 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	2201      	movs	r2, #1
 8010088:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010098:	2200      	movs	r2, #0
 801009a:	4619      	mov	r1, r3
 801009c:	f001 fdde 	bl	8011c5c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80100a0:	e16a      	b.n	8010378 <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80100a2:	6878      	ldr	r0, [r7, #4]
 80100a4:	f000 f96e 	bl	8010384 <USBH_HandleEnum>
 80100a8:	4603      	mov	r3, r0
 80100aa:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80100ac:	7bbb      	ldrb	r3, [r7, #14]
 80100ae:	b2db      	uxtb	r3, r3
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	f040 815c 	bne.w	801036e <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	2200      	movs	r2, #0
 80100ba:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80100c4:	2b01      	cmp	r3, #1
 80100c6:	d103      	bne.n	80100d0 <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	2208      	movs	r2, #8
 80100cc:	701a      	strb	r2, [r3, #0]
 80100ce:	e002      	b.n	80100d6 <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	2207      	movs	r2, #7
 80100d4:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	2205      	movs	r2, #5
 80100da:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80100ea:	2200      	movs	r2, #0
 80100ec:	4619      	mov	r1, r3
 80100ee:	f001 fdb5 	bl	8011c5c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80100f2:	e13c      	b.n	801036e <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	f000 8139 	beq.w	8010372 <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8010106:	2101      	movs	r1, #1
 8010108:	6878      	ldr	r0, [r7, #4]
 801010a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	2208      	movs	r2, #8
 8010110:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	2205      	movs	r2, #5
 8010116:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010126:	2200      	movs	r2, #0
 8010128:	4619      	mov	r1, r3
 801012a:	f001 fd97 	bl	8011c5c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 801012e:	e120      	b.n	8010372 <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8010136:	4619      	mov	r1, r3
 8010138:	6878      	ldr	r0, [r7, #4]
 801013a:	f000 fd10 	bl	8010b5e <USBH_SetCfg>
 801013e:	4603      	mov	r3, r0
 8010140:	2b00      	cmp	r3, #0
 8010142:	d102      	bne.n	801014a <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	2209      	movs	r2, #9
 8010148:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	2201      	movs	r2, #1
 801014e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 801015e:	2200      	movs	r2, #0
 8010160:	4619      	mov	r1, r3
 8010162:	f001 fd7b 	bl	8011c5c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8010166:	e107      	b.n	8010378 <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 801016e:	f003 0320 	and.w	r3, r3, #32
 8010172:	2b00      	cmp	r3, #0
 8010174:	d015      	beq.n	80101a2 <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8010176:	2101      	movs	r1, #1
 8010178:	6878      	ldr	r0, [r7, #4]
 801017a:	f000 fd13 	bl	8010ba4 <USBH_SetFeature>
 801017e:	4603      	mov	r3, r0
 8010180:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8010182:	7bbb      	ldrb	r3, [r7, #14]
 8010184:	b2db      	uxtb	r3, r3
 8010186:	2b00      	cmp	r3, #0
 8010188:	d103      	bne.n	8010192 <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	220a      	movs	r2, #10
 801018e:	701a      	strb	r2, [r3, #0]
 8010190:	e00a      	b.n	80101a8 <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8010192:	7bbb      	ldrb	r3, [r7, #14]
 8010194:	b2db      	uxtb	r3, r3
 8010196:	2b03      	cmp	r3, #3
 8010198:	d106      	bne.n	80101a8 <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	220a      	movs	r2, #10
 801019e:	701a      	strb	r2, [r3, #0]
 80101a0:	e002      	b.n	80101a8 <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	220a      	movs	r2, #10
 80101a6:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	2201      	movs	r2, #1
 80101ac:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80101bc:	2200      	movs	r2, #0
 80101be:	4619      	mov	r1, r3
 80101c0:	f001 fd4c 	bl	8011c5c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80101c4:	e0d8      	b.n	8010378 <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d03f      	beq.n	8010250 <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	2200      	movs	r2, #0
 80101d4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80101d8:	2300      	movs	r3, #0
 80101da:	73fb      	strb	r3, [r7, #15]
 80101dc:	e016      	b.n	801020c <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80101de:	7bfa      	ldrb	r2, [r7, #15]
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	32de      	adds	r2, #222	@ 0xde
 80101e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101e8:	791a      	ldrb	r2, [r3, #4]
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80101f0:	429a      	cmp	r2, r3
 80101f2:	d108      	bne.n	8010206 <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 80101f4:	7bfa      	ldrb	r2, [r7, #15]
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	32de      	adds	r2, #222	@ 0xde
 80101fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8010204:	e005      	b.n	8010212 <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8010206:	7bfb      	ldrb	r3, [r7, #15]
 8010208:	3301      	adds	r3, #1
 801020a:	73fb      	strb	r3, [r7, #15]
 801020c:	7bfb      	ldrb	r3, [r7, #15]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d0e5      	beq.n	80101de <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010218:	2b00      	cmp	r3, #0
 801021a:	d016      	beq.n	801024a <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010222:	689b      	ldr	r3, [r3, #8]
 8010224:	6878      	ldr	r0, [r7, #4]
 8010226:	4798      	blx	r3
 8010228:	4603      	mov	r3, r0
 801022a:	2b00      	cmp	r3, #0
 801022c:	d109      	bne.n	8010242 <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	2206      	movs	r2, #6
 8010232:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 801023a:	2103      	movs	r1, #3
 801023c:	6878      	ldr	r0, [r7, #4]
 801023e:	4798      	blx	r3
 8010240:	e006      	b.n	8010250 <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	220d      	movs	r2, #13
 8010246:	701a      	strb	r2, [r3, #0]
 8010248:	e002      	b.n	8010250 <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	220d      	movs	r2, #13
 801024e:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	2205      	movs	r2, #5
 8010254:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010264:	2200      	movs	r2, #0
 8010266:	4619      	mov	r1, r3
 8010268:	f001 fcf8 	bl	8011c5c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 801026c:	e084      	b.n	8010378 <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010274:	2b00      	cmp	r3, #0
 8010276:	d017      	beq.n	80102a8 <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801027e:	691b      	ldr	r3, [r3, #16]
 8010280:	6878      	ldr	r0, [r7, #4]
 8010282:	4798      	blx	r3
 8010284:	4603      	mov	r3, r0
 8010286:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8010288:	7bbb      	ldrb	r3, [r7, #14]
 801028a:	b2db      	uxtb	r3, r3
 801028c:	2b00      	cmp	r3, #0
 801028e:	d103      	bne.n	8010298 <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	220b      	movs	r2, #11
 8010294:	701a      	strb	r2, [r3, #0]
 8010296:	e00a      	b.n	80102ae <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 8010298:	7bbb      	ldrb	r3, [r7, #14]
 801029a:	b2db      	uxtb	r3, r3
 801029c:	2b02      	cmp	r3, #2
 801029e:	d106      	bne.n	80102ae <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	220d      	movs	r2, #13
 80102a4:	701a      	strb	r2, [r3, #0]
 80102a6:	e002      	b.n	80102ae <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	220d      	movs	r2, #13
 80102ac:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	2205      	movs	r2, #5
 80102b2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80102c2:	2200      	movs	r2, #0
 80102c4:	4619      	mov	r1, r3
 80102c6:	f001 fcc9 	bl	8011c5c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80102ca:	e055      	b.n	8010378 <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d04f      	beq.n	8010376 <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80102dc:	695b      	ldr	r3, [r3, #20]
 80102de:	6878      	ldr	r0, [r7, #4]
 80102e0:	4798      	blx	r3
      }
      break;
 80102e2:	e048      	b.n	8010376 <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	2200      	movs	r2, #0
 80102e8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80102ec:	6878      	ldr	r0, [r7, #4]
 80102ee:	f7ff fccf 	bl	800fc90 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d009      	beq.n	8010310 <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010302:	68db      	ldr	r3, [r3, #12]
 8010304:	6878      	ldr	r0, [r7, #4]
 8010306:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	2200      	movs	r2, #0
 801030c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8010316:	2b00      	cmp	r3, #0
 8010318:	d005      	beq.n	8010326 <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8010320:	2105      	movs	r1, #5
 8010322:	6878      	ldr	r0, [r7, #4]
 8010324:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 801032c:	b2db      	uxtb	r3, r3
 801032e:	2b01      	cmp	r3, #1
 8010330:	d107      	bne.n	8010342 <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	2200      	movs	r2, #0
 8010336:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 801033a:	6878      	ldr	r0, [r7, #4]
 801033c:	f7ff fda7 	bl	800fe8e <USBH_Start>
 8010340:	e002      	b.n	8010348 <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8010342:	6878      	ldr	r0, [r7, #4]
 8010344:	f004 f864 	bl	8014410 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	2201      	movs	r2, #1
 801034c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 801035c:	2200      	movs	r2, #0
 801035e:	4619      	mov	r1, r3
 8010360:	f001 fc7c 	bl	8011c5c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8010364:	e008      	b.n	8010378 <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 8010366:	bf00      	nop
 8010368:	e006      	b.n	8010378 <USBH_Process+0x4c8>
      break;
 801036a:	bf00      	nop
 801036c:	e004      	b.n	8010378 <USBH_Process+0x4c8>
      break;
 801036e:	bf00      	nop
 8010370:	e002      	b.n	8010378 <USBH_Process+0x4c8>
    break;
 8010372:	bf00      	nop
 8010374:	e000      	b.n	8010378 <USBH_Process+0x4c8>
      break;
 8010376:	bf00      	nop
  }
  return USBH_OK;
 8010378:	2300      	movs	r3, #0
}
 801037a:	4618      	mov	r0, r3
 801037c:	3710      	adds	r7, #16
 801037e:	46bd      	mov	sp, r7
 8010380:	bd80      	pop	{r7, pc}
 8010382:	bf00      	nop

08010384 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8010384:	b580      	push	{r7, lr}
 8010386:	b088      	sub	sp, #32
 8010388:	af04      	add	r7, sp, #16
 801038a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 801038c:	2301      	movs	r3, #1
 801038e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8010390:	2301      	movs	r3, #1
 8010392:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	785b      	ldrb	r3, [r3, #1]
 8010398:	2b07      	cmp	r3, #7
 801039a:	f200 8204 	bhi.w	80107a6 <USBH_HandleEnum+0x422>
 801039e:	a201      	add	r2, pc, #4	@ (adr r2, 80103a4 <USBH_HandleEnum+0x20>)
 80103a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103a4:	080103c5 	.word	0x080103c5
 80103a8:	0801047f 	.word	0x0801047f
 80103ac:	080104e9 	.word	0x080104e9
 80103b0:	08010573 	.word	0x08010573
 80103b4:	080105dd 	.word	0x080105dd
 80103b8:	0801064d 	.word	0x0801064d
 80103bc:	080106e9 	.word	0x080106e9
 80103c0:	08010767 	.word	0x08010767
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80103c4:	2108      	movs	r1, #8
 80103c6:	6878      	ldr	r0, [r7, #4]
 80103c8:	f000 fae6 	bl	8010998 <USBH_Get_DevDesc>
 80103cc:	4603      	mov	r3, r0
 80103ce:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80103d0:	7bbb      	ldrb	r3, [r7, #14]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d12e      	bne.n	8010434 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	2201      	movs	r2, #1
 80103e4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	7919      	ldrb	r1, [r3, #4]
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80103f6:	687a      	ldr	r2, [r7, #4]
 80103f8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80103fa:	9202      	str	r2, [sp, #8]
 80103fc:	2200      	movs	r2, #0
 80103fe:	9201      	str	r2, [sp, #4]
 8010400:	9300      	str	r3, [sp, #0]
 8010402:	4603      	mov	r3, r0
 8010404:	2280      	movs	r2, #128	@ 0x80
 8010406:	6878      	ldr	r0, [r7, #4]
 8010408:	f001 fa66 	bl	80118d8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	7959      	ldrb	r1, [r3, #5]
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 801041c:	687a      	ldr	r2, [r7, #4]
 801041e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8010420:	9202      	str	r2, [sp, #8]
 8010422:	2200      	movs	r2, #0
 8010424:	9201      	str	r2, [sp, #4]
 8010426:	9300      	str	r3, [sp, #0]
 8010428:	4603      	mov	r3, r0
 801042a:	2200      	movs	r2, #0
 801042c:	6878      	ldr	r0, [r7, #4]
 801042e:	f001 fa53 	bl	80118d8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8010432:	e1ba      	b.n	80107aa <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010434:	7bbb      	ldrb	r3, [r7, #14]
 8010436:	2b03      	cmp	r3, #3
 8010438:	f040 81b7 	bne.w	80107aa <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8010442:	3301      	adds	r3, #1
 8010444:	b2da      	uxtb	r2, r3
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8010452:	2b03      	cmp	r3, #3
 8010454:	d903      	bls.n	801045e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	220d      	movs	r2, #13
 801045a:	701a      	strb	r2, [r3, #0]
      break;
 801045c:	e1a5      	b.n	80107aa <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	795b      	ldrb	r3, [r3, #5]
 8010462:	4619      	mov	r1, r3
 8010464:	6878      	ldr	r0, [r7, #4]
 8010466:	f001 fa87 	bl	8011978 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	791b      	ldrb	r3, [r3, #4]
 801046e:	4619      	mov	r1, r3
 8010470:	6878      	ldr	r0, [r7, #4]
 8010472:	f001 fa81 	bl	8011978 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	2200      	movs	r2, #0
 801047a:	701a      	strb	r2, [r3, #0]
      break;
 801047c:	e195      	b.n	80107aa <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 801047e:	2112      	movs	r1, #18
 8010480:	6878      	ldr	r0, [r7, #4]
 8010482:	f000 fa89 	bl	8010998 <USBH_Get_DevDesc>
 8010486:	4603      	mov	r3, r0
 8010488:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801048a:	7bbb      	ldrb	r3, [r7, #14]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d103      	bne.n	8010498 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	2202      	movs	r2, #2
 8010494:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8010496:	e18a      	b.n	80107ae <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010498:	7bbb      	ldrb	r3, [r7, #14]
 801049a:	2b03      	cmp	r3, #3
 801049c:	f040 8187 	bne.w	80107ae <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80104a6:	3301      	adds	r3, #1
 80104a8:	b2da      	uxtb	r2, r3
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80104b6:	2b03      	cmp	r3, #3
 80104b8:	d903      	bls.n	80104c2 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	220d      	movs	r2, #13
 80104be:	701a      	strb	r2, [r3, #0]
      break;
 80104c0:	e175      	b.n	80107ae <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	795b      	ldrb	r3, [r3, #5]
 80104c6:	4619      	mov	r1, r3
 80104c8:	6878      	ldr	r0, [r7, #4]
 80104ca:	f001 fa55 	bl	8011978 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	791b      	ldrb	r3, [r3, #4]
 80104d2:	4619      	mov	r1, r3
 80104d4:	6878      	ldr	r0, [r7, #4]
 80104d6:	f001 fa4f 	bl	8011978 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	2200      	movs	r2, #0
 80104de:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	2200      	movs	r2, #0
 80104e4:	701a      	strb	r2, [r3, #0]
      break;
 80104e6:	e162      	b.n	80107ae <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80104e8:	2101      	movs	r1, #1
 80104ea:	6878      	ldr	r0, [r7, #4]
 80104ec:	f000 fb13 	bl	8010b16 <USBH_SetAddress>
 80104f0:	4603      	mov	r3, r0
 80104f2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80104f4:	7bbb      	ldrb	r3, [r7, #14]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d130      	bne.n	801055c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80104fa:	2002      	movs	r0, #2
 80104fc:	f004 f8ef 	bl	80146de <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	2201      	movs	r2, #1
 8010504:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	2203      	movs	r2, #3
 801050c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	7919      	ldrb	r1, [r3, #4]
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 801051e:	687a      	ldr	r2, [r7, #4]
 8010520:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8010522:	9202      	str	r2, [sp, #8]
 8010524:	2200      	movs	r2, #0
 8010526:	9201      	str	r2, [sp, #4]
 8010528:	9300      	str	r3, [sp, #0]
 801052a:	4603      	mov	r3, r0
 801052c:	2280      	movs	r2, #128	@ 0x80
 801052e:	6878      	ldr	r0, [r7, #4]
 8010530:	f001 f9d2 	bl	80118d8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	7959      	ldrb	r1, [r3, #5]
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8010544:	687a      	ldr	r2, [r7, #4]
 8010546:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8010548:	9202      	str	r2, [sp, #8]
 801054a:	2200      	movs	r2, #0
 801054c:	9201      	str	r2, [sp, #4]
 801054e:	9300      	str	r3, [sp, #0]
 8010550:	4603      	mov	r3, r0
 8010552:	2200      	movs	r2, #0
 8010554:	6878      	ldr	r0, [r7, #4]
 8010556:	f001 f9bf 	bl	80118d8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 801055a:	e12a      	b.n	80107b2 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 801055c:	7bbb      	ldrb	r3, [r7, #14]
 801055e:	2b03      	cmp	r3, #3
 8010560:	f040 8127 	bne.w	80107b2 <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	220d      	movs	r2, #13
 8010568:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	2200      	movs	r2, #0
 801056e:	705a      	strb	r2, [r3, #1]
      break;
 8010570:	e11f      	b.n	80107b2 <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8010572:	2109      	movs	r1, #9
 8010574:	6878      	ldr	r0, [r7, #4]
 8010576:	f000 fa3b 	bl	80109f0 <USBH_Get_CfgDesc>
 801057a:	4603      	mov	r3, r0
 801057c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 801057e:	7bbb      	ldrb	r3, [r7, #14]
 8010580:	2b00      	cmp	r3, #0
 8010582:	d103      	bne.n	801058c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2204      	movs	r2, #4
 8010588:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801058a:	e114      	b.n	80107b6 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 801058c:	7bbb      	ldrb	r3, [r7, #14]
 801058e:	2b03      	cmp	r3, #3
 8010590:	f040 8111 	bne.w	80107b6 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 801059a:	3301      	adds	r3, #1
 801059c:	b2da      	uxtb	r2, r3
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80105aa:	2b03      	cmp	r3, #3
 80105ac:	d903      	bls.n	80105b6 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	220d      	movs	r2, #13
 80105b2:	701a      	strb	r2, [r3, #0]
      break;
 80105b4:	e0ff      	b.n	80107b6 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	795b      	ldrb	r3, [r3, #5]
 80105ba:	4619      	mov	r1, r3
 80105bc:	6878      	ldr	r0, [r7, #4]
 80105be:	f001 f9db 	bl	8011978 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	791b      	ldrb	r3, [r3, #4]
 80105c6:	4619      	mov	r1, r3
 80105c8:	6878      	ldr	r0, [r7, #4]
 80105ca:	f001 f9d5 	bl	8011978 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	2200      	movs	r2, #0
 80105d2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	2200      	movs	r2, #0
 80105d8:	701a      	strb	r2, [r3, #0]
      break;
 80105da:	e0ec      	b.n	80107b6 <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80105e2:	4619      	mov	r1, r3
 80105e4:	6878      	ldr	r0, [r7, #4]
 80105e6:	f000 fa03 	bl	80109f0 <USBH_Get_CfgDesc>
 80105ea:	4603      	mov	r3, r0
 80105ec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80105ee:	7bbb      	ldrb	r3, [r7, #14]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d103      	bne.n	80105fc <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	2205      	movs	r2, #5
 80105f8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80105fa:	e0de      	b.n	80107ba <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80105fc:	7bbb      	ldrb	r3, [r7, #14]
 80105fe:	2b03      	cmp	r3, #3
 8010600:	f040 80db 	bne.w	80107ba <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 801060a:	3301      	adds	r3, #1
 801060c:	b2da      	uxtb	r2, r3
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 801061a:	2b03      	cmp	r3, #3
 801061c:	d903      	bls.n	8010626 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	220d      	movs	r2, #13
 8010622:	701a      	strb	r2, [r3, #0]
      break;
 8010624:	e0c9      	b.n	80107ba <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	795b      	ldrb	r3, [r3, #5]
 801062a:	4619      	mov	r1, r3
 801062c:	6878      	ldr	r0, [r7, #4]
 801062e:	f001 f9a3 	bl	8011978 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	791b      	ldrb	r3, [r3, #4]
 8010636:	4619      	mov	r1, r3
 8010638:	6878      	ldr	r0, [r7, #4]
 801063a:	f001 f99d 	bl	8011978 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	2200      	movs	r2, #0
 8010642:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	2200      	movs	r2, #0
 8010648:	701a      	strb	r2, [r3, #0]
      break;
 801064a:	e0b6      	b.n	80107ba <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8010652:	2b00      	cmp	r3, #0
 8010654:	d036      	beq.n	80106c4 <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8010662:	23ff      	movs	r3, #255	@ 0xff
 8010664:	6878      	ldr	r0, [r7, #4]
 8010666:	f000 f9ed 	bl	8010a44 <USBH_Get_StringDesc>
 801066a:	4603      	mov	r3, r0
 801066c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801066e:	7bbb      	ldrb	r3, [r7, #14]
 8010670:	2b00      	cmp	r3, #0
 8010672:	d111      	bne.n	8010698 <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	2206      	movs	r2, #6
 8010678:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	2205      	movs	r2, #5
 801067e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 801068e:	2200      	movs	r2, #0
 8010690:	4619      	mov	r1, r3
 8010692:	f001 fae3 	bl	8011c5c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8010696:	e092      	b.n	80107be <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010698:	7bbb      	ldrb	r3, [r7, #14]
 801069a:	2b03      	cmp	r3, #3
 801069c:	f040 808f 	bne.w	80107be <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	2206      	movs	r2, #6
 80106a4:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	2205      	movs	r2, #5
 80106aa:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80106ba:	2200      	movs	r2, #0
 80106bc:	4619      	mov	r1, r3
 80106be:	f001 facd 	bl	8011c5c <osMessagePut>
      break;
 80106c2:	e07c      	b.n	80107be <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	2206      	movs	r2, #6
 80106c8:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	2205      	movs	r2, #5
 80106ce:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80106de:	2200      	movs	r2, #0
 80106e0:	4619      	mov	r1, r3
 80106e2:	f001 fabb 	bl	8011c5c <osMessagePut>
      break;
 80106e6:	e06a      	b.n	80107be <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d027      	beq.n	8010742 <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80106fe:	23ff      	movs	r3, #255	@ 0xff
 8010700:	6878      	ldr	r0, [r7, #4]
 8010702:	f000 f99f 	bl	8010a44 <USBH_Get_StringDesc>
 8010706:	4603      	mov	r3, r0
 8010708:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801070a:	7bbb      	ldrb	r3, [r7, #14]
 801070c:	2b00      	cmp	r3, #0
 801070e:	d103      	bne.n	8010718 <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	2207      	movs	r2, #7
 8010714:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8010716:	e054      	b.n	80107c2 <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010718:	7bbb      	ldrb	r3, [r7, #14]
 801071a:	2b03      	cmp	r3, #3
 801071c:	d151      	bne.n	80107c2 <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	2207      	movs	r2, #7
 8010722:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	2205      	movs	r2, #5
 8010728:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010738:	2200      	movs	r2, #0
 801073a:	4619      	mov	r1, r3
 801073c:	f001 fa8e 	bl	8011c5c <osMessagePut>
      break;
 8010740:	e03f      	b.n	80107c2 <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	2207      	movs	r2, #7
 8010746:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	2205      	movs	r2, #5
 801074c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 801075c:	2200      	movs	r2, #0
 801075e:	4619      	mov	r1, r3
 8010760:	f001 fa7c 	bl	8011c5c <osMessagePut>
      break;
 8010764:	e02d      	b.n	80107c2 <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 801076c:	2b00      	cmp	r3, #0
 801076e:	d017      	beq.n	80107a0 <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 801077c:	23ff      	movs	r3, #255	@ 0xff
 801077e:	6878      	ldr	r0, [r7, #4]
 8010780:	f000 f960 	bl	8010a44 <USBH_Get_StringDesc>
 8010784:	4603      	mov	r3, r0
 8010786:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8010788:	7bbb      	ldrb	r3, [r7, #14]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d102      	bne.n	8010794 <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 801078e:	2300      	movs	r3, #0
 8010790:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8010792:	e018      	b.n	80107c6 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010794:	7bbb      	ldrb	r3, [r7, #14]
 8010796:	2b03      	cmp	r3, #3
 8010798:	d115      	bne.n	80107c6 <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 801079a:	2300      	movs	r3, #0
 801079c:	73fb      	strb	r3, [r7, #15]
      break;
 801079e:	e012      	b.n	80107c6 <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 80107a0:	2300      	movs	r3, #0
 80107a2:	73fb      	strb	r3, [r7, #15]
      break;
 80107a4:	e00f      	b.n	80107c6 <USBH_HandleEnum+0x442>

    default:
      break;
 80107a6:	bf00      	nop
 80107a8:	e00e      	b.n	80107c8 <USBH_HandleEnum+0x444>
      break;
 80107aa:	bf00      	nop
 80107ac:	e00c      	b.n	80107c8 <USBH_HandleEnum+0x444>
      break;
 80107ae:	bf00      	nop
 80107b0:	e00a      	b.n	80107c8 <USBH_HandleEnum+0x444>
      break;
 80107b2:	bf00      	nop
 80107b4:	e008      	b.n	80107c8 <USBH_HandleEnum+0x444>
      break;
 80107b6:	bf00      	nop
 80107b8:	e006      	b.n	80107c8 <USBH_HandleEnum+0x444>
      break;
 80107ba:	bf00      	nop
 80107bc:	e004      	b.n	80107c8 <USBH_HandleEnum+0x444>
      break;
 80107be:	bf00      	nop
 80107c0:	e002      	b.n	80107c8 <USBH_HandleEnum+0x444>
      break;
 80107c2:	bf00      	nop
 80107c4:	e000      	b.n	80107c8 <USBH_HandleEnum+0x444>
      break;
 80107c6:	bf00      	nop
  }
  return Status;
 80107c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80107ca:	4618      	mov	r0, r3
 80107cc:	3710      	adds	r7, #16
 80107ce:	46bd      	mov	sp, r7
 80107d0:	bd80      	pop	{r7, pc}
 80107d2:	bf00      	nop

080107d4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80107d4:	b480      	push	{r7}
 80107d6:	b083      	sub	sp, #12
 80107d8:	af00      	add	r7, sp, #0
 80107da:	6078      	str	r0, [r7, #4]
 80107dc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	683a      	ldr	r2, [r7, #0]
 80107e2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80107e6:	bf00      	nop
 80107e8:	370c      	adds	r7, #12
 80107ea:	46bd      	mov	sp, r7
 80107ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f0:	4770      	bx	lr

080107f2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80107f2:	b580      	push	{r7, lr}
 80107f4:	b082      	sub	sp, #8
 80107f6:	af00      	add	r7, sp, #0
 80107f8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8010800:	1c5a      	adds	r2, r3, #1
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8010808:	6878      	ldr	r0, [r7, #4]
 801080a:	f000 f804 	bl	8010816 <USBH_HandleSof>
}
 801080e:	bf00      	nop
 8010810:	3708      	adds	r7, #8
 8010812:	46bd      	mov	sp, r7
 8010814:	bd80      	pop	{r7, pc}

08010816 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8010816:	b580      	push	{r7, lr}
 8010818:	b082      	sub	sp, #8
 801081a:	af00      	add	r7, sp, #0
 801081c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	781b      	ldrb	r3, [r3, #0]
 8010822:	b2db      	uxtb	r3, r3
 8010824:	2b0b      	cmp	r3, #11
 8010826:	d10a      	bne.n	801083e <USBH_HandleSof+0x28>
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801082e:	2b00      	cmp	r3, #0
 8010830:	d005      	beq.n	801083e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8010838:	699b      	ldr	r3, [r3, #24]
 801083a:	6878      	ldr	r0, [r7, #4]
 801083c:	4798      	blx	r3
  }
}
 801083e:	bf00      	nop
 8010840:	3708      	adds	r7, #8
 8010842:	46bd      	mov	sp, r7
 8010844:	bd80      	pop	{r7, pc}

08010846 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8010846:	b580      	push	{r7, lr}
 8010848:	b082      	sub	sp, #8
 801084a:	af00      	add	r7, sp, #0
 801084c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	2201      	movs	r2, #1
 8010852:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	2201      	movs	r2, #1
 801085a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 801086a:	2200      	movs	r2, #0
 801086c:	4619      	mov	r1, r3
 801086e:	f001 f9f5 	bl	8011c5c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8010872:	bf00      	nop
}
 8010874:	3708      	adds	r7, #8
 8010876:	46bd      	mov	sp, r7
 8010878:	bd80      	pop	{r7, pc}

0801087a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 801087a:	b480      	push	{r7}
 801087c:	b083      	sub	sp, #12
 801087e:	af00      	add	r7, sp, #0
 8010880:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	2200      	movs	r2, #0
 8010886:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 801088a:	bf00      	nop
}
 801088c:	370c      	adds	r7, #12
 801088e:	46bd      	mov	sp, r7
 8010890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010894:	4770      	bx	lr

08010896 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8010896:	b580      	push	{r7, lr}
 8010898:	b082      	sub	sp, #8
 801089a:	af00      	add	r7, sp, #0
 801089c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	2201      	movs	r2, #1
 80108a2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	2200      	movs	r2, #0
 80108aa:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	2200      	movs	r2, #0
 80108b2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	2201      	movs	r2, #1
 80108ba:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80108ca:	2200      	movs	r2, #0
 80108cc:	4619      	mov	r1, r3
 80108ce:	f001 f9c5 	bl	8011c5c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80108d2:	2300      	movs	r3, #0
}
 80108d4:	4618      	mov	r0, r3
 80108d6:	3708      	adds	r7, #8
 80108d8:	46bd      	mov	sp, r7
 80108da:	bd80      	pop	{r7, pc}

080108dc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80108dc:	b580      	push	{r7, lr}
 80108de:	b082      	sub	sp, #8
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	2201      	movs	r2, #1
 80108e8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	2200      	movs	r2, #0
 80108f0:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	2200      	movs	r2, #0
 80108f8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80108fc:	6878      	ldr	r0, [r7, #4]
 80108fe:	f003 fda2 	bl	8014446 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	791b      	ldrb	r3, [r3, #4]
 8010906:	4619      	mov	r1, r3
 8010908:	6878      	ldr	r0, [r7, #4]
 801090a:	f001 f835 	bl	8011978 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	795b      	ldrb	r3, [r3, #5]
 8010912:	4619      	mov	r1, r3
 8010914:	6878      	ldr	r0, [r7, #4]
 8010916:	f001 f82f 	bl	8011978 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	2201      	movs	r2, #1
 801091e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 801092e:	2200      	movs	r2, #0
 8010930:	4619      	mov	r1, r3
 8010932:	f001 f993 	bl	8011c5c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8010936:	2300      	movs	r3, #0
}
 8010938:	4618      	mov	r0, r3
 801093a:	3708      	adds	r7, #8
 801093c:	46bd      	mov	sp, r7
 801093e:	bd80      	pop	{r7, pc}

08010940 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8010940:	b580      	push	{r7, lr}
 8010942:	b086      	sub	sp, #24
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 801094e:	f107 030c 	add.w	r3, r7, #12
 8010952:	f04f 32ff 	mov.w	r2, #4294967295
 8010956:	4618      	mov	r0, r3
 8010958:	f001 f9c0 	bl	8011cdc <osMessageGet>
    if (event.status == osEventMessage)
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	2b10      	cmp	r3, #16
 8010960:	d1f2      	bne.n	8010948 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8010962:	6878      	ldr	r0, [r7, #4]
 8010964:	f7ff faa4 	bl	800feb0 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8010968:	e7ee      	b.n	8010948 <USBH_Process_OS+0x8>

0801096a <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 801096a:	b580      	push	{r7, lr}
 801096c:	b082      	sub	sp, #8
 801096e:	af00      	add	r7, sp, #0
 8010970:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	2201      	movs	r2, #1
 8010976:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8010986:	2200      	movs	r2, #0
 8010988:	4619      	mov	r1, r3
 801098a:	f001 f967 	bl	8011c5c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 801098e:	2300      	movs	r3, #0
}
 8010990:	4618      	mov	r0, r3
 8010992:	3708      	adds	r7, #8
 8010994:	46bd      	mov	sp, r7
 8010996:	bd80      	pop	{r7, pc}

08010998 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8010998:	b580      	push	{r7, lr}
 801099a:	b086      	sub	sp, #24
 801099c:	af02      	add	r7, sp, #8
 801099e:	6078      	str	r0, [r7, #4]
 80109a0:	460b      	mov	r3, r1
 80109a2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80109a4:	887b      	ldrh	r3, [r7, #2]
 80109a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80109aa:	d901      	bls.n	80109b0 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80109ac:	2303      	movs	r3, #3
 80109ae:	e01b      	b.n	80109e8 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80109b6:	887b      	ldrh	r3, [r7, #2]
 80109b8:	9300      	str	r3, [sp, #0]
 80109ba:	4613      	mov	r3, r2
 80109bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80109c0:	2100      	movs	r1, #0
 80109c2:	6878      	ldr	r0, [r7, #4]
 80109c4:	f000 f872 	bl	8010aac <USBH_GetDescriptor>
 80109c8:	4603      	mov	r3, r0
 80109ca:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80109cc:	7bfb      	ldrb	r3, [r7, #15]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d109      	bne.n	80109e6 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80109d8:	887a      	ldrh	r2, [r7, #2]
 80109da:	4619      	mov	r1, r3
 80109dc:	6878      	ldr	r0, [r7, #4]
 80109de:	f000 f929 	bl	8010c34 <USBH_ParseDevDesc>
 80109e2:	4603      	mov	r3, r0
 80109e4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80109e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80109e8:	4618      	mov	r0, r3
 80109ea:	3710      	adds	r7, #16
 80109ec:	46bd      	mov	sp, r7
 80109ee:	bd80      	pop	{r7, pc}

080109f0 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b086      	sub	sp, #24
 80109f4:	af02      	add	r7, sp, #8
 80109f6:	6078      	str	r0, [r7, #4]
 80109f8:	460b      	mov	r3, r1
 80109fa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	331c      	adds	r3, #28
 8010a00:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8010a02:	887b      	ldrh	r3, [r7, #2]
 8010a04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010a08:	d901      	bls.n	8010a0e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8010a0a:	2303      	movs	r3, #3
 8010a0c:	e016      	b.n	8010a3c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8010a0e:	887b      	ldrh	r3, [r7, #2]
 8010a10:	9300      	str	r3, [sp, #0]
 8010a12:	68bb      	ldr	r3, [r7, #8]
 8010a14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010a18:	2100      	movs	r1, #0
 8010a1a:	6878      	ldr	r0, [r7, #4]
 8010a1c:	f000 f846 	bl	8010aac <USBH_GetDescriptor>
 8010a20:	4603      	mov	r3, r0
 8010a22:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8010a24:	7bfb      	ldrb	r3, [r7, #15]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d107      	bne.n	8010a3a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8010a2a:	887b      	ldrh	r3, [r7, #2]
 8010a2c:	461a      	mov	r2, r3
 8010a2e:	68b9      	ldr	r1, [r7, #8]
 8010a30:	6878      	ldr	r0, [r7, #4]
 8010a32:	f000 f9af 	bl	8010d94 <USBH_ParseCfgDesc>
 8010a36:	4603      	mov	r3, r0
 8010a38:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	3710      	adds	r7, #16
 8010a40:	46bd      	mov	sp, r7
 8010a42:	bd80      	pop	{r7, pc}

08010a44 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b088      	sub	sp, #32
 8010a48:	af02      	add	r7, sp, #8
 8010a4a:	60f8      	str	r0, [r7, #12]
 8010a4c:	607a      	str	r2, [r7, #4]
 8010a4e:	461a      	mov	r2, r3
 8010a50:	460b      	mov	r3, r1
 8010a52:	72fb      	strb	r3, [r7, #11]
 8010a54:	4613      	mov	r3, r2
 8010a56:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8010a58:	893b      	ldrh	r3, [r7, #8]
 8010a5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010a5e:	d802      	bhi.n	8010a66 <USBH_Get_StringDesc+0x22>
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d101      	bne.n	8010a6a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8010a66:	2303      	movs	r3, #3
 8010a68:	e01c      	b.n	8010aa4 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8010a6a:	7afb      	ldrb	r3, [r7, #11]
 8010a6c:	b29b      	uxth	r3, r3
 8010a6e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8010a72:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8010a7a:	893b      	ldrh	r3, [r7, #8]
 8010a7c:	9300      	str	r3, [sp, #0]
 8010a7e:	460b      	mov	r3, r1
 8010a80:	2100      	movs	r1, #0
 8010a82:	68f8      	ldr	r0, [r7, #12]
 8010a84:	f000 f812 	bl	8010aac <USBH_GetDescriptor>
 8010a88:	4603      	mov	r3, r0
 8010a8a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8010a8c:	7dfb      	ldrb	r3, [r7, #23]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d107      	bne.n	8010aa2 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8010a98:	893a      	ldrh	r2, [r7, #8]
 8010a9a:	6879      	ldr	r1, [r7, #4]
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	f000 fb8d 	bl	80111bc <USBH_ParseStringDesc>
  }

  return status;
 8010aa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	3718      	adds	r7, #24
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	bd80      	pop	{r7, pc}

08010aac <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8010aac:	b580      	push	{r7, lr}
 8010aae:	b084      	sub	sp, #16
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	60f8      	str	r0, [r7, #12]
 8010ab4:	607b      	str	r3, [r7, #4]
 8010ab6:	460b      	mov	r3, r1
 8010ab8:	72fb      	strb	r3, [r7, #11]
 8010aba:	4613      	mov	r3, r2
 8010abc:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	789b      	ldrb	r3, [r3, #2]
 8010ac2:	2b01      	cmp	r3, #1
 8010ac4:	d11c      	bne.n	8010b00 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8010ac6:	7afb      	ldrb	r3, [r7, #11]
 8010ac8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010acc:	b2da      	uxtb	r2, r3
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	2206      	movs	r2, #6
 8010ad6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	893a      	ldrh	r2, [r7, #8]
 8010adc:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8010ade:	893b      	ldrh	r3, [r7, #8]
 8010ae0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8010ae4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010ae8:	d104      	bne.n	8010af4 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	f240 4209 	movw	r2, #1033	@ 0x409
 8010af0:	829a      	strh	r2, [r3, #20]
 8010af2:	e002      	b.n	8010afa <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	2200      	movs	r2, #0
 8010af8:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	8b3a      	ldrh	r2, [r7, #24]
 8010afe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8010b00:	8b3b      	ldrh	r3, [r7, #24]
 8010b02:	461a      	mov	r2, r3
 8010b04:	6879      	ldr	r1, [r7, #4]
 8010b06:	68f8      	ldr	r0, [r7, #12]
 8010b08:	f000 fba5 	bl	8011256 <USBH_CtlReq>
 8010b0c:	4603      	mov	r3, r0
}
 8010b0e:	4618      	mov	r0, r3
 8010b10:	3710      	adds	r7, #16
 8010b12:	46bd      	mov	sp, r7
 8010b14:	bd80      	pop	{r7, pc}

08010b16 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8010b16:	b580      	push	{r7, lr}
 8010b18:	b082      	sub	sp, #8
 8010b1a:	af00      	add	r7, sp, #0
 8010b1c:	6078      	str	r0, [r7, #4]
 8010b1e:	460b      	mov	r3, r1
 8010b20:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	789b      	ldrb	r3, [r3, #2]
 8010b26:	2b01      	cmp	r3, #1
 8010b28:	d10f      	bne.n	8010b4a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	2200      	movs	r2, #0
 8010b2e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	2205      	movs	r2, #5
 8010b34:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8010b36:	78fb      	ldrb	r3, [r7, #3]
 8010b38:	b29a      	uxth	r2, r3
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	2200      	movs	r2, #0
 8010b42:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	2200      	movs	r2, #0
 8010b48:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8010b4a:	2200      	movs	r2, #0
 8010b4c:	2100      	movs	r1, #0
 8010b4e:	6878      	ldr	r0, [r7, #4]
 8010b50:	f000 fb81 	bl	8011256 <USBH_CtlReq>
 8010b54:	4603      	mov	r3, r0
}
 8010b56:	4618      	mov	r0, r3
 8010b58:	3708      	adds	r7, #8
 8010b5a:	46bd      	mov	sp, r7
 8010b5c:	bd80      	pop	{r7, pc}

08010b5e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8010b5e:	b580      	push	{r7, lr}
 8010b60:	b082      	sub	sp, #8
 8010b62:	af00      	add	r7, sp, #0
 8010b64:	6078      	str	r0, [r7, #4]
 8010b66:	460b      	mov	r3, r1
 8010b68:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	789b      	ldrb	r3, [r3, #2]
 8010b6e:	2b01      	cmp	r3, #1
 8010b70:	d10e      	bne.n	8010b90 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	2200      	movs	r2, #0
 8010b76:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	2209      	movs	r2, #9
 8010b7c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	887a      	ldrh	r2, [r7, #2]
 8010b82:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	2200      	movs	r2, #0
 8010b88:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	2200      	movs	r2, #0
 8010b8e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8010b90:	2200      	movs	r2, #0
 8010b92:	2100      	movs	r1, #0
 8010b94:	6878      	ldr	r0, [r7, #4]
 8010b96:	f000 fb5e 	bl	8011256 <USBH_CtlReq>
 8010b9a:	4603      	mov	r3, r0
}
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	3708      	adds	r7, #8
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	bd80      	pop	{r7, pc}

08010ba4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8010ba4:	b580      	push	{r7, lr}
 8010ba6:	b082      	sub	sp, #8
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	6078      	str	r0, [r7, #4]
 8010bac:	460b      	mov	r3, r1
 8010bae:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	789b      	ldrb	r3, [r3, #2]
 8010bb4:	2b01      	cmp	r3, #1
 8010bb6:	d10f      	bne.n	8010bd8 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	2200      	movs	r2, #0
 8010bbc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	2203      	movs	r2, #3
 8010bc2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8010bc4:	78fb      	ldrb	r3, [r7, #3]
 8010bc6:	b29a      	uxth	r2, r3
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	2200      	movs	r2, #0
 8010bd0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	2200      	movs	r2, #0
 8010bd6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8010bd8:	2200      	movs	r2, #0
 8010bda:	2100      	movs	r1, #0
 8010bdc:	6878      	ldr	r0, [r7, #4]
 8010bde:	f000 fb3a 	bl	8011256 <USBH_CtlReq>
 8010be2:	4603      	mov	r3, r0
}
 8010be4:	4618      	mov	r0, r3
 8010be6:	3708      	adds	r7, #8
 8010be8:	46bd      	mov	sp, r7
 8010bea:	bd80      	pop	{r7, pc}

08010bec <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8010bec:	b580      	push	{r7, lr}
 8010bee:	b082      	sub	sp, #8
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	6078      	str	r0, [r7, #4]
 8010bf4:	460b      	mov	r3, r1
 8010bf6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	789b      	ldrb	r3, [r3, #2]
 8010bfc:	2b01      	cmp	r3, #1
 8010bfe:	d10f      	bne.n	8010c20 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	2202      	movs	r2, #2
 8010c04:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	2201      	movs	r2, #1
 8010c0a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	2200      	movs	r2, #0
 8010c10:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8010c12:	78fb      	ldrb	r3, [r7, #3]
 8010c14:	b29a      	uxth	r2, r3
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	2200      	movs	r2, #0
 8010c1e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8010c20:	2200      	movs	r2, #0
 8010c22:	2100      	movs	r1, #0
 8010c24:	6878      	ldr	r0, [r7, #4]
 8010c26:	f000 fb16 	bl	8011256 <USBH_CtlReq>
 8010c2a:	4603      	mov	r3, r0
}
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	3708      	adds	r7, #8
 8010c30:	46bd      	mov	sp, r7
 8010c32:	bd80      	pop	{r7, pc}

08010c34 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8010c34:	b480      	push	{r7}
 8010c36:	b087      	sub	sp, #28
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	60f8      	str	r0, [r7, #12]
 8010c3c:	60b9      	str	r1, [r7, #8]
 8010c3e:	4613      	mov	r3, r2
 8010c40:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8010c48:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8010c4e:	68bb      	ldr	r3, [r7, #8]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d101      	bne.n	8010c58 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8010c54:	2302      	movs	r3, #2
 8010c56:	e094      	b.n	8010d82 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8010c58:	68bb      	ldr	r3, [r7, #8]
 8010c5a:	781a      	ldrb	r2, [r3, #0]
 8010c5c:	693b      	ldr	r3, [r7, #16]
 8010c5e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8010c60:	68bb      	ldr	r3, [r7, #8]
 8010c62:	785a      	ldrb	r2, [r3, #1]
 8010c64:	693b      	ldr	r3, [r7, #16]
 8010c66:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8010c68:	68bb      	ldr	r3, [r7, #8]
 8010c6a:	3302      	adds	r3, #2
 8010c6c:	781b      	ldrb	r3, [r3, #0]
 8010c6e:	461a      	mov	r2, r3
 8010c70:	68bb      	ldr	r3, [r7, #8]
 8010c72:	3303      	adds	r3, #3
 8010c74:	781b      	ldrb	r3, [r3, #0]
 8010c76:	021b      	lsls	r3, r3, #8
 8010c78:	b29b      	uxth	r3, r3
 8010c7a:	4313      	orrs	r3, r2
 8010c7c:	b29a      	uxth	r2, r3
 8010c7e:	693b      	ldr	r3, [r7, #16]
 8010c80:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8010c82:	68bb      	ldr	r3, [r7, #8]
 8010c84:	791a      	ldrb	r2, [r3, #4]
 8010c86:	693b      	ldr	r3, [r7, #16]
 8010c88:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8010c8a:	68bb      	ldr	r3, [r7, #8]
 8010c8c:	795a      	ldrb	r2, [r3, #5]
 8010c8e:	693b      	ldr	r3, [r7, #16]
 8010c90:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8010c92:	68bb      	ldr	r3, [r7, #8]
 8010c94:	799a      	ldrb	r2, [r3, #6]
 8010c96:	693b      	ldr	r3, [r7, #16]
 8010c98:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8010c9a:	68bb      	ldr	r3, [r7, #8]
 8010c9c:	79da      	ldrb	r2, [r3, #7]
 8010c9e:	693b      	ldr	r3, [r7, #16]
 8010ca0:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d004      	beq.n	8010cb6 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8010cb2:	2b01      	cmp	r3, #1
 8010cb4:	d11b      	bne.n	8010cee <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8010cb6:	693b      	ldr	r3, [r7, #16]
 8010cb8:	79db      	ldrb	r3, [r3, #7]
 8010cba:	2b20      	cmp	r3, #32
 8010cbc:	dc0f      	bgt.n	8010cde <USBH_ParseDevDesc+0xaa>
 8010cbe:	2b08      	cmp	r3, #8
 8010cc0:	db0f      	blt.n	8010ce2 <USBH_ParseDevDesc+0xae>
 8010cc2:	3b08      	subs	r3, #8
 8010cc4:	4a32      	ldr	r2, [pc, #200]	@ (8010d90 <USBH_ParseDevDesc+0x15c>)
 8010cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8010cca:	f003 0301 	and.w	r3, r3, #1
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	bf14      	ite	ne
 8010cd2:	2301      	movne	r3, #1
 8010cd4:	2300      	moveq	r3, #0
 8010cd6:	b2db      	uxtb	r3, r3
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d106      	bne.n	8010cea <USBH_ParseDevDesc+0xb6>
 8010cdc:	e001      	b.n	8010ce2 <USBH_ParseDevDesc+0xae>
 8010cde:	2b40      	cmp	r3, #64	@ 0x40
 8010ce0:	d003      	beq.n	8010cea <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8010ce2:	693b      	ldr	r3, [r7, #16]
 8010ce4:	2208      	movs	r2, #8
 8010ce6:	71da      	strb	r2, [r3, #7]
        break;
 8010ce8:	e000      	b.n	8010cec <USBH_ParseDevDesc+0xb8>
        break;
 8010cea:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8010cec:	e00e      	b.n	8010d0c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8010cf4:	2b02      	cmp	r3, #2
 8010cf6:	d107      	bne.n	8010d08 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8010cf8:	693b      	ldr	r3, [r7, #16]
 8010cfa:	79db      	ldrb	r3, [r3, #7]
 8010cfc:	2b08      	cmp	r3, #8
 8010cfe:	d005      	beq.n	8010d0c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8010d00:	693b      	ldr	r3, [r7, #16]
 8010d02:	2208      	movs	r2, #8
 8010d04:	71da      	strb	r2, [r3, #7]
 8010d06:	e001      	b.n	8010d0c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8010d08:	2303      	movs	r3, #3
 8010d0a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8010d0c:	88fb      	ldrh	r3, [r7, #6]
 8010d0e:	2b08      	cmp	r3, #8
 8010d10:	d936      	bls.n	8010d80 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8010d12:	68bb      	ldr	r3, [r7, #8]
 8010d14:	3308      	adds	r3, #8
 8010d16:	781b      	ldrb	r3, [r3, #0]
 8010d18:	461a      	mov	r2, r3
 8010d1a:	68bb      	ldr	r3, [r7, #8]
 8010d1c:	3309      	adds	r3, #9
 8010d1e:	781b      	ldrb	r3, [r3, #0]
 8010d20:	021b      	lsls	r3, r3, #8
 8010d22:	b29b      	uxth	r3, r3
 8010d24:	4313      	orrs	r3, r2
 8010d26:	b29a      	uxth	r2, r3
 8010d28:	693b      	ldr	r3, [r7, #16]
 8010d2a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8010d2c:	68bb      	ldr	r3, [r7, #8]
 8010d2e:	330a      	adds	r3, #10
 8010d30:	781b      	ldrb	r3, [r3, #0]
 8010d32:	461a      	mov	r2, r3
 8010d34:	68bb      	ldr	r3, [r7, #8]
 8010d36:	330b      	adds	r3, #11
 8010d38:	781b      	ldrb	r3, [r3, #0]
 8010d3a:	021b      	lsls	r3, r3, #8
 8010d3c:	b29b      	uxth	r3, r3
 8010d3e:	4313      	orrs	r3, r2
 8010d40:	b29a      	uxth	r2, r3
 8010d42:	693b      	ldr	r3, [r7, #16]
 8010d44:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8010d46:	68bb      	ldr	r3, [r7, #8]
 8010d48:	330c      	adds	r3, #12
 8010d4a:	781b      	ldrb	r3, [r3, #0]
 8010d4c:	461a      	mov	r2, r3
 8010d4e:	68bb      	ldr	r3, [r7, #8]
 8010d50:	330d      	adds	r3, #13
 8010d52:	781b      	ldrb	r3, [r3, #0]
 8010d54:	021b      	lsls	r3, r3, #8
 8010d56:	b29b      	uxth	r3, r3
 8010d58:	4313      	orrs	r3, r2
 8010d5a:	b29a      	uxth	r2, r3
 8010d5c:	693b      	ldr	r3, [r7, #16]
 8010d5e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8010d60:	68bb      	ldr	r3, [r7, #8]
 8010d62:	7b9a      	ldrb	r2, [r3, #14]
 8010d64:	693b      	ldr	r3, [r7, #16]
 8010d66:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8010d68:	68bb      	ldr	r3, [r7, #8]
 8010d6a:	7bda      	ldrb	r2, [r3, #15]
 8010d6c:	693b      	ldr	r3, [r7, #16]
 8010d6e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8010d70:	68bb      	ldr	r3, [r7, #8]
 8010d72:	7c1a      	ldrb	r2, [r3, #16]
 8010d74:	693b      	ldr	r3, [r7, #16]
 8010d76:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8010d78:	68bb      	ldr	r3, [r7, #8]
 8010d7a:	7c5a      	ldrb	r2, [r3, #17]
 8010d7c:	693b      	ldr	r3, [r7, #16]
 8010d7e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8010d80:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d82:	4618      	mov	r0, r3
 8010d84:	371c      	adds	r7, #28
 8010d86:	46bd      	mov	sp, r7
 8010d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8c:	4770      	bx	lr
 8010d8e:	bf00      	nop
 8010d90:	01000101 	.word	0x01000101

08010d94 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b08c      	sub	sp, #48	@ 0x30
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	60f8      	str	r0, [r7, #12]
 8010d9c:	60b9      	str	r1, [r7, #8]
 8010d9e:	4613      	mov	r3, r2
 8010da0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8010da8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8010daa:	2300      	movs	r3, #0
 8010dac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8010db0:	2300      	movs	r3, #0
 8010db2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8010db6:	2300      	movs	r3, #0
 8010db8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8010dbc:	68bb      	ldr	r3, [r7, #8]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d101      	bne.n	8010dc6 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8010dc2:	2302      	movs	r3, #2
 8010dc4:	e0da      	b.n	8010f7c <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8010dc6:	68bb      	ldr	r3, [r7, #8]
 8010dc8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8010dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010dcc:	781b      	ldrb	r3, [r3, #0]
 8010dce:	2b09      	cmp	r3, #9
 8010dd0:	d002      	beq.n	8010dd8 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8010dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010dd4:	2209      	movs	r2, #9
 8010dd6:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8010dd8:	68bb      	ldr	r3, [r7, #8]
 8010dda:	781a      	ldrb	r2, [r3, #0]
 8010ddc:	6a3b      	ldr	r3, [r7, #32]
 8010dde:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8010de0:	68bb      	ldr	r3, [r7, #8]
 8010de2:	785a      	ldrb	r2, [r3, #1]
 8010de4:	6a3b      	ldr	r3, [r7, #32]
 8010de6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8010de8:	68bb      	ldr	r3, [r7, #8]
 8010dea:	3302      	adds	r3, #2
 8010dec:	781b      	ldrb	r3, [r3, #0]
 8010dee:	461a      	mov	r2, r3
 8010df0:	68bb      	ldr	r3, [r7, #8]
 8010df2:	3303      	adds	r3, #3
 8010df4:	781b      	ldrb	r3, [r3, #0]
 8010df6:	021b      	lsls	r3, r3, #8
 8010df8:	b29b      	uxth	r3, r3
 8010dfa:	4313      	orrs	r3, r2
 8010dfc:	b29b      	uxth	r3, r3
 8010dfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010e02:	bf28      	it	cs
 8010e04:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8010e08:	b29a      	uxth	r2, r3
 8010e0a:	6a3b      	ldr	r3, [r7, #32]
 8010e0c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8010e0e:	68bb      	ldr	r3, [r7, #8]
 8010e10:	791a      	ldrb	r2, [r3, #4]
 8010e12:	6a3b      	ldr	r3, [r7, #32]
 8010e14:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8010e16:	68bb      	ldr	r3, [r7, #8]
 8010e18:	795a      	ldrb	r2, [r3, #5]
 8010e1a:	6a3b      	ldr	r3, [r7, #32]
 8010e1c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8010e1e:	68bb      	ldr	r3, [r7, #8]
 8010e20:	799a      	ldrb	r2, [r3, #6]
 8010e22:	6a3b      	ldr	r3, [r7, #32]
 8010e24:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8010e26:	68bb      	ldr	r3, [r7, #8]
 8010e28:	79da      	ldrb	r2, [r3, #7]
 8010e2a:	6a3b      	ldr	r3, [r7, #32]
 8010e2c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8010e2e:	68bb      	ldr	r3, [r7, #8]
 8010e30:	7a1a      	ldrb	r2, [r3, #8]
 8010e32:	6a3b      	ldr	r3, [r7, #32]
 8010e34:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8010e36:	88fb      	ldrh	r3, [r7, #6]
 8010e38:	2b09      	cmp	r3, #9
 8010e3a:	f240 809d 	bls.w	8010f78 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8010e3e:	2309      	movs	r3, #9
 8010e40:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8010e42:	2300      	movs	r3, #0
 8010e44:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8010e46:	e081      	b.n	8010f4c <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8010e48:	f107 0316 	add.w	r3, r7, #22
 8010e4c:	4619      	mov	r1, r3
 8010e4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010e50:	f000 f9e7 	bl	8011222 <USBH_GetNextDesc>
 8010e54:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8010e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e58:	785b      	ldrb	r3, [r3, #1]
 8010e5a:	2b04      	cmp	r3, #4
 8010e5c:	d176      	bne.n	8010f4c <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8010e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e60:	781b      	ldrb	r3, [r3, #0]
 8010e62:	2b09      	cmp	r3, #9
 8010e64:	d002      	beq.n	8010e6c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8010e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e68:	2209      	movs	r2, #9
 8010e6a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8010e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010e70:	221a      	movs	r2, #26
 8010e72:	fb02 f303 	mul.w	r3, r2, r3
 8010e76:	3308      	adds	r3, #8
 8010e78:	6a3a      	ldr	r2, [r7, #32]
 8010e7a:	4413      	add	r3, r2
 8010e7c:	3302      	adds	r3, #2
 8010e7e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8010e80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010e82:	69f8      	ldr	r0, [r7, #28]
 8010e84:	f000 f87e 	bl	8010f84 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8010e88:	2300      	movs	r3, #0
 8010e8a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8010e8e:	2300      	movs	r3, #0
 8010e90:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8010e92:	e043      	b.n	8010f1c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8010e94:	f107 0316 	add.w	r3, r7, #22
 8010e98:	4619      	mov	r1, r3
 8010e9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010e9c:	f000 f9c1 	bl	8011222 <USBH_GetNextDesc>
 8010ea0:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8010ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ea4:	785b      	ldrb	r3, [r3, #1]
 8010ea6:	2b05      	cmp	r3, #5
 8010ea8:	d138      	bne.n	8010f1c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8010eaa:	69fb      	ldr	r3, [r7, #28]
 8010eac:	795b      	ldrb	r3, [r3, #5]
 8010eae:	2b01      	cmp	r3, #1
 8010eb0:	d113      	bne.n	8010eda <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8010eb2:	69fb      	ldr	r3, [r7, #28]
 8010eb4:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8010eb6:	2b02      	cmp	r3, #2
 8010eb8:	d003      	beq.n	8010ec2 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8010eba:	69fb      	ldr	r3, [r7, #28]
 8010ebc:	799b      	ldrb	r3, [r3, #6]
 8010ebe:	2b03      	cmp	r3, #3
 8010ec0:	d10b      	bne.n	8010eda <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8010ec2:	69fb      	ldr	r3, [r7, #28]
 8010ec4:	79db      	ldrb	r3, [r3, #7]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d10b      	bne.n	8010ee2 <USBH_ParseCfgDesc+0x14e>
 8010eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ecc:	781b      	ldrb	r3, [r3, #0]
 8010ece:	2b09      	cmp	r3, #9
 8010ed0:	d007      	beq.n	8010ee2 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8010ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ed4:	2209      	movs	r2, #9
 8010ed6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8010ed8:	e003      	b.n	8010ee2 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8010eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010edc:	2207      	movs	r2, #7
 8010ede:	701a      	strb	r2, [r3, #0]
 8010ee0:	e000      	b.n	8010ee4 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8010ee2:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8010ee4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010ee8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8010eec:	3201      	adds	r2, #1
 8010eee:	00d2      	lsls	r2, r2, #3
 8010ef0:	211a      	movs	r1, #26
 8010ef2:	fb01 f303 	mul.w	r3, r1, r3
 8010ef6:	4413      	add	r3, r2
 8010ef8:	3308      	adds	r3, #8
 8010efa:	6a3a      	ldr	r2, [r7, #32]
 8010efc:	4413      	add	r3, r2
 8010efe:	3304      	adds	r3, #4
 8010f00:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8010f02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010f04:	69b9      	ldr	r1, [r7, #24]
 8010f06:	68f8      	ldr	r0, [r7, #12]
 8010f08:	f000 f870 	bl	8010fec <USBH_ParseEPDesc>
 8010f0c:	4603      	mov	r3, r0
 8010f0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8010f12:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010f16:	3301      	adds	r3, #1
 8010f18:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8010f1c:	69fb      	ldr	r3, [r7, #28]
 8010f1e:	791b      	ldrb	r3, [r3, #4]
 8010f20:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8010f24:	429a      	cmp	r2, r3
 8010f26:	d204      	bcs.n	8010f32 <USBH_ParseCfgDesc+0x19e>
 8010f28:	6a3b      	ldr	r3, [r7, #32]
 8010f2a:	885a      	ldrh	r2, [r3, #2]
 8010f2c:	8afb      	ldrh	r3, [r7, #22]
 8010f2e:	429a      	cmp	r2, r3
 8010f30:	d8b0      	bhi.n	8010e94 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8010f32:	69fb      	ldr	r3, [r7, #28]
 8010f34:	791b      	ldrb	r3, [r3, #4]
 8010f36:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8010f3a:	429a      	cmp	r2, r3
 8010f3c:	d201      	bcs.n	8010f42 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8010f3e:	2303      	movs	r3, #3
 8010f40:	e01c      	b.n	8010f7c <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8010f42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010f46:	3301      	adds	r3, #1
 8010f48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8010f4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010f50:	2b01      	cmp	r3, #1
 8010f52:	d805      	bhi.n	8010f60 <USBH_ParseCfgDesc+0x1cc>
 8010f54:	6a3b      	ldr	r3, [r7, #32]
 8010f56:	885a      	ldrh	r2, [r3, #2]
 8010f58:	8afb      	ldrh	r3, [r7, #22]
 8010f5a:	429a      	cmp	r2, r3
 8010f5c:	f63f af74 	bhi.w	8010e48 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8010f60:	6a3b      	ldr	r3, [r7, #32]
 8010f62:	791b      	ldrb	r3, [r3, #4]
 8010f64:	2b02      	cmp	r3, #2
 8010f66:	bf28      	it	cs
 8010f68:	2302      	movcs	r3, #2
 8010f6a:	b2db      	uxtb	r3, r3
 8010f6c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8010f70:	429a      	cmp	r2, r3
 8010f72:	d201      	bcs.n	8010f78 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8010f74:	2303      	movs	r3, #3
 8010f76:	e001      	b.n	8010f7c <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8010f78:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010f7c:	4618      	mov	r0, r3
 8010f7e:	3730      	adds	r7, #48	@ 0x30
 8010f80:	46bd      	mov	sp, r7
 8010f82:	bd80      	pop	{r7, pc}

08010f84 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8010f84:	b480      	push	{r7}
 8010f86:	b083      	sub	sp, #12
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	6078      	str	r0, [r7, #4]
 8010f8c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8010f8e:	683b      	ldr	r3, [r7, #0]
 8010f90:	781a      	ldrb	r2, [r3, #0]
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8010f96:	683b      	ldr	r3, [r7, #0]
 8010f98:	785a      	ldrb	r2, [r3, #1]
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8010f9e:	683b      	ldr	r3, [r7, #0]
 8010fa0:	789a      	ldrb	r2, [r3, #2]
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8010fa6:	683b      	ldr	r3, [r7, #0]
 8010fa8:	78da      	ldrb	r2, [r3, #3]
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8010fae:	683b      	ldr	r3, [r7, #0]
 8010fb0:	3304      	adds	r3, #4
 8010fb2:	781b      	ldrb	r3, [r3, #0]
 8010fb4:	2b02      	cmp	r3, #2
 8010fb6:	bf28      	it	cs
 8010fb8:	2302      	movcs	r3, #2
 8010fba:	b2da      	uxtb	r2, r3
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8010fc0:	683b      	ldr	r3, [r7, #0]
 8010fc2:	795a      	ldrb	r2, [r3, #5]
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8010fc8:	683b      	ldr	r3, [r7, #0]
 8010fca:	799a      	ldrb	r2, [r3, #6]
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8010fd0:	683b      	ldr	r3, [r7, #0]
 8010fd2:	79da      	ldrb	r2, [r3, #7]
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8010fd8:	683b      	ldr	r3, [r7, #0]
 8010fda:	7a1a      	ldrb	r2, [r3, #8]
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	721a      	strb	r2, [r3, #8]
}
 8010fe0:	bf00      	nop
 8010fe2:	370c      	adds	r7, #12
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fea:	4770      	bx	lr

08010fec <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8010fec:	b480      	push	{r7}
 8010fee:	b087      	sub	sp, #28
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	60f8      	str	r0, [r7, #12]
 8010ff4:	60b9      	str	r1, [r7, #8]
 8010ff6:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8010ff8:	2300      	movs	r3, #0
 8010ffa:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	781a      	ldrb	r2, [r3, #0]
 8011000:	68bb      	ldr	r3, [r7, #8]
 8011002:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	785a      	ldrb	r2, [r3, #1]
 8011008:	68bb      	ldr	r3, [r7, #8]
 801100a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	789a      	ldrb	r2, [r3, #2]
 8011010:	68bb      	ldr	r3, [r7, #8]
 8011012:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	78da      	ldrb	r2, [r3, #3]
 8011018:	68bb      	ldr	r3, [r7, #8]
 801101a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	3304      	adds	r3, #4
 8011020:	781b      	ldrb	r3, [r3, #0]
 8011022:	461a      	mov	r2, r3
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	3305      	adds	r3, #5
 8011028:	781b      	ldrb	r3, [r3, #0]
 801102a:	021b      	lsls	r3, r3, #8
 801102c:	b29b      	uxth	r3, r3
 801102e:	4313      	orrs	r3, r2
 8011030:	b29a      	uxth	r2, r3
 8011032:	68bb      	ldr	r3, [r7, #8]
 8011034:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	799a      	ldrb	r2, [r3, #6]
 801103a:	68bb      	ldr	r3, [r7, #8]
 801103c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 801103e:	68bb      	ldr	r3, [r7, #8]
 8011040:	889b      	ldrh	r3, [r3, #4]
 8011042:	2b00      	cmp	r3, #0
 8011044:	d009      	beq.n	801105a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8011046:	68bb      	ldr	r3, [r7, #8]
 8011048:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 801104a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801104e:	d804      	bhi.n	801105a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8011050:	68bb      	ldr	r3, [r7, #8]
 8011052:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8011054:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011058:	d901      	bls.n	801105e <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 801105a:	2303      	movs	r3, #3
 801105c:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011064:	2b00      	cmp	r3, #0
 8011066:	d136      	bne.n	80110d6 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8011068:	68bb      	ldr	r3, [r7, #8]
 801106a:	78db      	ldrb	r3, [r3, #3]
 801106c:	f003 0303 	and.w	r3, r3, #3
 8011070:	2b02      	cmp	r3, #2
 8011072:	d108      	bne.n	8011086 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8011074:	68bb      	ldr	r3, [r7, #8]
 8011076:	889b      	ldrh	r3, [r3, #4]
 8011078:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801107c:	f240 8097 	bls.w	80111ae <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8011080:	2303      	movs	r3, #3
 8011082:	75fb      	strb	r3, [r7, #23]
 8011084:	e093      	b.n	80111ae <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8011086:	68bb      	ldr	r3, [r7, #8]
 8011088:	78db      	ldrb	r3, [r3, #3]
 801108a:	f003 0303 	and.w	r3, r3, #3
 801108e:	2b00      	cmp	r3, #0
 8011090:	d107      	bne.n	80110a2 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8011092:	68bb      	ldr	r3, [r7, #8]
 8011094:	889b      	ldrh	r3, [r3, #4]
 8011096:	2b40      	cmp	r3, #64	@ 0x40
 8011098:	f240 8089 	bls.w	80111ae <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 801109c:	2303      	movs	r3, #3
 801109e:	75fb      	strb	r3, [r7, #23]
 80110a0:	e085      	b.n	80111ae <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80110a2:	68bb      	ldr	r3, [r7, #8]
 80110a4:	78db      	ldrb	r3, [r3, #3]
 80110a6:	f003 0303 	and.w	r3, r3, #3
 80110aa:	2b01      	cmp	r3, #1
 80110ac:	d005      	beq.n	80110ba <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80110ae:	68bb      	ldr	r3, [r7, #8]
 80110b0:	78db      	ldrb	r3, [r3, #3]
 80110b2:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80110b6:	2b03      	cmp	r3, #3
 80110b8:	d10a      	bne.n	80110d0 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80110ba:	68bb      	ldr	r3, [r7, #8]
 80110bc:	799b      	ldrb	r3, [r3, #6]
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d003      	beq.n	80110ca <USBH_ParseEPDesc+0xde>
 80110c2:	68bb      	ldr	r3, [r7, #8]
 80110c4:	799b      	ldrb	r3, [r3, #6]
 80110c6:	2b10      	cmp	r3, #16
 80110c8:	d970      	bls.n	80111ac <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 80110ca:	2303      	movs	r3, #3
 80110cc:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80110ce:	e06d      	b.n	80111ac <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80110d0:	2303      	movs	r3, #3
 80110d2:	75fb      	strb	r3, [r7, #23]
 80110d4:	e06b      	b.n	80111ae <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80110dc:	2b01      	cmp	r3, #1
 80110de:	d13c      	bne.n	801115a <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80110e0:	68bb      	ldr	r3, [r7, #8]
 80110e2:	78db      	ldrb	r3, [r3, #3]
 80110e4:	f003 0303 	and.w	r3, r3, #3
 80110e8:	2b02      	cmp	r3, #2
 80110ea:	d005      	beq.n	80110f8 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80110ec:	68bb      	ldr	r3, [r7, #8]
 80110ee:	78db      	ldrb	r3, [r3, #3]
 80110f0:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d106      	bne.n	8011106 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80110f8:	68bb      	ldr	r3, [r7, #8]
 80110fa:	889b      	ldrh	r3, [r3, #4]
 80110fc:	2b40      	cmp	r3, #64	@ 0x40
 80110fe:	d956      	bls.n	80111ae <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8011100:	2303      	movs	r3, #3
 8011102:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8011104:	e053      	b.n	80111ae <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8011106:	68bb      	ldr	r3, [r7, #8]
 8011108:	78db      	ldrb	r3, [r3, #3]
 801110a:	f003 0303 	and.w	r3, r3, #3
 801110e:	2b01      	cmp	r3, #1
 8011110:	d10e      	bne.n	8011130 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8011112:	68bb      	ldr	r3, [r7, #8]
 8011114:	799b      	ldrb	r3, [r3, #6]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d007      	beq.n	801112a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 801111a:	68bb      	ldr	r3, [r7, #8]
 801111c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 801111e:	2b10      	cmp	r3, #16
 8011120:	d803      	bhi.n	801112a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8011122:	68bb      	ldr	r3, [r7, #8]
 8011124:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8011126:	2b40      	cmp	r3, #64	@ 0x40
 8011128:	d941      	bls.n	80111ae <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 801112a:	2303      	movs	r3, #3
 801112c:	75fb      	strb	r3, [r7, #23]
 801112e:	e03e      	b.n	80111ae <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8011130:	68bb      	ldr	r3, [r7, #8]
 8011132:	78db      	ldrb	r3, [r3, #3]
 8011134:	f003 0303 	and.w	r3, r3, #3
 8011138:	2b03      	cmp	r3, #3
 801113a:	d10b      	bne.n	8011154 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 801113c:	68bb      	ldr	r3, [r7, #8]
 801113e:	799b      	ldrb	r3, [r3, #6]
 8011140:	2b00      	cmp	r3, #0
 8011142:	d004      	beq.n	801114e <USBH_ParseEPDesc+0x162>
 8011144:	68bb      	ldr	r3, [r7, #8]
 8011146:	889b      	ldrh	r3, [r3, #4]
 8011148:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801114c:	d32f      	bcc.n	80111ae <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 801114e:	2303      	movs	r3, #3
 8011150:	75fb      	strb	r3, [r7, #23]
 8011152:	e02c      	b.n	80111ae <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8011154:	2303      	movs	r3, #3
 8011156:	75fb      	strb	r3, [r7, #23]
 8011158:	e029      	b.n	80111ae <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8011160:	2b02      	cmp	r3, #2
 8011162:	d120      	bne.n	80111a6 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8011164:	68bb      	ldr	r3, [r7, #8]
 8011166:	78db      	ldrb	r3, [r3, #3]
 8011168:	f003 0303 	and.w	r3, r3, #3
 801116c:	2b00      	cmp	r3, #0
 801116e:	d106      	bne.n	801117e <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8011170:	68bb      	ldr	r3, [r7, #8]
 8011172:	889b      	ldrh	r3, [r3, #4]
 8011174:	2b08      	cmp	r3, #8
 8011176:	d01a      	beq.n	80111ae <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8011178:	2303      	movs	r3, #3
 801117a:	75fb      	strb	r3, [r7, #23]
 801117c:	e017      	b.n	80111ae <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 801117e:	68bb      	ldr	r3, [r7, #8]
 8011180:	78db      	ldrb	r3, [r3, #3]
 8011182:	f003 0303 	and.w	r3, r3, #3
 8011186:	2b03      	cmp	r3, #3
 8011188:	d10a      	bne.n	80111a0 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 801118a:	68bb      	ldr	r3, [r7, #8]
 801118c:	799b      	ldrb	r3, [r3, #6]
 801118e:	2b00      	cmp	r3, #0
 8011190:	d003      	beq.n	801119a <USBH_ParseEPDesc+0x1ae>
 8011192:	68bb      	ldr	r3, [r7, #8]
 8011194:	889b      	ldrh	r3, [r3, #4]
 8011196:	2b08      	cmp	r3, #8
 8011198:	d909      	bls.n	80111ae <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 801119a:	2303      	movs	r3, #3
 801119c:	75fb      	strb	r3, [r7, #23]
 801119e:	e006      	b.n	80111ae <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80111a0:	2303      	movs	r3, #3
 80111a2:	75fb      	strb	r3, [r7, #23]
 80111a4:	e003      	b.n	80111ae <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80111a6:	2303      	movs	r3, #3
 80111a8:	75fb      	strb	r3, [r7, #23]
 80111aa:	e000      	b.n	80111ae <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80111ac:	bf00      	nop
  }

  return status;
 80111ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80111b0:	4618      	mov	r0, r3
 80111b2:	371c      	adds	r7, #28
 80111b4:	46bd      	mov	sp, r7
 80111b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ba:	4770      	bx	lr

080111bc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80111bc:	b480      	push	{r7}
 80111be:	b087      	sub	sp, #28
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	60f8      	str	r0, [r7, #12]
 80111c4:	60b9      	str	r1, [r7, #8]
 80111c6:	4613      	mov	r3, r2
 80111c8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	3301      	adds	r3, #1
 80111ce:	781b      	ldrb	r3, [r3, #0]
 80111d0:	2b03      	cmp	r3, #3
 80111d2:	d120      	bne.n	8011216 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	781b      	ldrb	r3, [r3, #0]
 80111d8:	1e9a      	subs	r2, r3, #2
 80111da:	88fb      	ldrh	r3, [r7, #6]
 80111dc:	4293      	cmp	r3, r2
 80111de:	bf28      	it	cs
 80111e0:	4613      	movcs	r3, r2
 80111e2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	3302      	adds	r3, #2
 80111e8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80111ea:	2300      	movs	r3, #0
 80111ec:	82fb      	strh	r3, [r7, #22]
 80111ee:	e00b      	b.n	8011208 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80111f0:	8afb      	ldrh	r3, [r7, #22]
 80111f2:	68fa      	ldr	r2, [r7, #12]
 80111f4:	4413      	add	r3, r2
 80111f6:	781a      	ldrb	r2, [r3, #0]
 80111f8:	68bb      	ldr	r3, [r7, #8]
 80111fa:	701a      	strb	r2, [r3, #0]
      pdest++;
 80111fc:	68bb      	ldr	r3, [r7, #8]
 80111fe:	3301      	adds	r3, #1
 8011200:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8011202:	8afb      	ldrh	r3, [r7, #22]
 8011204:	3302      	adds	r3, #2
 8011206:	82fb      	strh	r3, [r7, #22]
 8011208:	8afa      	ldrh	r2, [r7, #22]
 801120a:	8abb      	ldrh	r3, [r7, #20]
 801120c:	429a      	cmp	r2, r3
 801120e:	d3ef      	bcc.n	80111f0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8011210:	68bb      	ldr	r3, [r7, #8]
 8011212:	2200      	movs	r2, #0
 8011214:	701a      	strb	r2, [r3, #0]
  }
}
 8011216:	bf00      	nop
 8011218:	371c      	adds	r7, #28
 801121a:	46bd      	mov	sp, r7
 801121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011220:	4770      	bx	lr

08011222 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8011222:	b480      	push	{r7}
 8011224:	b085      	sub	sp, #20
 8011226:	af00      	add	r7, sp, #0
 8011228:	6078      	str	r0, [r7, #4]
 801122a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 801122c:	683b      	ldr	r3, [r7, #0]
 801122e:	881b      	ldrh	r3, [r3, #0]
 8011230:	687a      	ldr	r2, [r7, #4]
 8011232:	7812      	ldrb	r2, [r2, #0]
 8011234:	4413      	add	r3, r2
 8011236:	b29a      	uxth	r2, r3
 8011238:	683b      	ldr	r3, [r7, #0]
 801123a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	781b      	ldrb	r3, [r3, #0]
 8011240:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	4413      	add	r3, r2
 8011246:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8011248:	68fb      	ldr	r3, [r7, #12]
}
 801124a:	4618      	mov	r0, r3
 801124c:	3714      	adds	r7, #20
 801124e:	46bd      	mov	sp, r7
 8011250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011254:	4770      	bx	lr

08011256 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8011256:	b580      	push	{r7, lr}
 8011258:	b086      	sub	sp, #24
 801125a:	af00      	add	r7, sp, #0
 801125c:	60f8      	str	r0, [r7, #12]
 801125e:	60b9      	str	r1, [r7, #8]
 8011260:	4613      	mov	r3, r2
 8011262:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8011264:	2301      	movs	r3, #1
 8011266:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	789b      	ldrb	r3, [r3, #2]
 801126c:	2b01      	cmp	r3, #1
 801126e:	d002      	beq.n	8011276 <USBH_CtlReq+0x20>
 8011270:	2b02      	cmp	r3, #2
 8011272:	d01d      	beq.n	80112b0 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8011274:	e043      	b.n	80112fe <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	68ba      	ldr	r2, [r7, #8]
 801127a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	88fa      	ldrh	r2, [r7, #6]
 8011280:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	2201      	movs	r2, #1
 8011286:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	2202      	movs	r2, #2
 801128c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 801128e:	2301      	movs	r3, #1
 8011290:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	2203      	movs	r2, #3
 8011296:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80112a6:	2200      	movs	r2, #0
 80112a8:	4619      	mov	r1, r3
 80112aa:	f000 fcd7 	bl	8011c5c <osMessagePut>
      break;
 80112ae:	e026      	b.n	80112fe <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 80112b0:	68f8      	ldr	r0, [r7, #12]
 80112b2:	f000 f829 	bl	8011308 <USBH_HandleControl>
 80112b6:	4603      	mov	r3, r0
 80112b8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80112ba:	7dfb      	ldrb	r3, [r7, #23]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d002      	beq.n	80112c6 <USBH_CtlReq+0x70>
 80112c0:	7dfb      	ldrb	r3, [r7, #23]
 80112c2:	2b03      	cmp	r3, #3
 80112c4:	d106      	bne.n	80112d4 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	2201      	movs	r2, #1
 80112ca:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	2200      	movs	r2, #0
 80112d0:	761a      	strb	r2, [r3, #24]
 80112d2:	e005      	b.n	80112e0 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 80112d4:	7dfb      	ldrb	r3, [r7, #23]
 80112d6:	2b02      	cmp	r3, #2
 80112d8:	d102      	bne.n	80112e0 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	2201      	movs	r2, #1
 80112de:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	2203      	movs	r2, #3
 80112e4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80112f4:	2200      	movs	r2, #0
 80112f6:	4619      	mov	r1, r3
 80112f8:	f000 fcb0 	bl	8011c5c <osMessagePut>
      break;
 80112fc:	bf00      	nop
  }
  return status;
 80112fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8011300:	4618      	mov	r0, r3
 8011302:	3718      	adds	r7, #24
 8011304:	46bd      	mov	sp, r7
 8011306:	bd80      	pop	{r7, pc}

08011308 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8011308:	b580      	push	{r7, lr}
 801130a:	b086      	sub	sp, #24
 801130c:	af02      	add	r7, sp, #8
 801130e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8011310:	2301      	movs	r3, #1
 8011312:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8011314:	2300      	movs	r3, #0
 8011316:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	7e1b      	ldrb	r3, [r3, #24]
 801131c:	3b01      	subs	r3, #1
 801131e:	2b0a      	cmp	r3, #10
 8011320:	f200 8229 	bhi.w	8011776 <USBH_HandleControl+0x46e>
 8011324:	a201      	add	r2, pc, #4	@ (adr r2, 801132c <USBH_HandleControl+0x24>)
 8011326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801132a:	bf00      	nop
 801132c:	08011359 	.word	0x08011359
 8011330:	08011373 	.word	0x08011373
 8011334:	08011415 	.word	0x08011415
 8011338:	0801143b 	.word	0x0801143b
 801133c:	080114c7 	.word	0x080114c7
 8011340:	080114f1 	.word	0x080114f1
 8011344:	080115b3 	.word	0x080115b3
 8011348:	080115d5 	.word	0x080115d5
 801134c:	08011667 	.word	0x08011667
 8011350:	0801168d 	.word	0x0801168d
 8011354:	0801171f 	.word	0x0801171f
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	f103 0110 	add.w	r1, r3, #16
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	795b      	ldrb	r3, [r3, #5]
 8011362:	461a      	mov	r2, r3
 8011364:	6878      	ldr	r0, [r7, #4]
 8011366:	f000 fa17 	bl	8011798 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	2202      	movs	r2, #2
 801136e:	761a      	strb	r2, [r3, #24]
      break;
 8011370:	e20c      	b.n	801178c <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	795b      	ldrb	r3, [r3, #5]
 8011376:	4619      	mov	r1, r3
 8011378:	6878      	ldr	r0, [r7, #4]
 801137a:	f003 f953 	bl	8014624 <USBH_LL_GetURBState>
 801137e:	4603      	mov	r3, r0
 8011380:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8011382:	7bbb      	ldrb	r3, [r7, #14]
 8011384:	2b01      	cmp	r3, #1
 8011386:	d12c      	bne.n	80113e2 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	7c1b      	ldrb	r3, [r3, #16]
 801138c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8011390:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	8adb      	ldrh	r3, [r3, #22]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d00a      	beq.n	80113b0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 801139a:	7b7b      	ldrb	r3, [r7, #13]
 801139c:	2b80      	cmp	r3, #128	@ 0x80
 801139e:	d103      	bne.n	80113a8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	2203      	movs	r2, #3
 80113a4:	761a      	strb	r2, [r3, #24]
 80113a6:	e00d      	b.n	80113c4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	2205      	movs	r2, #5
 80113ac:	761a      	strb	r2, [r3, #24]
 80113ae:	e009      	b.n	80113c4 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 80113b0:	7b7b      	ldrb	r3, [r7, #13]
 80113b2:	2b80      	cmp	r3, #128	@ 0x80
 80113b4:	d103      	bne.n	80113be <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	2209      	movs	r2, #9
 80113ba:	761a      	strb	r2, [r3, #24]
 80113bc:	e002      	b.n	80113c4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	2207      	movs	r2, #7
 80113c2:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	2203      	movs	r2, #3
 80113c8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80113d8:	2200      	movs	r2, #0
 80113da:	4619      	mov	r1, r3
 80113dc:	f000 fc3e 	bl	8011c5c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80113e0:	e1cb      	b.n	801177a <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80113e2:	7bbb      	ldrb	r3, [r7, #14]
 80113e4:	2b04      	cmp	r3, #4
 80113e6:	d003      	beq.n	80113f0 <USBH_HandleControl+0xe8>
 80113e8:	7bbb      	ldrb	r3, [r7, #14]
 80113ea:	2b02      	cmp	r3, #2
 80113ec:	f040 81c5 	bne.w	801177a <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	220b      	movs	r2, #11
 80113f4:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	2203      	movs	r2, #3
 80113fa:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 801140a:	2200      	movs	r2, #0
 801140c:	4619      	mov	r1, r3
 801140e:	f000 fc25 	bl	8011c5c <osMessagePut>
      break;
 8011412:	e1b2      	b.n	801177a <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 801141a:	b29a      	uxth	r2, r3
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	6899      	ldr	r1, [r3, #8]
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	899a      	ldrh	r2, [r3, #12]
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	791b      	ldrb	r3, [r3, #4]
 801142c:	6878      	ldr	r0, [r7, #4]
 801142e:	f000 f9f2 	bl	8011816 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	2204      	movs	r2, #4
 8011436:	761a      	strb	r2, [r3, #24]
      break;
 8011438:	e1a8      	b.n	801178c <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	791b      	ldrb	r3, [r3, #4]
 801143e:	4619      	mov	r1, r3
 8011440:	6878      	ldr	r0, [r7, #4]
 8011442:	f003 f8ef 	bl	8014624 <USBH_LL_GetURBState>
 8011446:	4603      	mov	r3, r0
 8011448:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 801144a:	7bbb      	ldrb	r3, [r7, #14]
 801144c:	2b01      	cmp	r3, #1
 801144e:	d110      	bne.n	8011472 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	2209      	movs	r2, #9
 8011454:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	2203      	movs	r2, #3
 801145a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 801146a:	2200      	movs	r2, #0
 801146c:	4619      	mov	r1, r3
 801146e:	f000 fbf5 	bl	8011c5c <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8011472:	7bbb      	ldrb	r3, [r7, #14]
 8011474:	2b05      	cmp	r3, #5
 8011476:	d110      	bne.n	801149a <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8011478:	2303      	movs	r3, #3
 801147a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	2203      	movs	r2, #3
 8011480:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8011490:	2200      	movs	r2, #0
 8011492:	4619      	mov	r1, r3
 8011494:	f000 fbe2 	bl	8011c5c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8011498:	e171      	b.n	801177e <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 801149a:	7bbb      	ldrb	r3, [r7, #14]
 801149c:	2b04      	cmp	r3, #4
 801149e:	f040 816e 	bne.w	801177e <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	220b      	movs	r2, #11
 80114a6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	2203      	movs	r2, #3
 80114ac:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80114bc:	2200      	movs	r2, #0
 80114be:	4619      	mov	r1, r3
 80114c0:	f000 fbcc 	bl	8011c5c <osMessagePut>
      break;
 80114c4:	e15b      	b.n	801177e <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	6899      	ldr	r1, [r3, #8]
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	899a      	ldrh	r2, [r3, #12]
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	795b      	ldrb	r3, [r3, #5]
 80114d2:	2001      	movs	r0, #1
 80114d4:	9000      	str	r0, [sp, #0]
 80114d6:	6878      	ldr	r0, [r7, #4]
 80114d8:	f000 f978 	bl	80117cc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80114e2:	b29a      	uxth	r2, r3
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	2206      	movs	r2, #6
 80114ec:	761a      	strb	r2, [r3, #24]
      break;
 80114ee:	e14d      	b.n	801178c <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	795b      	ldrb	r3, [r3, #5]
 80114f4:	4619      	mov	r1, r3
 80114f6:	6878      	ldr	r0, [r7, #4]
 80114f8:	f003 f894 	bl	8014624 <USBH_LL_GetURBState>
 80114fc:	4603      	mov	r3, r0
 80114fe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8011500:	7bbb      	ldrb	r3, [r7, #14]
 8011502:	2b01      	cmp	r3, #1
 8011504:	d111      	bne.n	801152a <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	2207      	movs	r2, #7
 801150a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	2203      	movs	r2, #3
 8011510:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8011520:	2200      	movs	r2, #0
 8011522:	4619      	mov	r1, r3
 8011524:	f000 fb9a 	bl	8011c5c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8011528:	e12b      	b.n	8011782 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 801152a:	7bbb      	ldrb	r3, [r7, #14]
 801152c:	2b05      	cmp	r3, #5
 801152e:	d113      	bne.n	8011558 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	220c      	movs	r2, #12
 8011534:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8011536:	2303      	movs	r3, #3
 8011538:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	2203      	movs	r2, #3
 801153e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 801154e:	2200      	movs	r2, #0
 8011550:	4619      	mov	r1, r3
 8011552:	f000 fb83 	bl	8011c5c <osMessagePut>
      break;
 8011556:	e114      	b.n	8011782 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8011558:	7bbb      	ldrb	r3, [r7, #14]
 801155a:	2b02      	cmp	r3, #2
 801155c:	d111      	bne.n	8011582 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	2205      	movs	r2, #5
 8011562:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	2203      	movs	r2, #3
 8011568:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8011578:	2200      	movs	r2, #0
 801157a:	4619      	mov	r1, r3
 801157c:	f000 fb6e 	bl	8011c5c <osMessagePut>
      break;
 8011580:	e0ff      	b.n	8011782 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8011582:	7bbb      	ldrb	r3, [r7, #14]
 8011584:	2b04      	cmp	r3, #4
 8011586:	f040 80fc 	bne.w	8011782 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	220b      	movs	r2, #11
 801158e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8011590:	2302      	movs	r3, #2
 8011592:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	2203      	movs	r2, #3
 8011598:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80115a8:	2200      	movs	r2, #0
 80115aa:	4619      	mov	r1, r3
 80115ac:	f000 fb56 	bl	8011c5c <osMessagePut>
      break;
 80115b0:	e0e7      	b.n	8011782 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	791b      	ldrb	r3, [r3, #4]
 80115b6:	2200      	movs	r2, #0
 80115b8:	2100      	movs	r1, #0
 80115ba:	6878      	ldr	r0, [r7, #4]
 80115bc:	f000 f92b 	bl	8011816 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80115c6:	b29a      	uxth	r2, r3
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	2208      	movs	r2, #8
 80115d0:	761a      	strb	r2, [r3, #24]

      break;
 80115d2:	e0db      	b.n	801178c <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	791b      	ldrb	r3, [r3, #4]
 80115d8:	4619      	mov	r1, r3
 80115da:	6878      	ldr	r0, [r7, #4]
 80115dc:	f003 f822 	bl	8014624 <USBH_LL_GetURBState>
 80115e0:	4603      	mov	r3, r0
 80115e2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80115e4:	7bbb      	ldrb	r3, [r7, #14]
 80115e6:	2b01      	cmp	r3, #1
 80115e8:	d113      	bne.n	8011612 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	220d      	movs	r2, #13
 80115ee:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80115f0:	2300      	movs	r3, #0
 80115f2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	2203      	movs	r2, #3
 80115f8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8011608:	2200      	movs	r2, #0
 801160a:	4619      	mov	r1, r3
 801160c:	f000 fb26 	bl	8011c5c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8011610:	e0b9      	b.n	8011786 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8011612:	7bbb      	ldrb	r3, [r7, #14]
 8011614:	2b04      	cmp	r3, #4
 8011616:	d111      	bne.n	801163c <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	220b      	movs	r2, #11
 801161c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	2203      	movs	r2, #3
 8011622:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8011632:	2200      	movs	r2, #0
 8011634:	4619      	mov	r1, r3
 8011636:	f000 fb11 	bl	8011c5c <osMessagePut>
      break;
 801163a:	e0a4      	b.n	8011786 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 801163c:	7bbb      	ldrb	r3, [r7, #14]
 801163e:	2b05      	cmp	r3, #5
 8011640:	f040 80a1 	bne.w	8011786 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8011644:	2303      	movs	r3, #3
 8011646:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	2203      	movs	r2, #3
 801164c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 801165c:	2200      	movs	r2, #0
 801165e:	4619      	mov	r1, r3
 8011660:	f000 fafc 	bl	8011c5c <osMessagePut>
      break;
 8011664:	e08f      	b.n	8011786 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	795b      	ldrb	r3, [r3, #5]
 801166a:	2201      	movs	r2, #1
 801166c:	9200      	str	r2, [sp, #0]
 801166e:	2200      	movs	r2, #0
 8011670:	2100      	movs	r1, #0
 8011672:	6878      	ldr	r0, [r7, #4]
 8011674:	f000 f8aa 	bl	80117cc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 801167e:	b29a      	uxth	r2, r3
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	220a      	movs	r2, #10
 8011688:	761a      	strb	r2, [r3, #24]
      break;
 801168a:	e07f      	b.n	801178c <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	795b      	ldrb	r3, [r3, #5]
 8011690:	4619      	mov	r1, r3
 8011692:	6878      	ldr	r0, [r7, #4]
 8011694:	f002 ffc6 	bl	8014624 <USBH_LL_GetURBState>
 8011698:	4603      	mov	r3, r0
 801169a:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 801169c:	7bbb      	ldrb	r3, [r7, #14]
 801169e:	2b01      	cmp	r3, #1
 80116a0:	d113      	bne.n	80116ca <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 80116a2:	2300      	movs	r3, #0
 80116a4:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	220d      	movs	r2, #13
 80116aa:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	2203      	movs	r2, #3
 80116b0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80116c0:	2200      	movs	r2, #0
 80116c2:	4619      	mov	r1, r3
 80116c4:	f000 faca 	bl	8011c5c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80116c8:	e05f      	b.n	801178a <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 80116ca:	7bbb      	ldrb	r3, [r7, #14]
 80116cc:	2b02      	cmp	r3, #2
 80116ce:	d111      	bne.n	80116f4 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	2209      	movs	r2, #9
 80116d4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	2203      	movs	r2, #3
 80116da:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80116ea:	2200      	movs	r2, #0
 80116ec:	4619      	mov	r1, r3
 80116ee:	f000 fab5 	bl	8011c5c <osMessagePut>
      break;
 80116f2:	e04a      	b.n	801178a <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 80116f4:	7bbb      	ldrb	r3, [r7, #14]
 80116f6:	2b04      	cmp	r3, #4
 80116f8:	d147      	bne.n	801178a <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	220b      	movs	r2, #11
 80116fe:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	2203      	movs	r2, #3
 8011704:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8011714:	2200      	movs	r2, #0
 8011716:	4619      	mov	r1, r3
 8011718:	f000 faa0 	bl	8011c5c <osMessagePut>
      break;
 801171c:	e035      	b.n	801178a <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	7e5b      	ldrb	r3, [r3, #25]
 8011722:	3301      	adds	r3, #1
 8011724:	b2da      	uxtb	r2, r3
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	765a      	strb	r2, [r3, #25]
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	7e5b      	ldrb	r3, [r3, #25]
 801172e:	2b02      	cmp	r3, #2
 8011730:	d806      	bhi.n	8011740 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	2201      	movs	r2, #1
 8011736:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	2201      	movs	r2, #1
 801173c:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 801173e:	e025      	b.n	801178c <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8011746:	2106      	movs	r1, #6
 8011748:	6878      	ldr	r0, [r7, #4]
 801174a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	2200      	movs	r2, #0
 8011750:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	795b      	ldrb	r3, [r3, #5]
 8011756:	4619      	mov	r1, r3
 8011758:	6878      	ldr	r0, [r7, #4]
 801175a:	f000 f90d 	bl	8011978 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	791b      	ldrb	r3, [r3, #4]
 8011762:	4619      	mov	r1, r3
 8011764:	6878      	ldr	r0, [r7, #4]
 8011766:	f000 f907 	bl	8011978 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	2200      	movs	r2, #0
 801176e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8011770:	2302      	movs	r3, #2
 8011772:	73fb      	strb	r3, [r7, #15]
      break;
 8011774:	e00a      	b.n	801178c <USBH_HandleControl+0x484>

    default:
      break;
 8011776:	bf00      	nop
 8011778:	e008      	b.n	801178c <USBH_HandleControl+0x484>
      break;
 801177a:	bf00      	nop
 801177c:	e006      	b.n	801178c <USBH_HandleControl+0x484>
      break;
 801177e:	bf00      	nop
 8011780:	e004      	b.n	801178c <USBH_HandleControl+0x484>
      break;
 8011782:	bf00      	nop
 8011784:	e002      	b.n	801178c <USBH_HandleControl+0x484>
      break;
 8011786:	bf00      	nop
 8011788:	e000      	b.n	801178c <USBH_HandleControl+0x484>
      break;
 801178a:	bf00      	nop
  }

  return status;
 801178c:	7bfb      	ldrb	r3, [r7, #15]
}
 801178e:	4618      	mov	r0, r3
 8011790:	3710      	adds	r7, #16
 8011792:	46bd      	mov	sp, r7
 8011794:	bd80      	pop	{r7, pc}
 8011796:	bf00      	nop

08011798 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8011798:	b580      	push	{r7, lr}
 801179a:	b088      	sub	sp, #32
 801179c:	af04      	add	r7, sp, #16
 801179e:	60f8      	str	r0, [r7, #12]
 80117a0:	60b9      	str	r1, [r7, #8]
 80117a2:	4613      	mov	r3, r2
 80117a4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80117a6:	79f9      	ldrb	r1, [r7, #7]
 80117a8:	2300      	movs	r3, #0
 80117aa:	9303      	str	r3, [sp, #12]
 80117ac:	2308      	movs	r3, #8
 80117ae:	9302      	str	r3, [sp, #8]
 80117b0:	68bb      	ldr	r3, [r7, #8]
 80117b2:	9301      	str	r3, [sp, #4]
 80117b4:	2300      	movs	r3, #0
 80117b6:	9300      	str	r3, [sp, #0]
 80117b8:	2300      	movs	r3, #0
 80117ba:	2200      	movs	r2, #0
 80117bc:	68f8      	ldr	r0, [r7, #12]
 80117be:	f002 ff00 	bl	80145c2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80117c2:	2300      	movs	r3, #0
}
 80117c4:	4618      	mov	r0, r3
 80117c6:	3710      	adds	r7, #16
 80117c8:	46bd      	mov	sp, r7
 80117ca:	bd80      	pop	{r7, pc}

080117cc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b088      	sub	sp, #32
 80117d0:	af04      	add	r7, sp, #16
 80117d2:	60f8      	str	r0, [r7, #12]
 80117d4:	60b9      	str	r1, [r7, #8]
 80117d6:	4611      	mov	r1, r2
 80117d8:	461a      	mov	r2, r3
 80117da:	460b      	mov	r3, r1
 80117dc:	80fb      	strh	r3, [r7, #6]
 80117de:	4613      	mov	r3, r2
 80117e0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d001      	beq.n	80117f0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80117ec:	2300      	movs	r3, #0
 80117ee:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80117f0:	7979      	ldrb	r1, [r7, #5]
 80117f2:	7e3b      	ldrb	r3, [r7, #24]
 80117f4:	9303      	str	r3, [sp, #12]
 80117f6:	88fb      	ldrh	r3, [r7, #6]
 80117f8:	9302      	str	r3, [sp, #8]
 80117fa:	68bb      	ldr	r3, [r7, #8]
 80117fc:	9301      	str	r3, [sp, #4]
 80117fe:	2301      	movs	r3, #1
 8011800:	9300      	str	r3, [sp, #0]
 8011802:	2300      	movs	r3, #0
 8011804:	2200      	movs	r2, #0
 8011806:	68f8      	ldr	r0, [r7, #12]
 8011808:	f002 fedb 	bl	80145c2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 801180c:	2300      	movs	r3, #0
}
 801180e:	4618      	mov	r0, r3
 8011810:	3710      	adds	r7, #16
 8011812:	46bd      	mov	sp, r7
 8011814:	bd80      	pop	{r7, pc}

08011816 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8011816:	b580      	push	{r7, lr}
 8011818:	b088      	sub	sp, #32
 801181a:	af04      	add	r7, sp, #16
 801181c:	60f8      	str	r0, [r7, #12]
 801181e:	60b9      	str	r1, [r7, #8]
 8011820:	4611      	mov	r1, r2
 8011822:	461a      	mov	r2, r3
 8011824:	460b      	mov	r3, r1
 8011826:	80fb      	strh	r3, [r7, #6]
 8011828:	4613      	mov	r3, r2
 801182a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801182c:	7979      	ldrb	r1, [r7, #5]
 801182e:	2300      	movs	r3, #0
 8011830:	9303      	str	r3, [sp, #12]
 8011832:	88fb      	ldrh	r3, [r7, #6]
 8011834:	9302      	str	r3, [sp, #8]
 8011836:	68bb      	ldr	r3, [r7, #8]
 8011838:	9301      	str	r3, [sp, #4]
 801183a:	2301      	movs	r3, #1
 801183c:	9300      	str	r3, [sp, #0]
 801183e:	2300      	movs	r3, #0
 8011840:	2201      	movs	r2, #1
 8011842:	68f8      	ldr	r0, [r7, #12]
 8011844:	f002 febd 	bl	80145c2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8011848:	2300      	movs	r3, #0

}
 801184a:	4618      	mov	r0, r3
 801184c:	3710      	adds	r7, #16
 801184e:	46bd      	mov	sp, r7
 8011850:	bd80      	pop	{r7, pc}

08011852 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8011852:	b580      	push	{r7, lr}
 8011854:	b088      	sub	sp, #32
 8011856:	af04      	add	r7, sp, #16
 8011858:	60f8      	str	r0, [r7, #12]
 801185a:	60b9      	str	r1, [r7, #8]
 801185c:	4611      	mov	r1, r2
 801185e:	461a      	mov	r2, r3
 8011860:	460b      	mov	r3, r1
 8011862:	80fb      	strh	r3, [r7, #6]
 8011864:	4613      	mov	r3, r2
 8011866:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 801186e:	2b00      	cmp	r3, #0
 8011870:	d001      	beq.n	8011876 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8011872:	2300      	movs	r3, #0
 8011874:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8011876:	7979      	ldrb	r1, [r7, #5]
 8011878:	7e3b      	ldrb	r3, [r7, #24]
 801187a:	9303      	str	r3, [sp, #12]
 801187c:	88fb      	ldrh	r3, [r7, #6]
 801187e:	9302      	str	r3, [sp, #8]
 8011880:	68bb      	ldr	r3, [r7, #8]
 8011882:	9301      	str	r3, [sp, #4]
 8011884:	2301      	movs	r3, #1
 8011886:	9300      	str	r3, [sp, #0]
 8011888:	2302      	movs	r3, #2
 801188a:	2200      	movs	r2, #0
 801188c:	68f8      	ldr	r0, [r7, #12]
 801188e:	f002 fe98 	bl	80145c2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8011892:	2300      	movs	r3, #0
}
 8011894:	4618      	mov	r0, r3
 8011896:	3710      	adds	r7, #16
 8011898:	46bd      	mov	sp, r7
 801189a:	bd80      	pop	{r7, pc}

0801189c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 801189c:	b580      	push	{r7, lr}
 801189e:	b088      	sub	sp, #32
 80118a0:	af04      	add	r7, sp, #16
 80118a2:	60f8      	str	r0, [r7, #12]
 80118a4:	60b9      	str	r1, [r7, #8]
 80118a6:	4611      	mov	r1, r2
 80118a8:	461a      	mov	r2, r3
 80118aa:	460b      	mov	r3, r1
 80118ac:	80fb      	strh	r3, [r7, #6]
 80118ae:	4613      	mov	r3, r2
 80118b0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80118b2:	7979      	ldrb	r1, [r7, #5]
 80118b4:	2300      	movs	r3, #0
 80118b6:	9303      	str	r3, [sp, #12]
 80118b8:	88fb      	ldrh	r3, [r7, #6]
 80118ba:	9302      	str	r3, [sp, #8]
 80118bc:	68bb      	ldr	r3, [r7, #8]
 80118be:	9301      	str	r3, [sp, #4]
 80118c0:	2301      	movs	r3, #1
 80118c2:	9300      	str	r3, [sp, #0]
 80118c4:	2302      	movs	r3, #2
 80118c6:	2201      	movs	r2, #1
 80118c8:	68f8      	ldr	r0, [r7, #12]
 80118ca:	f002 fe7a 	bl	80145c2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80118ce:	2300      	movs	r3, #0
}
 80118d0:	4618      	mov	r0, r3
 80118d2:	3710      	adds	r7, #16
 80118d4:	46bd      	mov	sp, r7
 80118d6:	bd80      	pop	{r7, pc}

080118d8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80118d8:	b580      	push	{r7, lr}
 80118da:	b086      	sub	sp, #24
 80118dc:	af04      	add	r7, sp, #16
 80118de:	6078      	str	r0, [r7, #4]
 80118e0:	4608      	mov	r0, r1
 80118e2:	4611      	mov	r1, r2
 80118e4:	461a      	mov	r2, r3
 80118e6:	4603      	mov	r3, r0
 80118e8:	70fb      	strb	r3, [r7, #3]
 80118ea:	460b      	mov	r3, r1
 80118ec:	70bb      	strb	r3, [r7, #2]
 80118ee:	4613      	mov	r3, r2
 80118f0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80118f2:	7878      	ldrb	r0, [r7, #1]
 80118f4:	78ba      	ldrb	r2, [r7, #2]
 80118f6:	78f9      	ldrb	r1, [r7, #3]
 80118f8:	8b3b      	ldrh	r3, [r7, #24]
 80118fa:	9302      	str	r3, [sp, #8]
 80118fc:	7d3b      	ldrb	r3, [r7, #20]
 80118fe:	9301      	str	r3, [sp, #4]
 8011900:	7c3b      	ldrb	r3, [r7, #16]
 8011902:	9300      	str	r3, [sp, #0]
 8011904:	4603      	mov	r3, r0
 8011906:	6878      	ldr	r0, [r7, #4]
 8011908:	f002 fe0d 	bl	8014526 <USBH_LL_OpenPipe>

  return USBH_OK;
 801190c:	2300      	movs	r3, #0
}
 801190e:	4618      	mov	r0, r3
 8011910:	3708      	adds	r7, #8
 8011912:	46bd      	mov	sp, r7
 8011914:	bd80      	pop	{r7, pc}

08011916 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8011916:	b580      	push	{r7, lr}
 8011918:	b082      	sub	sp, #8
 801191a:	af00      	add	r7, sp, #0
 801191c:	6078      	str	r0, [r7, #4]
 801191e:	460b      	mov	r3, r1
 8011920:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8011922:	78fb      	ldrb	r3, [r7, #3]
 8011924:	4619      	mov	r1, r3
 8011926:	6878      	ldr	r0, [r7, #4]
 8011928:	f002 fe2c 	bl	8014584 <USBH_LL_ClosePipe>

  return USBH_OK;
 801192c:	2300      	movs	r3, #0
}
 801192e:	4618      	mov	r0, r3
 8011930:	3708      	adds	r7, #8
 8011932:	46bd      	mov	sp, r7
 8011934:	bd80      	pop	{r7, pc}

08011936 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8011936:	b580      	push	{r7, lr}
 8011938:	b084      	sub	sp, #16
 801193a:	af00      	add	r7, sp, #0
 801193c:	6078      	str	r0, [r7, #4]
 801193e:	460b      	mov	r3, r1
 8011940:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8011942:	6878      	ldr	r0, [r7, #4]
 8011944:	f000 f836 	bl	80119b4 <USBH_GetFreePipe>
 8011948:	4603      	mov	r3, r0
 801194a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 801194c:	89fb      	ldrh	r3, [r7, #14]
 801194e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011952:	4293      	cmp	r3, r2
 8011954:	d00a      	beq.n	801196c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8011956:	78fa      	ldrb	r2, [r7, #3]
 8011958:	89fb      	ldrh	r3, [r7, #14]
 801195a:	f003 030f 	and.w	r3, r3, #15
 801195e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8011962:	6879      	ldr	r1, [r7, #4]
 8011964:	33e0      	adds	r3, #224	@ 0xe0
 8011966:	009b      	lsls	r3, r3, #2
 8011968:	440b      	add	r3, r1
 801196a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 801196c:	89fb      	ldrh	r3, [r7, #14]
 801196e:	b2db      	uxtb	r3, r3
}
 8011970:	4618      	mov	r0, r3
 8011972:	3710      	adds	r7, #16
 8011974:	46bd      	mov	sp, r7
 8011976:	bd80      	pop	{r7, pc}

08011978 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8011978:	b480      	push	{r7}
 801197a:	b083      	sub	sp, #12
 801197c:	af00      	add	r7, sp, #0
 801197e:	6078      	str	r0, [r7, #4]
 8011980:	460b      	mov	r3, r1
 8011982:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8011984:	78fb      	ldrb	r3, [r7, #3]
 8011986:	2b0f      	cmp	r3, #15
 8011988:	d80d      	bhi.n	80119a6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 801198a:	78fb      	ldrb	r3, [r7, #3]
 801198c:	687a      	ldr	r2, [r7, #4]
 801198e:	33e0      	adds	r3, #224	@ 0xe0
 8011990:	009b      	lsls	r3, r3, #2
 8011992:	4413      	add	r3, r2
 8011994:	685a      	ldr	r2, [r3, #4]
 8011996:	78fb      	ldrb	r3, [r7, #3]
 8011998:	f3c2 020e 	ubfx	r2, r2, #0, #15
 801199c:	6879      	ldr	r1, [r7, #4]
 801199e:	33e0      	adds	r3, #224	@ 0xe0
 80119a0:	009b      	lsls	r3, r3, #2
 80119a2:	440b      	add	r3, r1
 80119a4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80119a6:	2300      	movs	r3, #0
}
 80119a8:	4618      	mov	r0, r3
 80119aa:	370c      	adds	r7, #12
 80119ac:	46bd      	mov	sp, r7
 80119ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b2:	4770      	bx	lr

080119b4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80119b4:	b480      	push	{r7}
 80119b6:	b085      	sub	sp, #20
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80119bc:	2300      	movs	r3, #0
 80119be:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80119c0:	2300      	movs	r3, #0
 80119c2:	73fb      	strb	r3, [r7, #15]
 80119c4:	e00f      	b.n	80119e6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80119c6:	7bfb      	ldrb	r3, [r7, #15]
 80119c8:	687a      	ldr	r2, [r7, #4]
 80119ca:	33e0      	adds	r3, #224	@ 0xe0
 80119cc:	009b      	lsls	r3, r3, #2
 80119ce:	4413      	add	r3, r2
 80119d0:	685b      	ldr	r3, [r3, #4]
 80119d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d102      	bne.n	80119e0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80119da:	7bfb      	ldrb	r3, [r7, #15]
 80119dc:	b29b      	uxth	r3, r3
 80119de:	e007      	b.n	80119f0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80119e0:	7bfb      	ldrb	r3, [r7, #15]
 80119e2:	3301      	adds	r3, #1
 80119e4:	73fb      	strb	r3, [r7, #15]
 80119e6:	7bfb      	ldrb	r3, [r7, #15]
 80119e8:	2b0f      	cmp	r3, #15
 80119ea:	d9ec      	bls.n	80119c6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80119ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80119f0:	4618      	mov	r0, r3
 80119f2:	3714      	adds	r7, #20
 80119f4:	46bd      	mov	sp, r7
 80119f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119fa:	4770      	bx	lr

080119fc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80119fc:	b480      	push	{r7}
 80119fe:	b087      	sub	sp, #28
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	60f8      	str	r0, [r7, #12]
 8011a04:	60b9      	str	r1, [r7, #8]
 8011a06:	4613      	mov	r3, r2
 8011a08:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011a0a:	2301      	movs	r3, #1
 8011a0c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011a0e:	2300      	movs	r3, #0
 8011a10:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011a12:	4b1f      	ldr	r3, [pc, #124]	@ (8011a90 <FATFS_LinkDriverEx+0x94>)
 8011a14:	7a5b      	ldrb	r3, [r3, #9]
 8011a16:	b2db      	uxtb	r3, r3
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d131      	bne.n	8011a80 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011a1c:	4b1c      	ldr	r3, [pc, #112]	@ (8011a90 <FATFS_LinkDriverEx+0x94>)
 8011a1e:	7a5b      	ldrb	r3, [r3, #9]
 8011a20:	b2db      	uxtb	r3, r3
 8011a22:	461a      	mov	r2, r3
 8011a24:	4b1a      	ldr	r3, [pc, #104]	@ (8011a90 <FATFS_LinkDriverEx+0x94>)
 8011a26:	2100      	movs	r1, #0
 8011a28:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011a2a:	4b19      	ldr	r3, [pc, #100]	@ (8011a90 <FATFS_LinkDriverEx+0x94>)
 8011a2c:	7a5b      	ldrb	r3, [r3, #9]
 8011a2e:	b2db      	uxtb	r3, r3
 8011a30:	4a17      	ldr	r2, [pc, #92]	@ (8011a90 <FATFS_LinkDriverEx+0x94>)
 8011a32:	009b      	lsls	r3, r3, #2
 8011a34:	4413      	add	r3, r2
 8011a36:	68fa      	ldr	r2, [r7, #12]
 8011a38:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011a3a:	4b15      	ldr	r3, [pc, #84]	@ (8011a90 <FATFS_LinkDriverEx+0x94>)
 8011a3c:	7a5b      	ldrb	r3, [r3, #9]
 8011a3e:	b2db      	uxtb	r3, r3
 8011a40:	461a      	mov	r2, r3
 8011a42:	4b13      	ldr	r3, [pc, #76]	@ (8011a90 <FATFS_LinkDriverEx+0x94>)
 8011a44:	4413      	add	r3, r2
 8011a46:	79fa      	ldrb	r2, [r7, #7]
 8011a48:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011a4a:	4b11      	ldr	r3, [pc, #68]	@ (8011a90 <FATFS_LinkDriverEx+0x94>)
 8011a4c:	7a5b      	ldrb	r3, [r3, #9]
 8011a4e:	b2db      	uxtb	r3, r3
 8011a50:	1c5a      	adds	r2, r3, #1
 8011a52:	b2d1      	uxtb	r1, r2
 8011a54:	4a0e      	ldr	r2, [pc, #56]	@ (8011a90 <FATFS_LinkDriverEx+0x94>)
 8011a56:	7251      	strb	r1, [r2, #9]
 8011a58:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011a5a:	7dbb      	ldrb	r3, [r7, #22]
 8011a5c:	3330      	adds	r3, #48	@ 0x30
 8011a5e:	b2da      	uxtb	r2, r3
 8011a60:	68bb      	ldr	r3, [r7, #8]
 8011a62:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011a64:	68bb      	ldr	r3, [r7, #8]
 8011a66:	3301      	adds	r3, #1
 8011a68:	223a      	movs	r2, #58	@ 0x3a
 8011a6a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011a6c:	68bb      	ldr	r3, [r7, #8]
 8011a6e:	3302      	adds	r3, #2
 8011a70:	222f      	movs	r2, #47	@ 0x2f
 8011a72:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011a74:	68bb      	ldr	r3, [r7, #8]
 8011a76:	3303      	adds	r3, #3
 8011a78:	2200      	movs	r2, #0
 8011a7a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a82:	4618      	mov	r0, r3
 8011a84:	371c      	adds	r7, #28
 8011a86:	46bd      	mov	sp, r7
 8011a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a8c:	4770      	bx	lr
 8011a8e:	bf00      	nop
 8011a90:	200010b8 	.word	0x200010b8

08011a94 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b082      	sub	sp, #8
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	6078      	str	r0, [r7, #4]
 8011a9c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011a9e:	2200      	movs	r2, #0
 8011aa0:	6839      	ldr	r1, [r7, #0]
 8011aa2:	6878      	ldr	r0, [r7, #4]
 8011aa4:	f7ff ffaa 	bl	80119fc <FATFS_LinkDriverEx>
 8011aa8:	4603      	mov	r3, r0
}
 8011aaa:	4618      	mov	r0, r3
 8011aac:	3708      	adds	r7, #8
 8011aae:	46bd      	mov	sp, r7
 8011ab0:	bd80      	pop	{r7, pc}

08011ab2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8011ab2:	b480      	push	{r7}
 8011ab4:	b085      	sub	sp, #20
 8011ab6:	af00      	add	r7, sp, #0
 8011ab8:	4603      	mov	r3, r0
 8011aba:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8011abc:	2300      	movs	r3, #0
 8011abe:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8011ac0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011ac4:	2b84      	cmp	r3, #132	@ 0x84
 8011ac6:	d005      	beq.n	8011ad4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8011ac8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	4413      	add	r3, r2
 8011ad0:	3303      	adds	r3, #3
 8011ad2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8011ad4:	68fb      	ldr	r3, [r7, #12]
}
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	3714      	adds	r7, #20
 8011ada:	46bd      	mov	sp, r7
 8011adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae0:	4770      	bx	lr

08011ae2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8011ae2:	b480      	push	{r7}
 8011ae4:	b083      	sub	sp, #12
 8011ae6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011ae8:	f3ef 8305 	mrs	r3, IPSR
 8011aec:	607b      	str	r3, [r7, #4]
  return(result);
 8011aee:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	bf14      	ite	ne
 8011af4:	2301      	movne	r3, #1
 8011af6:	2300      	moveq	r3, #0
 8011af8:	b2db      	uxtb	r3, r3
}
 8011afa:	4618      	mov	r0, r3
 8011afc:	370c      	adds	r7, #12
 8011afe:	46bd      	mov	sp, r7
 8011b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b04:	4770      	bx	lr

08011b06 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8011b06:	b580      	push	{r7, lr}
 8011b08:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8011b0a:	f001 f98d 	bl	8012e28 <vTaskStartScheduler>
  
  return osOK;
 8011b0e:	2300      	movs	r3, #0
}
 8011b10:	4618      	mov	r0, r3
 8011b12:	bd80      	pop	{r7, pc}

08011b14 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8011b14:	b580      	push	{r7, lr}
 8011b16:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8011b18:	f001 fe02 	bl	8013720 <xTaskGetSchedulerState>
 8011b1c:	4603      	mov	r3, r0
 8011b1e:	2b01      	cmp	r3, #1
 8011b20:	d101      	bne.n	8011b26 <osKernelRunning+0x12>
    return 0;
 8011b22:	2300      	movs	r3, #0
 8011b24:	e000      	b.n	8011b28 <osKernelRunning+0x14>
  else
    return 1;
 8011b26:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8011b28:	4618      	mov	r0, r3
 8011b2a:	bd80      	pop	{r7, pc}

08011b2c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8011b2c:	b580      	push	{r7, lr}
 8011b2e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8011b30:	f7ff ffd7 	bl	8011ae2 <inHandlerMode>
 8011b34:	4603      	mov	r3, r0
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d003      	beq.n	8011b42 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8011b3a:	f001 faa1 	bl	8013080 <xTaskGetTickCountFromISR>
 8011b3e:	4603      	mov	r3, r0
 8011b40:	e002      	b.n	8011b48 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8011b42:	f001 fa8d 	bl	8013060 <xTaskGetTickCount>
 8011b46:	4603      	mov	r3, r0
  }
}
 8011b48:	4618      	mov	r0, r3
 8011b4a:	bd80      	pop	{r7, pc}

08011b4c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8011b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b4e:	b089      	sub	sp, #36	@ 0x24
 8011b50:	af04      	add	r7, sp, #16
 8011b52:	6078      	str	r0, [r7, #4]
 8011b54:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	695b      	ldr	r3, [r3, #20]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d020      	beq.n	8011ba0 <osThreadCreate+0x54>
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	699b      	ldr	r3, [r3, #24]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d01c      	beq.n	8011ba0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	685c      	ldr	r4, [r3, #4]
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	691e      	ldr	r6, [r3, #16]
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011b78:	4618      	mov	r0, r3
 8011b7a:	f7ff ff9a 	bl	8011ab2 <makeFreeRtosPriority>
 8011b7e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	695b      	ldr	r3, [r3, #20]
 8011b84:	687a      	ldr	r2, [r7, #4]
 8011b86:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011b88:	9202      	str	r2, [sp, #8]
 8011b8a:	9301      	str	r3, [sp, #4]
 8011b8c:	9100      	str	r1, [sp, #0]
 8011b8e:	683b      	ldr	r3, [r7, #0]
 8011b90:	4632      	mov	r2, r6
 8011b92:	4629      	mov	r1, r5
 8011b94:	4620      	mov	r0, r4
 8011b96:	f000 ff4d 	bl	8012a34 <xTaskCreateStatic>
 8011b9a:	4603      	mov	r3, r0
 8011b9c:	60fb      	str	r3, [r7, #12]
 8011b9e:	e01c      	b.n	8011bda <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	685c      	ldr	r4, [r3, #4]
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011bac:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011bb4:	4618      	mov	r0, r3
 8011bb6:	f7ff ff7c 	bl	8011ab2 <makeFreeRtosPriority>
 8011bba:	4602      	mov	r2, r0
 8011bbc:	f107 030c 	add.w	r3, r7, #12
 8011bc0:	9301      	str	r3, [sp, #4]
 8011bc2:	9200      	str	r2, [sp, #0]
 8011bc4:	683b      	ldr	r3, [r7, #0]
 8011bc6:	4632      	mov	r2, r6
 8011bc8:	4629      	mov	r1, r5
 8011bca:	4620      	mov	r0, r4
 8011bcc:	f000 ff98 	bl	8012b00 <xTaskCreate>
 8011bd0:	4603      	mov	r3, r0
 8011bd2:	2b01      	cmp	r3, #1
 8011bd4:	d001      	beq.n	8011bda <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8011bd6:	2300      	movs	r3, #0
 8011bd8:	e000      	b.n	8011bdc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8011bda:	68fb      	ldr	r3, [r7, #12]
}
 8011bdc:	4618      	mov	r0, r3
 8011bde:	3714      	adds	r7, #20
 8011be0:	46bd      	mov	sp, r7
 8011be2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011be4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8011be4:	b580      	push	{r7, lr}
 8011be6:	b084      	sub	sp, #16
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8011bf0:	68fb      	ldr	r3, [r7, #12]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d001      	beq.n	8011bfa <osDelay+0x16>
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	e000      	b.n	8011bfc <osDelay+0x18>
 8011bfa:	2301      	movs	r3, #1
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	f001 f8db 	bl	8012db8 <vTaskDelay>
  
  return osOK;
 8011c02:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8011c04:	4618      	mov	r0, r3
 8011c06:	3710      	adds	r7, #16
 8011c08:	46bd      	mov	sp, r7
 8011c0a:	bd80      	pop	{r7, pc}

08011c0c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8011c0c:	b590      	push	{r4, r7, lr}
 8011c0e:	b085      	sub	sp, #20
 8011c10:	af02      	add	r7, sp, #8
 8011c12:	6078      	str	r0, [r7, #4]
 8011c14:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	689b      	ldr	r3, [r3, #8]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d011      	beq.n	8011c42 <osMessageCreate+0x36>
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	68db      	ldr	r3, [r3, #12]
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d00d      	beq.n	8011c42 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	6818      	ldr	r0, [r3, #0]
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	6859      	ldr	r1, [r3, #4]
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	689a      	ldr	r2, [r3, #8]
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	68db      	ldr	r3, [r3, #12]
 8011c36:	2400      	movs	r4, #0
 8011c38:	9400      	str	r4, [sp, #0]
 8011c3a:	f000 f9e3 	bl	8012004 <xQueueGenericCreateStatic>
 8011c3e:	4603      	mov	r3, r0
 8011c40:	e008      	b.n	8011c54 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	6818      	ldr	r0, [r3, #0]
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	685b      	ldr	r3, [r3, #4]
 8011c4a:	2200      	movs	r2, #0
 8011c4c:	4619      	mov	r1, r3
 8011c4e:	f000 fa60 	bl	8012112 <xQueueGenericCreate>
 8011c52:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8011c54:	4618      	mov	r0, r3
 8011c56:	370c      	adds	r7, #12
 8011c58:	46bd      	mov	sp, r7
 8011c5a:	bd90      	pop	{r4, r7, pc}

08011c5c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8011c5c:	b580      	push	{r7, lr}
 8011c5e:	b086      	sub	sp, #24
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	60f8      	str	r0, [r7, #12]
 8011c64:	60b9      	str	r1, [r7, #8]
 8011c66:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8011c68:	2300      	movs	r3, #0
 8011c6a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8011c70:	697b      	ldr	r3, [r7, #20]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d101      	bne.n	8011c7a <osMessagePut+0x1e>
    ticks = 1;
 8011c76:	2301      	movs	r3, #1
 8011c78:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8011c7a:	f7ff ff32 	bl	8011ae2 <inHandlerMode>
 8011c7e:	4603      	mov	r3, r0
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d018      	beq.n	8011cb6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8011c84:	f107 0210 	add.w	r2, r7, #16
 8011c88:	f107 0108 	add.w	r1, r7, #8
 8011c8c:	2300      	movs	r3, #0
 8011c8e:	68f8      	ldr	r0, [r7, #12]
 8011c90:	f000 fbac 	bl	80123ec <xQueueGenericSendFromISR>
 8011c94:	4603      	mov	r3, r0
 8011c96:	2b01      	cmp	r3, #1
 8011c98:	d001      	beq.n	8011c9e <osMessagePut+0x42>
      return osErrorOS;
 8011c9a:	23ff      	movs	r3, #255	@ 0xff
 8011c9c:	e018      	b.n	8011cd0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011c9e:	693b      	ldr	r3, [r7, #16]
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d014      	beq.n	8011cce <osMessagePut+0x72>
 8011ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8011cd8 <osMessagePut+0x7c>)
 8011ca6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011caa:	601a      	str	r2, [r3, #0]
 8011cac:	f3bf 8f4f 	dsb	sy
 8011cb0:	f3bf 8f6f 	isb	sy
 8011cb4:	e00b      	b.n	8011cce <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8011cb6:	f107 0108 	add.w	r1, r7, #8
 8011cba:	2300      	movs	r3, #0
 8011cbc:	697a      	ldr	r2, [r7, #20]
 8011cbe:	68f8      	ldr	r0, [r7, #12]
 8011cc0:	f000 fa8a 	bl	80121d8 <xQueueGenericSend>
 8011cc4:	4603      	mov	r3, r0
 8011cc6:	2b01      	cmp	r3, #1
 8011cc8:	d001      	beq.n	8011cce <osMessagePut+0x72>
      return osErrorOS;
 8011cca:	23ff      	movs	r3, #255	@ 0xff
 8011ccc:	e000      	b.n	8011cd0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8011cce:	2300      	movs	r3, #0
}
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	3718      	adds	r7, #24
 8011cd4:	46bd      	mov	sp, r7
 8011cd6:	bd80      	pop	{r7, pc}
 8011cd8:	e000ed04 	.word	0xe000ed04

08011cdc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8011cdc:	b590      	push	{r4, r7, lr}
 8011cde:	b08b      	sub	sp, #44	@ 0x2c
 8011ce0:	af00      	add	r7, sp, #0
 8011ce2:	60f8      	str	r0, [r7, #12]
 8011ce4:	60b9      	str	r1, [r7, #8]
 8011ce6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8011ce8:	68bb      	ldr	r3, [r7, #8]
 8011cea:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8011cec:	2300      	movs	r3, #0
 8011cee:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8011cf0:	68bb      	ldr	r3, [r7, #8]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d10a      	bne.n	8011d0c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8011cf6:	2380      	movs	r3, #128	@ 0x80
 8011cf8:	617b      	str	r3, [r7, #20]
    return event;
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	461c      	mov	r4, r3
 8011cfe:	f107 0314 	add.w	r3, r7, #20
 8011d02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011d06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011d0a:	e054      	b.n	8011db6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8011d0c:	2300      	movs	r3, #0
 8011d0e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8011d10:	2300      	movs	r3, #0
 8011d12:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d1a:	d103      	bne.n	8011d24 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8011d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8011d20:	627b      	str	r3, [r7, #36]	@ 0x24
 8011d22:	e009      	b.n	8011d38 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d006      	beq.n	8011d38 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8011d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d101      	bne.n	8011d38 <osMessageGet+0x5c>
      ticks = 1;
 8011d34:	2301      	movs	r3, #1
 8011d36:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8011d38:	f7ff fed3 	bl	8011ae2 <inHandlerMode>
 8011d3c:	4603      	mov	r3, r0
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d01c      	beq.n	8011d7c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8011d42:	f107 0220 	add.w	r2, r7, #32
 8011d46:	f107 0314 	add.w	r3, r7, #20
 8011d4a:	3304      	adds	r3, #4
 8011d4c:	4619      	mov	r1, r3
 8011d4e:	68b8      	ldr	r0, [r7, #8]
 8011d50:	f000 fcd8 	bl	8012704 <xQueueReceiveFromISR>
 8011d54:	4603      	mov	r3, r0
 8011d56:	2b01      	cmp	r3, #1
 8011d58:	d102      	bne.n	8011d60 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8011d5a:	2310      	movs	r3, #16
 8011d5c:	617b      	str	r3, [r7, #20]
 8011d5e:	e001      	b.n	8011d64 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8011d60:	2300      	movs	r3, #0
 8011d62:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011d64:	6a3b      	ldr	r3, [r7, #32]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d01d      	beq.n	8011da6 <osMessageGet+0xca>
 8011d6a:	4b15      	ldr	r3, [pc, #84]	@ (8011dc0 <osMessageGet+0xe4>)
 8011d6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011d70:	601a      	str	r2, [r3, #0]
 8011d72:	f3bf 8f4f 	dsb	sy
 8011d76:	f3bf 8f6f 	isb	sy
 8011d7a:	e014      	b.n	8011da6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8011d7c:	f107 0314 	add.w	r3, r7, #20
 8011d80:	3304      	adds	r3, #4
 8011d82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011d84:	4619      	mov	r1, r3
 8011d86:	68b8      	ldr	r0, [r7, #8]
 8011d88:	f000 fbd4 	bl	8012534 <xQueueReceive>
 8011d8c:	4603      	mov	r3, r0
 8011d8e:	2b01      	cmp	r3, #1
 8011d90:	d102      	bne.n	8011d98 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8011d92:	2310      	movs	r3, #16
 8011d94:	617b      	str	r3, [r7, #20]
 8011d96:	e006      	b.n	8011da6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8011d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d101      	bne.n	8011da2 <osMessageGet+0xc6>
 8011d9e:	2300      	movs	r3, #0
 8011da0:	e000      	b.n	8011da4 <osMessageGet+0xc8>
 8011da2:	2340      	movs	r3, #64	@ 0x40
 8011da4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	461c      	mov	r4, r3
 8011daa:	f107 0314 	add.w	r3, r7, #20
 8011dae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011db2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8011db6:	68f8      	ldr	r0, [r7, #12]
 8011db8:	372c      	adds	r7, #44	@ 0x2c
 8011dba:	46bd      	mov	sp, r7
 8011dbc:	bd90      	pop	{r4, r7, pc}
 8011dbe:	bf00      	nop
 8011dc0:	e000ed04 	.word	0xe000ed04

08011dc4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011dc4:	b480      	push	{r7}
 8011dc6:	b083      	sub	sp, #12
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	f103 0208 	add.w	r2, r3, #8
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8011ddc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	f103 0208 	add.w	r2, r3, #8
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	f103 0208 	add.w	r2, r3, #8
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	2200      	movs	r2, #0
 8011df6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011df8:	bf00      	nop
 8011dfa:	370c      	adds	r7, #12
 8011dfc:	46bd      	mov	sp, r7
 8011dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e02:	4770      	bx	lr

08011e04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011e04:	b480      	push	{r7}
 8011e06:	b083      	sub	sp, #12
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	2200      	movs	r2, #0
 8011e10:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011e12:	bf00      	nop
 8011e14:	370c      	adds	r7, #12
 8011e16:	46bd      	mov	sp, r7
 8011e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e1c:	4770      	bx	lr

08011e1e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011e1e:	b480      	push	{r7}
 8011e20:	b085      	sub	sp, #20
 8011e22:	af00      	add	r7, sp, #0
 8011e24:	6078      	str	r0, [r7, #4]
 8011e26:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	685b      	ldr	r3, [r3, #4]
 8011e2c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011e2e:	683b      	ldr	r3, [r7, #0]
 8011e30:	68fa      	ldr	r2, [r7, #12]
 8011e32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	689a      	ldr	r2, [r3, #8]
 8011e38:	683b      	ldr	r3, [r7, #0]
 8011e3a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	689b      	ldr	r3, [r3, #8]
 8011e40:	683a      	ldr	r2, [r7, #0]
 8011e42:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	683a      	ldr	r2, [r7, #0]
 8011e48:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011e4a:	683b      	ldr	r3, [r7, #0]
 8011e4c:	687a      	ldr	r2, [r7, #4]
 8011e4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	1c5a      	adds	r2, r3, #1
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	601a      	str	r2, [r3, #0]
}
 8011e5a:	bf00      	nop
 8011e5c:	3714      	adds	r7, #20
 8011e5e:	46bd      	mov	sp, r7
 8011e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e64:	4770      	bx	lr

08011e66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011e66:	b480      	push	{r7}
 8011e68:	b085      	sub	sp, #20
 8011e6a:	af00      	add	r7, sp, #0
 8011e6c:	6078      	str	r0, [r7, #4]
 8011e6e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011e70:	683b      	ldr	r3, [r7, #0]
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011e76:	68bb      	ldr	r3, [r7, #8]
 8011e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e7c:	d103      	bne.n	8011e86 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	691b      	ldr	r3, [r3, #16]
 8011e82:	60fb      	str	r3, [r7, #12]
 8011e84:	e00c      	b.n	8011ea0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	3308      	adds	r3, #8
 8011e8a:	60fb      	str	r3, [r7, #12]
 8011e8c:	e002      	b.n	8011e94 <vListInsert+0x2e>
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	685b      	ldr	r3, [r3, #4]
 8011e92:	60fb      	str	r3, [r7, #12]
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	685b      	ldr	r3, [r3, #4]
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	68ba      	ldr	r2, [r7, #8]
 8011e9c:	429a      	cmp	r2, r3
 8011e9e:	d2f6      	bcs.n	8011e8e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	685a      	ldr	r2, [r3, #4]
 8011ea4:	683b      	ldr	r3, [r7, #0]
 8011ea6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011ea8:	683b      	ldr	r3, [r7, #0]
 8011eaa:	685b      	ldr	r3, [r3, #4]
 8011eac:	683a      	ldr	r2, [r7, #0]
 8011eae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011eb0:	683b      	ldr	r3, [r7, #0]
 8011eb2:	68fa      	ldr	r2, [r7, #12]
 8011eb4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	683a      	ldr	r2, [r7, #0]
 8011eba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011ebc:	683b      	ldr	r3, [r7, #0]
 8011ebe:	687a      	ldr	r2, [r7, #4]
 8011ec0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	1c5a      	adds	r2, r3, #1
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	601a      	str	r2, [r3, #0]
}
 8011ecc:	bf00      	nop
 8011ece:	3714      	adds	r7, #20
 8011ed0:	46bd      	mov	sp, r7
 8011ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed6:	4770      	bx	lr

08011ed8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011ed8:	b480      	push	{r7}
 8011eda:	b085      	sub	sp, #20
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	691b      	ldr	r3, [r3, #16]
 8011ee4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	685b      	ldr	r3, [r3, #4]
 8011eea:	687a      	ldr	r2, [r7, #4]
 8011eec:	6892      	ldr	r2, [r2, #8]
 8011eee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	689b      	ldr	r3, [r3, #8]
 8011ef4:	687a      	ldr	r2, [r7, #4]
 8011ef6:	6852      	ldr	r2, [r2, #4]
 8011ef8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	685b      	ldr	r3, [r3, #4]
 8011efe:	687a      	ldr	r2, [r7, #4]
 8011f00:	429a      	cmp	r2, r3
 8011f02:	d103      	bne.n	8011f0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	689a      	ldr	r2, [r3, #8]
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	2200      	movs	r2, #0
 8011f10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	1e5a      	subs	r2, r3, #1
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	681b      	ldr	r3, [r3, #0]
}
 8011f20:	4618      	mov	r0, r3
 8011f22:	3714      	adds	r7, #20
 8011f24:	46bd      	mov	sp, r7
 8011f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f2a:	4770      	bx	lr

08011f2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011f2c:	b580      	push	{r7, lr}
 8011f2e:	b084      	sub	sp, #16
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	6078      	str	r0, [r7, #4]
 8011f34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d10d      	bne.n	8011f5c <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f44:	b672      	cpsid	i
 8011f46:	f383 8811 	msr	BASEPRI, r3
 8011f4a:	f3bf 8f6f 	isb	sy
 8011f4e:	f3bf 8f4f 	dsb	sy
 8011f52:	b662      	cpsie	i
 8011f54:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8011f56:	bf00      	nop
 8011f58:	bf00      	nop
 8011f5a:	e7fd      	b.n	8011f58 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8011f5c:	f001 fdfe 	bl	8013b5c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	681a      	ldr	r2, [r3, #0]
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011f68:	68f9      	ldr	r1, [r7, #12]
 8011f6a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8011f6c:	fb01 f303 	mul.w	r3, r1, r3
 8011f70:	441a      	add	r2, r3
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	2200      	movs	r2, #0
 8011f7a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	681a      	ldr	r2, [r3, #0]
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	681a      	ldr	r2, [r3, #0]
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011f8c:	3b01      	subs	r3, #1
 8011f8e:	68f9      	ldr	r1, [r7, #12]
 8011f90:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8011f92:	fb01 f303 	mul.w	r3, r1, r3
 8011f96:	441a      	add	r2, r3
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	22ff      	movs	r2, #255	@ 0xff
 8011fa0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	22ff      	movs	r2, #255	@ 0xff
 8011fa8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8011fac:	683b      	ldr	r3, [r7, #0]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d114      	bne.n	8011fdc <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	691b      	ldr	r3, [r3, #16]
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d01a      	beq.n	8011ff0 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	3310      	adds	r3, #16
 8011fbe:	4618      	mov	r0, r3
 8011fc0:	f001 f9de 	bl	8013380 <xTaskRemoveFromEventList>
 8011fc4:	4603      	mov	r3, r0
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d012      	beq.n	8011ff0 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011fca:	4b0d      	ldr	r3, [pc, #52]	@ (8012000 <xQueueGenericReset+0xd4>)
 8011fcc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011fd0:	601a      	str	r2, [r3, #0]
 8011fd2:	f3bf 8f4f 	dsb	sy
 8011fd6:	f3bf 8f6f 	isb	sy
 8011fda:	e009      	b.n	8011ff0 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	3310      	adds	r3, #16
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	f7ff feef 	bl	8011dc4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	3324      	adds	r3, #36	@ 0x24
 8011fea:	4618      	mov	r0, r3
 8011fec:	f7ff feea 	bl	8011dc4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011ff0:	f001 fdea 	bl	8013bc8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011ff4:	2301      	movs	r3, #1
}
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	3710      	adds	r7, #16
 8011ffa:	46bd      	mov	sp, r7
 8011ffc:	bd80      	pop	{r7, pc}
 8011ffe:	bf00      	nop
 8012000:	e000ed04 	.word	0xe000ed04

08012004 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012004:	b580      	push	{r7, lr}
 8012006:	b08e      	sub	sp, #56	@ 0x38
 8012008:	af02      	add	r7, sp, #8
 801200a:	60f8      	str	r0, [r7, #12]
 801200c:	60b9      	str	r1, [r7, #8]
 801200e:	607a      	str	r2, [r7, #4]
 8012010:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	2b00      	cmp	r3, #0
 8012016:	d10d      	bne.n	8012034 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8012018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801201c:	b672      	cpsid	i
 801201e:	f383 8811 	msr	BASEPRI, r3
 8012022:	f3bf 8f6f 	isb	sy
 8012026:	f3bf 8f4f 	dsb	sy
 801202a:	b662      	cpsie	i
 801202c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801202e:	bf00      	nop
 8012030:	bf00      	nop
 8012032:	e7fd      	b.n	8012030 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012034:	683b      	ldr	r3, [r7, #0]
 8012036:	2b00      	cmp	r3, #0
 8012038:	d10d      	bne.n	8012056 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 801203a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801203e:	b672      	cpsid	i
 8012040:	f383 8811 	msr	BASEPRI, r3
 8012044:	f3bf 8f6f 	isb	sy
 8012048:	f3bf 8f4f 	dsb	sy
 801204c:	b662      	cpsie	i
 801204e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012050:	bf00      	nop
 8012052:	bf00      	nop
 8012054:	e7fd      	b.n	8012052 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d002      	beq.n	8012062 <xQueueGenericCreateStatic+0x5e>
 801205c:	68bb      	ldr	r3, [r7, #8]
 801205e:	2b00      	cmp	r3, #0
 8012060:	d001      	beq.n	8012066 <xQueueGenericCreateStatic+0x62>
 8012062:	2301      	movs	r3, #1
 8012064:	e000      	b.n	8012068 <xQueueGenericCreateStatic+0x64>
 8012066:	2300      	movs	r3, #0
 8012068:	2b00      	cmp	r3, #0
 801206a:	d10d      	bne.n	8012088 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 801206c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012070:	b672      	cpsid	i
 8012072:	f383 8811 	msr	BASEPRI, r3
 8012076:	f3bf 8f6f 	isb	sy
 801207a:	f3bf 8f4f 	dsb	sy
 801207e:	b662      	cpsie	i
 8012080:	623b      	str	r3, [r7, #32]
}
 8012082:	bf00      	nop
 8012084:	bf00      	nop
 8012086:	e7fd      	b.n	8012084 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	2b00      	cmp	r3, #0
 801208c:	d102      	bne.n	8012094 <xQueueGenericCreateStatic+0x90>
 801208e:	68bb      	ldr	r3, [r7, #8]
 8012090:	2b00      	cmp	r3, #0
 8012092:	d101      	bne.n	8012098 <xQueueGenericCreateStatic+0x94>
 8012094:	2301      	movs	r3, #1
 8012096:	e000      	b.n	801209a <xQueueGenericCreateStatic+0x96>
 8012098:	2300      	movs	r3, #0
 801209a:	2b00      	cmp	r3, #0
 801209c:	d10d      	bne.n	80120ba <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 801209e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120a2:	b672      	cpsid	i
 80120a4:	f383 8811 	msr	BASEPRI, r3
 80120a8:	f3bf 8f6f 	isb	sy
 80120ac:	f3bf 8f4f 	dsb	sy
 80120b0:	b662      	cpsie	i
 80120b2:	61fb      	str	r3, [r7, #28]
}
 80120b4:	bf00      	nop
 80120b6:	bf00      	nop
 80120b8:	e7fd      	b.n	80120b6 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80120ba:	2348      	movs	r3, #72	@ 0x48
 80120bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80120be:	697b      	ldr	r3, [r7, #20]
 80120c0:	2b48      	cmp	r3, #72	@ 0x48
 80120c2:	d00d      	beq.n	80120e0 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 80120c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120c8:	b672      	cpsid	i
 80120ca:	f383 8811 	msr	BASEPRI, r3
 80120ce:	f3bf 8f6f 	isb	sy
 80120d2:	f3bf 8f4f 	dsb	sy
 80120d6:	b662      	cpsie	i
 80120d8:	61bb      	str	r3, [r7, #24]
}
 80120da:	bf00      	nop
 80120dc:	bf00      	nop
 80120de:	e7fd      	b.n	80120dc <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80120e0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80120e2:	683b      	ldr	r3, [r7, #0]
 80120e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80120e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d00d      	beq.n	8012108 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80120ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120ee:	2201      	movs	r2, #1
 80120f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80120f4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80120f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120fa:	9300      	str	r3, [sp, #0]
 80120fc:	4613      	mov	r3, r2
 80120fe:	687a      	ldr	r2, [r7, #4]
 8012100:	68b9      	ldr	r1, [r7, #8]
 8012102:	68f8      	ldr	r0, [r7, #12]
 8012104:	f000 f848 	bl	8012198 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 801210a:	4618      	mov	r0, r3
 801210c:	3730      	adds	r7, #48	@ 0x30
 801210e:	46bd      	mov	sp, r7
 8012110:	bd80      	pop	{r7, pc}

08012112 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012112:	b580      	push	{r7, lr}
 8012114:	b08a      	sub	sp, #40	@ 0x28
 8012116:	af02      	add	r7, sp, #8
 8012118:	60f8      	str	r0, [r7, #12]
 801211a:	60b9      	str	r1, [r7, #8]
 801211c:	4613      	mov	r3, r2
 801211e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	2b00      	cmp	r3, #0
 8012124:	d10d      	bne.n	8012142 <xQueueGenericCreate+0x30>
	__asm volatile
 8012126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801212a:	b672      	cpsid	i
 801212c:	f383 8811 	msr	BASEPRI, r3
 8012130:	f3bf 8f6f 	isb	sy
 8012134:	f3bf 8f4f 	dsb	sy
 8012138:	b662      	cpsie	i
 801213a:	613b      	str	r3, [r7, #16]
}
 801213c:	bf00      	nop
 801213e:	bf00      	nop
 8012140:	e7fd      	b.n	801213e <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8012142:	68bb      	ldr	r3, [r7, #8]
 8012144:	2b00      	cmp	r3, #0
 8012146:	d102      	bne.n	801214e <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8012148:	2300      	movs	r3, #0
 801214a:	61fb      	str	r3, [r7, #28]
 801214c:	e004      	b.n	8012158 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	68ba      	ldr	r2, [r7, #8]
 8012152:	fb02 f303 	mul.w	r3, r2, r3
 8012156:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012158:	69fb      	ldr	r3, [r7, #28]
 801215a:	3348      	adds	r3, #72	@ 0x48
 801215c:	4618      	mov	r0, r3
 801215e:	f001 fe2b 	bl	8013db8 <pvPortMalloc>
 8012162:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012164:	69bb      	ldr	r3, [r7, #24]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d011      	beq.n	801218e <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801216a:	69bb      	ldr	r3, [r7, #24]
 801216c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801216e:	697b      	ldr	r3, [r7, #20]
 8012170:	3348      	adds	r3, #72	@ 0x48
 8012172:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012174:	69bb      	ldr	r3, [r7, #24]
 8012176:	2200      	movs	r2, #0
 8012178:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801217c:	79fa      	ldrb	r2, [r7, #7]
 801217e:	69bb      	ldr	r3, [r7, #24]
 8012180:	9300      	str	r3, [sp, #0]
 8012182:	4613      	mov	r3, r2
 8012184:	697a      	ldr	r2, [r7, #20]
 8012186:	68b9      	ldr	r1, [r7, #8]
 8012188:	68f8      	ldr	r0, [r7, #12]
 801218a:	f000 f805 	bl	8012198 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801218e:	69bb      	ldr	r3, [r7, #24]
	}
 8012190:	4618      	mov	r0, r3
 8012192:	3720      	adds	r7, #32
 8012194:	46bd      	mov	sp, r7
 8012196:	bd80      	pop	{r7, pc}

08012198 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012198:	b580      	push	{r7, lr}
 801219a:	b084      	sub	sp, #16
 801219c:	af00      	add	r7, sp, #0
 801219e:	60f8      	str	r0, [r7, #12]
 80121a0:	60b9      	str	r1, [r7, #8]
 80121a2:	607a      	str	r2, [r7, #4]
 80121a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80121a6:	68bb      	ldr	r3, [r7, #8]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d103      	bne.n	80121b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80121ac:	69bb      	ldr	r3, [r7, #24]
 80121ae:	69ba      	ldr	r2, [r7, #24]
 80121b0:	601a      	str	r2, [r3, #0]
 80121b2:	e002      	b.n	80121ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80121b4:	69bb      	ldr	r3, [r7, #24]
 80121b6:	687a      	ldr	r2, [r7, #4]
 80121b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80121ba:	69bb      	ldr	r3, [r7, #24]
 80121bc:	68fa      	ldr	r2, [r7, #12]
 80121be:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80121c0:	69bb      	ldr	r3, [r7, #24]
 80121c2:	68ba      	ldr	r2, [r7, #8]
 80121c4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80121c6:	2101      	movs	r1, #1
 80121c8:	69b8      	ldr	r0, [r7, #24]
 80121ca:	f7ff feaf 	bl	8011f2c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80121ce:	bf00      	nop
 80121d0:	3710      	adds	r7, #16
 80121d2:	46bd      	mov	sp, r7
 80121d4:	bd80      	pop	{r7, pc}
	...

080121d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80121d8:	b580      	push	{r7, lr}
 80121da:	b08e      	sub	sp, #56	@ 0x38
 80121dc:	af00      	add	r7, sp, #0
 80121de:	60f8      	str	r0, [r7, #12]
 80121e0:	60b9      	str	r1, [r7, #8]
 80121e2:	607a      	str	r2, [r7, #4]
 80121e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80121e6:	2300      	movs	r3, #0
 80121e8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80121ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d10d      	bne.n	8012210 <xQueueGenericSend+0x38>
	__asm volatile
 80121f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80121f8:	b672      	cpsid	i
 80121fa:	f383 8811 	msr	BASEPRI, r3
 80121fe:	f3bf 8f6f 	isb	sy
 8012202:	f3bf 8f4f 	dsb	sy
 8012206:	b662      	cpsie	i
 8012208:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801220a:	bf00      	nop
 801220c:	bf00      	nop
 801220e:	e7fd      	b.n	801220c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012210:	68bb      	ldr	r3, [r7, #8]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d103      	bne.n	801221e <xQueueGenericSend+0x46>
 8012216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801221a:	2b00      	cmp	r3, #0
 801221c:	d101      	bne.n	8012222 <xQueueGenericSend+0x4a>
 801221e:	2301      	movs	r3, #1
 8012220:	e000      	b.n	8012224 <xQueueGenericSend+0x4c>
 8012222:	2300      	movs	r3, #0
 8012224:	2b00      	cmp	r3, #0
 8012226:	d10d      	bne.n	8012244 <xQueueGenericSend+0x6c>
	__asm volatile
 8012228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801222c:	b672      	cpsid	i
 801222e:	f383 8811 	msr	BASEPRI, r3
 8012232:	f3bf 8f6f 	isb	sy
 8012236:	f3bf 8f4f 	dsb	sy
 801223a:	b662      	cpsie	i
 801223c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801223e:	bf00      	nop
 8012240:	bf00      	nop
 8012242:	e7fd      	b.n	8012240 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012244:	683b      	ldr	r3, [r7, #0]
 8012246:	2b02      	cmp	r3, #2
 8012248:	d103      	bne.n	8012252 <xQueueGenericSend+0x7a>
 801224a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801224c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801224e:	2b01      	cmp	r3, #1
 8012250:	d101      	bne.n	8012256 <xQueueGenericSend+0x7e>
 8012252:	2301      	movs	r3, #1
 8012254:	e000      	b.n	8012258 <xQueueGenericSend+0x80>
 8012256:	2300      	movs	r3, #0
 8012258:	2b00      	cmp	r3, #0
 801225a:	d10d      	bne.n	8012278 <xQueueGenericSend+0xa0>
	__asm volatile
 801225c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012260:	b672      	cpsid	i
 8012262:	f383 8811 	msr	BASEPRI, r3
 8012266:	f3bf 8f6f 	isb	sy
 801226a:	f3bf 8f4f 	dsb	sy
 801226e:	b662      	cpsie	i
 8012270:	623b      	str	r3, [r7, #32]
}
 8012272:	bf00      	nop
 8012274:	bf00      	nop
 8012276:	e7fd      	b.n	8012274 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012278:	f001 fa52 	bl	8013720 <xTaskGetSchedulerState>
 801227c:	4603      	mov	r3, r0
 801227e:	2b00      	cmp	r3, #0
 8012280:	d102      	bne.n	8012288 <xQueueGenericSend+0xb0>
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	2b00      	cmp	r3, #0
 8012286:	d101      	bne.n	801228c <xQueueGenericSend+0xb4>
 8012288:	2301      	movs	r3, #1
 801228a:	e000      	b.n	801228e <xQueueGenericSend+0xb6>
 801228c:	2300      	movs	r3, #0
 801228e:	2b00      	cmp	r3, #0
 8012290:	d10d      	bne.n	80122ae <xQueueGenericSend+0xd6>
	__asm volatile
 8012292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012296:	b672      	cpsid	i
 8012298:	f383 8811 	msr	BASEPRI, r3
 801229c:	f3bf 8f6f 	isb	sy
 80122a0:	f3bf 8f4f 	dsb	sy
 80122a4:	b662      	cpsie	i
 80122a6:	61fb      	str	r3, [r7, #28]
}
 80122a8:	bf00      	nop
 80122aa:	bf00      	nop
 80122ac:	e7fd      	b.n	80122aa <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80122ae:	f001 fc55 	bl	8013b5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80122b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80122b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80122ba:	429a      	cmp	r2, r3
 80122bc:	d302      	bcc.n	80122c4 <xQueueGenericSend+0xec>
 80122be:	683b      	ldr	r3, [r7, #0]
 80122c0:	2b02      	cmp	r3, #2
 80122c2:	d129      	bne.n	8012318 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80122c4:	683a      	ldr	r2, [r7, #0]
 80122c6:	68b9      	ldr	r1, [r7, #8]
 80122c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80122ca:	f000 faa3 	bl	8012814 <prvCopyDataToQueue>
 80122ce:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80122d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d010      	beq.n	80122fa <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80122d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122da:	3324      	adds	r3, #36	@ 0x24
 80122dc:	4618      	mov	r0, r3
 80122de:	f001 f84f 	bl	8013380 <xTaskRemoveFromEventList>
 80122e2:	4603      	mov	r3, r0
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d013      	beq.n	8012310 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80122e8:	4b3f      	ldr	r3, [pc, #252]	@ (80123e8 <xQueueGenericSend+0x210>)
 80122ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80122ee:	601a      	str	r2, [r3, #0]
 80122f0:	f3bf 8f4f 	dsb	sy
 80122f4:	f3bf 8f6f 	isb	sy
 80122f8:	e00a      	b.n	8012310 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80122fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d007      	beq.n	8012310 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012300:	4b39      	ldr	r3, [pc, #228]	@ (80123e8 <xQueueGenericSend+0x210>)
 8012302:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012306:	601a      	str	r2, [r3, #0]
 8012308:	f3bf 8f4f 	dsb	sy
 801230c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012310:	f001 fc5a 	bl	8013bc8 <vPortExitCritical>
				return pdPASS;
 8012314:	2301      	movs	r3, #1
 8012316:	e063      	b.n	80123e0 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	2b00      	cmp	r3, #0
 801231c:	d103      	bne.n	8012326 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801231e:	f001 fc53 	bl	8013bc8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8012322:	2300      	movs	r3, #0
 8012324:	e05c      	b.n	80123e0 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012328:	2b00      	cmp	r3, #0
 801232a:	d106      	bne.n	801233a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801232c:	f107 0314 	add.w	r3, r7, #20
 8012330:	4618      	mov	r0, r3
 8012332:	f001 f88b 	bl	801344c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012336:	2301      	movs	r3, #1
 8012338:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801233a:	f001 fc45 	bl	8013bc8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801233e:	f000 fde1 	bl	8012f04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012342:	f001 fc0b 	bl	8013b5c <vPortEnterCritical>
 8012346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012348:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801234c:	b25b      	sxtb	r3, r3
 801234e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012352:	d103      	bne.n	801235c <xQueueGenericSend+0x184>
 8012354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012356:	2200      	movs	r2, #0
 8012358:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801235c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801235e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012362:	b25b      	sxtb	r3, r3
 8012364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012368:	d103      	bne.n	8012372 <xQueueGenericSend+0x19a>
 801236a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801236c:	2200      	movs	r2, #0
 801236e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012372:	f001 fc29 	bl	8013bc8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012376:	1d3a      	adds	r2, r7, #4
 8012378:	f107 0314 	add.w	r3, r7, #20
 801237c:	4611      	mov	r1, r2
 801237e:	4618      	mov	r0, r3
 8012380:	f001 f87a 	bl	8013478 <xTaskCheckForTimeOut>
 8012384:	4603      	mov	r3, r0
 8012386:	2b00      	cmp	r3, #0
 8012388:	d124      	bne.n	80123d4 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801238a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801238c:	f000 fb3a 	bl	8012a04 <prvIsQueueFull>
 8012390:	4603      	mov	r3, r0
 8012392:	2b00      	cmp	r3, #0
 8012394:	d018      	beq.n	80123c8 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012398:	3310      	adds	r3, #16
 801239a:	687a      	ldr	r2, [r7, #4]
 801239c:	4611      	mov	r1, r2
 801239e:	4618      	mov	r0, r3
 80123a0:	f000 ffc6 	bl	8013330 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80123a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80123a6:	f000 fac5 	bl	8012934 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80123aa:	f000 fdb9 	bl	8012f20 <xTaskResumeAll>
 80123ae:	4603      	mov	r3, r0
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	f47f af7c 	bne.w	80122ae <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80123b6:	4b0c      	ldr	r3, [pc, #48]	@ (80123e8 <xQueueGenericSend+0x210>)
 80123b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80123bc:	601a      	str	r2, [r3, #0]
 80123be:	f3bf 8f4f 	dsb	sy
 80123c2:	f3bf 8f6f 	isb	sy
 80123c6:	e772      	b.n	80122ae <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80123c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80123ca:	f000 fab3 	bl	8012934 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80123ce:	f000 fda7 	bl	8012f20 <xTaskResumeAll>
 80123d2:	e76c      	b.n	80122ae <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80123d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80123d6:	f000 faad 	bl	8012934 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80123da:	f000 fda1 	bl	8012f20 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80123de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80123e0:	4618      	mov	r0, r3
 80123e2:	3738      	adds	r7, #56	@ 0x38
 80123e4:	46bd      	mov	sp, r7
 80123e6:	bd80      	pop	{r7, pc}
 80123e8:	e000ed04 	.word	0xe000ed04

080123ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80123ec:	b580      	push	{r7, lr}
 80123ee:	b08e      	sub	sp, #56	@ 0x38
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	60f8      	str	r0, [r7, #12]
 80123f4:	60b9      	str	r1, [r7, #8]
 80123f6:	607a      	str	r2, [r7, #4]
 80123f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80123fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012400:	2b00      	cmp	r3, #0
 8012402:	d10d      	bne.n	8012420 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8012404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012408:	b672      	cpsid	i
 801240a:	f383 8811 	msr	BASEPRI, r3
 801240e:	f3bf 8f6f 	isb	sy
 8012412:	f3bf 8f4f 	dsb	sy
 8012416:	b662      	cpsie	i
 8012418:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801241a:	bf00      	nop
 801241c:	bf00      	nop
 801241e:	e7fd      	b.n	801241c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012420:	68bb      	ldr	r3, [r7, #8]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d103      	bne.n	801242e <xQueueGenericSendFromISR+0x42>
 8012426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801242a:	2b00      	cmp	r3, #0
 801242c:	d101      	bne.n	8012432 <xQueueGenericSendFromISR+0x46>
 801242e:	2301      	movs	r3, #1
 8012430:	e000      	b.n	8012434 <xQueueGenericSendFromISR+0x48>
 8012432:	2300      	movs	r3, #0
 8012434:	2b00      	cmp	r3, #0
 8012436:	d10d      	bne.n	8012454 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8012438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801243c:	b672      	cpsid	i
 801243e:	f383 8811 	msr	BASEPRI, r3
 8012442:	f3bf 8f6f 	isb	sy
 8012446:	f3bf 8f4f 	dsb	sy
 801244a:	b662      	cpsie	i
 801244c:	623b      	str	r3, [r7, #32]
}
 801244e:	bf00      	nop
 8012450:	bf00      	nop
 8012452:	e7fd      	b.n	8012450 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012454:	683b      	ldr	r3, [r7, #0]
 8012456:	2b02      	cmp	r3, #2
 8012458:	d103      	bne.n	8012462 <xQueueGenericSendFromISR+0x76>
 801245a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801245c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801245e:	2b01      	cmp	r3, #1
 8012460:	d101      	bne.n	8012466 <xQueueGenericSendFromISR+0x7a>
 8012462:	2301      	movs	r3, #1
 8012464:	e000      	b.n	8012468 <xQueueGenericSendFromISR+0x7c>
 8012466:	2300      	movs	r3, #0
 8012468:	2b00      	cmp	r3, #0
 801246a:	d10d      	bne.n	8012488 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 801246c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012470:	b672      	cpsid	i
 8012472:	f383 8811 	msr	BASEPRI, r3
 8012476:	f3bf 8f6f 	isb	sy
 801247a:	f3bf 8f4f 	dsb	sy
 801247e:	b662      	cpsie	i
 8012480:	61fb      	str	r3, [r7, #28]
}
 8012482:	bf00      	nop
 8012484:	bf00      	nop
 8012486:	e7fd      	b.n	8012484 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012488:	f001 fc50 	bl	8013d2c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801248c:	f3ef 8211 	mrs	r2, BASEPRI
 8012490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012494:	b672      	cpsid	i
 8012496:	f383 8811 	msr	BASEPRI, r3
 801249a:	f3bf 8f6f 	isb	sy
 801249e:	f3bf 8f4f 	dsb	sy
 80124a2:	b662      	cpsie	i
 80124a4:	61ba      	str	r2, [r7, #24]
 80124a6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80124a8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80124aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80124ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80124ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80124b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80124b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80124b4:	429a      	cmp	r2, r3
 80124b6:	d302      	bcc.n	80124be <xQueueGenericSendFromISR+0xd2>
 80124b8:	683b      	ldr	r3, [r7, #0]
 80124ba:	2b02      	cmp	r3, #2
 80124bc:	d12c      	bne.n	8012518 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80124be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80124c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80124c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80124c8:	683a      	ldr	r2, [r7, #0]
 80124ca:	68b9      	ldr	r1, [r7, #8]
 80124cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80124ce:	f000 f9a1 	bl	8012814 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80124d2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80124d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124da:	d112      	bne.n	8012502 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80124dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80124de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d016      	beq.n	8012512 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80124e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80124e6:	3324      	adds	r3, #36	@ 0x24
 80124e8:	4618      	mov	r0, r3
 80124ea:	f000 ff49 	bl	8013380 <xTaskRemoveFromEventList>
 80124ee:	4603      	mov	r3, r0
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d00e      	beq.n	8012512 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d00b      	beq.n	8012512 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	2201      	movs	r2, #1
 80124fe:	601a      	str	r2, [r3, #0]
 8012500:	e007      	b.n	8012512 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012502:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8012506:	3301      	adds	r3, #1
 8012508:	b2db      	uxtb	r3, r3
 801250a:	b25a      	sxtb	r2, r3
 801250c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801250e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8012512:	2301      	movs	r3, #1
 8012514:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8012516:	e001      	b.n	801251c <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012518:	2300      	movs	r3, #0
 801251a:	637b      	str	r3, [r7, #52]	@ 0x34
 801251c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801251e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012520:	693b      	ldr	r3, [r7, #16]
 8012522:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8012526:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 801252a:	4618      	mov	r0, r3
 801252c:	3738      	adds	r7, #56	@ 0x38
 801252e:	46bd      	mov	sp, r7
 8012530:	bd80      	pop	{r7, pc}
	...

08012534 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012534:	b580      	push	{r7, lr}
 8012536:	b08c      	sub	sp, #48	@ 0x30
 8012538:	af00      	add	r7, sp, #0
 801253a:	60f8      	str	r0, [r7, #12]
 801253c:	60b9      	str	r1, [r7, #8]
 801253e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012540:	2300      	movs	r3, #0
 8012542:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801254a:	2b00      	cmp	r3, #0
 801254c:	d10d      	bne.n	801256a <xQueueReceive+0x36>
	__asm volatile
 801254e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012552:	b672      	cpsid	i
 8012554:	f383 8811 	msr	BASEPRI, r3
 8012558:	f3bf 8f6f 	isb	sy
 801255c:	f3bf 8f4f 	dsb	sy
 8012560:	b662      	cpsie	i
 8012562:	623b      	str	r3, [r7, #32]
}
 8012564:	bf00      	nop
 8012566:	bf00      	nop
 8012568:	e7fd      	b.n	8012566 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801256a:	68bb      	ldr	r3, [r7, #8]
 801256c:	2b00      	cmp	r3, #0
 801256e:	d103      	bne.n	8012578 <xQueueReceive+0x44>
 8012570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012574:	2b00      	cmp	r3, #0
 8012576:	d101      	bne.n	801257c <xQueueReceive+0x48>
 8012578:	2301      	movs	r3, #1
 801257a:	e000      	b.n	801257e <xQueueReceive+0x4a>
 801257c:	2300      	movs	r3, #0
 801257e:	2b00      	cmp	r3, #0
 8012580:	d10d      	bne.n	801259e <xQueueReceive+0x6a>
	__asm volatile
 8012582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012586:	b672      	cpsid	i
 8012588:	f383 8811 	msr	BASEPRI, r3
 801258c:	f3bf 8f6f 	isb	sy
 8012590:	f3bf 8f4f 	dsb	sy
 8012594:	b662      	cpsie	i
 8012596:	61fb      	str	r3, [r7, #28]
}
 8012598:	bf00      	nop
 801259a:	bf00      	nop
 801259c:	e7fd      	b.n	801259a <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801259e:	f001 f8bf 	bl	8013720 <xTaskGetSchedulerState>
 80125a2:	4603      	mov	r3, r0
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d102      	bne.n	80125ae <xQueueReceive+0x7a>
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d101      	bne.n	80125b2 <xQueueReceive+0x7e>
 80125ae:	2301      	movs	r3, #1
 80125b0:	e000      	b.n	80125b4 <xQueueReceive+0x80>
 80125b2:	2300      	movs	r3, #0
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d10d      	bne.n	80125d4 <xQueueReceive+0xa0>
	__asm volatile
 80125b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125bc:	b672      	cpsid	i
 80125be:	f383 8811 	msr	BASEPRI, r3
 80125c2:	f3bf 8f6f 	isb	sy
 80125c6:	f3bf 8f4f 	dsb	sy
 80125ca:	b662      	cpsie	i
 80125cc:	61bb      	str	r3, [r7, #24]
}
 80125ce:	bf00      	nop
 80125d0:	bf00      	nop
 80125d2:	e7fd      	b.n	80125d0 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80125d4:	f001 fac2 	bl	8013b5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80125d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80125da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80125dc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80125de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d01f      	beq.n	8012624 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80125e4:	68b9      	ldr	r1, [r7, #8]
 80125e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80125e8:	f000 f97e 	bl	80128e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80125ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125ee:	1e5a      	subs	r2, r3, #1
 80125f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80125f2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80125f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80125f6:	691b      	ldr	r3, [r3, #16]
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d00f      	beq.n	801261c <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80125fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80125fe:	3310      	adds	r3, #16
 8012600:	4618      	mov	r0, r3
 8012602:	f000 febd 	bl	8013380 <xTaskRemoveFromEventList>
 8012606:	4603      	mov	r3, r0
 8012608:	2b00      	cmp	r3, #0
 801260a:	d007      	beq.n	801261c <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801260c:	4b3c      	ldr	r3, [pc, #240]	@ (8012700 <xQueueReceive+0x1cc>)
 801260e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012612:	601a      	str	r2, [r3, #0]
 8012614:	f3bf 8f4f 	dsb	sy
 8012618:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801261c:	f001 fad4 	bl	8013bc8 <vPortExitCritical>
				return pdPASS;
 8012620:	2301      	movs	r3, #1
 8012622:	e069      	b.n	80126f8 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	2b00      	cmp	r3, #0
 8012628:	d103      	bne.n	8012632 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801262a:	f001 facd 	bl	8013bc8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801262e:	2300      	movs	r3, #0
 8012630:	e062      	b.n	80126f8 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012634:	2b00      	cmp	r3, #0
 8012636:	d106      	bne.n	8012646 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012638:	f107 0310 	add.w	r3, r7, #16
 801263c:	4618      	mov	r0, r3
 801263e:	f000 ff05 	bl	801344c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012642:	2301      	movs	r3, #1
 8012644:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012646:	f001 fabf 	bl	8013bc8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801264a:	f000 fc5b 	bl	8012f04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801264e:	f001 fa85 	bl	8013b5c <vPortEnterCritical>
 8012652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012654:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012658:	b25b      	sxtb	r3, r3
 801265a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801265e:	d103      	bne.n	8012668 <xQueueReceive+0x134>
 8012660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012662:	2200      	movs	r2, #0
 8012664:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801266a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801266e:	b25b      	sxtb	r3, r3
 8012670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012674:	d103      	bne.n	801267e <xQueueReceive+0x14a>
 8012676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012678:	2200      	movs	r2, #0
 801267a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801267e:	f001 faa3 	bl	8013bc8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012682:	1d3a      	adds	r2, r7, #4
 8012684:	f107 0310 	add.w	r3, r7, #16
 8012688:	4611      	mov	r1, r2
 801268a:	4618      	mov	r0, r3
 801268c:	f000 fef4 	bl	8013478 <xTaskCheckForTimeOut>
 8012690:	4603      	mov	r3, r0
 8012692:	2b00      	cmp	r3, #0
 8012694:	d123      	bne.n	80126de <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012696:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012698:	f000 f99e 	bl	80129d8 <prvIsQueueEmpty>
 801269c:	4603      	mov	r3, r0
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d017      	beq.n	80126d2 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80126a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126a4:	3324      	adds	r3, #36	@ 0x24
 80126a6:	687a      	ldr	r2, [r7, #4]
 80126a8:	4611      	mov	r1, r2
 80126aa:	4618      	mov	r0, r3
 80126ac:	f000 fe40 	bl	8013330 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80126b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80126b2:	f000 f93f 	bl	8012934 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80126b6:	f000 fc33 	bl	8012f20 <xTaskResumeAll>
 80126ba:	4603      	mov	r3, r0
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d189      	bne.n	80125d4 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80126c0:	4b0f      	ldr	r3, [pc, #60]	@ (8012700 <xQueueReceive+0x1cc>)
 80126c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80126c6:	601a      	str	r2, [r3, #0]
 80126c8:	f3bf 8f4f 	dsb	sy
 80126cc:	f3bf 8f6f 	isb	sy
 80126d0:	e780      	b.n	80125d4 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80126d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80126d4:	f000 f92e 	bl	8012934 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80126d8:	f000 fc22 	bl	8012f20 <xTaskResumeAll>
 80126dc:	e77a      	b.n	80125d4 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80126de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80126e0:	f000 f928 	bl	8012934 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80126e4:	f000 fc1c 	bl	8012f20 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80126e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80126ea:	f000 f975 	bl	80129d8 <prvIsQueueEmpty>
 80126ee:	4603      	mov	r3, r0
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	f43f af6f 	beq.w	80125d4 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80126f6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80126f8:	4618      	mov	r0, r3
 80126fa:	3730      	adds	r7, #48	@ 0x30
 80126fc:	46bd      	mov	sp, r7
 80126fe:	bd80      	pop	{r7, pc}
 8012700:	e000ed04 	.word	0xe000ed04

08012704 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012704:	b580      	push	{r7, lr}
 8012706:	b08e      	sub	sp, #56	@ 0x38
 8012708:	af00      	add	r7, sp, #0
 801270a:	60f8      	str	r0, [r7, #12]
 801270c:	60b9      	str	r1, [r7, #8]
 801270e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8012714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012716:	2b00      	cmp	r3, #0
 8012718:	d10d      	bne.n	8012736 <xQueueReceiveFromISR+0x32>
	__asm volatile
 801271a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801271e:	b672      	cpsid	i
 8012720:	f383 8811 	msr	BASEPRI, r3
 8012724:	f3bf 8f6f 	isb	sy
 8012728:	f3bf 8f4f 	dsb	sy
 801272c:	b662      	cpsie	i
 801272e:	623b      	str	r3, [r7, #32]
}
 8012730:	bf00      	nop
 8012732:	bf00      	nop
 8012734:	e7fd      	b.n	8012732 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012736:	68bb      	ldr	r3, [r7, #8]
 8012738:	2b00      	cmp	r3, #0
 801273a:	d103      	bne.n	8012744 <xQueueReceiveFromISR+0x40>
 801273c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801273e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012740:	2b00      	cmp	r3, #0
 8012742:	d101      	bne.n	8012748 <xQueueReceiveFromISR+0x44>
 8012744:	2301      	movs	r3, #1
 8012746:	e000      	b.n	801274a <xQueueReceiveFromISR+0x46>
 8012748:	2300      	movs	r3, #0
 801274a:	2b00      	cmp	r3, #0
 801274c:	d10d      	bne.n	801276a <xQueueReceiveFromISR+0x66>
	__asm volatile
 801274e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012752:	b672      	cpsid	i
 8012754:	f383 8811 	msr	BASEPRI, r3
 8012758:	f3bf 8f6f 	isb	sy
 801275c:	f3bf 8f4f 	dsb	sy
 8012760:	b662      	cpsie	i
 8012762:	61fb      	str	r3, [r7, #28]
}
 8012764:	bf00      	nop
 8012766:	bf00      	nop
 8012768:	e7fd      	b.n	8012766 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801276a:	f001 fadf 	bl	8013d2c <vPortValidateInterruptPriority>
	__asm volatile
 801276e:	f3ef 8211 	mrs	r2, BASEPRI
 8012772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012776:	b672      	cpsid	i
 8012778:	f383 8811 	msr	BASEPRI, r3
 801277c:	f3bf 8f6f 	isb	sy
 8012780:	f3bf 8f4f 	dsb	sy
 8012784:	b662      	cpsie	i
 8012786:	61ba      	str	r2, [r7, #24]
 8012788:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801278a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801278c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801278e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012792:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012796:	2b00      	cmp	r3, #0
 8012798:	d02f      	beq.n	80127fa <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801279a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801279c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80127a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80127a4:	68b9      	ldr	r1, [r7, #8]
 80127a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80127a8:	f000 f89e 	bl	80128e8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80127ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127ae:	1e5a      	subs	r2, r3, #1
 80127b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127b2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80127b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80127b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127bc:	d112      	bne.n	80127e4 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80127be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127c0:	691b      	ldr	r3, [r3, #16]
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d016      	beq.n	80127f4 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80127c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127c8:	3310      	adds	r3, #16
 80127ca:	4618      	mov	r0, r3
 80127cc:	f000 fdd8 	bl	8013380 <xTaskRemoveFromEventList>
 80127d0:	4603      	mov	r3, r0
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d00e      	beq.n	80127f4 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d00b      	beq.n	80127f4 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	2201      	movs	r2, #1
 80127e0:	601a      	str	r2, [r3, #0]
 80127e2:	e007      	b.n	80127f4 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80127e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80127e8:	3301      	adds	r3, #1
 80127ea:	b2db      	uxtb	r3, r3
 80127ec:	b25a      	sxtb	r2, r3
 80127ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80127f4:	2301      	movs	r3, #1
 80127f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80127f8:	e001      	b.n	80127fe <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 80127fa:	2300      	movs	r3, #0
 80127fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80127fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012800:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012802:	693b      	ldr	r3, [r7, #16]
 8012804:	f383 8811 	msr	BASEPRI, r3
}
 8012808:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801280a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 801280c:	4618      	mov	r0, r3
 801280e:	3738      	adds	r7, #56	@ 0x38
 8012810:	46bd      	mov	sp, r7
 8012812:	bd80      	pop	{r7, pc}

08012814 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012814:	b580      	push	{r7, lr}
 8012816:	b086      	sub	sp, #24
 8012818:	af00      	add	r7, sp, #0
 801281a:	60f8      	str	r0, [r7, #12]
 801281c:	60b9      	str	r1, [r7, #8]
 801281e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012820:	2300      	movs	r3, #0
 8012822:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012828:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801282e:	2b00      	cmp	r3, #0
 8012830:	d10d      	bne.n	801284e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	2b00      	cmp	r3, #0
 8012838:	d14d      	bne.n	80128d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	689b      	ldr	r3, [r3, #8]
 801283e:	4618      	mov	r0, r3
 8012840:	f000 ff8c 	bl	801375c <xTaskPriorityDisinherit>
 8012844:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	2200      	movs	r2, #0
 801284a:	609a      	str	r2, [r3, #8]
 801284c:	e043      	b.n	80128d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	2b00      	cmp	r3, #0
 8012852:	d119      	bne.n	8012888 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	6858      	ldr	r0, [r3, #4]
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801285c:	461a      	mov	r2, r3
 801285e:	68b9      	ldr	r1, [r7, #8]
 8012860:	f002 f8e8 	bl	8014a34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	685a      	ldr	r2, [r3, #4]
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801286c:	441a      	add	r2, r3
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	685a      	ldr	r2, [r3, #4]
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	689b      	ldr	r3, [r3, #8]
 801287a:	429a      	cmp	r2, r3
 801287c:	d32b      	bcc.n	80128d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	681a      	ldr	r2, [r3, #0]
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	605a      	str	r2, [r3, #4]
 8012886:	e026      	b.n	80128d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	68d8      	ldr	r0, [r3, #12]
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012890:	461a      	mov	r2, r3
 8012892:	68b9      	ldr	r1, [r7, #8]
 8012894:	f002 f8ce 	bl	8014a34 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	68da      	ldr	r2, [r3, #12]
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80128a0:	425b      	negs	r3, r3
 80128a2:	441a      	add	r2, r3
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	68da      	ldr	r2, [r3, #12]
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	429a      	cmp	r2, r3
 80128b2:	d207      	bcs.n	80128c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80128b4:	68fb      	ldr	r3, [r7, #12]
 80128b6:	689a      	ldr	r2, [r3, #8]
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80128bc:	425b      	negs	r3, r3
 80128be:	441a      	add	r2, r3
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	2b02      	cmp	r3, #2
 80128c8:	d105      	bne.n	80128d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80128ca:	693b      	ldr	r3, [r7, #16]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d002      	beq.n	80128d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80128d0:	693b      	ldr	r3, [r7, #16]
 80128d2:	3b01      	subs	r3, #1
 80128d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80128d6:	693b      	ldr	r3, [r7, #16]
 80128d8:	1c5a      	adds	r2, r3, #1
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80128de:	697b      	ldr	r3, [r7, #20]
}
 80128e0:	4618      	mov	r0, r3
 80128e2:	3718      	adds	r7, #24
 80128e4:	46bd      	mov	sp, r7
 80128e6:	bd80      	pop	{r7, pc}

080128e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80128e8:	b580      	push	{r7, lr}
 80128ea:	b082      	sub	sp, #8
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	6078      	str	r0, [r7, #4]
 80128f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d018      	beq.n	801292c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	68da      	ldr	r2, [r3, #12]
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012902:	441a      	add	r2, r3
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	68da      	ldr	r2, [r3, #12]
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	689b      	ldr	r3, [r3, #8]
 8012910:	429a      	cmp	r2, r3
 8012912:	d303      	bcc.n	801291c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	681a      	ldr	r2, [r3, #0]
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	68d9      	ldr	r1, [r3, #12]
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012924:	461a      	mov	r2, r3
 8012926:	6838      	ldr	r0, [r7, #0]
 8012928:	f002 f884 	bl	8014a34 <memcpy>
	}
}
 801292c:	bf00      	nop
 801292e:	3708      	adds	r7, #8
 8012930:	46bd      	mov	sp, r7
 8012932:	bd80      	pop	{r7, pc}

08012934 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012934:	b580      	push	{r7, lr}
 8012936:	b084      	sub	sp, #16
 8012938:	af00      	add	r7, sp, #0
 801293a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801293c:	f001 f90e 	bl	8013b5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012946:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012948:	e011      	b.n	801296e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801294e:	2b00      	cmp	r3, #0
 8012950:	d012      	beq.n	8012978 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	3324      	adds	r3, #36	@ 0x24
 8012956:	4618      	mov	r0, r3
 8012958:	f000 fd12 	bl	8013380 <xTaskRemoveFromEventList>
 801295c:	4603      	mov	r3, r0
 801295e:	2b00      	cmp	r3, #0
 8012960:	d001      	beq.n	8012966 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012962:	f000 fdf1 	bl	8013548 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012966:	7bfb      	ldrb	r3, [r7, #15]
 8012968:	3b01      	subs	r3, #1
 801296a:	b2db      	uxtb	r3, r3
 801296c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801296e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012972:	2b00      	cmp	r3, #0
 8012974:	dce9      	bgt.n	801294a <prvUnlockQueue+0x16>
 8012976:	e000      	b.n	801297a <prvUnlockQueue+0x46>
					break;
 8012978:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	22ff      	movs	r2, #255	@ 0xff
 801297e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8012982:	f001 f921 	bl	8013bc8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012986:	f001 f8e9 	bl	8013b5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012990:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012992:	e011      	b.n	80129b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	691b      	ldr	r3, [r3, #16]
 8012998:	2b00      	cmp	r3, #0
 801299a:	d012      	beq.n	80129c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	3310      	adds	r3, #16
 80129a0:	4618      	mov	r0, r3
 80129a2:	f000 fced 	bl	8013380 <xTaskRemoveFromEventList>
 80129a6:	4603      	mov	r3, r0
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d001      	beq.n	80129b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80129ac:	f000 fdcc 	bl	8013548 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80129b0:	7bbb      	ldrb	r3, [r7, #14]
 80129b2:	3b01      	subs	r3, #1
 80129b4:	b2db      	uxtb	r3, r3
 80129b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80129b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	dce9      	bgt.n	8012994 <prvUnlockQueue+0x60>
 80129c0:	e000      	b.n	80129c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80129c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	22ff      	movs	r2, #255	@ 0xff
 80129c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80129cc:	f001 f8fc 	bl	8013bc8 <vPortExitCritical>
}
 80129d0:	bf00      	nop
 80129d2:	3710      	adds	r7, #16
 80129d4:	46bd      	mov	sp, r7
 80129d6:	bd80      	pop	{r7, pc}

080129d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80129d8:	b580      	push	{r7, lr}
 80129da:	b084      	sub	sp, #16
 80129dc:	af00      	add	r7, sp, #0
 80129de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80129e0:	f001 f8bc 	bl	8013b5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d102      	bne.n	80129f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80129ec:	2301      	movs	r3, #1
 80129ee:	60fb      	str	r3, [r7, #12]
 80129f0:	e001      	b.n	80129f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80129f2:	2300      	movs	r3, #0
 80129f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80129f6:	f001 f8e7 	bl	8013bc8 <vPortExitCritical>

	return xReturn;
 80129fa:	68fb      	ldr	r3, [r7, #12]
}
 80129fc:	4618      	mov	r0, r3
 80129fe:	3710      	adds	r7, #16
 8012a00:	46bd      	mov	sp, r7
 8012a02:	bd80      	pop	{r7, pc}

08012a04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012a04:	b580      	push	{r7, lr}
 8012a06:	b084      	sub	sp, #16
 8012a08:	af00      	add	r7, sp, #0
 8012a0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012a0c:	f001 f8a6 	bl	8013b5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012a18:	429a      	cmp	r2, r3
 8012a1a:	d102      	bne.n	8012a22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012a1c:	2301      	movs	r3, #1
 8012a1e:	60fb      	str	r3, [r7, #12]
 8012a20:	e001      	b.n	8012a26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012a22:	2300      	movs	r3, #0
 8012a24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012a26:	f001 f8cf 	bl	8013bc8 <vPortExitCritical>

	return xReturn;
 8012a2a:	68fb      	ldr	r3, [r7, #12]
}
 8012a2c:	4618      	mov	r0, r3
 8012a2e:	3710      	adds	r7, #16
 8012a30:	46bd      	mov	sp, r7
 8012a32:	bd80      	pop	{r7, pc}

08012a34 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012a34:	b580      	push	{r7, lr}
 8012a36:	b08e      	sub	sp, #56	@ 0x38
 8012a38:	af04      	add	r7, sp, #16
 8012a3a:	60f8      	str	r0, [r7, #12]
 8012a3c:	60b9      	str	r1, [r7, #8]
 8012a3e:	607a      	str	r2, [r7, #4]
 8012a40:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8012a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d10d      	bne.n	8012a64 <xTaskCreateStatic+0x30>
	__asm volatile
 8012a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a4c:	b672      	cpsid	i
 8012a4e:	f383 8811 	msr	BASEPRI, r3
 8012a52:	f3bf 8f6f 	isb	sy
 8012a56:	f3bf 8f4f 	dsb	sy
 8012a5a:	b662      	cpsie	i
 8012a5c:	623b      	str	r3, [r7, #32]
}
 8012a5e:	bf00      	nop
 8012a60:	bf00      	nop
 8012a62:	e7fd      	b.n	8012a60 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8012a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d10d      	bne.n	8012a86 <xTaskCreateStatic+0x52>
	__asm volatile
 8012a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a6e:	b672      	cpsid	i
 8012a70:	f383 8811 	msr	BASEPRI, r3
 8012a74:	f3bf 8f6f 	isb	sy
 8012a78:	f3bf 8f4f 	dsb	sy
 8012a7c:	b662      	cpsie	i
 8012a7e:	61fb      	str	r3, [r7, #28]
}
 8012a80:	bf00      	nop
 8012a82:	bf00      	nop
 8012a84:	e7fd      	b.n	8012a82 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012a86:	23a4      	movs	r3, #164	@ 0xa4
 8012a88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012a8a:	693b      	ldr	r3, [r7, #16]
 8012a8c:	2ba4      	cmp	r3, #164	@ 0xa4
 8012a8e:	d00d      	beq.n	8012aac <xTaskCreateStatic+0x78>
	__asm volatile
 8012a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a94:	b672      	cpsid	i
 8012a96:	f383 8811 	msr	BASEPRI, r3
 8012a9a:	f3bf 8f6f 	isb	sy
 8012a9e:	f3bf 8f4f 	dsb	sy
 8012aa2:	b662      	cpsie	i
 8012aa4:	61bb      	str	r3, [r7, #24]
}
 8012aa6:	bf00      	nop
 8012aa8:	bf00      	nop
 8012aaa:	e7fd      	b.n	8012aa8 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012aac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d01e      	beq.n	8012af2 <xTaskCreateStatic+0xbe>
 8012ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d01b      	beq.n	8012af2 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012abc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ac0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012ac2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ac6:	2202      	movs	r2, #2
 8012ac8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012acc:	2300      	movs	r3, #0
 8012ace:	9303      	str	r3, [sp, #12]
 8012ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ad2:	9302      	str	r3, [sp, #8]
 8012ad4:	f107 0314 	add.w	r3, r7, #20
 8012ad8:	9301      	str	r3, [sp, #4]
 8012ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012adc:	9300      	str	r3, [sp, #0]
 8012ade:	683b      	ldr	r3, [r7, #0]
 8012ae0:	687a      	ldr	r2, [r7, #4]
 8012ae2:	68b9      	ldr	r1, [r7, #8]
 8012ae4:	68f8      	ldr	r0, [r7, #12]
 8012ae6:	f000 f851 	bl	8012b8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012aea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012aec:	f000 f8fa 	bl	8012ce4 <prvAddNewTaskToReadyList>
 8012af0:	e001      	b.n	8012af6 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8012af2:	2300      	movs	r3, #0
 8012af4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012af6:	697b      	ldr	r3, [r7, #20]
	}
 8012af8:	4618      	mov	r0, r3
 8012afa:	3728      	adds	r7, #40	@ 0x28
 8012afc:	46bd      	mov	sp, r7
 8012afe:	bd80      	pop	{r7, pc}

08012b00 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012b00:	b580      	push	{r7, lr}
 8012b02:	b08c      	sub	sp, #48	@ 0x30
 8012b04:	af04      	add	r7, sp, #16
 8012b06:	60f8      	str	r0, [r7, #12]
 8012b08:	60b9      	str	r1, [r7, #8]
 8012b0a:	603b      	str	r3, [r7, #0]
 8012b0c:	4613      	mov	r3, r2
 8012b0e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012b10:	88fb      	ldrh	r3, [r7, #6]
 8012b12:	009b      	lsls	r3, r3, #2
 8012b14:	4618      	mov	r0, r3
 8012b16:	f001 f94f 	bl	8013db8 <pvPortMalloc>
 8012b1a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012b1c:	697b      	ldr	r3, [r7, #20]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d00e      	beq.n	8012b40 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012b22:	20a4      	movs	r0, #164	@ 0xa4
 8012b24:	f001 f948 	bl	8013db8 <pvPortMalloc>
 8012b28:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012b2a:	69fb      	ldr	r3, [r7, #28]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d003      	beq.n	8012b38 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012b30:	69fb      	ldr	r3, [r7, #28]
 8012b32:	697a      	ldr	r2, [r7, #20]
 8012b34:	631a      	str	r2, [r3, #48]	@ 0x30
 8012b36:	e005      	b.n	8012b44 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012b38:	6978      	ldr	r0, [r7, #20]
 8012b3a:	f001 fa0f 	bl	8013f5c <vPortFree>
 8012b3e:	e001      	b.n	8012b44 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012b40:	2300      	movs	r3, #0
 8012b42:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012b44:	69fb      	ldr	r3, [r7, #28]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d017      	beq.n	8012b7a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012b4a:	69fb      	ldr	r3, [r7, #28]
 8012b4c:	2200      	movs	r2, #0
 8012b4e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012b52:	88fa      	ldrh	r2, [r7, #6]
 8012b54:	2300      	movs	r3, #0
 8012b56:	9303      	str	r3, [sp, #12]
 8012b58:	69fb      	ldr	r3, [r7, #28]
 8012b5a:	9302      	str	r3, [sp, #8]
 8012b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b5e:	9301      	str	r3, [sp, #4]
 8012b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b62:	9300      	str	r3, [sp, #0]
 8012b64:	683b      	ldr	r3, [r7, #0]
 8012b66:	68b9      	ldr	r1, [r7, #8]
 8012b68:	68f8      	ldr	r0, [r7, #12]
 8012b6a:	f000 f80f 	bl	8012b8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012b6e:	69f8      	ldr	r0, [r7, #28]
 8012b70:	f000 f8b8 	bl	8012ce4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012b74:	2301      	movs	r3, #1
 8012b76:	61bb      	str	r3, [r7, #24]
 8012b78:	e002      	b.n	8012b80 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8012b7e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012b80:	69bb      	ldr	r3, [r7, #24]
	}
 8012b82:	4618      	mov	r0, r3
 8012b84:	3720      	adds	r7, #32
 8012b86:	46bd      	mov	sp, r7
 8012b88:	bd80      	pop	{r7, pc}
	...

08012b8c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012b8c:	b580      	push	{r7, lr}
 8012b8e:	b088      	sub	sp, #32
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	60f8      	str	r0, [r7, #12]
 8012b94:	60b9      	str	r1, [r7, #8]
 8012b96:	607a      	str	r2, [r7, #4]
 8012b98:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8012b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b9c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	009b      	lsls	r3, r3, #2
 8012ba2:	461a      	mov	r2, r3
 8012ba4:	21a5      	movs	r1, #165	@ 0xa5
 8012ba6:	f001 feab 	bl	8014900 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012bae:	6879      	ldr	r1, [r7, #4]
 8012bb0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8012bb4:	440b      	add	r3, r1
 8012bb6:	009b      	lsls	r3, r3, #2
 8012bb8:	4413      	add	r3, r2
 8012bba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012bbc:	69bb      	ldr	r3, [r7, #24]
 8012bbe:	f023 0307 	bic.w	r3, r3, #7
 8012bc2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012bc4:	69bb      	ldr	r3, [r7, #24]
 8012bc6:	f003 0307 	and.w	r3, r3, #7
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d00d      	beq.n	8012bea <prvInitialiseNewTask+0x5e>
	__asm volatile
 8012bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012bd2:	b672      	cpsid	i
 8012bd4:	f383 8811 	msr	BASEPRI, r3
 8012bd8:	f3bf 8f6f 	isb	sy
 8012bdc:	f3bf 8f4f 	dsb	sy
 8012be0:	b662      	cpsie	i
 8012be2:	617b      	str	r3, [r7, #20]
}
 8012be4:	bf00      	nop
 8012be6:	bf00      	nop
 8012be8:	e7fd      	b.n	8012be6 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012bea:	68bb      	ldr	r3, [r7, #8]
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d01f      	beq.n	8012c30 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012bf0:	2300      	movs	r3, #0
 8012bf2:	61fb      	str	r3, [r7, #28]
 8012bf4:	e012      	b.n	8012c1c <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012bf6:	68ba      	ldr	r2, [r7, #8]
 8012bf8:	69fb      	ldr	r3, [r7, #28]
 8012bfa:	4413      	add	r3, r2
 8012bfc:	7819      	ldrb	r1, [r3, #0]
 8012bfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012c00:	69fb      	ldr	r3, [r7, #28]
 8012c02:	4413      	add	r3, r2
 8012c04:	3334      	adds	r3, #52	@ 0x34
 8012c06:	460a      	mov	r2, r1
 8012c08:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012c0a:	68ba      	ldr	r2, [r7, #8]
 8012c0c:	69fb      	ldr	r3, [r7, #28]
 8012c0e:	4413      	add	r3, r2
 8012c10:	781b      	ldrb	r3, [r3, #0]
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d006      	beq.n	8012c24 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012c16:	69fb      	ldr	r3, [r7, #28]
 8012c18:	3301      	adds	r3, #1
 8012c1a:	61fb      	str	r3, [r7, #28]
 8012c1c:	69fb      	ldr	r3, [r7, #28]
 8012c1e:	2b0f      	cmp	r3, #15
 8012c20:	d9e9      	bls.n	8012bf6 <prvInitialiseNewTask+0x6a>
 8012c22:	e000      	b.n	8012c26 <prvInitialiseNewTask+0x9a>
			{
				break;
 8012c24:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c28:	2200      	movs	r2, #0
 8012c2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8012c2e:	e003      	b.n	8012c38 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c32:	2200      	movs	r2, #0
 8012c34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c3a:	2b06      	cmp	r3, #6
 8012c3c:	d901      	bls.n	8012c42 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012c3e:	2306      	movs	r3, #6
 8012c40:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012c46:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012c4c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8012c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c50:	2200      	movs	r2, #0
 8012c52:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c56:	3304      	adds	r3, #4
 8012c58:	4618      	mov	r0, r3
 8012c5a:	f7ff f8d3 	bl	8011e04 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c60:	3318      	adds	r3, #24
 8012c62:	4618      	mov	r0, r3
 8012c64:	f7ff f8ce 	bl	8011e04 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012c6c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c70:	f1c3 0207 	rsb	r2, r3, #7
 8012c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c76:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012c7c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8012c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c80:	2200      	movs	r2, #0
 8012c82:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c86:	2200      	movs	r2, #0
 8012c88:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c8e:	2200      	movs	r2, #0
 8012c90:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8012c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c96:	3350      	adds	r3, #80	@ 0x50
 8012c98:	224c      	movs	r2, #76	@ 0x4c
 8012c9a:	2100      	movs	r1, #0
 8012c9c:	4618      	mov	r0, r3
 8012c9e:	f001 fe2f 	bl	8014900 <memset>
 8012ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ca4:	4a0c      	ldr	r2, [pc, #48]	@ (8012cd8 <prvInitialiseNewTask+0x14c>)
 8012ca6:	655a      	str	r2, [r3, #84]	@ 0x54
 8012ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012caa:	4a0c      	ldr	r2, [pc, #48]	@ (8012cdc <prvInitialiseNewTask+0x150>)
 8012cac:	659a      	str	r2, [r3, #88]	@ 0x58
 8012cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cb0:	4a0b      	ldr	r2, [pc, #44]	@ (8012ce0 <prvInitialiseNewTask+0x154>)
 8012cb2:	65da      	str	r2, [r3, #92]	@ 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012cb4:	683a      	ldr	r2, [r7, #0]
 8012cb6:	68f9      	ldr	r1, [r7, #12]
 8012cb8:	69b8      	ldr	r0, [r7, #24]
 8012cba:	f000 fe41 	bl	8013940 <pxPortInitialiseStack>
 8012cbe:	4602      	mov	r2, r0
 8012cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cc2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d002      	beq.n	8012cd0 <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ccc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012cce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012cd0:	bf00      	nop
 8012cd2:	3720      	adds	r7, #32
 8012cd4:	46bd      	mov	sp, r7
 8012cd6:	bd80      	pop	{r7, pc}
 8012cd8:	200099e0 	.word	0x200099e0
 8012cdc:	20009a48 	.word	0x20009a48
 8012ce0:	20009ab0 	.word	0x20009ab0

08012ce4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012ce4:	b580      	push	{r7, lr}
 8012ce6:	b082      	sub	sp, #8
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012cec:	f000 ff36 	bl	8013b5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012cf0:	4b2a      	ldr	r3, [pc, #168]	@ (8012d9c <prvAddNewTaskToReadyList+0xb8>)
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	3301      	adds	r3, #1
 8012cf6:	4a29      	ldr	r2, [pc, #164]	@ (8012d9c <prvAddNewTaskToReadyList+0xb8>)
 8012cf8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012cfa:	4b29      	ldr	r3, [pc, #164]	@ (8012da0 <prvAddNewTaskToReadyList+0xbc>)
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d109      	bne.n	8012d16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012d02:	4a27      	ldr	r2, [pc, #156]	@ (8012da0 <prvAddNewTaskToReadyList+0xbc>)
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012d08:	4b24      	ldr	r3, [pc, #144]	@ (8012d9c <prvAddNewTaskToReadyList+0xb8>)
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	2b01      	cmp	r3, #1
 8012d0e:	d110      	bne.n	8012d32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012d10:	f000 fc40 	bl	8013594 <prvInitialiseTaskLists>
 8012d14:	e00d      	b.n	8012d32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012d16:	4b23      	ldr	r3, [pc, #140]	@ (8012da4 <prvAddNewTaskToReadyList+0xc0>)
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d109      	bne.n	8012d32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012d1e:	4b20      	ldr	r3, [pc, #128]	@ (8012da0 <prvAddNewTaskToReadyList+0xbc>)
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012d28:	429a      	cmp	r2, r3
 8012d2a:	d802      	bhi.n	8012d32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012d2c:	4a1c      	ldr	r2, [pc, #112]	@ (8012da0 <prvAddNewTaskToReadyList+0xbc>)
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012d32:	4b1d      	ldr	r3, [pc, #116]	@ (8012da8 <prvAddNewTaskToReadyList+0xc4>)
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	3301      	adds	r3, #1
 8012d38:	4a1b      	ldr	r2, [pc, #108]	@ (8012da8 <prvAddNewTaskToReadyList+0xc4>)
 8012d3a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012d40:	2201      	movs	r2, #1
 8012d42:	409a      	lsls	r2, r3
 8012d44:	4b19      	ldr	r3, [pc, #100]	@ (8012dac <prvAddNewTaskToReadyList+0xc8>)
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	4313      	orrs	r3, r2
 8012d4a:	4a18      	ldr	r2, [pc, #96]	@ (8012dac <prvAddNewTaskToReadyList+0xc8>)
 8012d4c:	6013      	str	r3, [r2, #0]
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012d52:	4613      	mov	r3, r2
 8012d54:	009b      	lsls	r3, r3, #2
 8012d56:	4413      	add	r3, r2
 8012d58:	009b      	lsls	r3, r3, #2
 8012d5a:	4a15      	ldr	r2, [pc, #84]	@ (8012db0 <prvAddNewTaskToReadyList+0xcc>)
 8012d5c:	441a      	add	r2, r3
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	3304      	adds	r3, #4
 8012d62:	4619      	mov	r1, r3
 8012d64:	4610      	mov	r0, r2
 8012d66:	f7ff f85a 	bl	8011e1e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012d6a:	f000 ff2d 	bl	8013bc8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8012da4 <prvAddNewTaskToReadyList+0xc0>)
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d00e      	beq.n	8012d94 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012d76:	4b0a      	ldr	r3, [pc, #40]	@ (8012da0 <prvAddNewTaskToReadyList+0xbc>)
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012d80:	429a      	cmp	r2, r3
 8012d82:	d207      	bcs.n	8012d94 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012d84:	4b0b      	ldr	r3, [pc, #44]	@ (8012db4 <prvAddNewTaskToReadyList+0xd0>)
 8012d86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012d8a:	601a      	str	r2, [r3, #0]
 8012d8c:	f3bf 8f4f 	dsb	sy
 8012d90:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012d94:	bf00      	nop
 8012d96:	3708      	adds	r7, #8
 8012d98:	46bd      	mov	sp, r7
 8012d9a:	bd80      	pop	{r7, pc}
 8012d9c:	200011c4 	.word	0x200011c4
 8012da0:	200010c4 	.word	0x200010c4
 8012da4:	200011d0 	.word	0x200011d0
 8012da8:	200011e0 	.word	0x200011e0
 8012dac:	200011cc 	.word	0x200011cc
 8012db0:	200010c8 	.word	0x200010c8
 8012db4:	e000ed04 	.word	0xe000ed04

08012db8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012db8:	b580      	push	{r7, lr}
 8012dba:	b084      	sub	sp, #16
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012dc0:	2300      	movs	r3, #0
 8012dc2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d01a      	beq.n	8012e00 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012dca:	4b15      	ldr	r3, [pc, #84]	@ (8012e20 <vTaskDelay+0x68>)
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d00d      	beq.n	8012dee <vTaskDelay+0x36>
	__asm volatile
 8012dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012dd6:	b672      	cpsid	i
 8012dd8:	f383 8811 	msr	BASEPRI, r3
 8012ddc:	f3bf 8f6f 	isb	sy
 8012de0:	f3bf 8f4f 	dsb	sy
 8012de4:	b662      	cpsie	i
 8012de6:	60bb      	str	r3, [r7, #8]
}
 8012de8:	bf00      	nop
 8012dea:	bf00      	nop
 8012dec:	e7fd      	b.n	8012dea <vTaskDelay+0x32>
			vTaskSuspendAll();
 8012dee:	f000 f889 	bl	8012f04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012df2:	2100      	movs	r1, #0
 8012df4:	6878      	ldr	r0, [r7, #4]
 8012df6:	f000 fd3d 	bl	8013874 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012dfa:	f000 f891 	bl	8012f20 <xTaskResumeAll>
 8012dfe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d107      	bne.n	8012e16 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8012e06:	4b07      	ldr	r3, [pc, #28]	@ (8012e24 <vTaskDelay+0x6c>)
 8012e08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012e0c:	601a      	str	r2, [r3, #0]
 8012e0e:	f3bf 8f4f 	dsb	sy
 8012e12:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012e16:	bf00      	nop
 8012e18:	3710      	adds	r7, #16
 8012e1a:	46bd      	mov	sp, r7
 8012e1c:	bd80      	pop	{r7, pc}
 8012e1e:	bf00      	nop
 8012e20:	200011ec 	.word	0x200011ec
 8012e24:	e000ed04 	.word	0xe000ed04

08012e28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012e28:	b580      	push	{r7, lr}
 8012e2a:	b08a      	sub	sp, #40	@ 0x28
 8012e2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012e2e:	2300      	movs	r3, #0
 8012e30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012e32:	2300      	movs	r3, #0
 8012e34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012e36:	463a      	mov	r2, r7
 8012e38:	1d39      	adds	r1, r7, #4
 8012e3a:	f107 0308 	add.w	r3, r7, #8
 8012e3e:	4618      	mov	r0, r3
 8012e40:	f7ed fb78 	bl	8000534 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012e44:	6839      	ldr	r1, [r7, #0]
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	68ba      	ldr	r2, [r7, #8]
 8012e4a:	9202      	str	r2, [sp, #8]
 8012e4c:	9301      	str	r3, [sp, #4]
 8012e4e:	2300      	movs	r3, #0
 8012e50:	9300      	str	r3, [sp, #0]
 8012e52:	2300      	movs	r3, #0
 8012e54:	460a      	mov	r2, r1
 8012e56:	4923      	ldr	r1, [pc, #140]	@ (8012ee4 <vTaskStartScheduler+0xbc>)
 8012e58:	4823      	ldr	r0, [pc, #140]	@ (8012ee8 <vTaskStartScheduler+0xc0>)
 8012e5a:	f7ff fdeb 	bl	8012a34 <xTaskCreateStatic>
 8012e5e:	4603      	mov	r3, r0
 8012e60:	4a22      	ldr	r2, [pc, #136]	@ (8012eec <vTaskStartScheduler+0xc4>)
 8012e62:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012e64:	4b21      	ldr	r3, [pc, #132]	@ (8012eec <vTaskStartScheduler+0xc4>)
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d002      	beq.n	8012e72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012e6c:	2301      	movs	r3, #1
 8012e6e:	617b      	str	r3, [r7, #20]
 8012e70:	e001      	b.n	8012e76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012e72:	2300      	movs	r3, #0
 8012e74:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012e76:	697b      	ldr	r3, [r7, #20]
 8012e78:	2b01      	cmp	r3, #1
 8012e7a:	d11d      	bne.n	8012eb8 <vTaskStartScheduler+0x90>
	__asm volatile
 8012e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e80:	b672      	cpsid	i
 8012e82:	f383 8811 	msr	BASEPRI, r3
 8012e86:	f3bf 8f6f 	isb	sy
 8012e8a:	f3bf 8f4f 	dsb	sy
 8012e8e:	b662      	cpsie	i
 8012e90:	613b      	str	r3, [r7, #16]
}
 8012e92:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012e94:	4b16      	ldr	r3, [pc, #88]	@ (8012ef0 <vTaskStartScheduler+0xc8>)
 8012e96:	681b      	ldr	r3, [r3, #0]
 8012e98:	3350      	adds	r3, #80	@ 0x50
 8012e9a:	4a16      	ldr	r2, [pc, #88]	@ (8012ef4 <vTaskStartScheduler+0xcc>)
 8012e9c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012e9e:	4b16      	ldr	r3, [pc, #88]	@ (8012ef8 <vTaskStartScheduler+0xd0>)
 8012ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8012ea4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012ea6:	4b15      	ldr	r3, [pc, #84]	@ (8012efc <vTaskStartScheduler+0xd4>)
 8012ea8:	2201      	movs	r2, #1
 8012eaa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012eac:	4b14      	ldr	r3, [pc, #80]	@ (8012f00 <vTaskStartScheduler+0xd8>)
 8012eae:	2200      	movs	r2, #0
 8012eb0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012eb2:	f000 fdd5 	bl	8013a60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012eb6:	e011      	b.n	8012edc <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012eb8:	697b      	ldr	r3, [r7, #20]
 8012eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ebe:	d10d      	bne.n	8012edc <vTaskStartScheduler+0xb4>
	__asm volatile
 8012ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ec4:	b672      	cpsid	i
 8012ec6:	f383 8811 	msr	BASEPRI, r3
 8012eca:	f3bf 8f6f 	isb	sy
 8012ece:	f3bf 8f4f 	dsb	sy
 8012ed2:	b662      	cpsie	i
 8012ed4:	60fb      	str	r3, [r7, #12]
}
 8012ed6:	bf00      	nop
 8012ed8:	bf00      	nop
 8012eda:	e7fd      	b.n	8012ed8 <vTaskStartScheduler+0xb0>
}
 8012edc:	bf00      	nop
 8012ede:	3718      	adds	r7, #24
 8012ee0:	46bd      	mov	sp, r7
 8012ee2:	bd80      	pop	{r7, pc}
 8012ee4:	08014b70 	.word	0x08014b70
 8012ee8:	08013561 	.word	0x08013561
 8012eec:	200011e8 	.word	0x200011e8
 8012ef0:	200010c4 	.word	0x200010c4
 8012ef4:	20000034 	.word	0x20000034
 8012ef8:	200011e4 	.word	0x200011e4
 8012efc:	200011d0 	.word	0x200011d0
 8012f00:	200011c8 	.word	0x200011c8

08012f04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012f04:	b480      	push	{r7}
 8012f06:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8012f08:	4b04      	ldr	r3, [pc, #16]	@ (8012f1c <vTaskSuspendAll+0x18>)
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	3301      	adds	r3, #1
 8012f0e:	4a03      	ldr	r2, [pc, #12]	@ (8012f1c <vTaskSuspendAll+0x18>)
 8012f10:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8012f12:	bf00      	nop
 8012f14:	46bd      	mov	sp, r7
 8012f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f1a:	4770      	bx	lr
 8012f1c:	200011ec 	.word	0x200011ec

08012f20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012f20:	b580      	push	{r7, lr}
 8012f22:	b084      	sub	sp, #16
 8012f24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012f26:	2300      	movs	r3, #0
 8012f28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012f2a:	2300      	movs	r3, #0
 8012f2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012f2e:	4b43      	ldr	r3, [pc, #268]	@ (801303c <xTaskResumeAll+0x11c>)
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d10d      	bne.n	8012f52 <xTaskResumeAll+0x32>
	__asm volatile
 8012f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f3a:	b672      	cpsid	i
 8012f3c:	f383 8811 	msr	BASEPRI, r3
 8012f40:	f3bf 8f6f 	isb	sy
 8012f44:	f3bf 8f4f 	dsb	sy
 8012f48:	b662      	cpsie	i
 8012f4a:	603b      	str	r3, [r7, #0]
}
 8012f4c:	bf00      	nop
 8012f4e:	bf00      	nop
 8012f50:	e7fd      	b.n	8012f4e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012f52:	f000 fe03 	bl	8013b5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012f56:	4b39      	ldr	r3, [pc, #228]	@ (801303c <xTaskResumeAll+0x11c>)
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	3b01      	subs	r3, #1
 8012f5c:	4a37      	ldr	r2, [pc, #220]	@ (801303c <xTaskResumeAll+0x11c>)
 8012f5e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012f60:	4b36      	ldr	r3, [pc, #216]	@ (801303c <xTaskResumeAll+0x11c>)
 8012f62:	681b      	ldr	r3, [r3, #0]
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d161      	bne.n	801302c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012f68:	4b35      	ldr	r3, [pc, #212]	@ (8013040 <xTaskResumeAll+0x120>)
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d05d      	beq.n	801302c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012f70:	e02e      	b.n	8012fd0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012f72:	4b34      	ldr	r3, [pc, #208]	@ (8013044 <xTaskResumeAll+0x124>)
 8012f74:	68db      	ldr	r3, [r3, #12]
 8012f76:	68db      	ldr	r3, [r3, #12]
 8012f78:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	3318      	adds	r3, #24
 8012f7e:	4618      	mov	r0, r3
 8012f80:	f7fe ffaa 	bl	8011ed8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	3304      	adds	r3, #4
 8012f88:	4618      	mov	r0, r3
 8012f8a:	f7fe ffa5 	bl	8011ed8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f92:	2201      	movs	r2, #1
 8012f94:	409a      	lsls	r2, r3
 8012f96:	4b2c      	ldr	r3, [pc, #176]	@ (8013048 <xTaskResumeAll+0x128>)
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	4313      	orrs	r3, r2
 8012f9c:	4a2a      	ldr	r2, [pc, #168]	@ (8013048 <xTaskResumeAll+0x128>)
 8012f9e:	6013      	str	r3, [r2, #0]
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012fa4:	4613      	mov	r3, r2
 8012fa6:	009b      	lsls	r3, r3, #2
 8012fa8:	4413      	add	r3, r2
 8012faa:	009b      	lsls	r3, r3, #2
 8012fac:	4a27      	ldr	r2, [pc, #156]	@ (801304c <xTaskResumeAll+0x12c>)
 8012fae:	441a      	add	r2, r3
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	3304      	adds	r3, #4
 8012fb4:	4619      	mov	r1, r3
 8012fb6:	4610      	mov	r0, r2
 8012fb8:	f7fe ff31 	bl	8011e1e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012fc0:	4b23      	ldr	r3, [pc, #140]	@ (8013050 <xTaskResumeAll+0x130>)
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012fc6:	429a      	cmp	r2, r3
 8012fc8:	d302      	bcc.n	8012fd0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8012fca:	4b22      	ldr	r3, [pc, #136]	@ (8013054 <xTaskResumeAll+0x134>)
 8012fcc:	2201      	movs	r2, #1
 8012fce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012fd0:	4b1c      	ldr	r3, [pc, #112]	@ (8013044 <xTaskResumeAll+0x124>)
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d1cc      	bne.n	8012f72 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d001      	beq.n	8012fe2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012fde:	f000 fb7f 	bl	80136e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8012fe2:	4b1d      	ldr	r3, [pc, #116]	@ (8013058 <xTaskResumeAll+0x138>)
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d010      	beq.n	8013010 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012fee:	f000 f859 	bl	80130a4 <xTaskIncrementTick>
 8012ff2:	4603      	mov	r3, r0
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d002      	beq.n	8012ffe <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8012ff8:	4b16      	ldr	r3, [pc, #88]	@ (8013054 <xTaskResumeAll+0x134>)
 8012ffa:	2201      	movs	r2, #1
 8012ffc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	3b01      	subs	r3, #1
 8013002:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	2b00      	cmp	r3, #0
 8013008:	d1f1      	bne.n	8012fee <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 801300a:	4b13      	ldr	r3, [pc, #76]	@ (8013058 <xTaskResumeAll+0x138>)
 801300c:	2200      	movs	r2, #0
 801300e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013010:	4b10      	ldr	r3, [pc, #64]	@ (8013054 <xTaskResumeAll+0x134>)
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	2b00      	cmp	r3, #0
 8013016:	d009      	beq.n	801302c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013018:	2301      	movs	r3, #1
 801301a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801301c:	4b0f      	ldr	r3, [pc, #60]	@ (801305c <xTaskResumeAll+0x13c>)
 801301e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013022:	601a      	str	r2, [r3, #0]
 8013024:	f3bf 8f4f 	dsb	sy
 8013028:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801302c:	f000 fdcc 	bl	8013bc8 <vPortExitCritical>

	return xAlreadyYielded;
 8013030:	68bb      	ldr	r3, [r7, #8]
}
 8013032:	4618      	mov	r0, r3
 8013034:	3710      	adds	r7, #16
 8013036:	46bd      	mov	sp, r7
 8013038:	bd80      	pop	{r7, pc}
 801303a:	bf00      	nop
 801303c:	200011ec 	.word	0x200011ec
 8013040:	200011c4 	.word	0x200011c4
 8013044:	20001184 	.word	0x20001184
 8013048:	200011cc 	.word	0x200011cc
 801304c:	200010c8 	.word	0x200010c8
 8013050:	200010c4 	.word	0x200010c4
 8013054:	200011d8 	.word	0x200011d8
 8013058:	200011d4 	.word	0x200011d4
 801305c:	e000ed04 	.word	0xe000ed04

08013060 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013060:	b480      	push	{r7}
 8013062:	b083      	sub	sp, #12
 8013064:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013066:	4b05      	ldr	r3, [pc, #20]	@ (801307c <xTaskGetTickCount+0x1c>)
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801306c:	687b      	ldr	r3, [r7, #4]
}
 801306e:	4618      	mov	r0, r3
 8013070:	370c      	adds	r7, #12
 8013072:	46bd      	mov	sp, r7
 8013074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013078:	4770      	bx	lr
 801307a:	bf00      	nop
 801307c:	200011c8 	.word	0x200011c8

08013080 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8013080:	b580      	push	{r7, lr}
 8013082:	b082      	sub	sp, #8
 8013084:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013086:	f000 fe51 	bl	8013d2c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801308a:	2300      	movs	r3, #0
 801308c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801308e:	4b04      	ldr	r3, [pc, #16]	@ (80130a0 <xTaskGetTickCountFromISR+0x20>)
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013094:	683b      	ldr	r3, [r7, #0]
}
 8013096:	4618      	mov	r0, r3
 8013098:	3708      	adds	r7, #8
 801309a:	46bd      	mov	sp, r7
 801309c:	bd80      	pop	{r7, pc}
 801309e:	bf00      	nop
 80130a0:	200011c8 	.word	0x200011c8

080130a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80130a4:	b580      	push	{r7, lr}
 80130a6:	b086      	sub	sp, #24
 80130a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80130aa:	2300      	movs	r3, #0
 80130ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80130ae:	4b50      	ldr	r3, [pc, #320]	@ (80131f0 <xTaskIncrementTick+0x14c>)
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	f040 808b 	bne.w	80131ce <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80130b8:	4b4e      	ldr	r3, [pc, #312]	@ (80131f4 <xTaskIncrementTick+0x150>)
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	3301      	adds	r3, #1
 80130be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80130c0:	4a4c      	ldr	r2, [pc, #304]	@ (80131f4 <xTaskIncrementTick+0x150>)
 80130c2:	693b      	ldr	r3, [r7, #16]
 80130c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80130c6:	693b      	ldr	r3, [r7, #16]
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d123      	bne.n	8013114 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80130cc:	4b4a      	ldr	r3, [pc, #296]	@ (80131f8 <xTaskIncrementTick+0x154>)
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	681b      	ldr	r3, [r3, #0]
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d00d      	beq.n	80130f2 <xTaskIncrementTick+0x4e>
	__asm volatile
 80130d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80130da:	b672      	cpsid	i
 80130dc:	f383 8811 	msr	BASEPRI, r3
 80130e0:	f3bf 8f6f 	isb	sy
 80130e4:	f3bf 8f4f 	dsb	sy
 80130e8:	b662      	cpsie	i
 80130ea:	603b      	str	r3, [r7, #0]
}
 80130ec:	bf00      	nop
 80130ee:	bf00      	nop
 80130f0:	e7fd      	b.n	80130ee <xTaskIncrementTick+0x4a>
 80130f2:	4b41      	ldr	r3, [pc, #260]	@ (80131f8 <xTaskIncrementTick+0x154>)
 80130f4:	681b      	ldr	r3, [r3, #0]
 80130f6:	60fb      	str	r3, [r7, #12]
 80130f8:	4b40      	ldr	r3, [pc, #256]	@ (80131fc <xTaskIncrementTick+0x158>)
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	4a3e      	ldr	r2, [pc, #248]	@ (80131f8 <xTaskIncrementTick+0x154>)
 80130fe:	6013      	str	r3, [r2, #0]
 8013100:	4a3e      	ldr	r2, [pc, #248]	@ (80131fc <xTaskIncrementTick+0x158>)
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	6013      	str	r3, [r2, #0]
 8013106:	4b3e      	ldr	r3, [pc, #248]	@ (8013200 <xTaskIncrementTick+0x15c>)
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	3301      	adds	r3, #1
 801310c:	4a3c      	ldr	r2, [pc, #240]	@ (8013200 <xTaskIncrementTick+0x15c>)
 801310e:	6013      	str	r3, [r2, #0]
 8013110:	f000 fae6 	bl	80136e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013114:	4b3b      	ldr	r3, [pc, #236]	@ (8013204 <xTaskIncrementTick+0x160>)
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	693a      	ldr	r2, [r7, #16]
 801311a:	429a      	cmp	r2, r3
 801311c:	d348      	bcc.n	80131b0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801311e:	4b36      	ldr	r3, [pc, #216]	@ (80131f8 <xTaskIncrementTick+0x154>)
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	2b00      	cmp	r3, #0
 8013126:	d104      	bne.n	8013132 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013128:	4b36      	ldr	r3, [pc, #216]	@ (8013204 <xTaskIncrementTick+0x160>)
 801312a:	f04f 32ff 	mov.w	r2, #4294967295
 801312e:	601a      	str	r2, [r3, #0]
					break;
 8013130:	e03e      	b.n	80131b0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013132:	4b31      	ldr	r3, [pc, #196]	@ (80131f8 <xTaskIncrementTick+0x154>)
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	68db      	ldr	r3, [r3, #12]
 8013138:	68db      	ldr	r3, [r3, #12]
 801313a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801313c:	68bb      	ldr	r3, [r7, #8]
 801313e:	685b      	ldr	r3, [r3, #4]
 8013140:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013142:	693a      	ldr	r2, [r7, #16]
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	429a      	cmp	r2, r3
 8013148:	d203      	bcs.n	8013152 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801314a:	4a2e      	ldr	r2, [pc, #184]	@ (8013204 <xTaskIncrementTick+0x160>)
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013150:	e02e      	b.n	80131b0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013152:	68bb      	ldr	r3, [r7, #8]
 8013154:	3304      	adds	r3, #4
 8013156:	4618      	mov	r0, r3
 8013158:	f7fe febe 	bl	8011ed8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801315c:	68bb      	ldr	r3, [r7, #8]
 801315e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013160:	2b00      	cmp	r3, #0
 8013162:	d004      	beq.n	801316e <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013164:	68bb      	ldr	r3, [r7, #8]
 8013166:	3318      	adds	r3, #24
 8013168:	4618      	mov	r0, r3
 801316a:	f7fe feb5 	bl	8011ed8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801316e:	68bb      	ldr	r3, [r7, #8]
 8013170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013172:	2201      	movs	r2, #1
 8013174:	409a      	lsls	r2, r3
 8013176:	4b24      	ldr	r3, [pc, #144]	@ (8013208 <xTaskIncrementTick+0x164>)
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	4313      	orrs	r3, r2
 801317c:	4a22      	ldr	r2, [pc, #136]	@ (8013208 <xTaskIncrementTick+0x164>)
 801317e:	6013      	str	r3, [r2, #0]
 8013180:	68bb      	ldr	r3, [r7, #8]
 8013182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013184:	4613      	mov	r3, r2
 8013186:	009b      	lsls	r3, r3, #2
 8013188:	4413      	add	r3, r2
 801318a:	009b      	lsls	r3, r3, #2
 801318c:	4a1f      	ldr	r2, [pc, #124]	@ (801320c <xTaskIncrementTick+0x168>)
 801318e:	441a      	add	r2, r3
 8013190:	68bb      	ldr	r3, [r7, #8]
 8013192:	3304      	adds	r3, #4
 8013194:	4619      	mov	r1, r3
 8013196:	4610      	mov	r0, r2
 8013198:	f7fe fe41 	bl	8011e1e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801319c:	68bb      	ldr	r3, [r7, #8]
 801319e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80131a0:	4b1b      	ldr	r3, [pc, #108]	@ (8013210 <xTaskIncrementTick+0x16c>)
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131a6:	429a      	cmp	r2, r3
 80131a8:	d3b9      	bcc.n	801311e <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80131aa:	2301      	movs	r3, #1
 80131ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80131ae:	e7b6      	b.n	801311e <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80131b0:	4b17      	ldr	r3, [pc, #92]	@ (8013210 <xTaskIncrementTick+0x16c>)
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80131b6:	4915      	ldr	r1, [pc, #84]	@ (801320c <xTaskIncrementTick+0x168>)
 80131b8:	4613      	mov	r3, r2
 80131ba:	009b      	lsls	r3, r3, #2
 80131bc:	4413      	add	r3, r2
 80131be:	009b      	lsls	r3, r3, #2
 80131c0:	440b      	add	r3, r1
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	2b01      	cmp	r3, #1
 80131c6:	d907      	bls.n	80131d8 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80131c8:	2301      	movs	r3, #1
 80131ca:	617b      	str	r3, [r7, #20]
 80131cc:	e004      	b.n	80131d8 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80131ce:	4b11      	ldr	r3, [pc, #68]	@ (8013214 <xTaskIncrementTick+0x170>)
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	3301      	adds	r3, #1
 80131d4:	4a0f      	ldr	r2, [pc, #60]	@ (8013214 <xTaskIncrementTick+0x170>)
 80131d6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80131d8:	4b0f      	ldr	r3, [pc, #60]	@ (8013218 <xTaskIncrementTick+0x174>)
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d001      	beq.n	80131e4 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80131e0:	2301      	movs	r3, #1
 80131e2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80131e4:	697b      	ldr	r3, [r7, #20]
}
 80131e6:	4618      	mov	r0, r3
 80131e8:	3718      	adds	r7, #24
 80131ea:	46bd      	mov	sp, r7
 80131ec:	bd80      	pop	{r7, pc}
 80131ee:	bf00      	nop
 80131f0:	200011ec 	.word	0x200011ec
 80131f4:	200011c8 	.word	0x200011c8
 80131f8:	2000117c 	.word	0x2000117c
 80131fc:	20001180 	.word	0x20001180
 8013200:	200011dc 	.word	0x200011dc
 8013204:	200011e4 	.word	0x200011e4
 8013208:	200011cc 	.word	0x200011cc
 801320c:	200010c8 	.word	0x200010c8
 8013210:	200010c4 	.word	0x200010c4
 8013214:	200011d4 	.word	0x200011d4
 8013218:	200011d8 	.word	0x200011d8

0801321c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801321c:	b580      	push	{r7, lr}
 801321e:	b088      	sub	sp, #32
 8013220:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013222:	4b3d      	ldr	r3, [pc, #244]	@ (8013318 <vTaskSwitchContext+0xfc>)
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	2b00      	cmp	r3, #0
 8013228:	d003      	beq.n	8013232 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801322a:	4b3c      	ldr	r3, [pc, #240]	@ (801331c <vTaskSwitchContext+0x100>)
 801322c:	2201      	movs	r2, #1
 801322e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013230:	e06e      	b.n	8013310 <vTaskSwitchContext+0xf4>
		xYieldPending = pdFALSE;
 8013232:	4b3a      	ldr	r3, [pc, #232]	@ (801331c <vTaskSwitchContext+0x100>)
 8013234:	2200      	movs	r2, #0
 8013236:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8013238:	4b39      	ldr	r3, [pc, #228]	@ (8013320 <vTaskSwitchContext+0x104>)
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801323e:	61fb      	str	r3, [r7, #28]
 8013240:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8013244:	61bb      	str	r3, [r7, #24]
 8013246:	69fb      	ldr	r3, [r7, #28]
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	69ba      	ldr	r2, [r7, #24]
 801324c:	429a      	cmp	r2, r3
 801324e:	d111      	bne.n	8013274 <vTaskSwitchContext+0x58>
 8013250:	69fb      	ldr	r3, [r7, #28]
 8013252:	3304      	adds	r3, #4
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	69ba      	ldr	r2, [r7, #24]
 8013258:	429a      	cmp	r2, r3
 801325a:	d10b      	bne.n	8013274 <vTaskSwitchContext+0x58>
 801325c:	69fb      	ldr	r3, [r7, #28]
 801325e:	3308      	adds	r3, #8
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	69ba      	ldr	r2, [r7, #24]
 8013264:	429a      	cmp	r2, r3
 8013266:	d105      	bne.n	8013274 <vTaskSwitchContext+0x58>
 8013268:	69fb      	ldr	r3, [r7, #28]
 801326a:	330c      	adds	r3, #12
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	69ba      	ldr	r2, [r7, #24]
 8013270:	429a      	cmp	r2, r3
 8013272:	d008      	beq.n	8013286 <vTaskSwitchContext+0x6a>
 8013274:	4b2a      	ldr	r3, [pc, #168]	@ (8013320 <vTaskSwitchContext+0x104>)
 8013276:	681a      	ldr	r2, [r3, #0]
 8013278:	4b29      	ldr	r3, [pc, #164]	@ (8013320 <vTaskSwitchContext+0x104>)
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	3334      	adds	r3, #52	@ 0x34
 801327e:	4619      	mov	r1, r3
 8013280:	4610      	mov	r0, r2
 8013282:	f7ed f944 	bl	800050e <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013286:	4b27      	ldr	r3, [pc, #156]	@ (8013324 <vTaskSwitchContext+0x108>)
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	fab3 f383 	clz	r3, r3
 8013292:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8013294:	7afb      	ldrb	r3, [r7, #11]
 8013296:	f1c3 031f 	rsb	r3, r3, #31
 801329a:	617b      	str	r3, [r7, #20]
 801329c:	4922      	ldr	r1, [pc, #136]	@ (8013328 <vTaskSwitchContext+0x10c>)
 801329e:	697a      	ldr	r2, [r7, #20]
 80132a0:	4613      	mov	r3, r2
 80132a2:	009b      	lsls	r3, r3, #2
 80132a4:	4413      	add	r3, r2
 80132a6:	009b      	lsls	r3, r3, #2
 80132a8:	440b      	add	r3, r1
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d10d      	bne.n	80132cc <vTaskSwitchContext+0xb0>
	__asm volatile
 80132b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80132b4:	b672      	cpsid	i
 80132b6:	f383 8811 	msr	BASEPRI, r3
 80132ba:	f3bf 8f6f 	isb	sy
 80132be:	f3bf 8f4f 	dsb	sy
 80132c2:	b662      	cpsie	i
 80132c4:	607b      	str	r3, [r7, #4]
}
 80132c6:	bf00      	nop
 80132c8:	bf00      	nop
 80132ca:	e7fd      	b.n	80132c8 <vTaskSwitchContext+0xac>
 80132cc:	697a      	ldr	r2, [r7, #20]
 80132ce:	4613      	mov	r3, r2
 80132d0:	009b      	lsls	r3, r3, #2
 80132d2:	4413      	add	r3, r2
 80132d4:	009b      	lsls	r3, r3, #2
 80132d6:	4a14      	ldr	r2, [pc, #80]	@ (8013328 <vTaskSwitchContext+0x10c>)
 80132d8:	4413      	add	r3, r2
 80132da:	613b      	str	r3, [r7, #16]
 80132dc:	693b      	ldr	r3, [r7, #16]
 80132de:	685b      	ldr	r3, [r3, #4]
 80132e0:	685a      	ldr	r2, [r3, #4]
 80132e2:	693b      	ldr	r3, [r7, #16]
 80132e4:	605a      	str	r2, [r3, #4]
 80132e6:	693b      	ldr	r3, [r7, #16]
 80132e8:	685a      	ldr	r2, [r3, #4]
 80132ea:	693b      	ldr	r3, [r7, #16]
 80132ec:	3308      	adds	r3, #8
 80132ee:	429a      	cmp	r2, r3
 80132f0:	d104      	bne.n	80132fc <vTaskSwitchContext+0xe0>
 80132f2:	693b      	ldr	r3, [r7, #16]
 80132f4:	685b      	ldr	r3, [r3, #4]
 80132f6:	685a      	ldr	r2, [r3, #4]
 80132f8:	693b      	ldr	r3, [r7, #16]
 80132fa:	605a      	str	r2, [r3, #4]
 80132fc:	693b      	ldr	r3, [r7, #16]
 80132fe:	685b      	ldr	r3, [r3, #4]
 8013300:	68db      	ldr	r3, [r3, #12]
 8013302:	4a07      	ldr	r2, [pc, #28]	@ (8013320 <vTaskSwitchContext+0x104>)
 8013304:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013306:	4b06      	ldr	r3, [pc, #24]	@ (8013320 <vTaskSwitchContext+0x104>)
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	3350      	adds	r3, #80	@ 0x50
 801330c:	4a07      	ldr	r2, [pc, #28]	@ (801332c <vTaskSwitchContext+0x110>)
 801330e:	6013      	str	r3, [r2, #0]
}
 8013310:	bf00      	nop
 8013312:	3720      	adds	r7, #32
 8013314:	46bd      	mov	sp, r7
 8013316:	bd80      	pop	{r7, pc}
 8013318:	200011ec 	.word	0x200011ec
 801331c:	200011d8 	.word	0x200011d8
 8013320:	200010c4 	.word	0x200010c4
 8013324:	200011cc 	.word	0x200011cc
 8013328:	200010c8 	.word	0x200010c8
 801332c:	20000034 	.word	0x20000034

08013330 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013330:	b580      	push	{r7, lr}
 8013332:	b084      	sub	sp, #16
 8013334:	af00      	add	r7, sp, #0
 8013336:	6078      	str	r0, [r7, #4]
 8013338:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	2b00      	cmp	r3, #0
 801333e:	d10d      	bne.n	801335c <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8013340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013344:	b672      	cpsid	i
 8013346:	f383 8811 	msr	BASEPRI, r3
 801334a:	f3bf 8f6f 	isb	sy
 801334e:	f3bf 8f4f 	dsb	sy
 8013352:	b662      	cpsie	i
 8013354:	60fb      	str	r3, [r7, #12]
}
 8013356:	bf00      	nop
 8013358:	bf00      	nop
 801335a:	e7fd      	b.n	8013358 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801335c:	4b07      	ldr	r3, [pc, #28]	@ (801337c <vTaskPlaceOnEventList+0x4c>)
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	3318      	adds	r3, #24
 8013362:	4619      	mov	r1, r3
 8013364:	6878      	ldr	r0, [r7, #4]
 8013366:	f7fe fd7e 	bl	8011e66 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801336a:	2101      	movs	r1, #1
 801336c:	6838      	ldr	r0, [r7, #0]
 801336e:	f000 fa81 	bl	8013874 <prvAddCurrentTaskToDelayedList>
}
 8013372:	bf00      	nop
 8013374:	3710      	adds	r7, #16
 8013376:	46bd      	mov	sp, r7
 8013378:	bd80      	pop	{r7, pc}
 801337a:	bf00      	nop
 801337c:	200010c4 	.word	0x200010c4

08013380 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013380:	b580      	push	{r7, lr}
 8013382:	b086      	sub	sp, #24
 8013384:	af00      	add	r7, sp, #0
 8013386:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	68db      	ldr	r3, [r3, #12]
 801338c:	68db      	ldr	r3, [r3, #12]
 801338e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013390:	693b      	ldr	r3, [r7, #16]
 8013392:	2b00      	cmp	r3, #0
 8013394:	d10d      	bne.n	80133b2 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8013396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801339a:	b672      	cpsid	i
 801339c:	f383 8811 	msr	BASEPRI, r3
 80133a0:	f3bf 8f6f 	isb	sy
 80133a4:	f3bf 8f4f 	dsb	sy
 80133a8:	b662      	cpsie	i
 80133aa:	60fb      	str	r3, [r7, #12]
}
 80133ac:	bf00      	nop
 80133ae:	bf00      	nop
 80133b0:	e7fd      	b.n	80133ae <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80133b2:	693b      	ldr	r3, [r7, #16]
 80133b4:	3318      	adds	r3, #24
 80133b6:	4618      	mov	r0, r3
 80133b8:	f7fe fd8e 	bl	8011ed8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80133bc:	4b1d      	ldr	r3, [pc, #116]	@ (8013434 <xTaskRemoveFromEventList+0xb4>)
 80133be:	681b      	ldr	r3, [r3, #0]
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d11c      	bne.n	80133fe <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80133c4:	693b      	ldr	r3, [r7, #16]
 80133c6:	3304      	adds	r3, #4
 80133c8:	4618      	mov	r0, r3
 80133ca:	f7fe fd85 	bl	8011ed8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80133ce:	693b      	ldr	r3, [r7, #16]
 80133d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80133d2:	2201      	movs	r2, #1
 80133d4:	409a      	lsls	r2, r3
 80133d6:	4b18      	ldr	r3, [pc, #96]	@ (8013438 <xTaskRemoveFromEventList+0xb8>)
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	4313      	orrs	r3, r2
 80133dc:	4a16      	ldr	r2, [pc, #88]	@ (8013438 <xTaskRemoveFromEventList+0xb8>)
 80133de:	6013      	str	r3, [r2, #0]
 80133e0:	693b      	ldr	r3, [r7, #16]
 80133e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80133e4:	4613      	mov	r3, r2
 80133e6:	009b      	lsls	r3, r3, #2
 80133e8:	4413      	add	r3, r2
 80133ea:	009b      	lsls	r3, r3, #2
 80133ec:	4a13      	ldr	r2, [pc, #76]	@ (801343c <xTaskRemoveFromEventList+0xbc>)
 80133ee:	441a      	add	r2, r3
 80133f0:	693b      	ldr	r3, [r7, #16]
 80133f2:	3304      	adds	r3, #4
 80133f4:	4619      	mov	r1, r3
 80133f6:	4610      	mov	r0, r2
 80133f8:	f7fe fd11 	bl	8011e1e <vListInsertEnd>
 80133fc:	e005      	b.n	801340a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80133fe:	693b      	ldr	r3, [r7, #16]
 8013400:	3318      	adds	r3, #24
 8013402:	4619      	mov	r1, r3
 8013404:	480e      	ldr	r0, [pc, #56]	@ (8013440 <xTaskRemoveFromEventList+0xc0>)
 8013406:	f7fe fd0a 	bl	8011e1e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801340a:	693b      	ldr	r3, [r7, #16]
 801340c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801340e:	4b0d      	ldr	r3, [pc, #52]	@ (8013444 <xTaskRemoveFromEventList+0xc4>)
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013414:	429a      	cmp	r2, r3
 8013416:	d905      	bls.n	8013424 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013418:	2301      	movs	r3, #1
 801341a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801341c:	4b0a      	ldr	r3, [pc, #40]	@ (8013448 <xTaskRemoveFromEventList+0xc8>)
 801341e:	2201      	movs	r2, #1
 8013420:	601a      	str	r2, [r3, #0]
 8013422:	e001      	b.n	8013428 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8013424:	2300      	movs	r3, #0
 8013426:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013428:	697b      	ldr	r3, [r7, #20]
}
 801342a:	4618      	mov	r0, r3
 801342c:	3718      	adds	r7, #24
 801342e:	46bd      	mov	sp, r7
 8013430:	bd80      	pop	{r7, pc}
 8013432:	bf00      	nop
 8013434:	200011ec 	.word	0x200011ec
 8013438:	200011cc 	.word	0x200011cc
 801343c:	200010c8 	.word	0x200010c8
 8013440:	20001184 	.word	0x20001184
 8013444:	200010c4 	.word	0x200010c4
 8013448:	200011d8 	.word	0x200011d8

0801344c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801344c:	b480      	push	{r7}
 801344e:	b083      	sub	sp, #12
 8013450:	af00      	add	r7, sp, #0
 8013452:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013454:	4b06      	ldr	r3, [pc, #24]	@ (8013470 <vTaskInternalSetTimeOutState+0x24>)
 8013456:	681a      	ldr	r2, [r3, #0]
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801345c:	4b05      	ldr	r3, [pc, #20]	@ (8013474 <vTaskInternalSetTimeOutState+0x28>)
 801345e:	681a      	ldr	r2, [r3, #0]
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	605a      	str	r2, [r3, #4]
}
 8013464:	bf00      	nop
 8013466:	370c      	adds	r7, #12
 8013468:	46bd      	mov	sp, r7
 801346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801346e:	4770      	bx	lr
 8013470:	200011dc 	.word	0x200011dc
 8013474:	200011c8 	.word	0x200011c8

08013478 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013478:	b580      	push	{r7, lr}
 801347a:	b088      	sub	sp, #32
 801347c:	af00      	add	r7, sp, #0
 801347e:	6078      	str	r0, [r7, #4]
 8013480:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	2b00      	cmp	r3, #0
 8013486:	d10d      	bne.n	80134a4 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8013488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801348c:	b672      	cpsid	i
 801348e:	f383 8811 	msr	BASEPRI, r3
 8013492:	f3bf 8f6f 	isb	sy
 8013496:	f3bf 8f4f 	dsb	sy
 801349a:	b662      	cpsie	i
 801349c:	613b      	str	r3, [r7, #16]
}
 801349e:	bf00      	nop
 80134a0:	bf00      	nop
 80134a2:	e7fd      	b.n	80134a0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80134a4:	683b      	ldr	r3, [r7, #0]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d10d      	bne.n	80134c6 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80134aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134ae:	b672      	cpsid	i
 80134b0:	f383 8811 	msr	BASEPRI, r3
 80134b4:	f3bf 8f6f 	isb	sy
 80134b8:	f3bf 8f4f 	dsb	sy
 80134bc:	b662      	cpsie	i
 80134be:	60fb      	str	r3, [r7, #12]
}
 80134c0:	bf00      	nop
 80134c2:	bf00      	nop
 80134c4:	e7fd      	b.n	80134c2 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80134c6:	f000 fb49 	bl	8013b5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80134ca:	4b1d      	ldr	r3, [pc, #116]	@ (8013540 <xTaskCheckForTimeOut+0xc8>)
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	685b      	ldr	r3, [r3, #4]
 80134d4:	69ba      	ldr	r2, [r7, #24]
 80134d6:	1ad3      	subs	r3, r2, r3
 80134d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80134da:	683b      	ldr	r3, [r7, #0]
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134e2:	d102      	bne.n	80134ea <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80134e4:	2300      	movs	r3, #0
 80134e6:	61fb      	str	r3, [r7, #28]
 80134e8:	e023      	b.n	8013532 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	681a      	ldr	r2, [r3, #0]
 80134ee:	4b15      	ldr	r3, [pc, #84]	@ (8013544 <xTaskCheckForTimeOut+0xcc>)
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	429a      	cmp	r2, r3
 80134f4:	d007      	beq.n	8013506 <xTaskCheckForTimeOut+0x8e>
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	685b      	ldr	r3, [r3, #4]
 80134fa:	69ba      	ldr	r2, [r7, #24]
 80134fc:	429a      	cmp	r2, r3
 80134fe:	d302      	bcc.n	8013506 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013500:	2301      	movs	r3, #1
 8013502:	61fb      	str	r3, [r7, #28]
 8013504:	e015      	b.n	8013532 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013506:	683b      	ldr	r3, [r7, #0]
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	697a      	ldr	r2, [r7, #20]
 801350c:	429a      	cmp	r2, r3
 801350e:	d20b      	bcs.n	8013528 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013510:	683b      	ldr	r3, [r7, #0]
 8013512:	681a      	ldr	r2, [r3, #0]
 8013514:	697b      	ldr	r3, [r7, #20]
 8013516:	1ad2      	subs	r2, r2, r3
 8013518:	683b      	ldr	r3, [r7, #0]
 801351a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801351c:	6878      	ldr	r0, [r7, #4]
 801351e:	f7ff ff95 	bl	801344c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013522:	2300      	movs	r3, #0
 8013524:	61fb      	str	r3, [r7, #28]
 8013526:	e004      	b.n	8013532 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8013528:	683b      	ldr	r3, [r7, #0]
 801352a:	2200      	movs	r2, #0
 801352c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801352e:	2301      	movs	r3, #1
 8013530:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013532:	f000 fb49 	bl	8013bc8 <vPortExitCritical>

	return xReturn;
 8013536:	69fb      	ldr	r3, [r7, #28]
}
 8013538:	4618      	mov	r0, r3
 801353a:	3720      	adds	r7, #32
 801353c:	46bd      	mov	sp, r7
 801353e:	bd80      	pop	{r7, pc}
 8013540:	200011c8 	.word	0x200011c8
 8013544:	200011dc 	.word	0x200011dc

08013548 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013548:	b480      	push	{r7}
 801354a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801354c:	4b03      	ldr	r3, [pc, #12]	@ (801355c <vTaskMissedYield+0x14>)
 801354e:	2201      	movs	r2, #1
 8013550:	601a      	str	r2, [r3, #0]
}
 8013552:	bf00      	nop
 8013554:	46bd      	mov	sp, r7
 8013556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801355a:	4770      	bx	lr
 801355c:	200011d8 	.word	0x200011d8

08013560 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013560:	b580      	push	{r7, lr}
 8013562:	b082      	sub	sp, #8
 8013564:	af00      	add	r7, sp, #0
 8013566:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013568:	f000 f854 	bl	8013614 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801356c:	4b07      	ldr	r3, [pc, #28]	@ (801358c <prvIdleTask+0x2c>)
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	2b01      	cmp	r3, #1
 8013572:	d907      	bls.n	8013584 <prvIdleTask+0x24>
			{
				taskYIELD();
 8013574:	4b06      	ldr	r3, [pc, #24]	@ (8013590 <prvIdleTask+0x30>)
 8013576:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801357a:	601a      	str	r2, [r3, #0]
 801357c:	f3bf 8f4f 	dsb	sy
 8013580:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8013584:	f7ec ffbc 	bl	8000500 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8013588:	e7ee      	b.n	8013568 <prvIdleTask+0x8>
 801358a:	bf00      	nop
 801358c:	200010c8 	.word	0x200010c8
 8013590:	e000ed04 	.word	0xe000ed04

08013594 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013594:	b580      	push	{r7, lr}
 8013596:	b082      	sub	sp, #8
 8013598:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801359a:	2300      	movs	r3, #0
 801359c:	607b      	str	r3, [r7, #4]
 801359e:	e00c      	b.n	80135ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80135a0:	687a      	ldr	r2, [r7, #4]
 80135a2:	4613      	mov	r3, r2
 80135a4:	009b      	lsls	r3, r3, #2
 80135a6:	4413      	add	r3, r2
 80135a8:	009b      	lsls	r3, r3, #2
 80135aa:	4a12      	ldr	r2, [pc, #72]	@ (80135f4 <prvInitialiseTaskLists+0x60>)
 80135ac:	4413      	add	r3, r2
 80135ae:	4618      	mov	r0, r3
 80135b0:	f7fe fc08 	bl	8011dc4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	3301      	adds	r3, #1
 80135b8:	607b      	str	r3, [r7, #4]
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	2b06      	cmp	r3, #6
 80135be:	d9ef      	bls.n	80135a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80135c0:	480d      	ldr	r0, [pc, #52]	@ (80135f8 <prvInitialiseTaskLists+0x64>)
 80135c2:	f7fe fbff 	bl	8011dc4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80135c6:	480d      	ldr	r0, [pc, #52]	@ (80135fc <prvInitialiseTaskLists+0x68>)
 80135c8:	f7fe fbfc 	bl	8011dc4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80135cc:	480c      	ldr	r0, [pc, #48]	@ (8013600 <prvInitialiseTaskLists+0x6c>)
 80135ce:	f7fe fbf9 	bl	8011dc4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80135d2:	480c      	ldr	r0, [pc, #48]	@ (8013604 <prvInitialiseTaskLists+0x70>)
 80135d4:	f7fe fbf6 	bl	8011dc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80135d8:	480b      	ldr	r0, [pc, #44]	@ (8013608 <prvInitialiseTaskLists+0x74>)
 80135da:	f7fe fbf3 	bl	8011dc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80135de:	4b0b      	ldr	r3, [pc, #44]	@ (801360c <prvInitialiseTaskLists+0x78>)
 80135e0:	4a05      	ldr	r2, [pc, #20]	@ (80135f8 <prvInitialiseTaskLists+0x64>)
 80135e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80135e4:	4b0a      	ldr	r3, [pc, #40]	@ (8013610 <prvInitialiseTaskLists+0x7c>)
 80135e6:	4a05      	ldr	r2, [pc, #20]	@ (80135fc <prvInitialiseTaskLists+0x68>)
 80135e8:	601a      	str	r2, [r3, #0]
}
 80135ea:	bf00      	nop
 80135ec:	3708      	adds	r7, #8
 80135ee:	46bd      	mov	sp, r7
 80135f0:	bd80      	pop	{r7, pc}
 80135f2:	bf00      	nop
 80135f4:	200010c8 	.word	0x200010c8
 80135f8:	20001154 	.word	0x20001154
 80135fc:	20001168 	.word	0x20001168
 8013600:	20001184 	.word	0x20001184
 8013604:	20001198 	.word	0x20001198
 8013608:	200011b0 	.word	0x200011b0
 801360c:	2000117c 	.word	0x2000117c
 8013610:	20001180 	.word	0x20001180

08013614 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013614:	b580      	push	{r7, lr}
 8013616:	b082      	sub	sp, #8
 8013618:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801361a:	e019      	b.n	8013650 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801361c:	f000 fa9e 	bl	8013b5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013620:	4b10      	ldr	r3, [pc, #64]	@ (8013664 <prvCheckTasksWaitingTermination+0x50>)
 8013622:	68db      	ldr	r3, [r3, #12]
 8013624:	68db      	ldr	r3, [r3, #12]
 8013626:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	3304      	adds	r3, #4
 801362c:	4618      	mov	r0, r3
 801362e:	f7fe fc53 	bl	8011ed8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013632:	4b0d      	ldr	r3, [pc, #52]	@ (8013668 <prvCheckTasksWaitingTermination+0x54>)
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	3b01      	subs	r3, #1
 8013638:	4a0b      	ldr	r2, [pc, #44]	@ (8013668 <prvCheckTasksWaitingTermination+0x54>)
 801363a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801363c:	4b0b      	ldr	r3, [pc, #44]	@ (801366c <prvCheckTasksWaitingTermination+0x58>)
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	3b01      	subs	r3, #1
 8013642:	4a0a      	ldr	r2, [pc, #40]	@ (801366c <prvCheckTasksWaitingTermination+0x58>)
 8013644:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013646:	f000 fabf 	bl	8013bc8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801364a:	6878      	ldr	r0, [r7, #4]
 801364c:	f000 f810 	bl	8013670 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013650:	4b06      	ldr	r3, [pc, #24]	@ (801366c <prvCheckTasksWaitingTermination+0x58>)
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	2b00      	cmp	r3, #0
 8013656:	d1e1      	bne.n	801361c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013658:	bf00      	nop
 801365a:	bf00      	nop
 801365c:	3708      	adds	r7, #8
 801365e:	46bd      	mov	sp, r7
 8013660:	bd80      	pop	{r7, pc}
 8013662:	bf00      	nop
 8013664:	20001198 	.word	0x20001198
 8013668:	200011c4 	.word	0x200011c4
 801366c:	200011ac 	.word	0x200011ac

08013670 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013670:	b580      	push	{r7, lr}
 8013672:	b084      	sub	sp, #16
 8013674:	af00      	add	r7, sp, #0
 8013676:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	3350      	adds	r3, #80	@ 0x50
 801367c:	4618      	mov	r0, r3
 801367e:	f001 f947 	bl	8014910 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8013688:	2b00      	cmp	r3, #0
 801368a:	d108      	bne.n	801369e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013690:	4618      	mov	r0, r3
 8013692:	f000 fc63 	bl	8013f5c <vPortFree>
				vPortFree( pxTCB );
 8013696:	6878      	ldr	r0, [r7, #4]
 8013698:	f000 fc60 	bl	8013f5c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801369c:	e01b      	b.n	80136d6 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80136a4:	2b01      	cmp	r3, #1
 80136a6:	d103      	bne.n	80136b0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80136a8:	6878      	ldr	r0, [r7, #4]
 80136aa:	f000 fc57 	bl	8013f5c <vPortFree>
	}
 80136ae:	e012      	b.n	80136d6 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80136b6:	2b02      	cmp	r3, #2
 80136b8:	d00d      	beq.n	80136d6 <prvDeleteTCB+0x66>
	__asm volatile
 80136ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136be:	b672      	cpsid	i
 80136c0:	f383 8811 	msr	BASEPRI, r3
 80136c4:	f3bf 8f6f 	isb	sy
 80136c8:	f3bf 8f4f 	dsb	sy
 80136cc:	b662      	cpsie	i
 80136ce:	60fb      	str	r3, [r7, #12]
}
 80136d0:	bf00      	nop
 80136d2:	bf00      	nop
 80136d4:	e7fd      	b.n	80136d2 <prvDeleteTCB+0x62>
	}
 80136d6:	bf00      	nop
 80136d8:	3710      	adds	r7, #16
 80136da:	46bd      	mov	sp, r7
 80136dc:	bd80      	pop	{r7, pc}
	...

080136e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80136e0:	b480      	push	{r7}
 80136e2:	b083      	sub	sp, #12
 80136e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80136e6:	4b0c      	ldr	r3, [pc, #48]	@ (8013718 <prvResetNextTaskUnblockTime+0x38>)
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d104      	bne.n	80136fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80136f0:	4b0a      	ldr	r3, [pc, #40]	@ (801371c <prvResetNextTaskUnblockTime+0x3c>)
 80136f2:	f04f 32ff 	mov.w	r2, #4294967295
 80136f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80136f8:	e008      	b.n	801370c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80136fa:	4b07      	ldr	r3, [pc, #28]	@ (8013718 <prvResetNextTaskUnblockTime+0x38>)
 80136fc:	681b      	ldr	r3, [r3, #0]
 80136fe:	68db      	ldr	r3, [r3, #12]
 8013700:	68db      	ldr	r3, [r3, #12]
 8013702:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	685b      	ldr	r3, [r3, #4]
 8013708:	4a04      	ldr	r2, [pc, #16]	@ (801371c <prvResetNextTaskUnblockTime+0x3c>)
 801370a:	6013      	str	r3, [r2, #0]
}
 801370c:	bf00      	nop
 801370e:	370c      	adds	r7, #12
 8013710:	46bd      	mov	sp, r7
 8013712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013716:	4770      	bx	lr
 8013718:	2000117c 	.word	0x2000117c
 801371c:	200011e4 	.word	0x200011e4

08013720 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013720:	b480      	push	{r7}
 8013722:	b083      	sub	sp, #12
 8013724:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013726:	4b0b      	ldr	r3, [pc, #44]	@ (8013754 <xTaskGetSchedulerState+0x34>)
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	2b00      	cmp	r3, #0
 801372c:	d102      	bne.n	8013734 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801372e:	2301      	movs	r3, #1
 8013730:	607b      	str	r3, [r7, #4]
 8013732:	e008      	b.n	8013746 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013734:	4b08      	ldr	r3, [pc, #32]	@ (8013758 <xTaskGetSchedulerState+0x38>)
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	2b00      	cmp	r3, #0
 801373a:	d102      	bne.n	8013742 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801373c:	2302      	movs	r3, #2
 801373e:	607b      	str	r3, [r7, #4]
 8013740:	e001      	b.n	8013746 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013742:	2300      	movs	r3, #0
 8013744:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013746:	687b      	ldr	r3, [r7, #4]
	}
 8013748:	4618      	mov	r0, r3
 801374a:	370c      	adds	r7, #12
 801374c:	46bd      	mov	sp, r7
 801374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013752:	4770      	bx	lr
 8013754:	200011d0 	.word	0x200011d0
 8013758:	200011ec 	.word	0x200011ec

0801375c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801375c:	b580      	push	{r7, lr}
 801375e:	b086      	sub	sp, #24
 8013760:	af00      	add	r7, sp, #0
 8013762:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013768:	2300      	movs	r3, #0
 801376a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d074      	beq.n	801385c <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013772:	4b3d      	ldr	r3, [pc, #244]	@ (8013868 <xTaskPriorityDisinherit+0x10c>)
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	693a      	ldr	r2, [r7, #16]
 8013778:	429a      	cmp	r2, r3
 801377a:	d00d      	beq.n	8013798 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 801377c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013780:	b672      	cpsid	i
 8013782:	f383 8811 	msr	BASEPRI, r3
 8013786:	f3bf 8f6f 	isb	sy
 801378a:	f3bf 8f4f 	dsb	sy
 801378e:	b662      	cpsie	i
 8013790:	60fb      	str	r3, [r7, #12]
}
 8013792:	bf00      	nop
 8013794:	bf00      	nop
 8013796:	e7fd      	b.n	8013794 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8013798:	693b      	ldr	r3, [r7, #16]
 801379a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801379c:	2b00      	cmp	r3, #0
 801379e:	d10d      	bne.n	80137bc <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80137a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80137a4:	b672      	cpsid	i
 80137a6:	f383 8811 	msr	BASEPRI, r3
 80137aa:	f3bf 8f6f 	isb	sy
 80137ae:	f3bf 8f4f 	dsb	sy
 80137b2:	b662      	cpsie	i
 80137b4:	60bb      	str	r3, [r7, #8]
}
 80137b6:	bf00      	nop
 80137b8:	bf00      	nop
 80137ba:	e7fd      	b.n	80137b8 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80137bc:	693b      	ldr	r3, [r7, #16]
 80137be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80137c0:	1e5a      	subs	r2, r3, #1
 80137c2:	693b      	ldr	r3, [r7, #16]
 80137c4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80137c6:	693b      	ldr	r3, [r7, #16]
 80137c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80137ca:	693b      	ldr	r3, [r7, #16]
 80137cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80137ce:	429a      	cmp	r2, r3
 80137d0:	d044      	beq.n	801385c <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80137d2:	693b      	ldr	r3, [r7, #16]
 80137d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d140      	bne.n	801385c <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80137da:	693b      	ldr	r3, [r7, #16]
 80137dc:	3304      	adds	r3, #4
 80137de:	4618      	mov	r0, r3
 80137e0:	f7fe fb7a 	bl	8011ed8 <uxListRemove>
 80137e4:	4603      	mov	r3, r0
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d115      	bne.n	8013816 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80137ea:	693b      	ldr	r3, [r7, #16]
 80137ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80137ee:	491f      	ldr	r1, [pc, #124]	@ (801386c <xTaskPriorityDisinherit+0x110>)
 80137f0:	4613      	mov	r3, r2
 80137f2:	009b      	lsls	r3, r3, #2
 80137f4:	4413      	add	r3, r2
 80137f6:	009b      	lsls	r3, r3, #2
 80137f8:	440b      	add	r3, r1
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d10a      	bne.n	8013816 <xTaskPriorityDisinherit+0xba>
 8013800:	693b      	ldr	r3, [r7, #16]
 8013802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013804:	2201      	movs	r2, #1
 8013806:	fa02 f303 	lsl.w	r3, r2, r3
 801380a:	43da      	mvns	r2, r3
 801380c:	4b18      	ldr	r3, [pc, #96]	@ (8013870 <xTaskPriorityDisinherit+0x114>)
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	4013      	ands	r3, r2
 8013812:	4a17      	ldr	r2, [pc, #92]	@ (8013870 <xTaskPriorityDisinherit+0x114>)
 8013814:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013816:	693b      	ldr	r3, [r7, #16]
 8013818:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801381a:	693b      	ldr	r3, [r7, #16]
 801381c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801381e:	693b      	ldr	r3, [r7, #16]
 8013820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013822:	f1c3 0207 	rsb	r2, r3, #7
 8013826:	693b      	ldr	r3, [r7, #16]
 8013828:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801382a:	693b      	ldr	r3, [r7, #16]
 801382c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801382e:	2201      	movs	r2, #1
 8013830:	409a      	lsls	r2, r3
 8013832:	4b0f      	ldr	r3, [pc, #60]	@ (8013870 <xTaskPriorityDisinherit+0x114>)
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	4313      	orrs	r3, r2
 8013838:	4a0d      	ldr	r2, [pc, #52]	@ (8013870 <xTaskPriorityDisinherit+0x114>)
 801383a:	6013      	str	r3, [r2, #0]
 801383c:	693b      	ldr	r3, [r7, #16]
 801383e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013840:	4613      	mov	r3, r2
 8013842:	009b      	lsls	r3, r3, #2
 8013844:	4413      	add	r3, r2
 8013846:	009b      	lsls	r3, r3, #2
 8013848:	4a08      	ldr	r2, [pc, #32]	@ (801386c <xTaskPriorityDisinherit+0x110>)
 801384a:	441a      	add	r2, r3
 801384c:	693b      	ldr	r3, [r7, #16]
 801384e:	3304      	adds	r3, #4
 8013850:	4619      	mov	r1, r3
 8013852:	4610      	mov	r0, r2
 8013854:	f7fe fae3 	bl	8011e1e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013858:	2301      	movs	r3, #1
 801385a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801385c:	697b      	ldr	r3, [r7, #20]
	}
 801385e:	4618      	mov	r0, r3
 8013860:	3718      	adds	r7, #24
 8013862:	46bd      	mov	sp, r7
 8013864:	bd80      	pop	{r7, pc}
 8013866:	bf00      	nop
 8013868:	200010c4 	.word	0x200010c4
 801386c:	200010c8 	.word	0x200010c8
 8013870:	200011cc 	.word	0x200011cc

08013874 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013874:	b580      	push	{r7, lr}
 8013876:	b084      	sub	sp, #16
 8013878:	af00      	add	r7, sp, #0
 801387a:	6078      	str	r0, [r7, #4]
 801387c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801387e:	4b29      	ldr	r3, [pc, #164]	@ (8013924 <prvAddCurrentTaskToDelayedList+0xb0>)
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013884:	4b28      	ldr	r3, [pc, #160]	@ (8013928 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	3304      	adds	r3, #4
 801388a:	4618      	mov	r0, r3
 801388c:	f7fe fb24 	bl	8011ed8 <uxListRemove>
 8013890:	4603      	mov	r3, r0
 8013892:	2b00      	cmp	r3, #0
 8013894:	d10b      	bne.n	80138ae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8013896:	4b24      	ldr	r3, [pc, #144]	@ (8013928 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801389c:	2201      	movs	r2, #1
 801389e:	fa02 f303 	lsl.w	r3, r2, r3
 80138a2:	43da      	mvns	r2, r3
 80138a4:	4b21      	ldr	r3, [pc, #132]	@ (801392c <prvAddCurrentTaskToDelayedList+0xb8>)
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	4013      	ands	r3, r2
 80138aa:	4a20      	ldr	r2, [pc, #128]	@ (801392c <prvAddCurrentTaskToDelayedList+0xb8>)
 80138ac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138b4:	d10a      	bne.n	80138cc <prvAddCurrentTaskToDelayedList+0x58>
 80138b6:	683b      	ldr	r3, [r7, #0]
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d007      	beq.n	80138cc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80138bc:	4b1a      	ldr	r3, [pc, #104]	@ (8013928 <prvAddCurrentTaskToDelayedList+0xb4>)
 80138be:	681b      	ldr	r3, [r3, #0]
 80138c0:	3304      	adds	r3, #4
 80138c2:	4619      	mov	r1, r3
 80138c4:	481a      	ldr	r0, [pc, #104]	@ (8013930 <prvAddCurrentTaskToDelayedList+0xbc>)
 80138c6:	f7fe faaa 	bl	8011e1e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80138ca:	e026      	b.n	801391a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80138cc:	68fa      	ldr	r2, [r7, #12]
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	4413      	add	r3, r2
 80138d2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80138d4:	4b14      	ldr	r3, [pc, #80]	@ (8013928 <prvAddCurrentTaskToDelayedList+0xb4>)
 80138d6:	681b      	ldr	r3, [r3, #0]
 80138d8:	68ba      	ldr	r2, [r7, #8]
 80138da:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80138dc:	68ba      	ldr	r2, [r7, #8]
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	429a      	cmp	r2, r3
 80138e2:	d209      	bcs.n	80138f8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80138e4:	4b13      	ldr	r3, [pc, #76]	@ (8013934 <prvAddCurrentTaskToDelayedList+0xc0>)
 80138e6:	681a      	ldr	r2, [r3, #0]
 80138e8:	4b0f      	ldr	r3, [pc, #60]	@ (8013928 <prvAddCurrentTaskToDelayedList+0xb4>)
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	3304      	adds	r3, #4
 80138ee:	4619      	mov	r1, r3
 80138f0:	4610      	mov	r0, r2
 80138f2:	f7fe fab8 	bl	8011e66 <vListInsert>
}
 80138f6:	e010      	b.n	801391a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80138f8:	4b0f      	ldr	r3, [pc, #60]	@ (8013938 <prvAddCurrentTaskToDelayedList+0xc4>)
 80138fa:	681a      	ldr	r2, [r3, #0]
 80138fc:	4b0a      	ldr	r3, [pc, #40]	@ (8013928 <prvAddCurrentTaskToDelayedList+0xb4>)
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	3304      	adds	r3, #4
 8013902:	4619      	mov	r1, r3
 8013904:	4610      	mov	r0, r2
 8013906:	f7fe faae 	bl	8011e66 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801390a:	4b0c      	ldr	r3, [pc, #48]	@ (801393c <prvAddCurrentTaskToDelayedList+0xc8>)
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	68ba      	ldr	r2, [r7, #8]
 8013910:	429a      	cmp	r2, r3
 8013912:	d202      	bcs.n	801391a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8013914:	4a09      	ldr	r2, [pc, #36]	@ (801393c <prvAddCurrentTaskToDelayedList+0xc8>)
 8013916:	68bb      	ldr	r3, [r7, #8]
 8013918:	6013      	str	r3, [r2, #0]
}
 801391a:	bf00      	nop
 801391c:	3710      	adds	r7, #16
 801391e:	46bd      	mov	sp, r7
 8013920:	bd80      	pop	{r7, pc}
 8013922:	bf00      	nop
 8013924:	200011c8 	.word	0x200011c8
 8013928:	200010c4 	.word	0x200010c4
 801392c:	200011cc 	.word	0x200011cc
 8013930:	200011b0 	.word	0x200011b0
 8013934:	20001180 	.word	0x20001180
 8013938:	2000117c 	.word	0x2000117c
 801393c:	200011e4 	.word	0x200011e4

08013940 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013940:	b480      	push	{r7}
 8013942:	b085      	sub	sp, #20
 8013944:	af00      	add	r7, sp, #0
 8013946:	60f8      	str	r0, [r7, #12]
 8013948:	60b9      	str	r1, [r7, #8]
 801394a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	3b04      	subs	r3, #4
 8013950:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8013958:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	3b04      	subs	r3, #4
 801395e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013960:	68bb      	ldr	r3, [r7, #8]
 8013962:	f023 0201 	bic.w	r2, r3, #1
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	3b04      	subs	r3, #4
 801396e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013970:	4a0c      	ldr	r2, [pc, #48]	@ (80139a4 <pxPortInitialiseStack+0x64>)
 8013972:	68fb      	ldr	r3, [r7, #12]
 8013974:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	3b14      	subs	r3, #20
 801397a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801397c:	687a      	ldr	r2, [r7, #4]
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	3b04      	subs	r3, #4
 8013986:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	f06f 0202 	mvn.w	r2, #2
 801398e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	3b20      	subs	r3, #32
 8013994:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013996:	68fb      	ldr	r3, [r7, #12]
}
 8013998:	4618      	mov	r0, r3
 801399a:	3714      	adds	r7, #20
 801399c:	46bd      	mov	sp, r7
 801399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139a2:	4770      	bx	lr
 80139a4:	080139a9 	.word	0x080139a9

080139a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80139a8:	b480      	push	{r7}
 80139aa:	b085      	sub	sp, #20
 80139ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80139ae:	2300      	movs	r3, #0
 80139b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80139b2:	4b15      	ldr	r3, [pc, #84]	@ (8013a08 <prvTaskExitError+0x60>)
 80139b4:	681b      	ldr	r3, [r3, #0]
 80139b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139ba:	d00d      	beq.n	80139d8 <prvTaskExitError+0x30>
	__asm volatile
 80139bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139c0:	b672      	cpsid	i
 80139c2:	f383 8811 	msr	BASEPRI, r3
 80139c6:	f3bf 8f6f 	isb	sy
 80139ca:	f3bf 8f4f 	dsb	sy
 80139ce:	b662      	cpsie	i
 80139d0:	60fb      	str	r3, [r7, #12]
}
 80139d2:	bf00      	nop
 80139d4:	bf00      	nop
 80139d6:	e7fd      	b.n	80139d4 <prvTaskExitError+0x2c>
	__asm volatile
 80139d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139dc:	b672      	cpsid	i
 80139de:	f383 8811 	msr	BASEPRI, r3
 80139e2:	f3bf 8f6f 	isb	sy
 80139e6:	f3bf 8f4f 	dsb	sy
 80139ea:	b662      	cpsie	i
 80139ec:	60bb      	str	r3, [r7, #8]
}
 80139ee:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80139f0:	bf00      	nop
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d0fc      	beq.n	80139f2 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80139f8:	bf00      	nop
 80139fa:	bf00      	nop
 80139fc:	3714      	adds	r7, #20
 80139fe:	46bd      	mov	sp, r7
 8013a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a04:	4770      	bx	lr
 8013a06:	bf00      	nop
 8013a08:	20000030 	.word	0x20000030
 8013a0c:	00000000 	.word	0x00000000

08013a10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013a10:	4b07      	ldr	r3, [pc, #28]	@ (8013a30 <pxCurrentTCBConst2>)
 8013a12:	6819      	ldr	r1, [r3, #0]
 8013a14:	6808      	ldr	r0, [r1, #0]
 8013a16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a1a:	f380 8809 	msr	PSP, r0
 8013a1e:	f3bf 8f6f 	isb	sy
 8013a22:	f04f 0000 	mov.w	r0, #0
 8013a26:	f380 8811 	msr	BASEPRI, r0
 8013a2a:	4770      	bx	lr
 8013a2c:	f3af 8000 	nop.w

08013a30 <pxCurrentTCBConst2>:
 8013a30:	200010c4 	.word	0x200010c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013a34:	bf00      	nop
 8013a36:	bf00      	nop

08013a38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013a38:	4808      	ldr	r0, [pc, #32]	@ (8013a5c <prvPortStartFirstTask+0x24>)
 8013a3a:	6800      	ldr	r0, [r0, #0]
 8013a3c:	6800      	ldr	r0, [r0, #0]
 8013a3e:	f380 8808 	msr	MSP, r0
 8013a42:	f04f 0000 	mov.w	r0, #0
 8013a46:	f380 8814 	msr	CONTROL, r0
 8013a4a:	b662      	cpsie	i
 8013a4c:	b661      	cpsie	f
 8013a4e:	f3bf 8f4f 	dsb	sy
 8013a52:	f3bf 8f6f 	isb	sy
 8013a56:	df00      	svc	0
 8013a58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8013a5a:	bf00      	nop
 8013a5c:	e000ed08 	.word	0xe000ed08

08013a60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013a60:	b580      	push	{r7, lr}
 8013a62:	b084      	sub	sp, #16
 8013a64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013a66:	4b37      	ldr	r3, [pc, #220]	@ (8013b44 <xPortStartScheduler+0xe4>)
 8013a68:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	781b      	ldrb	r3, [r3, #0]
 8013a6e:	b2db      	uxtb	r3, r3
 8013a70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	22ff      	movs	r2, #255	@ 0xff
 8013a76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	781b      	ldrb	r3, [r3, #0]
 8013a7c:	b2db      	uxtb	r3, r3
 8013a7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013a80:	78fb      	ldrb	r3, [r7, #3]
 8013a82:	b2db      	uxtb	r3, r3
 8013a84:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8013a88:	b2da      	uxtb	r2, r3
 8013a8a:	4b2f      	ldr	r3, [pc, #188]	@ (8013b48 <xPortStartScheduler+0xe8>)
 8013a8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8013a8e:	4b2f      	ldr	r3, [pc, #188]	@ (8013b4c <xPortStartScheduler+0xec>)
 8013a90:	2207      	movs	r2, #7
 8013a92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013a94:	e009      	b.n	8013aaa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8013a96:	4b2d      	ldr	r3, [pc, #180]	@ (8013b4c <xPortStartScheduler+0xec>)
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	3b01      	subs	r3, #1
 8013a9c:	4a2b      	ldr	r2, [pc, #172]	@ (8013b4c <xPortStartScheduler+0xec>)
 8013a9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013aa0:	78fb      	ldrb	r3, [r7, #3]
 8013aa2:	b2db      	uxtb	r3, r3
 8013aa4:	005b      	lsls	r3, r3, #1
 8013aa6:	b2db      	uxtb	r3, r3
 8013aa8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013aaa:	78fb      	ldrb	r3, [r7, #3]
 8013aac:	b2db      	uxtb	r3, r3
 8013aae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013ab2:	2b80      	cmp	r3, #128	@ 0x80
 8013ab4:	d0ef      	beq.n	8013a96 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013ab6:	4b25      	ldr	r3, [pc, #148]	@ (8013b4c <xPortStartScheduler+0xec>)
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	f1c3 0307 	rsb	r3, r3, #7
 8013abe:	2b04      	cmp	r3, #4
 8013ac0:	d00d      	beq.n	8013ade <xPortStartScheduler+0x7e>
	__asm volatile
 8013ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ac6:	b672      	cpsid	i
 8013ac8:	f383 8811 	msr	BASEPRI, r3
 8013acc:	f3bf 8f6f 	isb	sy
 8013ad0:	f3bf 8f4f 	dsb	sy
 8013ad4:	b662      	cpsie	i
 8013ad6:	60bb      	str	r3, [r7, #8]
}
 8013ad8:	bf00      	nop
 8013ada:	bf00      	nop
 8013adc:	e7fd      	b.n	8013ada <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013ade:	4b1b      	ldr	r3, [pc, #108]	@ (8013b4c <xPortStartScheduler+0xec>)
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	021b      	lsls	r3, r3, #8
 8013ae4:	4a19      	ldr	r2, [pc, #100]	@ (8013b4c <xPortStartScheduler+0xec>)
 8013ae6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013ae8:	4b18      	ldr	r3, [pc, #96]	@ (8013b4c <xPortStartScheduler+0xec>)
 8013aea:	681b      	ldr	r3, [r3, #0]
 8013aec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8013af0:	4a16      	ldr	r2, [pc, #88]	@ (8013b4c <xPortStartScheduler+0xec>)
 8013af2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	b2da      	uxtb	r2, r3
 8013af8:	68fb      	ldr	r3, [r7, #12]
 8013afa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013afc:	4b14      	ldr	r3, [pc, #80]	@ (8013b50 <xPortStartScheduler+0xf0>)
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	4a13      	ldr	r2, [pc, #76]	@ (8013b50 <xPortStartScheduler+0xf0>)
 8013b02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8013b06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013b08:	4b11      	ldr	r3, [pc, #68]	@ (8013b50 <xPortStartScheduler+0xf0>)
 8013b0a:	681b      	ldr	r3, [r3, #0]
 8013b0c:	4a10      	ldr	r2, [pc, #64]	@ (8013b50 <xPortStartScheduler+0xf0>)
 8013b0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8013b12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013b14:	f000 f8dc 	bl	8013cd0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013b18:	4b0e      	ldr	r3, [pc, #56]	@ (8013b54 <xPortStartScheduler+0xf4>)
 8013b1a:	2200      	movs	r2, #0
 8013b1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013b1e:	f000 f8fb 	bl	8013d18 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013b22:	4b0d      	ldr	r3, [pc, #52]	@ (8013b58 <xPortStartScheduler+0xf8>)
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	4a0c      	ldr	r2, [pc, #48]	@ (8013b58 <xPortStartScheduler+0xf8>)
 8013b28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8013b2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013b2e:	f7ff ff83 	bl	8013a38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013b32:	f7ff fb73 	bl	801321c <vTaskSwitchContext>
	prvTaskExitError();
 8013b36:	f7ff ff37 	bl	80139a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013b3a:	2300      	movs	r3, #0
}
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	3710      	adds	r7, #16
 8013b40:	46bd      	mov	sp, r7
 8013b42:	bd80      	pop	{r7, pc}
 8013b44:	e000e400 	.word	0xe000e400
 8013b48:	200011f0 	.word	0x200011f0
 8013b4c:	200011f4 	.word	0x200011f4
 8013b50:	e000ed20 	.word	0xe000ed20
 8013b54:	20000030 	.word	0x20000030
 8013b58:	e000ef34 	.word	0xe000ef34

08013b5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013b5c:	b480      	push	{r7}
 8013b5e:	b083      	sub	sp, #12
 8013b60:	af00      	add	r7, sp, #0
	__asm volatile
 8013b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b66:	b672      	cpsid	i
 8013b68:	f383 8811 	msr	BASEPRI, r3
 8013b6c:	f3bf 8f6f 	isb	sy
 8013b70:	f3bf 8f4f 	dsb	sy
 8013b74:	b662      	cpsie	i
 8013b76:	607b      	str	r3, [r7, #4]
}
 8013b78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013b7a:	4b11      	ldr	r3, [pc, #68]	@ (8013bc0 <vPortEnterCritical+0x64>)
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	3301      	adds	r3, #1
 8013b80:	4a0f      	ldr	r2, [pc, #60]	@ (8013bc0 <vPortEnterCritical+0x64>)
 8013b82:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013b84:	4b0e      	ldr	r3, [pc, #56]	@ (8013bc0 <vPortEnterCritical+0x64>)
 8013b86:	681b      	ldr	r3, [r3, #0]
 8013b88:	2b01      	cmp	r3, #1
 8013b8a:	d112      	bne.n	8013bb2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8013bc4 <vPortEnterCritical+0x68>)
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	b2db      	uxtb	r3, r3
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d00d      	beq.n	8013bb2 <vPortEnterCritical+0x56>
	__asm volatile
 8013b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b9a:	b672      	cpsid	i
 8013b9c:	f383 8811 	msr	BASEPRI, r3
 8013ba0:	f3bf 8f6f 	isb	sy
 8013ba4:	f3bf 8f4f 	dsb	sy
 8013ba8:	b662      	cpsie	i
 8013baa:	603b      	str	r3, [r7, #0]
}
 8013bac:	bf00      	nop
 8013bae:	bf00      	nop
 8013bb0:	e7fd      	b.n	8013bae <vPortEnterCritical+0x52>
	}
}
 8013bb2:	bf00      	nop
 8013bb4:	370c      	adds	r7, #12
 8013bb6:	46bd      	mov	sp, r7
 8013bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bbc:	4770      	bx	lr
 8013bbe:	bf00      	nop
 8013bc0:	20000030 	.word	0x20000030
 8013bc4:	e000ed04 	.word	0xe000ed04

08013bc8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013bc8:	b480      	push	{r7}
 8013bca:	b083      	sub	sp, #12
 8013bcc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013bce:	4b13      	ldr	r3, [pc, #76]	@ (8013c1c <vPortExitCritical+0x54>)
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d10d      	bne.n	8013bf2 <vPortExitCritical+0x2a>
	__asm volatile
 8013bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bda:	b672      	cpsid	i
 8013bdc:	f383 8811 	msr	BASEPRI, r3
 8013be0:	f3bf 8f6f 	isb	sy
 8013be4:	f3bf 8f4f 	dsb	sy
 8013be8:	b662      	cpsie	i
 8013bea:	607b      	str	r3, [r7, #4]
}
 8013bec:	bf00      	nop
 8013bee:	bf00      	nop
 8013bf0:	e7fd      	b.n	8013bee <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8013bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8013c1c <vPortExitCritical+0x54>)
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	3b01      	subs	r3, #1
 8013bf8:	4a08      	ldr	r2, [pc, #32]	@ (8013c1c <vPortExitCritical+0x54>)
 8013bfa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013bfc:	4b07      	ldr	r3, [pc, #28]	@ (8013c1c <vPortExitCritical+0x54>)
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d105      	bne.n	8013c10 <vPortExitCritical+0x48>
 8013c04:	2300      	movs	r3, #0
 8013c06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013c08:	683b      	ldr	r3, [r7, #0]
 8013c0a:	f383 8811 	msr	BASEPRI, r3
}
 8013c0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013c10:	bf00      	nop
 8013c12:	370c      	adds	r7, #12
 8013c14:	46bd      	mov	sp, r7
 8013c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c1a:	4770      	bx	lr
 8013c1c:	20000030 	.word	0x20000030

08013c20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013c20:	f3ef 8009 	mrs	r0, PSP
 8013c24:	f3bf 8f6f 	isb	sy
 8013c28:	4b15      	ldr	r3, [pc, #84]	@ (8013c80 <pxCurrentTCBConst>)
 8013c2a:	681a      	ldr	r2, [r3, #0]
 8013c2c:	f01e 0f10 	tst.w	lr, #16
 8013c30:	bf08      	it	eq
 8013c32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013c36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c3a:	6010      	str	r0, [r2, #0]
 8013c3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013c40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8013c44:	b672      	cpsid	i
 8013c46:	f380 8811 	msr	BASEPRI, r0
 8013c4a:	f3bf 8f4f 	dsb	sy
 8013c4e:	f3bf 8f6f 	isb	sy
 8013c52:	b662      	cpsie	i
 8013c54:	f7ff fae2 	bl	801321c <vTaskSwitchContext>
 8013c58:	f04f 0000 	mov.w	r0, #0
 8013c5c:	f380 8811 	msr	BASEPRI, r0
 8013c60:	bc09      	pop	{r0, r3}
 8013c62:	6819      	ldr	r1, [r3, #0]
 8013c64:	6808      	ldr	r0, [r1, #0]
 8013c66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c6a:	f01e 0f10 	tst.w	lr, #16
 8013c6e:	bf08      	it	eq
 8013c70:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013c74:	f380 8809 	msr	PSP, r0
 8013c78:	f3bf 8f6f 	isb	sy
 8013c7c:	4770      	bx	lr
 8013c7e:	bf00      	nop

08013c80 <pxCurrentTCBConst>:
 8013c80:	200010c4 	.word	0x200010c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013c84:	bf00      	nop
 8013c86:	bf00      	nop

08013c88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013c88:	b580      	push	{r7, lr}
 8013c8a:	b082      	sub	sp, #8
 8013c8c:	af00      	add	r7, sp, #0
	__asm volatile
 8013c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c92:	b672      	cpsid	i
 8013c94:	f383 8811 	msr	BASEPRI, r3
 8013c98:	f3bf 8f6f 	isb	sy
 8013c9c:	f3bf 8f4f 	dsb	sy
 8013ca0:	b662      	cpsie	i
 8013ca2:	607b      	str	r3, [r7, #4]
}
 8013ca4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013ca6:	f7ff f9fd 	bl	80130a4 <xTaskIncrementTick>
 8013caa:	4603      	mov	r3, r0
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d003      	beq.n	8013cb8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013cb0:	4b06      	ldr	r3, [pc, #24]	@ (8013ccc <SysTick_Handler+0x44>)
 8013cb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013cb6:	601a      	str	r2, [r3, #0]
 8013cb8:	2300      	movs	r3, #0
 8013cba:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013cbc:	683b      	ldr	r3, [r7, #0]
 8013cbe:	f383 8811 	msr	BASEPRI, r3
}
 8013cc2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013cc4:	bf00      	nop
 8013cc6:	3708      	adds	r7, #8
 8013cc8:	46bd      	mov	sp, r7
 8013cca:	bd80      	pop	{r7, pc}
 8013ccc:	e000ed04 	.word	0xe000ed04

08013cd0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8013cd0:	b480      	push	{r7}
 8013cd2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8013d04 <vPortSetupTimerInterrupt+0x34>)
 8013cd6:	2200      	movs	r2, #0
 8013cd8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013cda:	4b0b      	ldr	r3, [pc, #44]	@ (8013d08 <vPortSetupTimerInterrupt+0x38>)
 8013cdc:	2200      	movs	r2, #0
 8013cde:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8013d0c <vPortSetupTimerInterrupt+0x3c>)
 8013ce2:	681b      	ldr	r3, [r3, #0]
 8013ce4:	4a0a      	ldr	r2, [pc, #40]	@ (8013d10 <vPortSetupTimerInterrupt+0x40>)
 8013ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8013cea:	099b      	lsrs	r3, r3, #6
 8013cec:	4a09      	ldr	r2, [pc, #36]	@ (8013d14 <vPortSetupTimerInterrupt+0x44>)
 8013cee:	3b01      	subs	r3, #1
 8013cf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013cf2:	4b04      	ldr	r3, [pc, #16]	@ (8013d04 <vPortSetupTimerInterrupt+0x34>)
 8013cf4:	2207      	movs	r2, #7
 8013cf6:	601a      	str	r2, [r3, #0]
}
 8013cf8:	bf00      	nop
 8013cfa:	46bd      	mov	sp, r7
 8013cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d00:	4770      	bx	lr
 8013d02:	bf00      	nop
 8013d04:	e000e010 	.word	0xe000e010
 8013d08:	e000e018 	.word	0xe000e018
 8013d0c:	20000004 	.word	0x20000004
 8013d10:	10624dd3 	.word	0x10624dd3
 8013d14:	e000e014 	.word	0xe000e014

08013d18 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013d18:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8013d28 <vPortEnableVFP+0x10>
 8013d1c:	6801      	ldr	r1, [r0, #0]
 8013d1e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8013d22:	6001      	str	r1, [r0, #0]
 8013d24:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013d26:	bf00      	nop
 8013d28:	e000ed88 	.word	0xe000ed88

08013d2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013d2c:	b480      	push	{r7}
 8013d2e:	b085      	sub	sp, #20
 8013d30:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013d32:	f3ef 8305 	mrs	r3, IPSR
 8013d36:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	2b0f      	cmp	r3, #15
 8013d3c:	d917      	bls.n	8013d6e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013d3e:	4a1a      	ldr	r2, [pc, #104]	@ (8013da8 <vPortValidateInterruptPriority+0x7c>)
 8013d40:	68fb      	ldr	r3, [r7, #12]
 8013d42:	4413      	add	r3, r2
 8013d44:	781b      	ldrb	r3, [r3, #0]
 8013d46:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013d48:	4b18      	ldr	r3, [pc, #96]	@ (8013dac <vPortValidateInterruptPriority+0x80>)
 8013d4a:	781b      	ldrb	r3, [r3, #0]
 8013d4c:	7afa      	ldrb	r2, [r7, #11]
 8013d4e:	429a      	cmp	r2, r3
 8013d50:	d20d      	bcs.n	8013d6e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8013d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d56:	b672      	cpsid	i
 8013d58:	f383 8811 	msr	BASEPRI, r3
 8013d5c:	f3bf 8f6f 	isb	sy
 8013d60:	f3bf 8f4f 	dsb	sy
 8013d64:	b662      	cpsie	i
 8013d66:	607b      	str	r3, [r7, #4]
}
 8013d68:	bf00      	nop
 8013d6a:	bf00      	nop
 8013d6c:	e7fd      	b.n	8013d6a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013d6e:	4b10      	ldr	r3, [pc, #64]	@ (8013db0 <vPortValidateInterruptPriority+0x84>)
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8013d76:	4b0f      	ldr	r3, [pc, #60]	@ (8013db4 <vPortValidateInterruptPriority+0x88>)
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	429a      	cmp	r2, r3
 8013d7c:	d90d      	bls.n	8013d9a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8013d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d82:	b672      	cpsid	i
 8013d84:	f383 8811 	msr	BASEPRI, r3
 8013d88:	f3bf 8f6f 	isb	sy
 8013d8c:	f3bf 8f4f 	dsb	sy
 8013d90:	b662      	cpsie	i
 8013d92:	603b      	str	r3, [r7, #0]
}
 8013d94:	bf00      	nop
 8013d96:	bf00      	nop
 8013d98:	e7fd      	b.n	8013d96 <vPortValidateInterruptPriority+0x6a>
	}
 8013d9a:	bf00      	nop
 8013d9c:	3714      	adds	r7, #20
 8013d9e:	46bd      	mov	sp, r7
 8013da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013da4:	4770      	bx	lr
 8013da6:	bf00      	nop
 8013da8:	e000e3f0 	.word	0xe000e3f0
 8013dac:	200011f0 	.word	0x200011f0
 8013db0:	e000ed0c 	.word	0xe000ed0c
 8013db4:	200011f4 	.word	0x200011f4

08013db8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013db8:	b580      	push	{r7, lr}
 8013dba:	b08a      	sub	sp, #40	@ 0x28
 8013dbc:	af00      	add	r7, sp, #0
 8013dbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013dc0:	2300      	movs	r3, #0
 8013dc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013dc4:	f7ff f89e 	bl	8012f04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013dc8:	4b5f      	ldr	r3, [pc, #380]	@ (8013f48 <pvPortMalloc+0x190>)
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d101      	bne.n	8013dd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013dd0:	f000 f924 	bl	801401c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013dd4:	4b5d      	ldr	r3, [pc, #372]	@ (8013f4c <pvPortMalloc+0x194>)
 8013dd6:	681a      	ldr	r2, [r3, #0]
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	4013      	ands	r3, r2
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	f040 8094 	bne.w	8013f0a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d020      	beq.n	8013e2a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8013de8:	2208      	movs	r2, #8
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	4413      	add	r3, r2
 8013dee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	f003 0307 	and.w	r3, r3, #7
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d017      	beq.n	8013e2a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	f023 0307 	bic.w	r3, r3, #7
 8013e00:	3308      	adds	r3, #8
 8013e02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	f003 0307 	and.w	r3, r3, #7
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d00d      	beq.n	8013e2a <pvPortMalloc+0x72>
	__asm volatile
 8013e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e12:	b672      	cpsid	i
 8013e14:	f383 8811 	msr	BASEPRI, r3
 8013e18:	f3bf 8f6f 	isb	sy
 8013e1c:	f3bf 8f4f 	dsb	sy
 8013e20:	b662      	cpsie	i
 8013e22:	617b      	str	r3, [r7, #20]
}
 8013e24:	bf00      	nop
 8013e26:	bf00      	nop
 8013e28:	e7fd      	b.n	8013e26 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d06c      	beq.n	8013f0a <pvPortMalloc+0x152>
 8013e30:	4b47      	ldr	r3, [pc, #284]	@ (8013f50 <pvPortMalloc+0x198>)
 8013e32:	681b      	ldr	r3, [r3, #0]
 8013e34:	687a      	ldr	r2, [r7, #4]
 8013e36:	429a      	cmp	r2, r3
 8013e38:	d867      	bhi.n	8013f0a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013e3a:	4b46      	ldr	r3, [pc, #280]	@ (8013f54 <pvPortMalloc+0x19c>)
 8013e3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013e3e:	4b45      	ldr	r3, [pc, #276]	@ (8013f54 <pvPortMalloc+0x19c>)
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013e44:	e004      	b.n	8013e50 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8013e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e52:	685b      	ldr	r3, [r3, #4]
 8013e54:	687a      	ldr	r2, [r7, #4]
 8013e56:	429a      	cmp	r2, r3
 8013e58:	d903      	bls.n	8013e62 <pvPortMalloc+0xaa>
 8013e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e5c:	681b      	ldr	r3, [r3, #0]
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d1f1      	bne.n	8013e46 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013e62:	4b39      	ldr	r3, [pc, #228]	@ (8013f48 <pvPortMalloc+0x190>)
 8013e64:	681b      	ldr	r3, [r3, #0]
 8013e66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013e68:	429a      	cmp	r2, r3
 8013e6a:	d04e      	beq.n	8013f0a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013e6c:	6a3b      	ldr	r3, [r7, #32]
 8013e6e:	681b      	ldr	r3, [r3, #0]
 8013e70:	2208      	movs	r2, #8
 8013e72:	4413      	add	r3, r2
 8013e74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e78:	681a      	ldr	r2, [r3, #0]
 8013e7a:	6a3b      	ldr	r3, [r7, #32]
 8013e7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e80:	685a      	ldr	r2, [r3, #4]
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	1ad2      	subs	r2, r2, r3
 8013e86:	2308      	movs	r3, #8
 8013e88:	005b      	lsls	r3, r3, #1
 8013e8a:	429a      	cmp	r2, r3
 8013e8c:	d922      	bls.n	8013ed4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013e8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	4413      	add	r3, r2
 8013e94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013e96:	69bb      	ldr	r3, [r7, #24]
 8013e98:	f003 0307 	and.w	r3, r3, #7
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d00d      	beq.n	8013ebc <pvPortMalloc+0x104>
	__asm volatile
 8013ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ea4:	b672      	cpsid	i
 8013ea6:	f383 8811 	msr	BASEPRI, r3
 8013eaa:	f3bf 8f6f 	isb	sy
 8013eae:	f3bf 8f4f 	dsb	sy
 8013eb2:	b662      	cpsie	i
 8013eb4:	613b      	str	r3, [r7, #16]
}
 8013eb6:	bf00      	nop
 8013eb8:	bf00      	nop
 8013eba:	e7fd      	b.n	8013eb8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ebe:	685a      	ldr	r2, [r3, #4]
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	1ad2      	subs	r2, r2, r3
 8013ec4:	69bb      	ldr	r3, [r7, #24]
 8013ec6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013eca:	687a      	ldr	r2, [r7, #4]
 8013ecc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013ece:	69b8      	ldr	r0, [r7, #24]
 8013ed0:	f000 f906 	bl	80140e0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013ed4:	4b1e      	ldr	r3, [pc, #120]	@ (8013f50 <pvPortMalloc+0x198>)
 8013ed6:	681a      	ldr	r2, [r3, #0]
 8013ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013eda:	685b      	ldr	r3, [r3, #4]
 8013edc:	1ad3      	subs	r3, r2, r3
 8013ede:	4a1c      	ldr	r2, [pc, #112]	@ (8013f50 <pvPortMalloc+0x198>)
 8013ee0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8013f50 <pvPortMalloc+0x198>)
 8013ee4:	681a      	ldr	r2, [r3, #0]
 8013ee6:	4b1c      	ldr	r3, [pc, #112]	@ (8013f58 <pvPortMalloc+0x1a0>)
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	429a      	cmp	r2, r3
 8013eec:	d203      	bcs.n	8013ef6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013eee:	4b18      	ldr	r3, [pc, #96]	@ (8013f50 <pvPortMalloc+0x198>)
 8013ef0:	681b      	ldr	r3, [r3, #0]
 8013ef2:	4a19      	ldr	r2, [pc, #100]	@ (8013f58 <pvPortMalloc+0x1a0>)
 8013ef4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ef8:	685a      	ldr	r2, [r3, #4]
 8013efa:	4b14      	ldr	r3, [pc, #80]	@ (8013f4c <pvPortMalloc+0x194>)
 8013efc:	681b      	ldr	r3, [r3, #0]
 8013efe:	431a      	orrs	r2, r3
 8013f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f02:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f06:	2200      	movs	r2, #0
 8013f08:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013f0a:	f7ff f809 	bl	8012f20 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8013f0e:	69fb      	ldr	r3, [r7, #28]
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d101      	bne.n	8013f18 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8013f14:	f7ec fb06 	bl	8000524 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013f18:	69fb      	ldr	r3, [r7, #28]
 8013f1a:	f003 0307 	and.w	r3, r3, #7
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d00d      	beq.n	8013f3e <pvPortMalloc+0x186>
	__asm volatile
 8013f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f26:	b672      	cpsid	i
 8013f28:	f383 8811 	msr	BASEPRI, r3
 8013f2c:	f3bf 8f6f 	isb	sy
 8013f30:	f3bf 8f4f 	dsb	sy
 8013f34:	b662      	cpsie	i
 8013f36:	60fb      	str	r3, [r7, #12]
}
 8013f38:	bf00      	nop
 8013f3a:	bf00      	nop
 8013f3c:	e7fd      	b.n	8013f3a <pvPortMalloc+0x182>
	return pvReturn;
 8013f3e:	69fb      	ldr	r3, [r7, #28]
}
 8013f40:	4618      	mov	r0, r3
 8013f42:	3728      	adds	r7, #40	@ 0x28
 8013f44:	46bd      	mov	sp, r7
 8013f46:	bd80      	pop	{r7, pc}
 8013f48:	20009200 	.word	0x20009200
 8013f4c:	2000920c 	.word	0x2000920c
 8013f50:	20009204 	.word	0x20009204
 8013f54:	200091f8 	.word	0x200091f8
 8013f58:	20009208 	.word	0x20009208

08013f5c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013f5c:	b580      	push	{r7, lr}
 8013f5e:	b086      	sub	sp, #24
 8013f60:	af00      	add	r7, sp, #0
 8013f62:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d04e      	beq.n	801400c <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013f6e:	2308      	movs	r3, #8
 8013f70:	425b      	negs	r3, r3
 8013f72:	697a      	ldr	r2, [r7, #20]
 8013f74:	4413      	add	r3, r2
 8013f76:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013f78:	697b      	ldr	r3, [r7, #20]
 8013f7a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013f7c:	693b      	ldr	r3, [r7, #16]
 8013f7e:	685a      	ldr	r2, [r3, #4]
 8013f80:	4b24      	ldr	r3, [pc, #144]	@ (8014014 <vPortFree+0xb8>)
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	4013      	ands	r3, r2
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d10d      	bne.n	8013fa6 <vPortFree+0x4a>
	__asm volatile
 8013f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f8e:	b672      	cpsid	i
 8013f90:	f383 8811 	msr	BASEPRI, r3
 8013f94:	f3bf 8f6f 	isb	sy
 8013f98:	f3bf 8f4f 	dsb	sy
 8013f9c:	b662      	cpsie	i
 8013f9e:	60fb      	str	r3, [r7, #12]
}
 8013fa0:	bf00      	nop
 8013fa2:	bf00      	nop
 8013fa4:	e7fd      	b.n	8013fa2 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013fa6:	693b      	ldr	r3, [r7, #16]
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d00d      	beq.n	8013fca <vPortFree+0x6e>
	__asm volatile
 8013fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013fb2:	b672      	cpsid	i
 8013fb4:	f383 8811 	msr	BASEPRI, r3
 8013fb8:	f3bf 8f6f 	isb	sy
 8013fbc:	f3bf 8f4f 	dsb	sy
 8013fc0:	b662      	cpsie	i
 8013fc2:	60bb      	str	r3, [r7, #8]
}
 8013fc4:	bf00      	nop
 8013fc6:	bf00      	nop
 8013fc8:	e7fd      	b.n	8013fc6 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013fca:	693b      	ldr	r3, [r7, #16]
 8013fcc:	685a      	ldr	r2, [r3, #4]
 8013fce:	4b11      	ldr	r3, [pc, #68]	@ (8014014 <vPortFree+0xb8>)
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	4013      	ands	r3, r2
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d019      	beq.n	801400c <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013fd8:	693b      	ldr	r3, [r7, #16]
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d115      	bne.n	801400c <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013fe0:	693b      	ldr	r3, [r7, #16]
 8013fe2:	685a      	ldr	r2, [r3, #4]
 8013fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8014014 <vPortFree+0xb8>)
 8013fe6:	681b      	ldr	r3, [r3, #0]
 8013fe8:	43db      	mvns	r3, r3
 8013fea:	401a      	ands	r2, r3
 8013fec:	693b      	ldr	r3, [r7, #16]
 8013fee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013ff0:	f7fe ff88 	bl	8012f04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013ff4:	693b      	ldr	r3, [r7, #16]
 8013ff6:	685a      	ldr	r2, [r3, #4]
 8013ff8:	4b07      	ldr	r3, [pc, #28]	@ (8014018 <vPortFree+0xbc>)
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	4413      	add	r3, r2
 8013ffe:	4a06      	ldr	r2, [pc, #24]	@ (8014018 <vPortFree+0xbc>)
 8014000:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8014002:	6938      	ldr	r0, [r7, #16]
 8014004:	f000 f86c 	bl	80140e0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8014008:	f7fe ff8a 	bl	8012f20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801400c:	bf00      	nop
 801400e:	3718      	adds	r7, #24
 8014010:	46bd      	mov	sp, r7
 8014012:	bd80      	pop	{r7, pc}
 8014014:	2000920c 	.word	0x2000920c
 8014018:	20009204 	.word	0x20009204

0801401c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801401c:	b480      	push	{r7}
 801401e:	b085      	sub	sp, #20
 8014020:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8014022:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8014026:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014028:	4b27      	ldr	r3, [pc, #156]	@ (80140c8 <prvHeapInit+0xac>)
 801402a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801402c:	68fb      	ldr	r3, [r7, #12]
 801402e:	f003 0307 	and.w	r3, r3, #7
 8014032:	2b00      	cmp	r3, #0
 8014034:	d00c      	beq.n	8014050 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	3307      	adds	r3, #7
 801403a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801403c:	68fb      	ldr	r3, [r7, #12]
 801403e:	f023 0307 	bic.w	r3, r3, #7
 8014042:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8014044:	68ba      	ldr	r2, [r7, #8]
 8014046:	68fb      	ldr	r3, [r7, #12]
 8014048:	1ad3      	subs	r3, r2, r3
 801404a:	4a1f      	ldr	r2, [pc, #124]	@ (80140c8 <prvHeapInit+0xac>)
 801404c:	4413      	add	r3, r2
 801404e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014050:	68fb      	ldr	r3, [r7, #12]
 8014052:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8014054:	4a1d      	ldr	r2, [pc, #116]	@ (80140cc <prvHeapInit+0xb0>)
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801405a:	4b1c      	ldr	r3, [pc, #112]	@ (80140cc <prvHeapInit+0xb0>)
 801405c:	2200      	movs	r2, #0
 801405e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	68ba      	ldr	r2, [r7, #8]
 8014064:	4413      	add	r3, r2
 8014066:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014068:	2208      	movs	r2, #8
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	1a9b      	subs	r3, r3, r2
 801406e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014070:	68fb      	ldr	r3, [r7, #12]
 8014072:	f023 0307 	bic.w	r3, r3, #7
 8014076:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	4a15      	ldr	r2, [pc, #84]	@ (80140d0 <prvHeapInit+0xb4>)
 801407c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801407e:	4b14      	ldr	r3, [pc, #80]	@ (80140d0 <prvHeapInit+0xb4>)
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	2200      	movs	r2, #0
 8014084:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8014086:	4b12      	ldr	r3, [pc, #72]	@ (80140d0 <prvHeapInit+0xb4>)
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	2200      	movs	r2, #0
 801408c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8014092:	683b      	ldr	r3, [r7, #0]
 8014094:	68fa      	ldr	r2, [r7, #12]
 8014096:	1ad2      	subs	r2, r2, r3
 8014098:	683b      	ldr	r3, [r7, #0]
 801409a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801409c:	4b0c      	ldr	r3, [pc, #48]	@ (80140d0 <prvHeapInit+0xb4>)
 801409e:	681a      	ldr	r2, [r3, #0]
 80140a0:	683b      	ldr	r3, [r7, #0]
 80140a2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80140a4:	683b      	ldr	r3, [r7, #0]
 80140a6:	685b      	ldr	r3, [r3, #4]
 80140a8:	4a0a      	ldr	r2, [pc, #40]	@ (80140d4 <prvHeapInit+0xb8>)
 80140aa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80140ac:	683b      	ldr	r3, [r7, #0]
 80140ae:	685b      	ldr	r3, [r3, #4]
 80140b0:	4a09      	ldr	r2, [pc, #36]	@ (80140d8 <prvHeapInit+0xbc>)
 80140b2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80140b4:	4b09      	ldr	r3, [pc, #36]	@ (80140dc <prvHeapInit+0xc0>)
 80140b6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80140ba:	601a      	str	r2, [r3, #0]
}
 80140bc:	bf00      	nop
 80140be:	3714      	adds	r7, #20
 80140c0:	46bd      	mov	sp, r7
 80140c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140c6:	4770      	bx	lr
 80140c8:	200011f8 	.word	0x200011f8
 80140cc:	200091f8 	.word	0x200091f8
 80140d0:	20009200 	.word	0x20009200
 80140d4:	20009208 	.word	0x20009208
 80140d8:	20009204 	.word	0x20009204
 80140dc:	2000920c 	.word	0x2000920c

080140e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80140e0:	b480      	push	{r7}
 80140e2:	b085      	sub	sp, #20
 80140e4:	af00      	add	r7, sp, #0
 80140e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80140e8:	4b28      	ldr	r3, [pc, #160]	@ (801418c <prvInsertBlockIntoFreeList+0xac>)
 80140ea:	60fb      	str	r3, [r7, #12]
 80140ec:	e002      	b.n	80140f4 <prvInsertBlockIntoFreeList+0x14>
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	60fb      	str	r3, [r7, #12]
 80140f4:	68fb      	ldr	r3, [r7, #12]
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	687a      	ldr	r2, [r7, #4]
 80140fa:	429a      	cmp	r2, r3
 80140fc:	d8f7      	bhi.n	80140ee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8014102:	68fb      	ldr	r3, [r7, #12]
 8014104:	685b      	ldr	r3, [r3, #4]
 8014106:	68ba      	ldr	r2, [r7, #8]
 8014108:	4413      	add	r3, r2
 801410a:	687a      	ldr	r2, [r7, #4]
 801410c:	429a      	cmp	r2, r3
 801410e:	d108      	bne.n	8014122 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	685a      	ldr	r2, [r3, #4]
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	685b      	ldr	r3, [r3, #4]
 8014118:	441a      	add	r2, r3
 801411a:	68fb      	ldr	r3, [r7, #12]
 801411c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	685b      	ldr	r3, [r3, #4]
 801412a:	68ba      	ldr	r2, [r7, #8]
 801412c:	441a      	add	r2, r3
 801412e:	68fb      	ldr	r3, [r7, #12]
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	429a      	cmp	r2, r3
 8014134:	d118      	bne.n	8014168 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8014136:	68fb      	ldr	r3, [r7, #12]
 8014138:	681a      	ldr	r2, [r3, #0]
 801413a:	4b15      	ldr	r3, [pc, #84]	@ (8014190 <prvInsertBlockIntoFreeList+0xb0>)
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	429a      	cmp	r2, r3
 8014140:	d00d      	beq.n	801415e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	685a      	ldr	r2, [r3, #4]
 8014146:	68fb      	ldr	r3, [r7, #12]
 8014148:	681b      	ldr	r3, [r3, #0]
 801414a:	685b      	ldr	r3, [r3, #4]
 801414c:	441a      	add	r2, r3
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8014152:	68fb      	ldr	r3, [r7, #12]
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	681a      	ldr	r2, [r3, #0]
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	601a      	str	r2, [r3, #0]
 801415c:	e008      	b.n	8014170 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801415e:	4b0c      	ldr	r3, [pc, #48]	@ (8014190 <prvInsertBlockIntoFreeList+0xb0>)
 8014160:	681a      	ldr	r2, [r3, #0]
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	601a      	str	r2, [r3, #0]
 8014166:	e003      	b.n	8014170 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	681a      	ldr	r2, [r3, #0]
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014170:	68fa      	ldr	r2, [r7, #12]
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	429a      	cmp	r2, r3
 8014176:	d002      	beq.n	801417e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014178:	68fb      	ldr	r3, [r7, #12]
 801417a:	687a      	ldr	r2, [r7, #4]
 801417c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801417e:	bf00      	nop
 8014180:	3714      	adds	r7, #20
 8014182:	46bd      	mov	sp, r7
 8014184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014188:	4770      	bx	lr
 801418a:	bf00      	nop
 801418c:	200091f8 	.word	0x200091f8
 8014190:	20009200 	.word	0x20009200

08014194 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8014194:	b580      	push	{r7, lr}
 8014196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8014198:	2201      	movs	r2, #1
 801419a:	490e      	ldr	r1, [pc, #56]	@ (80141d4 <MX_USB_HOST_Init+0x40>)
 801419c:	480e      	ldr	r0, [pc, #56]	@ (80141d8 <MX_USB_HOST_Init+0x44>)
 801419e:	f7fb fd15 	bl	800fbcc <USBH_Init>
 80141a2:	4603      	mov	r3, r0
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d001      	beq.n	80141ac <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80141a8:	f7ed fd5e 	bl	8001c68 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80141ac:	490b      	ldr	r1, [pc, #44]	@ (80141dc <MX_USB_HOST_Init+0x48>)
 80141ae:	480a      	ldr	r0, [pc, #40]	@ (80141d8 <MX_USB_HOST_Init+0x44>)
 80141b0:	f7fb fde1 	bl	800fd76 <USBH_RegisterClass>
 80141b4:	4603      	mov	r3, r0
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d001      	beq.n	80141be <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80141ba:	f7ed fd55 	bl	8001c68 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80141be:	4806      	ldr	r0, [pc, #24]	@ (80141d8 <MX_USB_HOST_Init+0x44>)
 80141c0:	f7fb fe65 	bl	800fe8e <USBH_Start>
 80141c4:	4603      	mov	r3, r0
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d001      	beq.n	80141ce <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80141ca:	f7ed fd4d 	bl	8001c68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80141ce:	bf00      	nop
 80141d0:	bd80      	pop	{r7, pc}
 80141d2:	bf00      	nop
 80141d4:	080141e1 	.word	0x080141e1
 80141d8:	20009210 	.word	0x20009210
 80141dc:	20000010 	.word	0x20000010

080141e0 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80141e0:	b480      	push	{r7}
 80141e2:	b083      	sub	sp, #12
 80141e4:	af00      	add	r7, sp, #0
 80141e6:	6078      	str	r0, [r7, #4]
 80141e8:	460b      	mov	r3, r1
 80141ea:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80141ec:	78fb      	ldrb	r3, [r7, #3]
 80141ee:	3b01      	subs	r3, #1
 80141f0:	2b04      	cmp	r3, #4
 80141f2:	d819      	bhi.n	8014228 <USBH_UserProcess+0x48>
 80141f4:	a201      	add	r2, pc, #4	@ (adr r2, 80141fc <USBH_UserProcess+0x1c>)
 80141f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141fa:	bf00      	nop
 80141fc:	08014229 	.word	0x08014229
 8014200:	08014219 	.word	0x08014219
 8014204:	08014229 	.word	0x08014229
 8014208:	08014221 	.word	0x08014221
 801420c:	08014211 	.word	0x08014211
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8014210:	4b09      	ldr	r3, [pc, #36]	@ (8014238 <USBH_UserProcess+0x58>)
 8014212:	2203      	movs	r2, #3
 8014214:	701a      	strb	r2, [r3, #0]
  break;
 8014216:	e008      	b.n	801422a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8014218:	4b07      	ldr	r3, [pc, #28]	@ (8014238 <USBH_UserProcess+0x58>)
 801421a:	2202      	movs	r2, #2
 801421c:	701a      	strb	r2, [r3, #0]
  break;
 801421e:	e004      	b.n	801422a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8014220:	4b05      	ldr	r3, [pc, #20]	@ (8014238 <USBH_UserProcess+0x58>)
 8014222:	2201      	movs	r2, #1
 8014224:	701a      	strb	r2, [r3, #0]
  break;
 8014226:	e000      	b.n	801422a <USBH_UserProcess+0x4a>

  default:
  break;
 8014228:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801422a:	bf00      	nop
 801422c:	370c      	adds	r7, #12
 801422e:	46bd      	mov	sp, r7
 8014230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014234:	4770      	bx	lr
 8014236:	bf00      	nop
 8014238:	200095f4 	.word	0x200095f4

0801423c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801423c:	b580      	push	{r7, lr}
 801423e:	b08a      	sub	sp, #40	@ 0x28
 8014240:	af00      	add	r7, sp, #0
 8014242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014244:	f107 0314 	add.w	r3, r7, #20
 8014248:	2200      	movs	r2, #0
 801424a:	601a      	str	r2, [r3, #0]
 801424c:	605a      	str	r2, [r3, #4]
 801424e:	609a      	str	r2, [r3, #8]
 8014250:	60da      	str	r2, [r3, #12]
 8014252:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	681b      	ldr	r3, [r3, #0]
 8014258:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801425c:	d13c      	bne.n	80142d8 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801425e:	4b20      	ldr	r3, [pc, #128]	@ (80142e0 <HAL_HCD_MspInit+0xa4>)
 8014260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014262:	4a1f      	ldr	r2, [pc, #124]	@ (80142e0 <HAL_HCD_MspInit+0xa4>)
 8014264:	f043 0301 	orr.w	r3, r3, #1
 8014268:	6313      	str	r3, [r2, #48]	@ 0x30
 801426a:	4b1d      	ldr	r3, [pc, #116]	@ (80142e0 <HAL_HCD_MspInit+0xa4>)
 801426c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801426e:	f003 0301 	and.w	r3, r3, #1
 8014272:	613b      	str	r3, [r7, #16]
 8014274:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8014276:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 801427a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801427c:	2302      	movs	r3, #2
 801427e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014280:	2300      	movs	r3, #0
 8014282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014284:	2303      	movs	r3, #3
 8014286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8014288:	230a      	movs	r3, #10
 801428a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801428c:	f107 0314 	add.w	r3, r7, #20
 8014290:	4619      	mov	r1, r3
 8014292:	4814      	ldr	r0, [pc, #80]	@ (80142e4 <HAL_HCD_MspInit+0xa8>)
 8014294:	f7f0 fd36 	bl	8004d04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8014298:	4b11      	ldr	r3, [pc, #68]	@ (80142e0 <HAL_HCD_MspInit+0xa4>)
 801429a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801429c:	4a10      	ldr	r2, [pc, #64]	@ (80142e0 <HAL_HCD_MspInit+0xa4>)
 801429e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80142a2:	6353      	str	r3, [r2, #52]	@ 0x34
 80142a4:	4b0e      	ldr	r3, [pc, #56]	@ (80142e0 <HAL_HCD_MspInit+0xa4>)
 80142a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80142a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80142ac:	60fb      	str	r3, [r7, #12]
 80142ae:	68fb      	ldr	r3, [r7, #12]
 80142b0:	4b0b      	ldr	r3, [pc, #44]	@ (80142e0 <HAL_HCD_MspInit+0xa4>)
 80142b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80142b4:	4a0a      	ldr	r2, [pc, #40]	@ (80142e0 <HAL_HCD_MspInit+0xa4>)
 80142b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80142ba:	6453      	str	r3, [r2, #68]	@ 0x44
 80142bc:	4b08      	ldr	r3, [pc, #32]	@ (80142e0 <HAL_HCD_MspInit+0xa4>)
 80142be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80142c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80142c4:	60bb      	str	r3, [r7, #8]
 80142c6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80142c8:	2200      	movs	r2, #0
 80142ca:	2105      	movs	r1, #5
 80142cc:	2043      	movs	r0, #67	@ 0x43
 80142ce:	f7ef fac5 	bl	800385c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80142d2:	2043      	movs	r0, #67	@ 0x43
 80142d4:	f7ef fade 	bl	8003894 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80142d8:	bf00      	nop
 80142da:	3728      	adds	r7, #40	@ 0x28
 80142dc:	46bd      	mov	sp, r7
 80142de:	bd80      	pop	{r7, pc}
 80142e0:	40023800 	.word	0x40023800
 80142e4:	40020000 	.word	0x40020000

080142e8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80142e8:	b580      	push	{r7, lr}
 80142ea:	b082      	sub	sp, #8
 80142ec:	af00      	add	r7, sp, #0
 80142ee:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80142f6:	4618      	mov	r0, r3
 80142f8:	f7fc fa7b 	bl	80107f2 <USBH_LL_IncTimer>
}
 80142fc:	bf00      	nop
 80142fe:	3708      	adds	r7, #8
 8014300:	46bd      	mov	sp, r7
 8014302:	bd80      	pop	{r7, pc}

08014304 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8014304:	b580      	push	{r7, lr}
 8014306:	b082      	sub	sp, #8
 8014308:	af00      	add	r7, sp, #0
 801430a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8014312:	4618      	mov	r0, r3
 8014314:	f7fc fabf 	bl	8010896 <USBH_LL_Connect>
}
 8014318:	bf00      	nop
 801431a:	3708      	adds	r7, #8
 801431c:	46bd      	mov	sp, r7
 801431e:	bd80      	pop	{r7, pc}

08014320 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8014320:	b580      	push	{r7, lr}
 8014322:	b082      	sub	sp, #8
 8014324:	af00      	add	r7, sp, #0
 8014326:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801432e:	4618      	mov	r0, r3
 8014330:	f7fc fad4 	bl	80108dc <USBH_LL_Disconnect>
}
 8014334:	bf00      	nop
 8014336:	3708      	adds	r7, #8
 8014338:	46bd      	mov	sp, r7
 801433a:	bd80      	pop	{r7, pc}

0801433c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801433c:	b580      	push	{r7, lr}
 801433e:	b082      	sub	sp, #8
 8014340:	af00      	add	r7, sp, #0
 8014342:	6078      	str	r0, [r7, #4]
 8014344:	460b      	mov	r3, r1
 8014346:	70fb      	strb	r3, [r7, #3]
 8014348:	4613      	mov	r3, r2
 801434a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8014352:	4618      	mov	r0, r3
 8014354:	f7fc fb09 	bl	801096a <USBH_LL_NotifyURBChange>
#endif
}
 8014358:	bf00      	nop
 801435a:	3708      	adds	r7, #8
 801435c:	46bd      	mov	sp, r7
 801435e:	bd80      	pop	{r7, pc}

08014360 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8014360:	b580      	push	{r7, lr}
 8014362:	b082      	sub	sp, #8
 8014364:	af00      	add	r7, sp, #0
 8014366:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801436e:	4618      	mov	r0, r3
 8014370:	f7fc fa69 	bl	8010846 <USBH_LL_PortEnabled>
}
 8014374:	bf00      	nop
 8014376:	3708      	adds	r7, #8
 8014378:	46bd      	mov	sp, r7
 801437a:	bd80      	pop	{r7, pc}

0801437c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801437c:	b580      	push	{r7, lr}
 801437e:	b082      	sub	sp, #8
 8014380:	af00      	add	r7, sp, #0
 8014382:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801438a:	4618      	mov	r0, r3
 801438c:	f7fc fa75 	bl	801087a <USBH_LL_PortDisabled>
}
 8014390:	bf00      	nop
 8014392:	3708      	adds	r7, #8
 8014394:	46bd      	mov	sp, r7
 8014396:	bd80      	pop	{r7, pc}

08014398 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8014398:	b580      	push	{r7, lr}
 801439a:	b082      	sub	sp, #8
 801439c:	af00      	add	r7, sp, #0
 801439e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80143a6:	2b01      	cmp	r3, #1
 80143a8:	d12a      	bne.n	8014400 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80143aa:	4a18      	ldr	r2, [pc, #96]	@ (801440c <USBH_LL_Init+0x74>)
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	4a15      	ldr	r2, [pc, #84]	@ (801440c <USBH_LL_Init+0x74>)
 80143b6:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80143ba:	4b14      	ldr	r3, [pc, #80]	@ (801440c <USBH_LL_Init+0x74>)
 80143bc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80143c0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80143c2:	4b12      	ldr	r3, [pc, #72]	@ (801440c <USBH_LL_Init+0x74>)
 80143c4:	2208      	movs	r2, #8
 80143c6:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80143c8:	4b10      	ldr	r3, [pc, #64]	@ (801440c <USBH_LL_Init+0x74>)
 80143ca:	2201      	movs	r2, #1
 80143cc:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80143ce:	4b0f      	ldr	r3, [pc, #60]	@ (801440c <USBH_LL_Init+0x74>)
 80143d0:	2200      	movs	r2, #0
 80143d2:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80143d4:	4b0d      	ldr	r3, [pc, #52]	@ (801440c <USBH_LL_Init+0x74>)
 80143d6:	2202      	movs	r2, #2
 80143d8:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80143da:	4b0c      	ldr	r3, [pc, #48]	@ (801440c <USBH_LL_Init+0x74>)
 80143dc:	2200      	movs	r2, #0
 80143de:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80143e0:	480a      	ldr	r0, [pc, #40]	@ (801440c <USBH_LL_Init+0x74>)
 80143e2:	f7f0 fe6c 	bl	80050be <HAL_HCD_Init>
 80143e6:	4603      	mov	r3, r0
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d001      	beq.n	80143f0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80143ec:	f7ed fc3c 	bl	8001c68 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80143f0:	4806      	ldr	r0, [pc, #24]	@ (801440c <USBH_LL_Init+0x74>)
 80143f2:	f7f1 facd 	bl	8005990 <HAL_HCD_GetCurrentFrame>
 80143f6:	4603      	mov	r3, r0
 80143f8:	4619      	mov	r1, r3
 80143fa:	6878      	ldr	r0, [r7, #4]
 80143fc:	f7fc f9ea 	bl	80107d4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8014400:	2300      	movs	r3, #0
}
 8014402:	4618      	mov	r0, r3
 8014404:	3708      	adds	r7, #8
 8014406:	46bd      	mov	sp, r7
 8014408:	bd80      	pop	{r7, pc}
 801440a:	bf00      	nop
 801440c:	200095f8 	.word	0x200095f8

08014410 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8014410:	b580      	push	{r7, lr}
 8014412:	b084      	sub	sp, #16
 8014414:	af00      	add	r7, sp, #0
 8014416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014418:	2300      	movs	r3, #0
 801441a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801441c:	2300      	movs	r3, #0
 801441e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8014426:	4618      	mov	r0, r3
 8014428:	f7f1 fa3a 	bl	80058a0 <HAL_HCD_Start>
 801442c:	4603      	mov	r3, r0
 801442e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8014430:	7bfb      	ldrb	r3, [r7, #15]
 8014432:	4618      	mov	r0, r3
 8014434:	f000 f95e 	bl	80146f4 <USBH_Get_USB_Status>
 8014438:	4603      	mov	r3, r0
 801443a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801443c:	7bbb      	ldrb	r3, [r7, #14]
}
 801443e:	4618      	mov	r0, r3
 8014440:	3710      	adds	r7, #16
 8014442:	46bd      	mov	sp, r7
 8014444:	bd80      	pop	{r7, pc}

08014446 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8014446:	b580      	push	{r7, lr}
 8014448:	b084      	sub	sp, #16
 801444a:	af00      	add	r7, sp, #0
 801444c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801444e:	2300      	movs	r3, #0
 8014450:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014452:	2300      	movs	r3, #0
 8014454:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801445c:	4618      	mov	r0, r3
 801445e:	f7f1 fa42 	bl	80058e6 <HAL_HCD_Stop>
 8014462:	4603      	mov	r3, r0
 8014464:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8014466:	7bfb      	ldrb	r3, [r7, #15]
 8014468:	4618      	mov	r0, r3
 801446a:	f000 f943 	bl	80146f4 <USBH_Get_USB_Status>
 801446e:	4603      	mov	r3, r0
 8014470:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014472:	7bbb      	ldrb	r3, [r7, #14]
}
 8014474:	4618      	mov	r0, r3
 8014476:	3710      	adds	r7, #16
 8014478:	46bd      	mov	sp, r7
 801447a:	bd80      	pop	{r7, pc}

0801447c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801447c:	b580      	push	{r7, lr}
 801447e:	b084      	sub	sp, #16
 8014480:	af00      	add	r7, sp, #0
 8014482:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8014484:	2301      	movs	r3, #1
 8014486:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801448e:	4618      	mov	r0, r3
 8014490:	f7f1 fa8c 	bl	80059ac <HAL_HCD_GetCurrentSpeed>
 8014494:	4603      	mov	r3, r0
 8014496:	2b02      	cmp	r3, #2
 8014498:	d00c      	beq.n	80144b4 <USBH_LL_GetSpeed+0x38>
 801449a:	2b02      	cmp	r3, #2
 801449c:	d80d      	bhi.n	80144ba <USBH_LL_GetSpeed+0x3e>
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d002      	beq.n	80144a8 <USBH_LL_GetSpeed+0x2c>
 80144a2:	2b01      	cmp	r3, #1
 80144a4:	d003      	beq.n	80144ae <USBH_LL_GetSpeed+0x32>
 80144a6:	e008      	b.n	80144ba <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80144a8:	2300      	movs	r3, #0
 80144aa:	73fb      	strb	r3, [r7, #15]
    break;
 80144ac:	e008      	b.n	80144c0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80144ae:	2301      	movs	r3, #1
 80144b0:	73fb      	strb	r3, [r7, #15]
    break;
 80144b2:	e005      	b.n	80144c0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80144b4:	2302      	movs	r3, #2
 80144b6:	73fb      	strb	r3, [r7, #15]
    break;
 80144b8:	e002      	b.n	80144c0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80144ba:	2301      	movs	r3, #1
 80144bc:	73fb      	strb	r3, [r7, #15]
    break;
 80144be:	bf00      	nop
  }
  return  speed;
 80144c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80144c2:	4618      	mov	r0, r3
 80144c4:	3710      	adds	r7, #16
 80144c6:	46bd      	mov	sp, r7
 80144c8:	bd80      	pop	{r7, pc}

080144ca <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80144ca:	b580      	push	{r7, lr}
 80144cc:	b084      	sub	sp, #16
 80144ce:	af00      	add	r7, sp, #0
 80144d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80144d2:	2300      	movs	r3, #0
 80144d4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80144d6:	2300      	movs	r3, #0
 80144d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80144e0:	4618      	mov	r0, r3
 80144e2:	f7f1 fa1d 	bl	8005920 <HAL_HCD_ResetPort>
 80144e6:	4603      	mov	r3, r0
 80144e8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80144ea:	7bfb      	ldrb	r3, [r7, #15]
 80144ec:	4618      	mov	r0, r3
 80144ee:	f000 f901 	bl	80146f4 <USBH_Get_USB_Status>
 80144f2:	4603      	mov	r3, r0
 80144f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80144f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80144f8:	4618      	mov	r0, r3
 80144fa:	3710      	adds	r7, #16
 80144fc:	46bd      	mov	sp, r7
 80144fe:	bd80      	pop	{r7, pc}

08014500 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8014500:	b580      	push	{r7, lr}
 8014502:	b082      	sub	sp, #8
 8014504:	af00      	add	r7, sp, #0
 8014506:	6078      	str	r0, [r7, #4]
 8014508:	460b      	mov	r3, r1
 801450a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8014512:	78fa      	ldrb	r2, [r7, #3]
 8014514:	4611      	mov	r1, r2
 8014516:	4618      	mov	r0, r3
 8014518:	f7f1 fa25 	bl	8005966 <HAL_HCD_HC_GetXferCount>
 801451c:	4603      	mov	r3, r0
}
 801451e:	4618      	mov	r0, r3
 8014520:	3708      	adds	r7, #8
 8014522:	46bd      	mov	sp, r7
 8014524:	bd80      	pop	{r7, pc}

08014526 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8014526:	b590      	push	{r4, r7, lr}
 8014528:	b089      	sub	sp, #36	@ 0x24
 801452a:	af04      	add	r7, sp, #16
 801452c:	6078      	str	r0, [r7, #4]
 801452e:	4608      	mov	r0, r1
 8014530:	4611      	mov	r1, r2
 8014532:	461a      	mov	r2, r3
 8014534:	4603      	mov	r3, r0
 8014536:	70fb      	strb	r3, [r7, #3]
 8014538:	460b      	mov	r3, r1
 801453a:	70bb      	strb	r3, [r7, #2]
 801453c:	4613      	mov	r3, r2
 801453e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014540:	2300      	movs	r3, #0
 8014542:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014544:	2300      	movs	r3, #0
 8014546:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 801454e:	787c      	ldrb	r4, [r7, #1]
 8014550:	78ba      	ldrb	r2, [r7, #2]
 8014552:	78f9      	ldrb	r1, [r7, #3]
 8014554:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8014556:	9302      	str	r3, [sp, #8]
 8014558:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801455c:	9301      	str	r3, [sp, #4]
 801455e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014562:	9300      	str	r3, [sp, #0]
 8014564:	4623      	mov	r3, r4
 8014566:	f7f0 fe11 	bl	800518c <HAL_HCD_HC_Init>
 801456a:	4603      	mov	r3, r0
 801456c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801456e:	7bfb      	ldrb	r3, [r7, #15]
 8014570:	4618      	mov	r0, r3
 8014572:	f000 f8bf 	bl	80146f4 <USBH_Get_USB_Status>
 8014576:	4603      	mov	r3, r0
 8014578:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801457a:	7bbb      	ldrb	r3, [r7, #14]
}
 801457c:	4618      	mov	r0, r3
 801457e:	3714      	adds	r7, #20
 8014580:	46bd      	mov	sp, r7
 8014582:	bd90      	pop	{r4, r7, pc}

08014584 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8014584:	b580      	push	{r7, lr}
 8014586:	b084      	sub	sp, #16
 8014588:	af00      	add	r7, sp, #0
 801458a:	6078      	str	r0, [r7, #4]
 801458c:	460b      	mov	r3, r1
 801458e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014590:	2300      	movs	r3, #0
 8014592:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014594:	2300      	movs	r3, #0
 8014596:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801459e:	78fa      	ldrb	r2, [r7, #3]
 80145a0:	4611      	mov	r1, r2
 80145a2:	4618      	mov	r0, r3
 80145a4:	f7f0 feaa 	bl	80052fc <HAL_HCD_HC_Halt>
 80145a8:	4603      	mov	r3, r0
 80145aa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80145ac:	7bfb      	ldrb	r3, [r7, #15]
 80145ae:	4618      	mov	r0, r3
 80145b0:	f000 f8a0 	bl	80146f4 <USBH_Get_USB_Status>
 80145b4:	4603      	mov	r3, r0
 80145b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80145b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80145ba:	4618      	mov	r0, r3
 80145bc:	3710      	adds	r7, #16
 80145be:	46bd      	mov	sp, r7
 80145c0:	bd80      	pop	{r7, pc}

080145c2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80145c2:	b590      	push	{r4, r7, lr}
 80145c4:	b089      	sub	sp, #36	@ 0x24
 80145c6:	af04      	add	r7, sp, #16
 80145c8:	6078      	str	r0, [r7, #4]
 80145ca:	4608      	mov	r0, r1
 80145cc:	4611      	mov	r1, r2
 80145ce:	461a      	mov	r2, r3
 80145d0:	4603      	mov	r3, r0
 80145d2:	70fb      	strb	r3, [r7, #3]
 80145d4:	460b      	mov	r3, r1
 80145d6:	70bb      	strb	r3, [r7, #2]
 80145d8:	4613      	mov	r3, r2
 80145da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80145dc:	2300      	movs	r3, #0
 80145de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80145e0:	2300      	movs	r3, #0
 80145e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80145ea:	787c      	ldrb	r4, [r7, #1]
 80145ec:	78ba      	ldrb	r2, [r7, #2]
 80145ee:	78f9      	ldrb	r1, [r7, #3]
 80145f0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80145f4:	9303      	str	r3, [sp, #12]
 80145f6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80145f8:	9302      	str	r3, [sp, #8]
 80145fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145fc:	9301      	str	r3, [sp, #4]
 80145fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014602:	9300      	str	r3, [sp, #0]
 8014604:	4623      	mov	r3, r4
 8014606:	f7f0 fe9d 	bl	8005344 <HAL_HCD_HC_SubmitRequest>
 801460a:	4603      	mov	r3, r0
 801460c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801460e:	7bfb      	ldrb	r3, [r7, #15]
 8014610:	4618      	mov	r0, r3
 8014612:	f000 f86f 	bl	80146f4 <USBH_Get_USB_Status>
 8014616:	4603      	mov	r3, r0
 8014618:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801461a:	7bbb      	ldrb	r3, [r7, #14]
}
 801461c:	4618      	mov	r0, r3
 801461e:	3714      	adds	r7, #20
 8014620:	46bd      	mov	sp, r7
 8014622:	bd90      	pop	{r4, r7, pc}

08014624 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8014624:	b580      	push	{r7, lr}
 8014626:	b082      	sub	sp, #8
 8014628:	af00      	add	r7, sp, #0
 801462a:	6078      	str	r0, [r7, #4]
 801462c:	460b      	mov	r3, r1
 801462e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8014636:	78fa      	ldrb	r2, [r7, #3]
 8014638:	4611      	mov	r1, r2
 801463a:	4618      	mov	r0, r3
 801463c:	f7f1 f97e 	bl	800593c <HAL_HCD_HC_GetURBState>
 8014640:	4603      	mov	r3, r0
}
 8014642:	4618      	mov	r0, r3
 8014644:	3708      	adds	r7, #8
 8014646:	46bd      	mov	sp, r7
 8014648:	bd80      	pop	{r7, pc}

0801464a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801464a:	b580      	push	{r7, lr}
 801464c:	b082      	sub	sp, #8
 801464e:	af00      	add	r7, sp, #0
 8014650:	6078      	str	r0, [r7, #4]
 8014652:	460b      	mov	r3, r1
 8014654:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 801465c:	2b01      	cmp	r3, #1
 801465e:	d103      	bne.n	8014668 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8014660:	78fb      	ldrb	r3, [r7, #3]
 8014662:	4618      	mov	r0, r3
 8014664:	f000 f872 	bl	801474c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8014668:	20c8      	movs	r0, #200	@ 0xc8
 801466a:	f7ee fd87 	bl	800317c <HAL_Delay>
  return USBH_OK;
 801466e:	2300      	movs	r3, #0
}
 8014670:	4618      	mov	r0, r3
 8014672:	3708      	adds	r7, #8
 8014674:	46bd      	mov	sp, r7
 8014676:	bd80      	pop	{r7, pc}

08014678 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8014678:	b480      	push	{r7}
 801467a:	b085      	sub	sp, #20
 801467c:	af00      	add	r7, sp, #0
 801467e:	6078      	str	r0, [r7, #4]
 8014680:	460b      	mov	r3, r1
 8014682:	70fb      	strb	r3, [r7, #3]
 8014684:	4613      	mov	r3, r2
 8014686:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801468e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8014690:	78fa      	ldrb	r2, [r7, #3]
 8014692:	68f9      	ldr	r1, [r7, #12]
 8014694:	4613      	mov	r3, r2
 8014696:	011b      	lsls	r3, r3, #4
 8014698:	1a9b      	subs	r3, r3, r2
 801469a:	009b      	lsls	r3, r3, #2
 801469c:	440b      	add	r3, r1
 801469e:	3317      	adds	r3, #23
 80146a0:	781b      	ldrb	r3, [r3, #0]
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d00a      	beq.n	80146bc <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80146a6:	78fa      	ldrb	r2, [r7, #3]
 80146a8:	68f9      	ldr	r1, [r7, #12]
 80146aa:	4613      	mov	r3, r2
 80146ac:	011b      	lsls	r3, r3, #4
 80146ae:	1a9b      	subs	r3, r3, r2
 80146b0:	009b      	lsls	r3, r3, #2
 80146b2:	440b      	add	r3, r1
 80146b4:	333c      	adds	r3, #60	@ 0x3c
 80146b6:	78ba      	ldrb	r2, [r7, #2]
 80146b8:	701a      	strb	r2, [r3, #0]
 80146ba:	e009      	b.n	80146d0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80146bc:	78fa      	ldrb	r2, [r7, #3]
 80146be:	68f9      	ldr	r1, [r7, #12]
 80146c0:	4613      	mov	r3, r2
 80146c2:	011b      	lsls	r3, r3, #4
 80146c4:	1a9b      	subs	r3, r3, r2
 80146c6:	009b      	lsls	r3, r3, #2
 80146c8:	440b      	add	r3, r1
 80146ca:	333d      	adds	r3, #61	@ 0x3d
 80146cc:	78ba      	ldrb	r2, [r7, #2]
 80146ce:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80146d0:	2300      	movs	r3, #0
}
 80146d2:	4618      	mov	r0, r3
 80146d4:	3714      	adds	r7, #20
 80146d6:	46bd      	mov	sp, r7
 80146d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146dc:	4770      	bx	lr

080146de <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80146de:	b580      	push	{r7, lr}
 80146e0:	b082      	sub	sp, #8
 80146e2:	af00      	add	r7, sp, #0
 80146e4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80146e6:	6878      	ldr	r0, [r7, #4]
 80146e8:	f7ee fd48 	bl	800317c <HAL_Delay>
}
 80146ec:	bf00      	nop
 80146ee:	3708      	adds	r7, #8
 80146f0:	46bd      	mov	sp, r7
 80146f2:	bd80      	pop	{r7, pc}

080146f4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80146f4:	b480      	push	{r7}
 80146f6:	b085      	sub	sp, #20
 80146f8:	af00      	add	r7, sp, #0
 80146fa:	4603      	mov	r3, r0
 80146fc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80146fe:	2300      	movs	r3, #0
 8014700:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8014702:	79fb      	ldrb	r3, [r7, #7]
 8014704:	2b03      	cmp	r3, #3
 8014706:	d817      	bhi.n	8014738 <USBH_Get_USB_Status+0x44>
 8014708:	a201      	add	r2, pc, #4	@ (adr r2, 8014710 <USBH_Get_USB_Status+0x1c>)
 801470a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801470e:	bf00      	nop
 8014710:	08014721 	.word	0x08014721
 8014714:	08014727 	.word	0x08014727
 8014718:	0801472d 	.word	0x0801472d
 801471c:	08014733 	.word	0x08014733
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8014720:	2300      	movs	r3, #0
 8014722:	73fb      	strb	r3, [r7, #15]
    break;
 8014724:	e00b      	b.n	801473e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8014726:	2302      	movs	r3, #2
 8014728:	73fb      	strb	r3, [r7, #15]
    break;
 801472a:	e008      	b.n	801473e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801472c:	2301      	movs	r3, #1
 801472e:	73fb      	strb	r3, [r7, #15]
    break;
 8014730:	e005      	b.n	801473e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8014732:	2302      	movs	r3, #2
 8014734:	73fb      	strb	r3, [r7, #15]
    break;
 8014736:	e002      	b.n	801473e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8014738:	2302      	movs	r3, #2
 801473a:	73fb      	strb	r3, [r7, #15]
    break;
 801473c:	bf00      	nop
  }
  return usb_status;
 801473e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014740:	4618      	mov	r0, r3
 8014742:	3714      	adds	r7, #20
 8014744:	46bd      	mov	sp, r7
 8014746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801474a:	4770      	bx	lr

0801474c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 801474c:	b580      	push	{r7, lr}
 801474e:	b084      	sub	sp, #16
 8014750:	af00      	add	r7, sp, #0
 8014752:	4603      	mov	r3, r0
 8014754:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8014756:	79fb      	ldrb	r3, [r7, #7]
 8014758:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801475a:	79fb      	ldrb	r3, [r7, #7]
 801475c:	2b00      	cmp	r3, #0
 801475e:	d102      	bne.n	8014766 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8014760:	2300      	movs	r3, #0
 8014762:	73fb      	strb	r3, [r7, #15]
 8014764:	e001      	b.n	801476a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8014766:	2301      	movs	r3, #1
 8014768:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 801476a:	7bfb      	ldrb	r3, [r7, #15]
 801476c:	461a      	mov	r2, r3
 801476e:	2120      	movs	r1, #32
 8014770:	4803      	ldr	r0, [pc, #12]	@ (8014780 <MX_DriverVbusFS+0x34>)
 8014772:	f7f0 fc8b 	bl	800508c <HAL_GPIO_WritePin>
}
 8014776:	bf00      	nop
 8014778:	3710      	adds	r7, #16
 801477a:	46bd      	mov	sp, r7
 801477c:	bd80      	pop	{r7, pc}
 801477e:	bf00      	nop
 8014780:	40020c00 	.word	0x40020c00

08014784 <malloc>:
 8014784:	4b02      	ldr	r3, [pc, #8]	@ (8014790 <malloc+0xc>)
 8014786:	4601      	mov	r1, r0
 8014788:	6818      	ldr	r0, [r3, #0]
 801478a:	f000 b82d 	b.w	80147e8 <_malloc_r>
 801478e:	bf00      	nop
 8014790:	20000034 	.word	0x20000034

08014794 <free>:
 8014794:	4b02      	ldr	r3, [pc, #8]	@ (80147a0 <free+0xc>)
 8014796:	4601      	mov	r1, r0
 8014798:	6818      	ldr	r0, [r3, #0]
 801479a:	f000 b959 	b.w	8014a50 <_free_r>
 801479e:	bf00      	nop
 80147a0:	20000034 	.word	0x20000034

080147a4 <sbrk_aligned>:
 80147a4:	b570      	push	{r4, r5, r6, lr}
 80147a6:	4e0f      	ldr	r6, [pc, #60]	@ (80147e4 <sbrk_aligned+0x40>)
 80147a8:	460c      	mov	r4, r1
 80147aa:	6831      	ldr	r1, [r6, #0]
 80147ac:	4605      	mov	r5, r0
 80147ae:	b911      	cbnz	r1, 80147b6 <sbrk_aligned+0x12>
 80147b0:	f000 f904 	bl	80149bc <_sbrk_r>
 80147b4:	6030      	str	r0, [r6, #0]
 80147b6:	4621      	mov	r1, r4
 80147b8:	4628      	mov	r0, r5
 80147ba:	f000 f8ff 	bl	80149bc <_sbrk_r>
 80147be:	1c43      	adds	r3, r0, #1
 80147c0:	d103      	bne.n	80147ca <sbrk_aligned+0x26>
 80147c2:	f04f 34ff 	mov.w	r4, #4294967295
 80147c6:	4620      	mov	r0, r4
 80147c8:	bd70      	pop	{r4, r5, r6, pc}
 80147ca:	1cc4      	adds	r4, r0, #3
 80147cc:	f024 0403 	bic.w	r4, r4, #3
 80147d0:	42a0      	cmp	r0, r4
 80147d2:	d0f8      	beq.n	80147c6 <sbrk_aligned+0x22>
 80147d4:	1a21      	subs	r1, r4, r0
 80147d6:	4628      	mov	r0, r5
 80147d8:	f000 f8f0 	bl	80149bc <_sbrk_r>
 80147dc:	3001      	adds	r0, #1
 80147de:	d1f2      	bne.n	80147c6 <sbrk_aligned+0x22>
 80147e0:	e7ef      	b.n	80147c2 <sbrk_aligned+0x1e>
 80147e2:	bf00      	nop
 80147e4:	200099d8 	.word	0x200099d8

080147e8 <_malloc_r>:
 80147e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80147ec:	1ccd      	adds	r5, r1, #3
 80147ee:	f025 0503 	bic.w	r5, r5, #3
 80147f2:	3508      	adds	r5, #8
 80147f4:	2d0c      	cmp	r5, #12
 80147f6:	bf38      	it	cc
 80147f8:	250c      	movcc	r5, #12
 80147fa:	2d00      	cmp	r5, #0
 80147fc:	4606      	mov	r6, r0
 80147fe:	db01      	blt.n	8014804 <_malloc_r+0x1c>
 8014800:	42a9      	cmp	r1, r5
 8014802:	d904      	bls.n	801480e <_malloc_r+0x26>
 8014804:	230c      	movs	r3, #12
 8014806:	6033      	str	r3, [r6, #0]
 8014808:	2000      	movs	r0, #0
 801480a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801480e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80148e4 <_malloc_r+0xfc>
 8014812:	f000 f869 	bl	80148e8 <__malloc_lock>
 8014816:	f8d8 3000 	ldr.w	r3, [r8]
 801481a:	461c      	mov	r4, r3
 801481c:	bb44      	cbnz	r4, 8014870 <_malloc_r+0x88>
 801481e:	4629      	mov	r1, r5
 8014820:	4630      	mov	r0, r6
 8014822:	f7ff ffbf 	bl	80147a4 <sbrk_aligned>
 8014826:	1c43      	adds	r3, r0, #1
 8014828:	4604      	mov	r4, r0
 801482a:	d158      	bne.n	80148de <_malloc_r+0xf6>
 801482c:	f8d8 4000 	ldr.w	r4, [r8]
 8014830:	4627      	mov	r7, r4
 8014832:	2f00      	cmp	r7, #0
 8014834:	d143      	bne.n	80148be <_malloc_r+0xd6>
 8014836:	2c00      	cmp	r4, #0
 8014838:	d04b      	beq.n	80148d2 <_malloc_r+0xea>
 801483a:	6823      	ldr	r3, [r4, #0]
 801483c:	4639      	mov	r1, r7
 801483e:	4630      	mov	r0, r6
 8014840:	eb04 0903 	add.w	r9, r4, r3
 8014844:	f000 f8ba 	bl	80149bc <_sbrk_r>
 8014848:	4581      	cmp	r9, r0
 801484a:	d142      	bne.n	80148d2 <_malloc_r+0xea>
 801484c:	6821      	ldr	r1, [r4, #0]
 801484e:	1a6d      	subs	r5, r5, r1
 8014850:	4629      	mov	r1, r5
 8014852:	4630      	mov	r0, r6
 8014854:	f7ff ffa6 	bl	80147a4 <sbrk_aligned>
 8014858:	3001      	adds	r0, #1
 801485a:	d03a      	beq.n	80148d2 <_malloc_r+0xea>
 801485c:	6823      	ldr	r3, [r4, #0]
 801485e:	442b      	add	r3, r5
 8014860:	6023      	str	r3, [r4, #0]
 8014862:	f8d8 3000 	ldr.w	r3, [r8]
 8014866:	685a      	ldr	r2, [r3, #4]
 8014868:	bb62      	cbnz	r2, 80148c4 <_malloc_r+0xdc>
 801486a:	f8c8 7000 	str.w	r7, [r8]
 801486e:	e00f      	b.n	8014890 <_malloc_r+0xa8>
 8014870:	6822      	ldr	r2, [r4, #0]
 8014872:	1b52      	subs	r2, r2, r5
 8014874:	d420      	bmi.n	80148b8 <_malloc_r+0xd0>
 8014876:	2a0b      	cmp	r2, #11
 8014878:	d917      	bls.n	80148aa <_malloc_r+0xc2>
 801487a:	1961      	adds	r1, r4, r5
 801487c:	42a3      	cmp	r3, r4
 801487e:	6025      	str	r5, [r4, #0]
 8014880:	bf18      	it	ne
 8014882:	6059      	strne	r1, [r3, #4]
 8014884:	6863      	ldr	r3, [r4, #4]
 8014886:	bf08      	it	eq
 8014888:	f8c8 1000 	streq.w	r1, [r8]
 801488c:	5162      	str	r2, [r4, r5]
 801488e:	604b      	str	r3, [r1, #4]
 8014890:	4630      	mov	r0, r6
 8014892:	f000 f82f 	bl	80148f4 <__malloc_unlock>
 8014896:	f104 000b 	add.w	r0, r4, #11
 801489a:	1d23      	adds	r3, r4, #4
 801489c:	f020 0007 	bic.w	r0, r0, #7
 80148a0:	1ac2      	subs	r2, r0, r3
 80148a2:	bf1c      	itt	ne
 80148a4:	1a1b      	subne	r3, r3, r0
 80148a6:	50a3      	strne	r3, [r4, r2]
 80148a8:	e7af      	b.n	801480a <_malloc_r+0x22>
 80148aa:	6862      	ldr	r2, [r4, #4]
 80148ac:	42a3      	cmp	r3, r4
 80148ae:	bf0c      	ite	eq
 80148b0:	f8c8 2000 	streq.w	r2, [r8]
 80148b4:	605a      	strne	r2, [r3, #4]
 80148b6:	e7eb      	b.n	8014890 <_malloc_r+0xa8>
 80148b8:	4623      	mov	r3, r4
 80148ba:	6864      	ldr	r4, [r4, #4]
 80148bc:	e7ae      	b.n	801481c <_malloc_r+0x34>
 80148be:	463c      	mov	r4, r7
 80148c0:	687f      	ldr	r7, [r7, #4]
 80148c2:	e7b6      	b.n	8014832 <_malloc_r+0x4a>
 80148c4:	461a      	mov	r2, r3
 80148c6:	685b      	ldr	r3, [r3, #4]
 80148c8:	42a3      	cmp	r3, r4
 80148ca:	d1fb      	bne.n	80148c4 <_malloc_r+0xdc>
 80148cc:	2300      	movs	r3, #0
 80148ce:	6053      	str	r3, [r2, #4]
 80148d0:	e7de      	b.n	8014890 <_malloc_r+0xa8>
 80148d2:	230c      	movs	r3, #12
 80148d4:	6033      	str	r3, [r6, #0]
 80148d6:	4630      	mov	r0, r6
 80148d8:	f000 f80c 	bl	80148f4 <__malloc_unlock>
 80148dc:	e794      	b.n	8014808 <_malloc_r+0x20>
 80148de:	6005      	str	r5, [r0, #0]
 80148e0:	e7d6      	b.n	8014890 <_malloc_r+0xa8>
 80148e2:	bf00      	nop
 80148e4:	200099dc 	.word	0x200099dc

080148e8 <__malloc_lock>:
 80148e8:	4801      	ldr	r0, [pc, #4]	@ (80148f0 <__malloc_lock+0x8>)
 80148ea:	f000 b8a1 	b.w	8014a30 <__retarget_lock_acquire_recursive>
 80148ee:	bf00      	nop
 80148f0:	20009b1c 	.word	0x20009b1c

080148f4 <__malloc_unlock>:
 80148f4:	4801      	ldr	r0, [pc, #4]	@ (80148fc <__malloc_unlock+0x8>)
 80148f6:	f000 b89c 	b.w	8014a32 <__retarget_lock_release_recursive>
 80148fa:	bf00      	nop
 80148fc:	20009b1c 	.word	0x20009b1c

08014900 <memset>:
 8014900:	4402      	add	r2, r0
 8014902:	4603      	mov	r3, r0
 8014904:	4293      	cmp	r3, r2
 8014906:	d100      	bne.n	801490a <memset+0xa>
 8014908:	4770      	bx	lr
 801490a:	f803 1b01 	strb.w	r1, [r3], #1
 801490e:	e7f9      	b.n	8014904 <memset+0x4>

08014910 <_reclaim_reent>:
 8014910:	4b29      	ldr	r3, [pc, #164]	@ (80149b8 <_reclaim_reent+0xa8>)
 8014912:	681b      	ldr	r3, [r3, #0]
 8014914:	4283      	cmp	r3, r0
 8014916:	b570      	push	{r4, r5, r6, lr}
 8014918:	4604      	mov	r4, r0
 801491a:	d04b      	beq.n	80149b4 <_reclaim_reent+0xa4>
 801491c:	69c3      	ldr	r3, [r0, #28]
 801491e:	b1ab      	cbz	r3, 801494c <_reclaim_reent+0x3c>
 8014920:	68db      	ldr	r3, [r3, #12]
 8014922:	b16b      	cbz	r3, 8014940 <_reclaim_reent+0x30>
 8014924:	2500      	movs	r5, #0
 8014926:	69e3      	ldr	r3, [r4, #28]
 8014928:	68db      	ldr	r3, [r3, #12]
 801492a:	5959      	ldr	r1, [r3, r5]
 801492c:	2900      	cmp	r1, #0
 801492e:	d13b      	bne.n	80149a8 <_reclaim_reent+0x98>
 8014930:	3504      	adds	r5, #4
 8014932:	2d80      	cmp	r5, #128	@ 0x80
 8014934:	d1f7      	bne.n	8014926 <_reclaim_reent+0x16>
 8014936:	69e3      	ldr	r3, [r4, #28]
 8014938:	4620      	mov	r0, r4
 801493a:	68d9      	ldr	r1, [r3, #12]
 801493c:	f000 f888 	bl	8014a50 <_free_r>
 8014940:	69e3      	ldr	r3, [r4, #28]
 8014942:	6819      	ldr	r1, [r3, #0]
 8014944:	b111      	cbz	r1, 801494c <_reclaim_reent+0x3c>
 8014946:	4620      	mov	r0, r4
 8014948:	f000 f882 	bl	8014a50 <_free_r>
 801494c:	6961      	ldr	r1, [r4, #20]
 801494e:	b111      	cbz	r1, 8014956 <_reclaim_reent+0x46>
 8014950:	4620      	mov	r0, r4
 8014952:	f000 f87d 	bl	8014a50 <_free_r>
 8014956:	69e1      	ldr	r1, [r4, #28]
 8014958:	b111      	cbz	r1, 8014960 <_reclaim_reent+0x50>
 801495a:	4620      	mov	r0, r4
 801495c:	f000 f878 	bl	8014a50 <_free_r>
 8014960:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8014962:	b111      	cbz	r1, 801496a <_reclaim_reent+0x5a>
 8014964:	4620      	mov	r0, r4
 8014966:	f000 f873 	bl	8014a50 <_free_r>
 801496a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801496c:	b111      	cbz	r1, 8014974 <_reclaim_reent+0x64>
 801496e:	4620      	mov	r0, r4
 8014970:	f000 f86e 	bl	8014a50 <_free_r>
 8014974:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8014976:	b111      	cbz	r1, 801497e <_reclaim_reent+0x6e>
 8014978:	4620      	mov	r0, r4
 801497a:	f000 f869 	bl	8014a50 <_free_r>
 801497e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8014980:	b111      	cbz	r1, 8014988 <_reclaim_reent+0x78>
 8014982:	4620      	mov	r0, r4
 8014984:	f000 f864 	bl	8014a50 <_free_r>
 8014988:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801498a:	b111      	cbz	r1, 8014992 <_reclaim_reent+0x82>
 801498c:	4620      	mov	r0, r4
 801498e:	f000 f85f 	bl	8014a50 <_free_r>
 8014992:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8014994:	b111      	cbz	r1, 801499c <_reclaim_reent+0x8c>
 8014996:	4620      	mov	r0, r4
 8014998:	f000 f85a 	bl	8014a50 <_free_r>
 801499c:	6a23      	ldr	r3, [r4, #32]
 801499e:	b14b      	cbz	r3, 80149b4 <_reclaim_reent+0xa4>
 80149a0:	4620      	mov	r0, r4
 80149a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80149a6:	4718      	bx	r3
 80149a8:	680e      	ldr	r6, [r1, #0]
 80149aa:	4620      	mov	r0, r4
 80149ac:	f000 f850 	bl	8014a50 <_free_r>
 80149b0:	4631      	mov	r1, r6
 80149b2:	e7bb      	b.n	801492c <_reclaim_reent+0x1c>
 80149b4:	bd70      	pop	{r4, r5, r6, pc}
 80149b6:	bf00      	nop
 80149b8:	20000034 	.word	0x20000034

080149bc <_sbrk_r>:
 80149bc:	b538      	push	{r3, r4, r5, lr}
 80149be:	4d06      	ldr	r5, [pc, #24]	@ (80149d8 <_sbrk_r+0x1c>)
 80149c0:	2300      	movs	r3, #0
 80149c2:	4604      	mov	r4, r0
 80149c4:	4608      	mov	r0, r1
 80149c6:	602b      	str	r3, [r5, #0]
 80149c8:	f7ee fb3a 	bl	8003040 <_sbrk>
 80149cc:	1c43      	adds	r3, r0, #1
 80149ce:	d102      	bne.n	80149d6 <_sbrk_r+0x1a>
 80149d0:	682b      	ldr	r3, [r5, #0]
 80149d2:	b103      	cbz	r3, 80149d6 <_sbrk_r+0x1a>
 80149d4:	6023      	str	r3, [r4, #0]
 80149d6:	bd38      	pop	{r3, r4, r5, pc}
 80149d8:	20009b18 	.word	0x20009b18

080149dc <__errno>:
 80149dc:	4b01      	ldr	r3, [pc, #4]	@ (80149e4 <__errno+0x8>)
 80149de:	6818      	ldr	r0, [r3, #0]
 80149e0:	4770      	bx	lr
 80149e2:	bf00      	nop
 80149e4:	20000034 	.word	0x20000034

080149e8 <__libc_init_array>:
 80149e8:	b570      	push	{r4, r5, r6, lr}
 80149ea:	4d0d      	ldr	r5, [pc, #52]	@ (8014a20 <__libc_init_array+0x38>)
 80149ec:	4c0d      	ldr	r4, [pc, #52]	@ (8014a24 <__libc_init_array+0x3c>)
 80149ee:	1b64      	subs	r4, r4, r5
 80149f0:	10a4      	asrs	r4, r4, #2
 80149f2:	2600      	movs	r6, #0
 80149f4:	42a6      	cmp	r6, r4
 80149f6:	d109      	bne.n	8014a0c <__libc_init_array+0x24>
 80149f8:	4d0b      	ldr	r5, [pc, #44]	@ (8014a28 <__libc_init_array+0x40>)
 80149fa:	4c0c      	ldr	r4, [pc, #48]	@ (8014a2c <__libc_init_array+0x44>)
 80149fc:	f000 f872 	bl	8014ae4 <_init>
 8014a00:	1b64      	subs	r4, r4, r5
 8014a02:	10a4      	asrs	r4, r4, #2
 8014a04:	2600      	movs	r6, #0
 8014a06:	42a6      	cmp	r6, r4
 8014a08:	d105      	bne.n	8014a16 <__libc_init_array+0x2e>
 8014a0a:	bd70      	pop	{r4, r5, r6, pc}
 8014a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014a10:	4798      	blx	r3
 8014a12:	3601      	adds	r6, #1
 8014a14:	e7ee      	b.n	80149f4 <__libc_init_array+0xc>
 8014a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8014a1a:	4798      	blx	r3
 8014a1c:	3601      	adds	r6, #1
 8014a1e:	e7f2      	b.n	8014a06 <__libc_init_array+0x1e>
 8014a20:	08014bb4 	.word	0x08014bb4
 8014a24:	08014bb4 	.word	0x08014bb4
 8014a28:	08014bb4 	.word	0x08014bb4
 8014a2c:	08014bb8 	.word	0x08014bb8

08014a30 <__retarget_lock_acquire_recursive>:
 8014a30:	4770      	bx	lr

08014a32 <__retarget_lock_release_recursive>:
 8014a32:	4770      	bx	lr

08014a34 <memcpy>:
 8014a34:	440a      	add	r2, r1
 8014a36:	4291      	cmp	r1, r2
 8014a38:	f100 33ff 	add.w	r3, r0, #4294967295
 8014a3c:	d100      	bne.n	8014a40 <memcpy+0xc>
 8014a3e:	4770      	bx	lr
 8014a40:	b510      	push	{r4, lr}
 8014a42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014a46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014a4a:	4291      	cmp	r1, r2
 8014a4c:	d1f9      	bne.n	8014a42 <memcpy+0xe>
 8014a4e:	bd10      	pop	{r4, pc}

08014a50 <_free_r>:
 8014a50:	b538      	push	{r3, r4, r5, lr}
 8014a52:	4605      	mov	r5, r0
 8014a54:	2900      	cmp	r1, #0
 8014a56:	d041      	beq.n	8014adc <_free_r+0x8c>
 8014a58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014a5c:	1f0c      	subs	r4, r1, #4
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	bfb8      	it	lt
 8014a62:	18e4      	addlt	r4, r4, r3
 8014a64:	f7ff ff40 	bl	80148e8 <__malloc_lock>
 8014a68:	4a1d      	ldr	r2, [pc, #116]	@ (8014ae0 <_free_r+0x90>)
 8014a6a:	6813      	ldr	r3, [r2, #0]
 8014a6c:	b933      	cbnz	r3, 8014a7c <_free_r+0x2c>
 8014a6e:	6063      	str	r3, [r4, #4]
 8014a70:	6014      	str	r4, [r2, #0]
 8014a72:	4628      	mov	r0, r5
 8014a74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014a78:	f7ff bf3c 	b.w	80148f4 <__malloc_unlock>
 8014a7c:	42a3      	cmp	r3, r4
 8014a7e:	d908      	bls.n	8014a92 <_free_r+0x42>
 8014a80:	6820      	ldr	r0, [r4, #0]
 8014a82:	1821      	adds	r1, r4, r0
 8014a84:	428b      	cmp	r3, r1
 8014a86:	bf01      	itttt	eq
 8014a88:	6819      	ldreq	r1, [r3, #0]
 8014a8a:	685b      	ldreq	r3, [r3, #4]
 8014a8c:	1809      	addeq	r1, r1, r0
 8014a8e:	6021      	streq	r1, [r4, #0]
 8014a90:	e7ed      	b.n	8014a6e <_free_r+0x1e>
 8014a92:	461a      	mov	r2, r3
 8014a94:	685b      	ldr	r3, [r3, #4]
 8014a96:	b10b      	cbz	r3, 8014a9c <_free_r+0x4c>
 8014a98:	42a3      	cmp	r3, r4
 8014a9a:	d9fa      	bls.n	8014a92 <_free_r+0x42>
 8014a9c:	6811      	ldr	r1, [r2, #0]
 8014a9e:	1850      	adds	r0, r2, r1
 8014aa0:	42a0      	cmp	r0, r4
 8014aa2:	d10b      	bne.n	8014abc <_free_r+0x6c>
 8014aa4:	6820      	ldr	r0, [r4, #0]
 8014aa6:	4401      	add	r1, r0
 8014aa8:	1850      	adds	r0, r2, r1
 8014aaa:	4283      	cmp	r3, r0
 8014aac:	6011      	str	r1, [r2, #0]
 8014aae:	d1e0      	bne.n	8014a72 <_free_r+0x22>
 8014ab0:	6818      	ldr	r0, [r3, #0]
 8014ab2:	685b      	ldr	r3, [r3, #4]
 8014ab4:	6053      	str	r3, [r2, #4]
 8014ab6:	4408      	add	r0, r1
 8014ab8:	6010      	str	r0, [r2, #0]
 8014aba:	e7da      	b.n	8014a72 <_free_r+0x22>
 8014abc:	d902      	bls.n	8014ac4 <_free_r+0x74>
 8014abe:	230c      	movs	r3, #12
 8014ac0:	602b      	str	r3, [r5, #0]
 8014ac2:	e7d6      	b.n	8014a72 <_free_r+0x22>
 8014ac4:	6820      	ldr	r0, [r4, #0]
 8014ac6:	1821      	adds	r1, r4, r0
 8014ac8:	428b      	cmp	r3, r1
 8014aca:	bf04      	itt	eq
 8014acc:	6819      	ldreq	r1, [r3, #0]
 8014ace:	685b      	ldreq	r3, [r3, #4]
 8014ad0:	6063      	str	r3, [r4, #4]
 8014ad2:	bf04      	itt	eq
 8014ad4:	1809      	addeq	r1, r1, r0
 8014ad6:	6021      	streq	r1, [r4, #0]
 8014ad8:	6054      	str	r4, [r2, #4]
 8014ada:	e7ca      	b.n	8014a72 <_free_r+0x22>
 8014adc:	bd38      	pop	{r3, r4, r5, pc}
 8014ade:	bf00      	nop
 8014ae0:	200099dc 	.word	0x200099dc

08014ae4 <_init>:
 8014ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ae6:	bf00      	nop
 8014ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014aea:	bc08      	pop	{r3}
 8014aec:	469e      	mov	lr, r3
 8014aee:	4770      	bx	lr

08014af0 <_fini>:
 8014af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014af2:	bf00      	nop
 8014af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014af6:	bc08      	pop	{r3}
 8014af8:	469e      	mov	lr, r3
 8014afa:	4770      	bx	lr
